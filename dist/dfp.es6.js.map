{"version":3,"sources":["../jspm_packages/npm/systemjs-plugin-babel@0.0.17/babel-helpers/classCallCheck.js","../jspm_packages/npm/systemjs-plugin-babel@0.0.17/babel-helpers/createClass.js","../jspm_packages/npm/systemjs-plugin-babel@0.0.17/babel-helpers/toConsumableArray.js","../src/utils/cookieUtils.js","../src/globalConfig.js","../src/utils/time.js","../src/utils/breakpoints.js","../src/objects/impressionsManager.js","../src/objects/user.js","../src/objects/conflictResolver.js","../src/utils/arrays.js","../src/objects/adSlot.js","../src/objects/adManager.js","../src/dfp.js","../src/index.js"],"names":["instance","Constructor","TypeError","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","defineProperty","key","protoProps","staticProps","prototype","arr","Array","isArray","arr2","from","globalConfig","userTypes","ImpressionManager","ssoKey","arraysEqual","adSlot","AdSlot","DFP"],"mappings":"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","file":"dfp.es6.js","sourcesContent":["export default (function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n});","export default (function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n})();","export default (function (arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n});","/**\n * Htz-cookie-util\n * @module htzCookieUtil\n * @author Elia Grady elia.grady@haaretz.co.il\n * @license MIT\n */\n\n/**\n * Translates Key-Value string into a convenient map.\n * @param {String} string String in format of \"key<operator>value<separator>.....\"\n * @param {object} options object for overriding defaults:\n * options.separator is a String or regExp that separates between each key value pairs\n * (default is ';'). options.operator is a String or regExp that separates between each key\n * and value within a pair (default is '=').\n * @returns {object} a map object, with key-value mapping according to the passed configuration.\n */\nfunction stringToMap(string,\n  { separator = ';', operator = '=' } = {}) {\n  const map = {};\n  const itemsArr = string.split(separator);\n  itemsArr.forEach(element => {\n    if (typeof element === 'string') {\n      const keyValue = element.split(operator);\n      if (keyValue.length === 2) {\n        try {\n          map[keyValue[0]] = decodeURIComponent(keyValue[1]);\n        }\n        catch (e) {\n          // Do nothing, malformed URI\n        }\n      }\n    }\n  });\n  return map;\n}\nexport const ssoKey = window.location.hostname.indexOf('haaretz.com') > -1 ? 'engsso' : 'tmsso';\n\n// Translates Cookie string into a convenient map.\nexport default function getCookieAsMap() {\n  const map = stringToMap(document.cookie, { separator: /;\\s?/ });\n  if (typeof map.tmsso === 'string') {\n    map.tmsso = stringToMap(map.tmsso, { separator: ':' });\n  }\n  if (typeof map.engsso === 'string') {\n    map.engsso = stringToMap(map.engsso, { separator: ':' });\n  }\n  return map;\n}\n","/* global dfpConfig */\r\nimport getCookieAsMap, { ssoKey } from './utils/cookieUtils';\r\n// globalConfig for DFP\r\nlet dfpBaseConf;\r\ntry {\r\n  dfpBaseConf = window.JSON.parse(document.getElementById('dfpConfig').textContent);\r\n}\r\ncatch (err) {\r\n  dfpBaseConf = window.dfpConfig;\r\n}\r\nconst dfpConfig = Object.assign({\r\n  get referrer() {\r\n    return document.referrer ? document.referrer : '';\r\n  },\r\n  get isMobile() {\r\n    return (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i\r\n      .test(window.navigator.userAgent || ''));\r\n  },\r\n  /**\r\n   * Returns true iff the loaded page is the homepage (no inner path)\r\n   * @returns {boolean}\r\n   */\r\n  get isHomepage() {\r\n    return window.location.pathname === '/' || this.environment === 3; // 'prod'\r\n  },\r\n  get department() {\r\n    return this.isHomepage ? '_homepage' : '_section';\r\n  },\r\n  /**\r\n   * returns the domain the page was loaded to. i.e: 'haaretz.co.il', 'haaretz.com'\r\n   * @returns {string} the domain name from the windows's location hostname property\r\n   */\r\n  get domain() {\r\n    const regexMatch = /([\\d|\\w]+)(\\.co\\.il|\\.com)(.*)?/.exec(window.location.hostname);\r\n    const result = regexMatch ? regexMatch[0] : window.location.hostname;\r\n    return result;\r\n  },\r\n  /**\r\n   * Returns an array of concatenated paths, separated by a dot.\r\n   * For example, for the URL:\r\n   * http://www.haaretz.co.il/news/world/america/us-election-2016/LIVE-1.2869045\r\n   * the path is '/news/world/america/us-election-2016/LIVE-1.2869045'.\r\n   * This function takes the directories ['news', 'world', 'america', 'us-election-2016']\r\n   * and converts it to the following format:\r\n   * ['.news', '.news.world', '.news.world.america', '.news.world.america.us-election-2016']\r\n   * This denotes the path configuration for the given adSlot\r\n   * non articles (sections) will be given a '0' - no articleId value for targeting purposes)\r\n   * @returns {Array.<T>} an array of path names\r\n   */\r\n  get path() {\r\n    let sectionArray = this.articleId && this.articleId !== '0' ?\r\n      window.location.pathname.split('/').slice(1, -1) :\r\n      window.location.pathname.split('/').slice(1);\r\n    sectionArray = sectionArray.filter(path =>\r\n    path !== 'wwwMobileSite' && path !== 'whtzMobileSite');\r\n    return sectionArray\r\n      .map(section => `.${section}`)\r\n      .map((section, index, arr) => arr.slice(0, index + 1)\r\n        .reduce((last, current) => last.concat(current)));\r\n  },\r\n  /**\r\n   * Returns a string representation for the name of the site\r\n   * @return {*|string}\r\n   */\r\n  get site() {\r\n    let site;\r\n    if (window.location.hostname.indexOf('haaretz.co.il') > -1) {\r\n      site = 'haaretz';\r\n    }\r\n    else if (window.location.hostname.indexOf('themarker.com') > -1) {\r\n      site = 'themarker';\r\n    }\r\n    else if (window.location.hostname.indexOf('mouse.co.il') > -1) {\r\n      site = 'mouse';\r\n    }\r\n    return site || 'haaretz';\r\n  },\r\n  /**\r\n   * Returns the current environment targeting param, if such is defined.\r\n   * @returns {number} targeting param, 1 for local development, 2 for test servers and 3 for prod.\r\n   * May return undefined if no targeting is specified.\r\n   */\r\n  get environment() {\r\n    const env = {\r\n      dev: 1,\r\n      test: 2,\r\n      prod: 3,\r\n    };\r\n    return window.location.port === '8080' ? env.dev :\r\n      (window.location.hostname.indexOf('pre.haaretz.co.il') > -1\r\n      || window.location.hostname.indexOf('tmtest.themarker.com') > -1\r\n      || window.location.hostname.indexOf('pre.haaretz.com') > -1\r\n      || window.location.hostname.indexOf('prodmouse.mouse.co.il') > -1) ? env.test :\r\n        (window.location.pathname.indexOf('/cmlink/Haaretz.HomePage') > -1\r\n        || window.location.pathname.indexOf('/cmlink/TheMarker.HomePage') > -1\r\n        || window.location.pathname.indexOf('/cmlink/Mouse.HomePage') > -1)\r\n          ? env.prod : undefined;\r\n  },\r\n  /**\r\n   * Returns the articleIf if on an article page, or null otherwise\r\n   * @returns {string} an articleId string from the pathname, or 0 if not found\r\n   */\r\n  get articleId() {\r\n    const articleIdMatch = /\\d\\.\\d+/g.exec(window.location.pathname);\r\n    let articleId = '0';\r\n    if (articleIdMatch) {\r\n      articleId = articleIdMatch.pop(); // Converts [\"1.23145\"] to \"1.23145\"\r\n    }\r\n    return articleId;\r\n  },\r\n  utm_: {\r\n    get content() {\r\n      return this.getUrlParam('utm_content');\r\n    },\r\n    get source() {\r\n      return this.getUrlParam('utm_source');\r\n    },\r\n    get medium() {\r\n      return this.getUrlParam('utm_medium');\r\n    },\r\n    get campaign() {\r\n      return this.getUrlParam('utm_campaign');\r\n    },\r\n    getUrlParam(key) {\r\n      const results = RegExp(`(${key})(=)([^&\"]+)`).exec(window.location.search);\r\n      return results && results[3] ? results[3] : undefined;\r\n    },\r\n  },\r\n  get adBlockRemoved() {\r\n    let adBlockRemoved = false;\r\n    try {\r\n      if (localStorage.getItem('adblock_removed')) {\r\n        adBlockRemoved = true;\r\n      }\r\n    }\r\n    catch (err) {\r\n      // do nothing\r\n    }\r\n    return adBlockRemoved;\r\n  },\r\n  get ssoGroupKey() {\r\n    return window.localStorage.getItem('_SsoGroupKey');\r\n  },\r\n  get anonymousId() {\r\n    const cookieName = 'anonymousId';\r\n    const cookieMap = getCookieAsMap();\r\n    let anonymousId = '';\r\n    if (cookieMap && cookieMap[cookieName]) {\r\n      anonymousId = cookieMap[cookieName];\r\n    }\r\n    return anonymousId;\r\n  },\r\n  get isWriterAlerts() {\r\n    return (location.search.indexOf('writerAlerts=true') > -1);\r\n  },\r\n  get wifiLocation() {\r\n    let wifiLocation;\r\n    const cookieName = '_htzwif'; // eslint-disable-line no-underscore-dangle\r\n    const cookieMap = getCookieAsMap();\r\n    try {\r\n      if (cookieMap && cookieMap[cookieName]) {\r\n        if (cookieMap[cookieName].toLowerCase() === 'arcaffe') {\r\n          wifiLocation = 'ArCafe';\r\n        }\r\n        if (cookieMap[cookieName].toLowerCase() === 'university') {\r\n          wifiLocation = 'university';\r\n        }\r\n      }\r\n    }\r\n    catch (err) {\r\n      // do nothing\r\n    }\r\n    return wifiLocation;\r\n  },\r\n  get isValidForsmartPhone() {\r\n    let validForAds = true;\r\n    const PageUrl = window.location.href;\r\n    const isSmartphoneapp = PageUrl.match('haaretzsmartphoneapp');\r\n    const cookieMap = getCookieAsMap();\r\n    try {\r\n      if (isSmartphoneapp) {\r\n        // eslint-disable-line no-underscore-dangle\r\n        if (!cookieMap || !(cookieMap.NotPayer || cookieMap.HtzPusr)) {\r\n          validForAds = false;\r\n        }\r\n      }\r\n    }\r\n    catch (err) {\r\n      // do nothing\r\n    }\r\n    return validForAds;\r\n  },\r\n  get gStatCampaignNumber() {\r\n    let gstatCampaign;\r\n    try {\r\n      gstatCampaign = localStorage.getItem('GstatCampaign') ?\r\n        JSON.parse(localStorage.getItem('GstatCampaign')) : undefined;\r\n    }\r\n    catch (err) {\r\n      /* In case of thrown 'SecurityError' or 'QuotaExceededError',\r\n       the variable should be undefined */\r\n      gstatCampaign = undefined;\r\n    }\r\n    return gstatCampaign ? gstatCampaign.CampaignNumber : undefined;\r\n  },\r\n  get pageType() {\r\n    let type = '';\r\n    try {\r\n      const htmlclassList = document.querySelector('html').classList;\r\n      switch (true) {\r\n        case /mouse_location/.test(htmlclassList):\r\n          type = 'mouse_location';\r\n          break;\r\n        case /mouse_event/.test(htmlclassList):\r\n          type = 'mouse_event';\r\n          break;\r\n        case /contentType-story/.test(htmlclassList):\r\n          type = 'mouse_article';\r\n          break;\r\n        default:\r\n          type = '';\r\n      }\r\n    }\r\n    catch (err) {\r\n      /* In case of thrown 'SecurityError' or 'QuotaExceededError',\r\n       the variable should be undefined */\r\n      type = '';\r\n    }\r\n    return type;\r\n  },\r\n  get proposalNumber() {\r\n    let proposal;\r\n    try {\r\n      proposal = localStorage.getItem('proposaltype') ?\r\n        localStorage.getItem('proposaltype') : undefined;\r\n    }\r\n    catch (err) {\r\n      /* In case of thrown 'SecurityError' or 'QuotaExceededError',\r\n       the variable should be undefined */\r\n      proposal = undefined;\r\n    }\r\n    return proposal;\r\n  },\r\n  adSlotConfig: {\r\n    'haaretz.co.il.example.slot': {\r\n      id: 'slotId',\r\n      // path : \"/network/base/slotId/slotId_subsection\", Will be calculated from AdManager\r\n      responsive: true,\r\n      adSizeMapping: [['width1', 'height1'], ...['widthN', 'heightN']],\r\n      priority: 'normal',\r\n      fluid: false,\r\n      responsiveAdSizeMapping: {\r\n        xxs: [['width1', 'height1'], ...['widthN', 'heightN']],\r\n        xs: [['width1', 'height1'], ...['widthN', 'heightN']],\r\n        s: [['width1', 'height1'], ...['widthN', 'heightN']],\r\n        m: [['width1', 'height1'], ...['widthN', 'heightN']],\r\n        l: [['width1', 'height1'], ...['widthN', 'heightN']],\r\n        xl: [['width1', 'height1'], ...['widthN', 'heightN']],\r\n        xxl: [['width1', 'height1'], ...['widthN', 'heightN']],\r\n      },\r\n      blacklistReferrers: 'comma, delimited, blacklisted, referrer, list',\r\n      whitelistReferrers: 'comma, delimited, referrer, list',\r\n    },\r\n  },\r\n  adManagerConfig: {\r\n    network: '9401',\r\n    adUnitBase: 'haaretz.co.il_Web',\r\n  },\r\n  breakpointsConfig: {\r\n    get breakpoints() {\r\n      // Override in VM from backend to control this toggle.\r\n      let breakpoints;\r\n      switch (dfpConfig.googleGlobalSettings.breakpointType) {\r\n        case 'type1': breakpoints = this.breakpoints1; break;\r\n        case 'type2': breakpoints = this.breakpoints2; break;\r\n        case 'type3': breakpoints = this.breakpoints3; break;\r\n        case 'type4': breakpoints = this.breakpoints4; break;\r\n        default: breakpoints = this.breakpoints1;\r\n      }\r\n      return breakpoints;\r\n    },\r\n    // Type 1\r\n    breakpoints1: {\r\n      xxs: 600,\r\n      xs: 761,\r\n      s: 993,\r\n      m: 1009,\r\n      l: 1291,\r\n      xl: 1600,\r\n      xxl: 1900,\r\n    },\r\n    // Type 2\r\n    breakpoints2: {\r\n      xxs: 600,\r\n      xs: 1000,\r\n      s: 1150,\r\n      m: 1281,\r\n      l: 1600,\r\n      xl: 1920,\r\n      xxl: 1920,\r\n    },\r\n    // Type 3\r\n    breakpoints3: {\r\n      xxs: 100,\r\n      xs: 480,\r\n      s: 600,\r\n      m: 768,\r\n      l: 1024,\r\n      xl: 1280,\r\n      xxl: 1900,\r\n    },\r\n    // Type 4\r\n    breakpoints4: {\r\n      xxs: 600,\r\n      xs: 768,\r\n      s: 1024,\r\n      m: 1280,\r\n      l: 1900,\r\n      xl: 1900,\r\n      xxl: 1900,\r\n    },\r\n  },\r\n  userConfig: {\r\n    type: undefined,\r\n    age: undefined,\r\n    gender: undefined,\r\n  },\r\n  conflictManagementConfig: {\r\n    'blocking.ad.unit.name': [\r\n      {\r\n        onsize: '1280x200,970x250,3x3',\r\n        avoid: 'blocked.ad.unit.name',\r\n      },\r\n      {\r\n        onsize: '1280x200,970x250,3x3',\r\n        avoid: 'blocked.ad.unit.name',\r\n      },\r\n    ],\r\n  },\r\n  impressionManagerConfig: {\r\n    'ad.unit.name': {\r\n      target: 'all|section|homepage',\r\n      frequency: '$1/$2(day|hour)',\r\n      exposed: 0,\r\n      expires: (new Date()).getTime(),\r\n    },\r\n  },\r\n  googleGlobalSettings: {\r\n    enableSingleRequest: true,\r\n    enableAsyncRendering: true,\r\n    refreshIntervalTime: 1000,\r\n    breakpointType: 'type1',\r\n  },\r\n  sso: ssoKey,\r\n\r\n}, dfpBaseConf);\r\n\r\nexport default dfpConfig;\r\n","/**\n * Helper function. Adds N hours to a given date object.\n * @param {Date} date - the date to derive from\n * @param {Number} hours - the amount of hours to add, in whole numbers\n * @throws {SyntaxError} Will throw if the 'date' param is not provided\n * @throws {SyntaxError} Will throw if the 'hours' param is not provided\n * @throws {TypeError} Will throw if the 'hours' param is not a valid integer\n * @returns {Date} date - the new date, derived from adding the given hours\n */\nexport function addHours(date, hours) {\n  if (!date) {\n    throw new SyntaxError('addHours called without a required \\'date\\' parameter!');\n  }\n  if (!hours) {\n    throw new SyntaxError('addHours called without a required \\'hours\\' parameter!');\n  }\n  else if (isNaN(parseInt(hours, 10))) {\n    throw new TypeError('addHours called with an invalid integer \\'hours\\' parameter!');\n  }\n  const result = new Date(date);\n  result.setHours(result.getHours() + parseInt(hours, 10));\n  return result;\n}\n\n/**\n * Helper function. Adds N days to a given date object.\n * @param {Date} date - the date to derive from\n * @param {Integer} days - the amount of days to add\n * @throws {SyntaxError} Will throw if the 'date' param is not provided\n * @throws {SyntaxError} Will throw if the 'days' param is not provided\n * @throws {TypeError} Will throw if the 'hours' param is not a valid integer\n * @returns {Date} date - the new date, derived from adding the given days\n */\nexport function addDays(date, days) {\n  if (!date) {\n    throw new SyntaxError('addDays called without a required \\'date\\' parameter!');\n  }\n  if (!days) {\n    throw new SyntaxError('addDays called without a required \\'days\\' parameter!');\n  }\n  else if (isNaN(parseInt(days, 10))) {\n    throw new TypeError('addDays called with an invalid integer \\'days\\' parameter!');\n  }\n  const result = new Date(date);\n  result.setDate(result.getDate() + parseInt(days, 10));\n  return result;\n}\n","import globalConfig from '../globalConfig';\n\nconst breakpoints = globalConfig.breakpointsConfig.breakpoints;\n\n/**\n * Returns a function, that, as long as it continues to be invoked, will not\n * be triggered. The function will be called after it stops being called for\n * N milliseconds. If `immediate` is passed, trigger the function on the\n * leading edge, instead of the trailing.\n * @param { function } func - the function to run\n * @param { number } wait - the timeout period to avoid running the function\n * @param { boolean } immediate - leading edge modifier\n * @returns {function } the debounced function\n */\nexport function debounce(func, wait = 100, immediate) {\n  let timeout;\n  return function debounced() {\n    const context = this;\n    const args = arguments;// eslint-disable-line prefer-rest-params\n    const later = () => {\n      timeout = null;\n      if (!immediate) func.apply(context, args);\n    };\n    const callNow = immediate && !timeout;\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n    if (callNow) func.apply(context, args);\n  };\n}\n\n/**\n * Returns the current breakpoint that is closest to the window's width\n * @returns {number} the break that the current width represents\n */\nexport function getBreakpoint() {\n  let breakpoint;\n  const windowWidth = window.innerWidth\n    || document.documentElement.clientWidth\n    || document.body.clientWidth;\n  switch (true) {\n    case windowWidth < breakpoints.xs: breakpoint = breakpoints.xxs; break;\n    case windowWidth < breakpoints.s: breakpoint = breakpoints.xs; break;\n    case windowWidth < breakpoints.m: breakpoint = breakpoints.s; break;\n    case windowWidth < breakpoints.l: breakpoint = breakpoints.m; break;\n    case windowWidth < breakpoints.xl: breakpoint = breakpoints.l; break;\n    case windowWidth < breakpoints.xxl: breakpoint = breakpoints.xl; break;\n    default: breakpoint = breakpoints.xxl;\n  }\n  return breakpoint;\n}\n/**\n * Returns the current breakpoint that is closest to the window's width\n * @param {number} breakpoint - the breakpoint label enumerator that the current width represents\n * (yield with a getBreakpoint() call or passed manually )\n * @returns {string} breakpoint - the breakpoint label that the current width represents,\n * as a string\n */\nexport function getBreakpointName(breakpoint) {\n  let resultBreakpoint;\n  const windowWidth = breakpoint || window.innerWidth;\n  switch (true) {\n    case windowWidth < breakpoints.xs: resultBreakpoint = 'xxs'; break;\n    case windowWidth < breakpoints.s: resultBreakpoint = 'xs'; break;\n    case windowWidth < breakpoints.m: resultBreakpoint = 's'; break;\n    case windowWidth < breakpoints.l: resultBreakpoint = 'm'; break;\n    case windowWidth < breakpoints.xl: resultBreakpoint = 'l'; break;\n    case windowWidth < breakpoints.xxl: resultBreakpoint = 'xl'; break;\n    default: resultBreakpoint = 'xxl';\n  }\n  return resultBreakpoint;\n}\n","import globalConfig from '../globalConfig';\nimport { addHours, addDays } from '../utils/time';\nimport { debounce } from '../utils/breakpoints';\n\nexport const keys = {\n  impressions: 'impressions',\n  frequency: 'frequency',\n  /**\n   * [0] - full match\n   * [1] - impression count i.e: \"1\" | \"22\"\n   * [2] - impression expiry range quantifier  i.e: \"1\" | \"22\"\n   * [3] - impression expiry range unit i.e: \"day\" | \"hour\"\n   */\n  frequencyRegex: /(\\d+)\\/(\\d+)(day|hour)/,\n  expires: 'expires',\n  exposed: 'exposed',\n  target: 'target',\n  maxImpressions: 'maxImpressions',\n  hours: 'hour',\n  days: 'day',\n  adSlotId: 'id',\n};\n\nexport default class ImpressionsManager {\n\n  constructor(impressionManagerConfig) {\n    this.now = (new Date()).getTime(); // this date is used for comparisons only\n    this.config = Object.assign({}, impressionManagerConfig);\n    this.impressions = this.retrieveImpressionsData();\n    this.initImpressionMap();\n  }\n\n  retrieveImpressionsData() {\n    const impressions = this.migrateImpressionsData();\n    /*\n     Merge migrated data with new data\n     console.log('Migrated: ',impressions);\n     */\n    Object.keys(impressions).map((key, index) => {\n      impressions[key] = Object.assign({}, impressions[key], this.config[key]);\n      return this;\n    });\n    /*\n     console.log('Merged: ',impressions);\n     Filter out entries without frequency\n     */\n    for (const key in impressions) {\n      if ({}.hasOwnProperty.call(impressions, key)) {\n        if (!impressions[key][keys.frequency]) {\n          // console.log(`Removing ${key} - since it does not have a frequency`,impressions[key]);\n          delete impressions[key];\n        }\n      }\n    }\n    // console.log('Filtered: ',impressions);\n    return impressions;\n  }\n\n  migrateImpressionsData() {\n    let impressions;\n    let impressionsData;\n    try {\n      impressionsData = window.localStorage.getItem(keys.impressions);\n    }\n    catch (err) {\n      // In case of thrown 'SecurityError' or 'QuotaExceededError', the variable should be undefined\n      impressionsData = undefined;\n    }\n    try {\n      impressions = JSON.parse(impressionsData);\n    }\n    catch (err) {\n      // Here is where old impression data is converted to new format\n      impressions = {};\n      const oldImpressionsArray = impressionsData.split(';').filter(e => e);\n\n      oldImpressionsArray.forEach((impression) => {\n        try {\n          const adUnitImpression = impression.split(' = ');\n          const name = adUnitImpression[0];\n          const data = adUnitImpression[1];\n          const tmp = name.split('.');\n          let target = tmp.pop();\n          if (target && target === 'hp') {\n            target = 'homepage';\n          }\n          const slotId = tmp.join('.');\n          const id = `${slotId}_${target}`;\n          const exposed = parseInt(data.split('/')[0], 10) || 0;\n          const expires = parseInt(data.split('/')[1], 10) || this.now;\n          impressions[id] = {};\n          impressions[id][keys.adSlotId] = slotId;\n          impressions[id][keys.target] = target;\n          impressions[id][keys.exposed] = exposed;\n          impressions[id][keys.expires] = expires;\n        }\n        catch (err1) {\n          // console.log(`Failed converting impression: ${impression}`, err1);\n        }\n      });\n    }\n    return impressions || {};\n  }\n\n  /**\n   * Define the debounced version of the local storage save\n   */\n  saveImpressionsToLocalStorage() {\n    if (this.debouncedSave && typeof this.debouncedSave === 'function') {\n      this.debouncedSave();\n    }\n    else {\n      this.debouncedSave = debounce(this.saveImpressionsToLocalStorageImpl, 250, false);\n      this.debouncedSave();\n    }\n  }\n\n  /**\n   * Implementation of saving the impression map to localstorage\n   */\n  saveImpressionsToLocalStorageImpl() {\n    try {\n      localStorage.setItem(keys.impressions, JSON.stringify(this.impressions));\n    }\n    catch (err) {\n      /* In case of thrown 'SecurityError' or 'QuotaExceededError',\n       the operation should not break*/\n      console.error('localStorage isn\\'t available:', err); // eslint-disable-line no-console\n    }\n  }\n\n  /**\n   * Initializes the impression map based on the retrieved impressions and the global\n   * configuration.\n   */\n  initImpressionMap() {\n    Object.keys(this.config).map((key, index) => {\n      const adSlotId = key;\n      const slot = this.impressions[adSlotId];\n      let shouldUpdateExpiryDate = false;\n      // Case I: Existing slot (update)\n      if (slot) {\n        // Case I.I Existing slot, frequency has changed\n        if (this.config[adSlotId][keys.frequency] !== slot[keys.frequency]) {\n          // Updating the frequency will trigger a new expiry date\n          shouldUpdateExpiryDate = true;\n          this.impressions[adSlotId][keys.frequency] = this.config[adSlotId][keys.frequency];\n        } // Case I.II Existing slot, old expiry date\n        else if (this.now > slot[keys.expires]) {\n          // Old value that should trigger a new expiry date\n          shouldUpdateExpiryDate = true;\n        }\n      } // Case II: Non-existing slot (create new slot)\n      else {\n        this.initSlotFromConfig(adSlotId);\n      } // Finally, updates the expiry date (cases I.I and I.II)\n      if (shouldUpdateExpiryDate) {\n        this.updateExpiryDate(adSlotId);\n      }\n      return this;\n    });\n  }\n\n  /**\n   * Updates the expiry date of a slotName based on the configured slot frequency\n   * @param {String} slotName - the slotName to update.\n   */\n  updateExpiryDate(slotName) {\n    const now = new Date();\n    if (!(this.impressions[slotName] && this.impressions[slotName][keys.frequency])) {\n      throw new Error(`Unable to update expiry date for slot: ${slotName}\n      - this.impressions[slotName]:`, this.impressions[slotName]);\n    }\n    const frequencyMap = this.impressions[slotName][keys.frequency].match(keys.frequencyRegex);\n    now.setMilliseconds(0);\n    now.setSeconds(0);\n    now.setMinutes(0);\n    if (frequencyMap.indexOf(keys.days) > -1) {\n      now.setHours(0);\n    }\n    this.impressions[slotName][keys.expires] = (frequencyMap.indexOf(keys.days) > -1 ?\n      addDays(now, frequencyMap[2]) : addHours(now, frequencyMap[2])).getTime();\n\n    // Set max impressions:\n    this.impressions[slotName][keys.maxImpressions] = parseInt(frequencyMap[1], 10);\n    // Reset exposed\n    this.impressions[slotName][keys.exposed] = 0;\n  }\n\n  /**\n   * Initializes a non-existing slot from the passed global configuration for the slot\n   * @param {String} slotName - the name of the slot to create\n   */\n  initSlotFromConfig(slotName) {\n    const slot = this.impressions[slotName] || {};\n    slot[keys.frequency] = this.config[slotName][keys.frequency];\n    slot[keys.target] = this.config[slotName][keys.target];\n    slot[keys.exposed] = 0;\n    this.impressions[slotName] = slot;\n    this.updateExpiryDate(slotName);\n  }\n\n  /**\n   * Registers an impression for a given adSlot.\n   * @param {String} adSlotId - the adSlot id to register an impression for\n   * @returns {boolean} returns true iff the impression has been registered\n   */\n  registerImpression(adSlotId) {\n    if (adSlotId) {\n      const slot = this.impressions[adSlotId];\n      if (slot) {\n        const exposed = slot[keys.exposed];\n        if (isNaN(parseInt(exposed, 10)) === false) {\n          this.impressions[adSlotId][keys.exposed] += 1;\n          try {\n            this.saveImpressionsToLocalStorage();\n          }\n          catch (err) {\n            // console.log('Error saving ad impressions to localStorage!', err);\n          }\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Checks whether an adSlot has reached it's allocated impressions count.\n   * @param {String} adSlotId - the adSlot to check\n   * @returns {boolean} true iff there is a quota for the adSlot, and it has been reached\n   */\n  reachedQuota(adSlotId) {\n    // An adSlotId is suffixed with _homepage | _section if it's targeting is different\n    // between the two. If there is no difference, an _all suffix can be used.\n    const slotName = this.impressions[`${adSlotId}${globalConfig.department}`] ?\n      `${adSlotId}${globalConfig.department}` : `${adSlotId}_all`;\n\n    const slot = this.impressions[slotName];\n    let atQuota = false;\n    if (slot) {\n      const now = (new Date()).getTime();\n      // Second element of 2/4day matches '2'\n      const expires = this.impressions[slotName][keys.expires];\n      if (expires < now) {\n        this.updateExpiryDate(slotName);\n      }\n      else {\n        const maxImpressions = this.impressions[slotName][keys.maxImpressions];\n        // Not expired, did reach max impressions?\n        if (maxImpressions) {\n          atQuota = this.impressions[slotName][keys.exposed] >= maxImpressions;\n        }\n      }\n    }\n    return atQuota;\n  }\n\n\n  /**\n   * Clears the impression map from 'exposed' impressions\n   */\n  resetImpressions() {\n    const impressions = this.impressions;\n    for (const key in impressions) {\n      if ({}.hasOwnProperty.call(impressions, key)) {\n        if (impressions[key][keys.exposed]) {\n          impressions[key][keys.exposed] = 0;\n        }\n      }\n    }\n    this.saveImpressionsToLocalStorage();\n  }\n}\n","import getCookieAsMap from '../utils/cookieUtils';\r\nimport ImpressionManager from './impressionsManager';\r\nimport globalConfig from '../globalConfig';\r\n\r\nexport const userTypes = {\r\n  payer: 'payer',\r\n  registered: 'registered',\r\n  anonymous: 'anonymous',\r\n  trial: 'trial',\r\n};\r\n\r\nexport const productTypes = {\r\n  htz: 243,\r\n  tm: 273,\r\n  hdc: 239,\r\n  htz_tm: 274,\r\n};\r\n\r\nexport default class User {\r\n  constructor(config) {\r\n    this.config = Object.assign({}, config.userConfig);\r\n    const cookieMap = getCookieAsMap();\r\n    this.ssoKey = globalConfig.sso;\r\n    if (!cookieMap[this.ssoKey]) {\r\n      // Flips the ssoKey, since cookieMap.ssoKey cannot be used to retrieve data\r\n      this.ssoKey = this.ssoKey === 'tmsso' ? 'engsso' : 'tmsso';\r\n    }\r\n    this.type = this.getUserType(cookieMap);\r\n    this.htz_type = this.getUserTypeByProduct(cookieMap, productTypes.htz);\r\n    this.tm_type = this.getUserTypeByProduct(cookieMap, productTypes.tm);\r\n    this.hdc_type = this.getUserTypeByProduct(cookieMap, productTypes.hdc);\r\n    this.impressionManager = new ImpressionManager(config.impressionManagerConfig);\r\n    this.age = this.getUserAge(cookieMap);\r\n    this.gender = this.getUserGender(cookieMap);\r\n    this.sso = this.getUserSSO(cookieMap, this.ssoKey);\r\n  }\r\n\r\n  getUserType(cookieMap) {\r\n    let userType;\r\n    if (cookieMap && cookieMap[this.ssoKey]) {\r\n      userType = (cookieMap.HtzPusr || cookieMap.TmPusr || cookieMap.HdcPusr) ?\r\n        userTypes.payer : userTypes.registered;\r\n    }\r\n    else {\r\n      userType = userTypes.anonymous;\r\n    }\r\n    return userType;\r\n  }\r\n\r\n\r\n  getUserTypeByProduct(cookieMap, productType) {\r\n    let userType = userTypes.anonymous;\r\n    if (cookieMap && cookieMap[this.ssoKey]) {\r\n      if (cookieMap.userProducts) {\r\n        let userProducts = decodeURIComponent(cookieMap.userProducts);\r\n        userProducts = JSON.parse(userProducts);\r\n        if (productType === productTypes.hdc) {\r\n          userType = this.getHdcUserType(userProducts);\r\n        }\r\n        else {\r\n          userType = this.getHtzTmUserType(userProducts, productType);\r\n        }\r\n      }\r\n    }\r\n    return userType;\r\n  }\r\n\r\n  getHdcUserType(userProducts) {\r\n    // user has hdc paying product\r\n    if (this.userHasProduct(userProducts, productTypes.hdc, false)) {\r\n      return userTypes.payer;\r\n    }\r\n    // user has hdc trial product\r\n    else if (this.userHasProduct(userProducts, productTypes.hdc, true)) {\r\n      return userTypes.trial;\r\n    }\r\n    return userTypes.registered;\r\n  }\r\n\r\n  getHtzTmUserType(userProducts, productType) {\r\n    // user has htz/tm paying product\r\n    if (this.userHasProduct(userProducts, productType, false) ||\r\n      this.userHasProduct(userProducts, productTypes.htz_tm, false)) {\r\n      return userTypes.payer;\r\n    }\r\n    // user has htz/tm trial product\r\n    else if (this.userHasProduct(userProducts, productType, true) ||\r\n      this.userHasProduct(userProducts, productTypes.htz_tm, true)) {\r\n      return userTypes.trial;\r\n    }\r\n    return userTypes.registered;\r\n  }\r\n\r\n  userHasProduct(userProducts, productType, trial) {\r\n    return userProducts.products\r\n        .filter(product => product.prodNum === productType && product.trial === trial)\r\n        .length > 0;\r\n  }\r\n\r\n  getUserAge(cookieMap) {\r\n    let age;\r\n    const usrae = cookieMap[this.ssoKey] && cookieMap[this.ssoKey].usrae;\r\n    if (usrae) {\r\n      age = parseInt(cookieMap[this.ssoKey].usrae, 10);\r\n      age = age > 0 ? age : undefined;\r\n    }\r\n    return age;\r\n  }\r\n\r\n  getUserGender(cookieMap) {\r\n    let gender;\r\n    const urgdr = cookieMap[this.ssoKey] && cookieMap[this.ssoKey].urgdr;\r\n    if (urgdr) {\r\n      gender = parseInt(cookieMap[this.ssoKey].urgdr, 10);\r\n      gender = gender === 2 || gender === 1 ? gender : undefined;\r\n    }\r\n    return gender;\r\n  }\r\n\r\n  getUserSSO(cookieMap, ssoKey) {\r\n    return cookieMap[ssoKey];\r\n  }\r\n}\r\n","class ConflictResolver {\n  constructor(conflictManagementConfig) {\n    this.dependencyMap = this.initializeDependencyMap(conflictManagementConfig);\n    this.deferredSlots = new Set();\n  }\n  initializeDependencyMap(conflictManagementJson) {\n    const queue = new Map();\n    Object.keys(conflictManagementJson).map((key, value) => {\n      let rules = conflictManagementJson[key];\n      if (rules) {\n        rules = rules.filter((item) => item.onsize && item.avoid);\n      }\n      queue.set(key, {\n        id: key,\n        rules,\n        resolvedWith: null,\n      });\n      return this;\n    });\n    return queue;\n  }\n\n  updateResolvedSlot(adSlotId, resolvedSize) {\n    if (!adSlotId) {\n      throw new Error('updateResolvedSlot must be called with an adSlotId!');\n    }\n    if (!resolvedSize) {\n      throw new Error('updateResolvedSlot must be called with a resolved size!');\n    }\n    if (this.dependencyMap.has(adSlotId)) {\n      this.dependencyMap.get(adSlotId).resolvedWith = resolvedSize;\n    }\n  }\n\n\n  isBlocked(adSlotId) {\n    if (!adSlotId) {\n      throw new Error('isBlocked must be called with an adSlotId!');\n    }\n    let isBlocked = false;\n    for (const adSlotKey of this.dependencyMap.keys()) {\n      const adSlot = this.dependencyMap.get(adSlotKey);\n      for (const adSlotRule of adSlot.rules) {\n        // Found rule specific to our target\n        if (adSlotRule.avoid === adSlotId) {\n          const parentResolvedWith = adSlot.resolvedWith;\n          // Fail fast: parent is not resolved yet - unknown returned size.\n          if (!parentResolvedWith) {\n            isBlocked = true;\n            this.deferredSlots.add(adSlotId);\n          }\n          if (adSlotRule.onsize.split(',').find(sizeString => { // eslint-disable-line\n            const size = sizeString.split('x').map(numberStr => parseInt(numberStr, 10));\n            return this.arraysEqual(size, parentResolvedWith);\n          })) {\n            // Block found\n            this.deferredSlots.add(adSlotId);\n            isBlocked = true;\n          }\n        }\n      }\n    }\n    return isBlocked;\n  }\n\n  isBlocking(adSlotId) {\n    if (!adSlotId) {\n      throw new Error('isBlocking must be called with an adSlotId!');\n    }\n    let isBlocking = false;\n    for (const adSlotKey of this.dependencyMap.keys()) {\n      if (adSlotKey === adSlotId) {\n        isBlocking = true;\n      }\n    }\n    return isBlocking;\n  }\n\n  /**\n   * Gets an array of adSlot Ids for a given adSlotId, that are dependent on (blocked by)\n   * @param {String} adSlotId - the blocking slot id\n   * @return {Array} an array of blocked slot, that has a dependency on the given slot\n   */\n  getBlockedSlotsIds(adSlotId) {\n    let result;\n    if (this.dependencyMap.has(adSlotId)) {\n      result = Array.from(this.dependencyMap.get(adSlotId).rules.map(adSlot => adSlot.avoid));\n    }\n    return result || [];\n  }\n\n  arraysEqual(a, b) {\n    if (a === b) return true;\n    if (a === null || b === null) return false;\n    if (a.length !== b.length) return false;\n    for (let i = 0; i < a.length; ++i) {\n      if (a[i] !== b[i]) return false;\n    }\n    return true;\n  }\n}\nConflictResolver.EMPTY_SIZE = [];\nexport default ConflictResolver;\n","/**\r\n * Checks whether two arrays are equal\r\n * @param {Array} a - the first array to check\r\n * @param {Array} b - the second array to check\r\n * @returns {Boolean} true iff both a and b are arrays, with equal values\r\n */\r\nexport function arraysEqual(a, b) {\r\n  if (!a || !b) return false;\r\n  if (!Array.isArray(a) || !Array.isArray(b)) return false;\r\n  if (a === b) return true;\r\n  if (a.length !== b.length) return false;\r\n  for (let i = 0; i < a.length; ++i) {\r\n    if (Array.isArray(a[i]) && Array.isArray(b[i])) {\r\n      if (!arraysEqual(a[i], b[i])) return false;\r\n    }\r\n    else if (a[i] !== b[i]) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\nexport default arraysEqual;\r\n","/* global googletag */\r\nimport { adTypes } from '../objects/adManager';\r\nimport globalConfig from '../globalConfig';\r\nimport { arraysEqual } from '../utils/arrays';\r\n\r\nconst hiddenClass = globalConfig.site.indexOf('mouse') > -1 ? 'u-is-hidden' : 'h-hidden';\r\n\r\nexport default class adSlot {\r\n\r\n  constructor(adSlotConfig) {\r\n    this.config = Object.assign({}, adSlotConfig);\r\n\r\n    // Part I : Markup configuration - passed from AdManager\r\n    this.id = this.config.id;\r\n    if (!this.config.id) {\r\n      throw new Error('an adSlot requires an id!');\r\n    }\r\n    this.target = this.config.target;\r\n    this.type = this.config.type;\r\n    this.responsive = this.config.responsive;\r\n    this.fluid = this.config.fluid;\r\n    this.user = this.config.user;\r\n    this.adManager = this.config.adManager;\r\n    this.htmlElement = this.config.htmlElement;\r\n    this.priority = this.config.priority;\r\n    this.deferredSlot = this.config.deferredSlot;\r\n\r\n    // Part II : Global, general ad configuration - passed from AdManager\r\n    this.department = this.config.department;\r\n    this.network = this.config.network;\r\n    this.adUnitBase = this.config.adUnitBase;\r\n\r\n    // Part III : ad specific configuration - passed from globalConfig.adSlotConfig\r\n    this.adSizeMapping = this.config.adSizeMapping;\r\n    this.responsiveAdSizeMapping = this.config.responsiveAdSizeMapping;\r\n    this.blacklistReferrers = this.config.blacklistReferrers ?\r\n      this.config.blacklistReferrers.split(',') : [];\r\n    this.whitelistReferrers = this.config.whitelistReferrers ?\r\n      this.config.whitelistReferrers.split(',') : [];\r\n\r\n\r\n    // Part IV : Runtime configuration - calculated data - only present in runtime\r\n    this.lastResolvedSize = undefined; // Initialized in 'slotRenderEnded' callback\r\n    this.lastResolvedWithBreakpoint = undefined; // Initialized in 'slotRenderEnded' callback\r\n    this.slot = undefined; // Holds a googletag.Slot object\r\n    // [https://developers.google.com/doubleclick-gpt/reference#googletag.Slot]\r\n    try {\r\n      if (!this.deferredSlot) {\r\n        this.slot = this.defineSlot();\r\n      }\r\n    }\r\n    catch (err) {\r\n      console.error(err); // eslint-disable-line no-console\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Checks whether this adSlot is an 'Out-of-page' slot or not.\r\n   * An Out-of-page slot is a slot that is not embedded in the page 'normally'.\r\n   * @returns {boolean} true iff this adSlot is one of the predefined 'out-of-page' slots.\r\n   */\r\n  isOutOfPage() {\r\n    if (typeof this.type !== 'string') {\r\n      throw new Error('An adSlot cannot by typeless!', this);\r\n    }\r\n    if (this.isMobile() === true) {\r\n      return false;\r\n    }\r\n    switch (this.type) {\r\n      case adTypes.maavaron: return false;\r\n      case adTypes.popunder: return true;\r\n      case adTypes.talkback: return false;\r\n      case adTypes.regular: return false;\r\n      default: return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Checks whether this adSlot is a 'maavaron' slot or not.\r\n   * An Out-of-page slot is a slot that is not embedded in the page 'normally'.\r\n   * @returns {boolean} true iff this adSlot is one of the predefined 'out-of-page' slots.\r\n   */\r\n  isMaavaron() {\r\n    if (typeof this.type !== 'string') {\r\n      throw new Error('An adSlot cannot by typeless!', this);\r\n    }\r\n    if (this.isMobile() === true) {\r\n      return false;\r\n    }\r\n    switch (this.type) {\r\n      case adTypes.maavaron: return false;\r\n      default: return false;\r\n    }\r\n  }\r\n\r\n  isMobile() {\r\n    return (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i\r\n      .test(window.navigator.userAgent || ''));\r\n  }\r\n  /**\r\n   * Checks whether or not this adSlot has a non-empty whitelist, and if so, that the current\r\n   * referrer appears in the whitelist.\r\n   * Should return false iff there is a whitelist for the current adSlot, but the referrer is not\r\n   * mentioned in the whitelist.\r\n   * @returns {boolean} true iff the ad can be displayed.\r\n   */\r\n  isWhitelisted() {\r\n    let whitelisted = false;\r\n    if (this.whitelistReferrers.length !== 0) {\r\n      for (const referrer of this.whitelistReferrers) {\r\n        if (globalConfig.referrer.indexOf(referrer) > -1) {\r\n          whitelisted = true;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    else {\r\n      whitelisted = true;\r\n    }\r\n    return whitelisted;\r\n  }\r\n\r\n  /**\r\n   * Checks whether or not this adSlot has a non-empty blacklist, and if so, that the current\r\n   * referrer does not appear in the blacklist.\r\n   * Should return true iff there is a blacklist for the current adSlot, and the referrer is\r\n   * mentioned in the blacklist - to indicate that the adSlot is 'blocked'.\r\n   * @returns {boolean} true iff the ad cannot be displayed.\r\n   */\r\n  isBlacklisted() {\r\n    let blacklisted = false;\r\n    if (this.blacklistReferrers.length !== 0) {\r\n      for (const referrer of this.blacklistReferrers) {\r\n        if (globalConfig.referrer.indexOf(referrer) > -1) {\r\n          blacklisted = true;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    return blacklisted;\r\n  }\r\n\r\n\r\n  /**\r\n   * Shows the current adSlot.\r\n   * It assumes a markup is available for this slot (any tag with an id attribute = this.id)\r\n   */\r\n  show() {\r\n    if (!this.shown === true) {\r\n      this.shown = true; // Ensure show will be called once per adSlot\r\n      googletag.cmd.push(() => {\r\n        if (this.deferredSlot) {\r\n          this.slot = this.defineSlot();\r\n        }\r\n        // console.log('calling show for slot',this.id,' called @',window.performance.now());\r\n        document.getElementById(this.id).classList.remove(hiddenClass);\r\n        googletag.display(this.id);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Shows the current adSlot.\r\n   * It assumes a markup is available for this slot (any tag with an id attribute = this.id)\r\n   */\r\n  hide() {\r\n    googletag.cmd.push(() => {\r\n      document.getElementById(this.id).classList.add(hiddenClass);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Initializes page-level slot definition for the current slot\r\n   * @return {Slot} slot - the Google Slot that was defined from this AdSlot configuration\r\n   */\r\n  defineSlot() {\r\n    if (this.isMaavaron()) {\r\n      const maavaronSlot = this.defineMaavaron();\r\n      if (this.adManager.shouldSendRequestToDfp(this)) {\r\n        if (!this.shown) {\r\n          this.shown = true; // Ensure show will be called once\r\n          maavaronSlot.display();\r\n        }\r\n      }\r\n      return maavaronSlot;\r\n    }\r\n    const googletag = window.googletag;\r\n    const pubads = googletag.pubads();\r\n    const args = [];\r\n    const defineFn = this.isOutOfPage() ? googletag.defineOutOfPageSlot : googletag.defineSlot;\r\n    // 3 or 2 params according to the function that we want to activate.\r\n    args.push(this.getPath());\r\n    if (this.isOutOfPage() === false) {\r\n      if (this.fluid) {\r\n        args.push('fluid');\r\n      }\r\n      else {\r\n        args.push(this.adSizeMapping);\r\n      }\r\n    }\r\n    args.push(this.id);\r\n    let slot = defineFn.apply(defineFn, args);\r\n    if (slot) {\r\n      // Responsive size Mapping\r\n      if (this.responsive) {\r\n        let responsiveSlotSizeMapping = googletag.sizeMapping();\r\n        const breakpoints = globalConfig.breakpointsConfig.breakpoints;\r\n        const keys = Object.keys(this.responsiveAdSizeMapping);\r\n        for (const key of keys) { // ['xxs','xs',...]\r\n          responsiveSlotSizeMapping.addSize(\r\n            [breakpoints[key], 100], // 100 is a default height, since it is height agnostic\r\n            !arraysEqual(this.responsiveAdSizeMapping[key], [[0, 0]]) ?\r\n              this.responsiveAdSizeMapping[key] : []);\r\n        }\r\n        responsiveSlotSizeMapping = responsiveSlotSizeMapping.build();\r\n        slot = slot.defineSizeMapping(responsiveSlotSizeMapping);\r\n      }\r\n      slot = slot.addService(pubads);\r\n      if (this.isOutOfPage() === false) {\r\n        slot.setCollapseEmptyDiv(true);\r\n      }\r\n    }\r\n    return slot;\r\n  }\r\n\r\n  /**\r\n   * Returns the current path calculated for the adSlot\r\n   * @returns {String} a formatted string that represent the path for the slot definition\r\n   */\r\n  getPath() {\r\n    /* eslint-disable no-shadow */\r\n    let path = globalConfig.path || [];\r\n    path = path.filter(path => path !== '.');\r\n    path = path.map(section => `${this.id}${this.department}${section}`).join('/');\r\n    // If a path exist, it will be preceded with a forward slash\r\n    path = path && this.config.department !== '_homepage' ? `/${path}` : '';\r\n    /* eslint-enable no-shadow */\r\n    const calculatedPath = `/${this.config.network}/${this.config.adUnitBase}/${this.id}/${this.id}${this.department}${path}`; // eslint-disable-line max-len\r\n    return calculatedPath.toLowerCase();\r\n  }\r\n\r\n  /* eslint-disable */\r\n  slotRendered(event) {\r\n    const id = event.slot.getAdUnitPath().split('/')[3]; // Convention: [0]/[1]network/[2]base/[3]id\r\n    const isEmpty = event.isEmpty; // Did the ad return as empty?\r\n    const resolvedSize = event.size; // What 'creative' size did the ad return with?\r\n    // Empty or onload callback should be called next?\r\n  }\r\n  /* eslint-enable */\r\n\r\n  /**\r\n   * Refresh this adSlot\r\n   */\r\n  refresh() {\r\n    googletag.cmd.push(() => {\r\n      googletag.pubads().refresh([this.slot]);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Shows 'Maavaron' type adSlot using Passback definition\r\n   * @return {Slot} slot - the Google Slot that was defined for Maavaron\r\n   */\r\n  defineMaavaron() {\r\n    if (!document.referrer.match('loc.haaretz')) {\r\n      const adUnitMaavaronPath = this.getPath();\r\n      const adUnitMaavaronSize = [\r\n        [2, 1],\r\n      ];\r\n      const slot = googletag.pubads().definePassback(adUnitMaavaronPath, adUnitMaavaronSize)\r\n        .setTargeting('UserType', [this.user.type])\r\n        .setTargeting('age', [this.user.age])\r\n        .setTargeting('urgdr', [this.user.gender])\r\n        .setTargeting('articleId', [globalConfig.articleId])\r\n        .setTargeting('stg', [globalConfig.environment]);\r\n      return slot;\r\n    }\r\n    return null;\r\n  }\r\n}\r\n","/* global googletag */\r\nimport User from '../objects/user';\r\nimport ConflictResolver from '../objects/conflictResolver';\r\nimport AdSlot from '../objects/adSlot';\r\nimport { getBreakpoint, getBreakpointName } from '../utils/breakpoints';\r\nimport { arraysEqual } from '../utils/arrays';\r\n\r\n// There are a total of 7 adTargets:\r\n// \"all\",\"nonPaying\",\"anonymous\",\"registered\",\"paying\",\"digitalOnly\" and \"digitalAndPrint\"\r\nexport const adPriorities = {\r\n  high: 'high',\r\n  normal: 'normal',\r\n  low: 'low',\r\n};\r\n\r\nexport const adTargets = {\r\n  all: 'all',\r\n  nonPaying: 'nonPaying',\r\n  anonymous: 'anonymous',\r\n  registered: 'registered',\r\n  paying: 'paying',\r\n  digitalOnly: 'digitalOnly',\r\n  digitalAndPrint: 'digitalAndPrint',\r\n};\r\n\r\n// There are a total of 3 userTypes: \"anonymous\", \"registered\" and \"payer\"\r\nexport const userTypes = {\r\n  anonymous: 'anonymous',\r\n  registered: 'registered',\r\n  payer: 'payer',\r\n};\r\n\r\nexport const adTypes = {\r\n  maavaron: '.maavaron',\r\n  popunder: '.popunder',\r\n  talkback: '.talkback',\r\n  regular: '',\r\n};\r\n\r\n\r\nexport default class AdManager {\r\n\r\n  constructor(config) {\r\n    this.config = Object.assign({}, config);\r\n    this.user = new User(config);\r\n    this.conflictResolver = new ConflictResolver(config.conflictManagementConfig);\r\n    /**\r\n     * Avoid race conditions by making sure to respect the usual timing of GPT.\r\n     * This DFP implementation uses Enable-Define-Display:\r\n     * Define page-level settings\r\n     * enableServices()\r\n     * Define slots\r\n     * Display slots\r\n     */\r\n    try {\r\n      googletag.cmd.push(() => {\r\n        this.initGoogleTargetingParams(); //  Define page-level settings\r\n        this.initGoogleGlobalSettings();  //  enableServices()\r\n        this.initSlotRenderedCallback();  //  Define callbacks\r\n      });\r\n      // Mouse special treatment to base path on mobile breakpoints\r\n      const currentBreakpointName = getBreakpointName(getBreakpoint());\r\n      if (this.config.adManagerConfig.adUnitBase.indexOf('mouse.co.il') > -1 &&\r\n        currentBreakpointName.indexOf('xs') > -1) {\r\n        this.config.adManagerConfig.adUnitBase = 'mouse.co.il.mobile_web';\r\n      }\r\n      // Holds adSlot objects as soon as possible.\r\n      googletag.cmd.push(() => {\r\n        this.adSlots = this.initAdSlots(config.adSlotConfig, adPriorities.high);\r\n      });\r\n      // Once DOM ready, add more adSlots.\r\n      const onDomLoaded = () => { // eslint-disable-line no-inner-declarations\r\n        try {\r\n          googletag.cmd.push(() => {\r\n            this.adSlots = this.initAdSlots(config.adSlotConfig, adPriorities.high);\r\n            googletag.cmd.push(() => {\r\n              this.adSlots = this.initAdSlots(config.adSlotConfig, adPriorities.normal);\r\n            });\r\n          });\r\n        }\r\n        catch (err) {\r\n          console.log(err); // eslint-disable-line no-console\r\n        }\r\n      };\r\n      // Once window was loaded, add the rest of the adSlots.\r\n      const onWindowLoaded = () => { // eslint-disable-line no-inner-declarations\r\n        googletag.cmd.push(() => {\r\n          this.adSlots = this.initAdSlots(config.adSlotConfig, adPriorities.low);\r\n          // Clean blocking adSlots that are not defined on this page\r\n          for (const blockingAdSlotKey of this.conflictResolver.dependencyMap.keys()) {\r\n            if (!this.adSlots.has(blockingAdSlotKey)) {\r\n              this.conflictResolver.dependencyMap.delete(blockingAdSlotKey);\r\n            }\r\n          }\r\n          this.showAllDeferredSlots();\r\n        });\r\n      };\r\n      switch (document.readyState) {\r\n        case 'loading':\r\n          document.addEventListener('DOMContentLoaded', onDomLoaded);\r\n          window.addEventListener('load', onWindowLoaded);\r\n          break;\r\n        case 'interactive':\r\n          onDomLoaded();\r\n          window.addEventListener('load', onWindowLoaded);\r\n          break;\r\n        default: // 'complete' - no need for event listeners.\r\n          onDomLoaded();\r\n          onWindowLoaded();\r\n      }\r\n    }\r\n    catch (err) {\r\n      console.error(err); // eslint-disable-line no-console\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Shows all of the adSlots that can be displayed.\r\n   */\r\n  showAllSlots() {\r\n    for (const adSlotKey of this.adSlots.keys()) {\r\n      const adSlot = this.adSlots.get(adSlotKey);\r\n      if (adSlot.type !== adTypes.talkback && this.shouldSendRequestToDfp(adSlot)) {\r\n        adSlot.show();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets all adSlots that has a certain priority\r\n   * @param {adPriority} priority - the priority of the ad {high, normal, low}\r\n   * @return {Array<AdSlot>} adSlots - all of the defined adSlots that matches\r\n   * the given priority\r\n   */\r\n  getAdSlotsByPriority(priority) {\r\n    function priorityFilter(adSlot) {\r\n      return adSlot.priority === priority;\r\n    }\r\n    return Array.from(this.adSlots.values()).filter(priorityFilter);\r\n  }\r\n\r\n  showAllDeferredSlots() {\r\n    for (const deferredSlotId of this.conflictResolver.deferredSlots) {\r\n      if (this.adSlots.has(deferredSlotId)) {\r\n        if (!this.conflictResolver.isBlocked(deferredSlotId)) {\r\n          const deferredAdSlot = this.adSlots.get(deferredSlotId);\r\n          if (this.shouldSendRequestToDfp(deferredAdSlot)) {\r\n            deferredAdSlot.show();\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Refreshes all responsive adSlots\r\n   */\r\n  refreshAllSlots() {\r\n    const currentBreakpoint = getBreakpoint();\r\n    for (const adSlotKey of this.adSlots.keys()) {\r\n      const adSlot = this.adSlots.get(adSlotKey);\r\n      if (adSlot.responsive && adSlot.type !== adTypes.maavaron) {\r\n        if (adSlot.lastResolvedWithBreakpoint !== currentBreakpoint &&\r\n          this.shouldSendRequestToDfp(adSlot)) {\r\n          // console.log(`calling refresh for adSlot: ${adSlot.id}`);\r\n          adSlot.refresh();\r\n        }\r\n        else {\r\n          adSlot.hide();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Refreshes all adSlots\r\n   */\r\n  refreshAllSlotsInPage() {\r\n    for (const adSlotKey of this.adSlots.keys()) {\r\n      const adSlot = this.adSlots.get(adSlotKey);\r\n      if (this.shouldSendRequestToDfp(adSlot)) {\r\n        // console.log(`calling refresh for adSlot: ${adSlot.id}`);\r\n        adSlot.refresh();\r\n      }\r\n      else {\r\n        adSlot.hide();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Refreshes adSlot\r\n   */\r\n\r\n  refreshSlot(adUnitName) {\r\n    const adSlot = this.adSlots.get(adUnitName);\r\n    if (this.shouldSendRequestToDfp(adSlot)) {\r\n      // console.log(`calling refresh for adSlot: ${adSlot.id}`);\r\n      adSlot.refresh();\r\n    }\r\n    else {\r\n      adSlot.hide();\r\n    }\r\n  }\r\n\r\n\r\n      /**\r\n   * Initializes adSlots based on the currently found slot markup (HTML page specific),\r\n   * and the predefined configuration for the slots.\r\n   * @param {Object} adSlotConfig - the AdSlots configuration object (see: globalConfig)\r\n   * @param {String} filteredPriority - filters out all adSlots that does not match\r\n   * a given adPriority. This is used to cherry pick the init process of ads.\r\n   * @returns {Map}\r\n   */\r\n  initAdSlots(adSlotConfig, filteredPriority) {\r\n    const adSlots = new Map(this.adSlots);\r\n    let adSlotPlaceholders = Array.from(document.getElementsByClassName('js-dfp-ad'));\r\n    adSlotPlaceholders = adSlotPlaceholders.filter(node => node.id); // only nodes with an id\r\n    const adSlotNodeSet = new Set();\r\n    adSlotPlaceholders = Array.prototype.filter.call(adSlotPlaceholders, node => {\r\n      if (adSlotNodeSet.has(node.id) === false) { // first occurrence of Node\r\n        adSlotNodeSet.add(node.id);\r\n        return true;\r\n      }\r\n      return false;\r\n    });\r\n    // adSlotPlaceholders = adSlotPlaceholders.sort((a, b) => a.offsetTop - b.offsetTop);\r\n    adSlotPlaceholders.forEach(adSlot => {\r\n      const adSlotPriority = adSlotConfig[adSlot.id] ?\r\n      adSlotConfig[adSlot.id].priority || adPriorities.normal : undefined;\r\n      if (adSlotConfig[adSlot.id] && adSlots.has(adSlot.id) === false &&\r\n        adSlotPriority === filteredPriority) {\r\n        // The markup has a matching configuration from adSlotConfig AND was not already defined\r\n        try {\r\n          // adSlotConfig is built from globalConfig, but can be overridden by markup\r\n          const computedAdSlotConfig = Object.assign({}, adSlotConfig[adSlot.id], {\r\n            id: adSlot.id,\r\n            target: adSlot.attributes['data-audtarget'] ?\r\n              adSlot.attributes['data-audtarget'].value : adTargets.all,\r\n            type: this.getAdType(adSlot.id),\r\n            responsive: adSlotConfig[adSlot.id].responsive,\r\n            fluid: adSlotConfig[adSlot.id].fluid || false,\r\n            user: this.user,\r\n            adManager: this,\r\n            htmlElement: adSlot,\r\n            department: this.config.department,\r\n            network: this.config.adManagerConfig.network,\r\n            adUnitBase: this.config.adManagerConfig.adUnitBase,\r\n            deferredSlot: this.conflictResolver.isBlocked(adSlot.id),\r\n            priority: adSlotPriority,\r\n          });\r\n          const adSlotInstance = new AdSlot(computedAdSlotConfig);\r\n          adSlots.set(adSlot.id, adSlotInstance);\r\n          if (adSlotInstance.type !== adTypes.talkback &&\r\n            adSlotInstance.priority === adPriorities.high &&\r\n            this.shouldSendRequestToDfp(adSlotInstance)) {\r\n            /*\r\n             console.log('calling show for high priority slot', adSlotInstance.id, ' called @',\r\n             window.performance.now());\r\n             */\r\n            adSlotInstance.show();\r\n          }\r\n        }\r\n        catch (err) {\r\n          console.error(err); // eslint-disable-line no-console\r\n        }\r\n      }\r\n    });\r\n    return adSlots;\r\n  }\r\n\r\n  isPriority(adSlotId) {\r\n    return (typeof adSlotId === 'string' &&\r\n    (adSlotId.indexOf('plazma') > 0 ||\r\n    adSlotId.indexOf('maavaron') > 0 ||\r\n    adSlotId.indexOf('popunder') > 0));\r\n  }\r\n\r\n  /**\r\n   * Returns the adType based on the adSlot name.\r\n   * @param {String} adSlotId - the adSlot's identifier.\r\n   * @returns {*} enumerated export 'adTypes'\r\n   */\r\n  getAdType(adSlotId) {\r\n    if (!adSlotId) {\r\n      throw new Error('Missing argument: a call to getAdType must have an adSlotId');\r\n    }\r\n    if (adSlotId.indexOf(adTypes.maavaron) > -1) return adTypes.maavaron;\r\n    if (adSlotId.indexOf(adTypes.popunder) > -1) return adTypes.popunder;\r\n    if (adSlotId.indexOf(adTypes.talkback) > -1) return adTypes.talkback;\r\n    return adTypes.regular;\r\n  }\r\n\r\n  /**\r\n   * @param {object} adSlot the AdSlot\r\n   * @returns {boolean|*}\r\n   */\r\n  shouldSendRequestToDfp(adSlot) {\r\n    // Conflict management check\r\n    return this.conflictResolver.isBlocked(adSlot.id) === false &&\r\n      // Valid Referrer check\r\n      adSlot.isWhitelisted() &&\r\n      // Not in referrer Blacklist\r\n      adSlot.isBlacklisted() === false &&\r\n      this.shouldDisplayAdAfterAdBlockRemoval(adSlot) &&\r\n      //  if a paywall pop-up is shown And the number is 12 or more - SHOW MAAVRON\r\n      this.shouldDisplayAdMaavaronAfterPayWallBanner(adSlot) &&\r\n      // Responsive: breakpoint contains ad?\r\n      this.doesBreakpointContainAd(adSlot) &&\r\n      // check in case of Smartphoneapp\r\n      this.haveValidCookieForSmartphoneapp() &&\r\n      // Targeting check (userType vs. slotTargeting)\r\n      this.doesUserTypeMatchBannerTargeting(adSlot) &&\r\n      // Impressions Manager check (limits number of impressions per slot)\r\n      this.user.impressionManager.reachedQuota(adSlot.id) === false;\r\n  }\r\n\r\n  shouldDisplayAdAfterAdBlockRemoval(adSlot) {\r\n    return !(this.config.adBlockRemoved === true &&\r\n    (adSlot.type === adTypes.maavaron ||\r\n    adSlot.type === adTypes.popunder));\r\n  }\r\n\r\n  shouldDisplayAdMaavaronAfterPayWallBanner(adSlot) {\r\n    let shouldDisplay = true;\r\n    if (this.config.site === 'haaretz' && adSlot.type === adTypes.maavaron) {\r\n      try {\r\n        const paywallBanner = JSON.parse(window.localStorage.getItem('_cobj'));\r\n        shouldDisplay = !paywallBanner || ((paywallBanner.mc && paywallBanner.mc >= 12) ||\r\n                          (paywallBanner.nextslotLocation &&\r\n                          !paywallBanner.nextslotLocation.includes('pop')));\r\n      }\r\n      catch (err) {\r\n        /* eslint-disable no-console*/\r\n        console.error('ERROR ON shouldDisplayAdMaavaronAfterPayWallBanner');\r\n        /* eslint-enable no-console*/\r\n      }\r\n    }\r\n    return shouldDisplay;\r\n  }\r\n\r\n  /**\r\n   * Check whether or not an ad slot should appear for the current user type\r\n   * @param {String} adSlotOrTarget the adSlot to check or the target as a string\r\n   * @returns {boolean} true iff the slot should appear for the user type\r\n   */\r\n\r\n  haveValidCookieForSmartphoneapp() {\r\n    return this.config.isValidForsmartPhone;\r\n  }\r\n\r\n  /**\r\n   * Check whether or not an ad slot should appear for the current user type\r\n   * @param {String} adSlotOrTarget the adSlot to check or the target as a string\r\n   * @returns {boolean} true iff the slot should appear for the user type\r\n   */\r\n  doesUserTypeMatchBannerTargeting(adSlotOrTarget) {\r\n    const userType = this.user.type;\r\n    const adTarget = typeof adSlotOrTarget === 'string' ? adSlotOrTarget : adSlotOrTarget.target;\r\n\r\n    switch (adTarget) {\r\n      case adTargets.all : return true;\r\n      case adTargets.nonPaying :\r\n        return userType === userTypes.anonymous || userType === userTypes.registered;\r\n      case adTargets.anonymous : return userType === userTypes.anonymous;\r\n      case adTargets.registered : return userType === userTypes.registered;\r\n      case adTargets.paying : return userType === userTypes.payer;\r\n      case adTargets.digitalOnly : return userType === userTypes.payer;\r\n      case adTargets.digitalAndPrint : return userType === userTypes.payer;\r\n      default: return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Report to the AdManager that a breakpoint has been switched (passed from one break to\r\n   * another). Should there be a responsive slot with a\r\n   * @param {Breakpoint} breakpoint - the breakpoint that is currently being displayed\r\n   * @returns {Integer} affected - the number of adSlots affected by the change\r\n   */\r\n  switchedToBreakpoint(breakpoint) {\r\n    if (!breakpoint) {\r\n      throw new Error('Missing argument: a call to switchedToBreakpoint must have an breakpoint');\r\n    }\r\n    let count = 0;\r\n    for (const adSlotKey of this.adSlots.keys()) {\r\n      const adSlot = this.adSlots.get(adSlotKey);\r\n      if (adSlot.responsive === true && adSlot.lastResolvedWithBreakpoint) {\r\n        if (adSlot.lastResolvedWithBreakpoint !== breakpoint) {\r\n          adSlot.refresh();\r\n          count++;\r\n        }\r\n      }\r\n    }\r\n    return count;\r\n  }\r\n\r\n  /**\r\n   * Checks whether an adSlot is defined for a given breakpoint (Default: current breakpoint)\r\n   * @param {AdSlot} adSlot - the adSlot to check.\r\n   * @param {Breakpoint} [breakpoint=currentBreakpoint] - the breakpoint to check this ad in.\r\n   * @returns {boolean} true iff the adSlot is defined for the given breakpoint.\r\n   */\r\n  doesBreakpointContainAd(adSlot, breakpoint = getBreakpoint()) {\r\n    if (!adSlot) {\r\n      throw new Error('Missing argument: a call to doesBreakpointContainAd must have an adSlot');\r\n    }\r\n    let containsBreakpoint = true;\r\n    if (adSlot.responsive === true) {\r\n      const mapping = adSlot.responsiveAdSizeMapping[getBreakpointName(breakpoint)];\r\n      if (Array.isArray(mapping) === false) {\r\n        throw new Error(`Invalid argument: breakpoint:${breakpoint} doesn't exist!`, this);\r\n      }\r\n      containsBreakpoint = mapping.length > 0 && !arraysEqual(mapping, [[0, 0]]);\r\n    }\r\n    return containsBreakpoint;\r\n  }\r\n\r\n  /**\r\n   * Initializes the callback from the 'slotRenderEnded' event for each slot\r\n   */\r\n  initSlotRenderedCallback() {\r\n    if (window.googletag && window.googletag.apiReady) {\r\n      const pubads = window.googletag.pubads();\r\n      pubads.addEventListener('slotRenderEnded', event => {\r\n        const id = event.slot.getAdUnitPath().split('/')[3];\r\n        const isEmpty = event.isEmpty;\r\n        const resolvedSize = event.size;\r\n        // console.log('slotRenderEnded for slot',id,' called @',window.performance.now());\r\n        if (this.adSlots.has(id)) {\r\n          const adSlot = this.adSlots.get(id);\r\n          adSlot.lastResolvedSize = resolvedSize;\r\n          adSlot.lastResolvedWithBreakpoint = getBreakpoint();\r\n          if (isEmpty) {\r\n            adSlot.lastResolvedSize = ConflictResolver.EMPTY_SIZE;\r\n            adSlot.hide();\r\n            this.releaseSlotDependencies(adSlot);\r\n          }\r\n          else {\r\n            this.releaseSlotDependencies(adSlot, adSlot.lastResolvedSize);\r\n          }\r\n          this.user.impressionManager.registerImpression(`${adSlot.id}${this.config.department}`);\r\n          this.user.impressionManager.registerImpression(`${adSlot.id}_all`);\r\n        }\r\n        else {\r\n          /*\r\n           console.error(`Cannot find an adSlot with id: ${id} - Ad Unit path is\r\n           ${event.slot.getAdUnitPath()}`);\r\n           */\r\n        }\r\n      });\r\n    }\r\n    else {\r\n      throw new Error('googletag api was not ready when \\'initSlotRenderedCallback\\' was called!');\r\n    }\r\n  }\r\n\r\n  releaseSlotDependencies(adSlot) {\r\n    try {\r\n      const id = adSlot.id;\r\n      this.conflictResolver.updateResolvedSlot(id, adSlot.lastResolvedSize);\r\n      if (this.conflictResolver.isBlocking(id)) {\r\n        // Hide all blocked adSlots\r\n        for (const blockedSlot of this.conflictResolver.getBlockedSlotsIds(id)) {\r\n          if (this.conflictResolver.isBlocked(blockedSlot)) {\r\n            if (this.adSlots.has(blockedSlot)) {\r\n              this.adSlots.get(blockedSlot).hide();\r\n            }\r\n          }\r\n        }\r\n        // Show the non blocked\r\n        for (const deferredSlotKey of this.conflictResolver.deferredSlots.keys()) {\r\n          const deferredAdSlot = this.adSlots.get(deferredSlotKey);\r\n          if (deferredAdSlot && this.shouldSendRequestToDfp(deferredAdSlot)) {\r\n            this.conflictResolver.deferredSlots.delete(deferredSlotKey);\r\n            if (deferredAdSlot.deferredSlot) {\r\n              deferredAdSlot.defineSlot();\r\n              deferredAdSlot.deferredSlot = false;\r\n            }\r\n            deferredAdSlot.show();\r\n          }\r\n        }\r\n      }\r\n    }\r\n    catch (err) {\r\n      /* eslint-disable no-console*/\r\n      console.error(`Cannot updateSlotDependencies for adSlot: ${adSlot.id}`);\r\n      /* eslint-enable no-console*/\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initializes page-level targeting params.\r\n   */\r\n  initGoogleTargetingParams() {\r\n    if (window.googletag && window.googletag.apiReady) {\r\n      // Returns a reference to the pubads service.\r\n      const pubads = googletag.pubads();\r\n      // Environment targeting (dev, test, prod)\r\n      if (this.config.environment) {\r\n        pubads.setTargeting('stg', [this.config.environment]);\r\n      }\r\n\r\n      // User targeting\r\n      if (this.user.type) {\r\n        pubads.setTargeting('UserType', [this.user.type]);\r\n      }\r\n      if (this.user.htz_type) {\r\n        pubads.setTargeting('htz_user_type', [this.user.htz_type]);\r\n      }\r\n      if (this.user.tm_type) {\r\n        pubads.setTargeting('tm_user_type', [this.user.tm_type]);\r\n      }\r\n      if (this.user.hdc_type) {\r\n        pubads.setTargeting('hdc_user_type', [this.user.hdc_type]);\r\n      }\r\n      if (this.user.age) {\r\n        pubads.setTargeting('age', [this.user.age]);\r\n      }\r\n      if (this.user.gender) {\r\n        pubads.setTargeting('urgdr', [this.user.gender]);\r\n      }\r\n\r\n      // Context targeting\r\n      if (this.config.articleId) {\r\n        pubads.setTargeting('articleId', [this.config.articleId]);\r\n      }\r\n      if (this.config.gStatCampaignNumber && this.config.gStatCampaignNumber !== -1) {\r\n        pubads.setTargeting('gstat_campaign_id', [this.config.gStatCampaignNumber]);\r\n      }\r\n      if (this.config.proposalNumber) {\r\n        pubads.setTargeting('proposaltype', [this.config.proposalNumber]);\r\n      }\r\n      if (this.config.pageType) {\r\n        pubads.setTargeting('pageType', [this.config.pageType]);\r\n      }\r\n      if (this.config.isWriterAlerts) {\r\n        pubads.setTargeting('WriterAlerts', ['true']);\r\n      }\r\n      // UTM targeting\r\n      /* eslint-disable no-underscore-dangle */\r\n      if (this.config.utm_.content) {\r\n        pubads.setTargeting('utm_content', [this.config.utm_.content]);\r\n      }\r\n      if (this.config.utm_.source) {\r\n        pubads.setTargeting('utm_source', [this.config.utm_.source]);\r\n      }\r\n      if (this.config.utm_.medium) {\r\n        pubads.setTargeting('utm_medium', [this.config.utm_.medium]);\r\n      }\r\n      if (this.config.utm_.campaign) {\r\n        pubads.setTargeting('utm_campaign', [this.config.utm_.campaign]);\r\n      }\r\n      /* eslint-enable no-underscore-dangle */\r\n      // AdBlock removal\r\n      if (this.config.adBlockRemoved) {\r\n        pubads.setTargeting('adblock_removed', [this.config.adBlockRemoved]);\r\n      }\r\n      // University targeting - triggered via cookie\r\n      if (this.config.wifiLocation) {\r\n        pubads.setTargeting('wifi', [this.config.wifiLocation]);\r\n      }\r\n      if (this.config.tags && Array.isArray(this.config.tags)) {\r\n        pubads.setTargeting('tags', [...this.config.tags]);\r\n      }\r\n\r\n      if (this.user.sso && this.user.sso.userId && this.config.ssoGroupKey) {\r\n        pubads.setTargeting(this.config.ssoGroupKey, this.user.sso.userId);\r\n      }\r\n      if (this.config.anonymousId) {\r\n        const anonymousIdKeyName = 'anonymousIdKey';\r\n        pubads.setTargeting(anonymousIdKeyName, this.config.anonymousId);\r\n      }\r\n      // Ads Centering\r\n      pubads.setCentering(true);\r\n    }\r\n    else {\r\n      throw new Error('googletag api was not ready when \\'initGoogleTargetingParams\\' was called!');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initializes googletag services.\r\n   */\r\n  initGoogleGlobalSettings() {\r\n    if (window.googletag && window.googletag.apiReady) {\r\n      const googleGlobalSettings = this.config.googleGlobalSettings;\r\n      // Enable GET parameter overrides\r\n      if (window.location.search) {\r\n        const search = window.location.search;\r\n        if (search.indexOf('sraon') > 0) {\r\n          console.log('Single Request Mode: active'); // eslint-disable-line no-console\r\n          googleGlobalSettings.enableSingleRequest = true;\r\n        }\r\n        else if (search.indexOf('sraoff') > 0) {\r\n          console.log('Single Request Mode: disabled');// eslint-disable-line no-console\r\n          googleGlobalSettings.enableSingleRequest = false;\r\n        }\r\n        if (search.indexOf('asyncrenderingon') > 0) {\r\n          console.log('Async rendering mode: active'); // eslint-disable-line no-console\r\n          googleGlobalSettings.enableAsyncRendering = true;\r\n        }\r\n        else if (search.indexOf('asyncrenderingonoff') > 0) {\r\n          console.log('Sync rendering mode: active');// eslint-disable-line no-console\r\n          googleGlobalSettings.enableAsyncRendering = false;\r\n        }\r\n      }\r\n      // Google services activation\r\n      if (googleGlobalSettings.enableSingleRequest === true) {\r\n        googletag.pubads().enableSingleRequest();\r\n      }\r\n      if (googleGlobalSettings.enableAsyncRendering === true) {\r\n        googletag.pubads().enableAsyncRendering();\r\n      }\r\n      else {\r\n        googletag.pubads().enableSyncRendering();\r\n      }\r\n      // Enables all GPT services that have been defined for ad slots on the page.\r\n      googletag.enableServices();\r\n    }\r\n    else {\r\n      throw new Error('googletag api wasn\\'t ready when \\'initGoogleGlobalSettings\\' was called!');\r\n    }\r\n  }\r\n}\r\n","/* globals googletag */\nimport AdManager from '../src/objects/adManager';\nimport globalConfig from './globalConfig';\nimport { getBreakpoint, debounce } from '../src/utils/breakpoints';\n\nconst defaultConfig = globalConfig || {};\nconst resizeTimeout = 250;\n\nexport default class DFP {\n\n  constructor(config) {\n    this.config = Object.assign({}, defaultConfig, config);\n    this.wasInitialized = false;\n    this.initStarted = false;\n    this.breakpoint = getBreakpoint();\n    this.initWindowResizeListener();\n  }\n\n  /**\n   * This part of the object's construction is dependent on the call to 'init'\n   */\n  resumeInit() {\n    try {\n      this.adManager = this.adManager || new AdManager(this.config);\n    }\n    catch (err) {\n      console.error(err); // eslint-disable-line no-console\n    }\n  }\n\n  /**\n   * initializes the 'googletag' global namespace and add the\n   * google publish tags library to the page\n   * @returns {Promise} that resolves to true once the googletag api is ready to use\n   * (googletag.apiReady = true)\n   */\n  initGoogleTag() {\n    const dfpThis = this;\n    return new Promise((resolve, reject) => {\n      if (dfpThis.initStarted === true) {\n        googletag.cmd.push(() => {\n          dfpThis.wasInitialized = true;\n          resolve(dfpThis);\n        });\n      }\n      else {\n        dfpThis.initStarted = true;\n        // set up a place holder for the gpt code downloaded from google\n        window.googletag = window.googletag || {};\n\n        // this is a command queue used by GPT any methods added to it will be\n        // executed when GPT code is available, if GPT is already available they\n        // will be executed immediately\n        window.googletag.cmd = window.googletag.cmd || [];\n        // load google tag services JavaScript\n        (() => {\n          const tag = window.document.createElement('script');\n          tag.async = true;\n          tag.type = 'text/javascript';\n          // Supports both https and http\n          tag.setAttribute('src', '//www.googletagservices.com/tag/js/gpt.js');\n          const node = window.document.getElementsByTagName('script')[0];\n          tag.addEventListener('load', () => {\n            dfpThis.resumeInit();\n            googletag.cmd.push(() => {\n              dfpThis.wasInitialized = true;\n              resolve(this);\n            });\n          });\n          tag.addEventListener('error', (error) => {\n            dfpThis.wasInitialized = false;\n            reject(error);\n          });\n          node.parentNode.insertBefore(tag, node);\n        })();\n      }\n    });\n  }\n\n  /**\n   *  Returns true iff googletag was properly initialized on the page\n   * @returns {boolean}\n   */\n  isGoogleTagReady() {\n    if (this.wasInitialized === true || (window.googletag && window.googletag.apiReady)) {\n      this.wasInitialized = true;\n    }\n    return this.wasInitialized;\n  }\n\n  /**\n   * Initializes the window resize listener to support responsive ad refreshes\n   */\n  initWindowResizeListener() {\n    const dfpThis = this;\n    function onResize() {\n      const currentBreakpoint = getBreakpoint();\n      if (dfpThis.breakpoint !== currentBreakpoint) {\n        dfpThis.breakpoint = currentBreakpoint;\n        if (dfpThis.adManager) {\n          dfpThis.adManager.refreshAllSlots();\n        }\n        else {\n          throw new Error('initWindowResizeListener error - adManager instance is not available');\n        }\n      }\n    }\n    const debouncedFunction = debounce(onResize, resizeTimeout);\n    window.onresize = debouncedFunction;\n  }\n}\n","import DFP from './dfp';\nimport globalConfig from './globalConfig';\n// import { version as v } from './version';\n\nconst v = require('./version');\n\n// DFP version is based on the package.json\nDFP.version = v || 'VERSION';\n\n/*\n // Only for development mode\n if ( process.env.NODE_ENV !== 'production' ) {\n DFP.dev = '123';\n }\n */\n\nexport const config = globalConfig;\nexport const version = DFP.version;\nexport default DFP;\n"]}