{"version":3,"sources":["../src/utils/cookieUtils.js","../src/globalConfig.js","../src/utils/time.js","../src/utils/breakpoints.js","../src/objects/impressionsManager.js","../src/utils/arrays.js","../src/objects/adSlot.js","../jspm_packages/npm/systemjs-plugin-babel@0.0.17/babel-helpers/classCallCheck.js","../jspm_packages/npm/systemjs-plugin-babel@0.0.17/babel-helpers/createClass.js","../jspm_packages/npm/systemjs-plugin-babel@0.0.17/babel-helpers/toConsumableArray.js","../src/objects/user.js","../src/objects/conflictResolver.js","../src/objects/adManager.js","../src/dfp.js","../src/index.js"],"names":[],"mappings":"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","file":"dfp.es6.js","sourcesContent":["/**\r\n * Htz-cookie-util\r\n * @module htzCookieUtil\r\n * @author Elia Grady elia.grady@haaretz.co.il\r\n * @license MIT\r\n */\r\n\r\n/**\r\n * Translates Key-Value string into a convenient map.\r\n * @param {String} string String in format of \"key<operator>value<separator>.....\"\r\n * @param {object} options object for overriding defaults:\r\n * options.separator is a String or regExp that separates between each key value pairs\r\n * (default is ';'). options.operator is a String or regExp that separates between each key\r\n * and value within a pair (default is '=').\r\n * @returns {object} a map object, with key-value mapping according to the passed configuration.\r\n */\r\nfunction stringToMap(string,\r\n  { separator = ';', operator = '=' } = {}) {\r\n  const map = {};\r\n  const itemsArr = string.split(separator);\r\n  itemsArr.forEach(element => {\r\n    if (typeof element === 'string') {\r\n      const keyValue = element.split(operator);\r\n      if (keyValue.length === 2) {\r\n        try {\r\n          map[keyValue[0]] = decodeURIComponent(keyValue[1]);\r\n        }\r\n        catch (e) {\r\n          // Do nothing, malformed URI\r\n        }\r\n      }\r\n    }\r\n  });\r\n  return map;\r\n}\r\nexport const ssoKey = window.location.hostname.indexOf('haaretz.com') > -1 ? 'engsso' : 'tmsso';\r\n\r\n// Translates Cookie string into a convenient map.\r\nexport default function getCookieAsMap() {\r\n  const map = stringToMap(document.cookie, { separator: /;\\s?/ });\r\n  if (typeof map.tmsso === 'string') {\r\n    map.tmsso = stringToMap(map.tmsso, { separator: ':' });\r\n  }\r\n  if (typeof map.engsso === 'string') {\r\n    map.engsso = stringToMap(map.engsso, { separator: ':' });\r\n  }\r\n  return map;\r\n}\r\n","/* global dfpConfig */\nimport getCookieAsMap, { ssoKey } from './utils/cookieUtils';\n// globalConfig for DFP\nlet dfpBaseConf;\ntry {\n  dfpBaseConf = window.JSON.parse(document.getElementById('dfpConfig').textContent);\n}\ncatch (err) {\n  dfpBaseConf = window.dfpConfig;\n}\nconst dfpConfig = Object.assign({\n  get referrer() {\n    return document.referrer ? document.referrer : '';\n  },\n  get isMobile() {\n    return (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i\n      .test(window.navigator.userAgent || ''));\n  },\n  /**\n   * Returns true iff the loaded page is the homepage (no inner path)\n   * @returns {boolean}\n   */\n  get isHomepage() {\n    return window.location.pathname === '/' || this.environment === 3; // 'prod'\n  },\n  get department() {\n    return this.isHomepage ? '_homepage' : '_section';\n  },\n  /**\n   * returns the domain the page was loaded to. i.e: 'haaretz.co.il', 'haaretz.com'\n   * @returns {string} the domain name from the windows's location hostname property\n   */\n  get domain() {\n    const regexMatch = /([\\d|\\w]+)(\\.co\\.il|\\.com)(.*)?/.exec(window.location.hostname);\n    const result = regexMatch ? regexMatch[0] : window.location.hostname;\n    return result;\n  },\n  /**\n   * Returns an array of concatenated paths, separated by a dot.\n   * For example, for the URL:\n   * http://www.haaretz.co.il/news/world/america/us-election-2016/LIVE-1.2869045\n   * the path is '/news/world/america/us-election-2016/LIVE-1.2869045'.\n   * This function takes the directories ['news', 'world', 'america', 'us-election-2016']\n   * and converts it to the following format:\n   * ['.news', '.news.world', '.news.world.america', '.news.world.america.us-election-2016']\n   * This denotes the path configuration for the given adSlot\n   * non articles (sections) will be given a '0' - no articleId value for targeting purposes)\n   * @returns {Array.<T>} an array of path names\n   */\n  get path() {\n    let sectionArray = this.articleId && this.articleId !== '0' ?\n      window.location.pathname.split('/').slice(1, -1) :\n      window.location.pathname.split('/').slice(1);\n    sectionArray = sectionArray.filter(path =>\n    path !== 'wwwMobileSite' && path !== 'whtzMobileSite');\n    return sectionArray\n      .map(section => `.${section}`)\n      .map((section, index, arr) => arr.slice(0, index + 1)\n        .reduce((last, current) => last.concat(current)));\n  },\n  /**\n   * Returns a string representation for the name of the site\n   * @return {*|string}\n   */\n  get site() {\n    let site;\n    if (window.location.hostname.indexOf('haaretz.co.il') > -1) {\n      site = 'haaretz';\n    }\n    else if (window.location.hostname.indexOf('themarker.com') > -1) {\n      site = 'themarker';\n    }\n    else if (window.location.hostname.indexOf('mouse.co.il') > -1) {\n      site = 'mouse';\n    }\n    return site || 'haaretz';\n  },\n  /**\n   * Returns the current environment targeting param, if such is defined.\n   * @returns {number} targeting param, 1 for local development, 2 for test servers and 3 for prod.\n   * May return undefined if no targeting is specified.\n   */\n  get environment() {\n    const env = {\n      dev: 1,\n      test: 2,\n      prod: 3,\n    };\n    return window.location.port === '8080' ? env.dev :\n      (window.location.hostname.indexOf('pre.haaretz.co.il') > -1\n      || window.location.hostname.indexOf('tmtest.themarker.com') > -1\n      || window.location.hostname.indexOf('prodmouse.mouse.co.il') > -1) ? env.test :\n        (window.location.pathname.indexOf('/cmlink/Haaretz.HomePage') > -1\n        || window.location.pathname.indexOf('/cmlink/TheMarker.HomePage') > -1\n        || window.location.pathname.indexOf('/cmlink/Mouse.HomePage') > -1)\n          ? env.prod : undefined;\n  },\n  /**\n   * Returns the articleIf if on an article page, or null otherwise\n   * @returns {string} an articleId string from the pathname, or 0 if not found\n   */\n  get articleId() {\n    const articleIdMatch = /\\d\\.\\d+/g.exec(window.location.pathname);\n    let articleId = '0';\n    if (articleIdMatch) {\n      articleId = articleIdMatch.pop(); // Converts [\"1.23145\"] to \"1.23145\"\n    }\n    return articleId;\n  },\n  utm_: {\n    get content() {\n      return this.getUrlParam('utm_content');\n    },\n    get source() {\n      return this.getUrlParam('utm_source');\n    },\n    get medium() {\n      return this.getUrlParam('utm_medium');\n    },\n    get campaign() {\n      return this.getUrlParam('utm_campaign');\n    },\n    getUrlParam(key) {\n      const results = RegExp(`(${key})(=)([^&\"]+)`).exec(window.location.search);\n      return results && results[3] ? results[3] : undefined;\n    },\n  },\n  get adBlockRemoved() {\n    let adBlockRemoved = false;\n    try {\n      if (localStorage.getItem('adblock_removed')) {\n        adBlockRemoved = true;\n      }\n    }\n    catch (err) {\n      // do nothing\n    }\n    return adBlockRemoved;\n  },\n  get isWriterAlerts() {\n    return (location.search.indexOf('writerAlerts=true') > -1);\n  },\n  get wifiLocation() {\n    let wifiLocation = '';\n    const cookieMap = getCookieAsMap();\n    try {\n      if (cookieMap && cookieMap._htzwif) { // eslint-disable-line no-underscore-dangle\n        wifiLocation = (cookieMap._htzwif === 'arcaffe') // eslint-disable-line no-underscore-dangle\n          ? 'ArCafe' : 'university';\n      }\n    }\n    catch (err) {\n      // do nothing\n    }\n    return wifiLocation;\n  },\n  get isValidForsmartPhone() {\n    let validForAds = true;\n    const PageUrl = window.location.href;\n    const isSmartphoneapp = PageUrl.match('haaretzsmartphoneapp');\n    const cookieMap = getCookieAsMap();\n    try {\n      if (  isSmartphoneapp) {\n        if (!cookieMap || !(cookieMap.NotPayer || cookieMap.HtzPusr)) { // eslint-disable-line no-underscore-dangle\n          validForAds = false;\n        }\n      }\n    }\n    catch (err) {\n      // do nothing\n    }\n    return validForAds;\n  },\n  get gStatCampaignNumber() {\n    let gstatCampaign;\n    try {\n      gstatCampaign = localStorage.getItem('GstatCampaign') ?\n        JSON.parse(localStorage.getItem('GstatCampaign')) : undefined;\n    }\n    catch (err) {\n      /* In case of thrown 'SecurityError' or 'QuotaExceededError',\n       the variable should be undefined */\n      gstatCampaign = undefined;\n    }\n    return gstatCampaign ? gstatCampaign.CampaignNumber : undefined;\n  },\n  get proposalNumber() {\n    let proposal;\n    try {\n      proposal = localStorage.getItem('proposaltype') ?\n        localStorage.getItem('proposaltype') : undefined;\n    }\n    catch (err) {\n      /* In case of thrown 'SecurityError' or 'QuotaExceededError',\n       the variable should be undefined */\n      proposal = undefined;\n    }\n    return proposal;\n  },\n  adSlotConfig: {\n    'haaretz.co.il.example.slot': {\n      id: 'slotId',\n      // path : \"/network/base/slotId/slotId_subsection\", Will be calculated from AdManager\n      responsive: true,\n      adSizeMapping: [['width1', 'height1'], ...['widthN', 'heightN']],\n      priority: 'normal',\n      fluid: false,\n      responsiveAdSizeMapping: {\n        xxs: [['width1', 'height1'], ...['widthN', 'heightN']],\n        xs: [['width1', 'height1'], ...['widthN', 'heightN']],\n        s: [['width1', 'height1'], ...['widthN', 'heightN']],\n        m: [['width1', 'height1'], ...['widthN', 'heightN']],\n        l: [['width1', 'height1'], ...['widthN', 'heightN']],\n        xl: [['width1', 'height1'], ...['widthN', 'heightN']],\n        xxl: [['width1', 'height1'], ...['widthN', 'heightN']],\n      },\n      blacklistReferrers: 'comma, delimited, blacklisted, referrer, list',\n      whitelistReferrers: 'comma, delimited, referrer, list',\n    },\n  },\n  adManagerConfig: {\n    network: '9401',\n    adUnitBase: 'haaretz.co.il_Web',\n  },\n  breakpointsConfig: {\n    get breakpoints() {\n      // Override in VM from backend to control this toggle.\n      let breakpoints;\n      switch (dfpConfig.googleGlobalSettings.breakpointType) {\n        case 'type1': breakpoints = this.breakpoints1; break;\n        case 'type2': breakpoints = this.breakpoints2; break;\n        case 'type3': breakpoints = this.breakpoints3; break;\n        case 'type4': breakpoints = this.breakpoints4; break;\n        default: breakpoints = this.breakpoints1;\n      }\n      return breakpoints;\n    },\n    // Type 1\n    breakpoints1: {\n      xxs: 600,\n      xs: 761,\n      s: 993,\n      m: 1009,\n      l: 1291,\n      xl: 1600,\n      xxl: 1900,\n    },\n    // Type 2\n    breakpoints2: {\n      xxs: 600,\n      xs: 1000,\n      s: 1150,\n      m: 1281,\n      l: 1600,\n      xl: 1920,\n      xxl: 1920,\n    },\n    // Type 3\n    breakpoints3: {\n      xxs: 100,\n      xs: 480,\n      s: 600,\n      m: 768,\n      l: 1024,\n      xl: 1280,\n      xxl: 1900,\n    },\n    // Type 4\n    breakpoints4: {\n      xxs: 600,\n      xs: 768,\n      s: 1024,\n      m: 1280,\n      l: 1900,\n      xl: 1900,\n      xxl: 1900,\n    },\n  },\n  userConfig: {\n    type: undefined,\n    age: undefined,\n    gender: undefined,\n  },\n  conflictManagementConfig: {\n    'blocking.ad.unit.name': [\n      {\n        onsize: '1280x200,970x250,3x3',\n        avoid: 'blocked.ad.unit.name',\n      },\n      {\n        onsize: '1280x200,970x250,3x3',\n        avoid: 'blocked.ad.unit.name',\n      },\n    ],\n  },\n  impressionManagerConfig: {\n    'ad.unit.name': {\n      target: 'all|section|homepage',\n      frequency: '$1/$2(day|hour)',\n      exposed: 0,\n      expires: (new Date()).getTime(),\n    },\n  },\n  googleGlobalSettings: {\n    enableSingleRequest: true,\n    enableAsyncRendering: true,\n    refreshIntervalTime: 1000,\n    breakpointType: 'type1',\n  },\n  sso: ssoKey,\n\n}, dfpBaseConf);\n\nexport default dfpConfig;\n","/**\r\n * Helper function. Adds N hours to a given date object.\r\n * @param {Date} date - the date to derive from\r\n * @param {Number} hours - the amount of hours to add, in whole numbers\r\n * @throws {SyntaxError} Will throw if the 'date' param is not provided\r\n * @throws {SyntaxError} Will throw if the 'hours' param is not provided\r\n * @throws {TypeError} Will throw if the 'hours' param is not a valid integer\r\n * @returns {Date} date - the new date, derived from adding the given hours\r\n */\r\nexport function addHours(date, hours) {\r\n  if (!date) {\r\n    throw new SyntaxError('addHours called without a required \\'date\\' parameter!');\r\n  }\r\n  if (!hours) {\r\n    throw new SyntaxError('addHours called without a required \\'hours\\' parameter!');\r\n  }\r\n  else if (isNaN(parseInt(hours, 10))) {\r\n    throw new TypeError('addHours called with an invalid integer \\'hours\\' parameter!');\r\n  }\r\n  const result = new Date(date);\r\n  result.setHours(result.getHours() + parseInt(hours, 10));\r\n  return result;\r\n}\r\n\r\n/**\r\n * Helper function. Adds N days to a given date object.\r\n * @param {Date} date - the date to derive from\r\n * @param {Integer} days - the amount of days to add\r\n * @throws {SyntaxError} Will throw if the 'date' param is not provided\r\n * @throws {SyntaxError} Will throw if the 'days' param is not provided\r\n * @throws {TypeError} Will throw if the 'hours' param is not a valid integer\r\n * @returns {Date} date - the new date, derived from adding the given days\r\n */\r\nexport function addDays(date, days) {\r\n  if (!date) {\r\n    throw new SyntaxError('addDays called without a required \\'date\\' parameter!');\r\n  }\r\n  if (!days) {\r\n    throw new SyntaxError('addDays called without a required \\'days\\' parameter!');\r\n  }\r\n  else if (isNaN(parseInt(days, 10))) {\r\n    throw new TypeError('addDays called with an invalid integer \\'days\\' parameter!');\r\n  }\r\n  const result = new Date(date);\r\n  result.setDate(result.getDate() + parseInt(days, 10));\r\n  return result;\r\n}\r\n","import globalConfig from '../globalConfig';\r\n\r\nconst breakpoints = globalConfig.breakpointsConfig.breakpoints;\r\n\r\n/**\r\n * Returns a function, that, as long as it continues to be invoked, will not\r\n * be triggered. The function will be called after it stops being called for\r\n * N milliseconds. If `immediate` is passed, trigger the function on the\r\n * leading edge, instead of the trailing.\r\n * @param { function } func - the function to run\r\n * @param { number } wait - the timeout period to avoid running the function\r\n * @param { boolean } immediate - leading edge modifier\r\n * @returns {function } the debounced function\r\n */\r\nexport function debounce(func, wait = 100, immediate) {\r\n  let timeout;\r\n  return function debounced() {\r\n    const context = this;\r\n    const args = arguments;// eslint-disable-line prefer-rest-params\r\n    const later = () => {\r\n      timeout = null;\r\n      if (!immediate) func.apply(context, args);\r\n    };\r\n    const callNow = immediate && !timeout;\r\n    clearTimeout(timeout);\r\n    timeout = setTimeout(later, wait);\r\n    if (callNow) func.apply(context, args);\r\n  };\r\n}\r\n\r\n/**\r\n * Returns the current breakpoint that is closest to the window's width\r\n * @returns {number} the break that the current width represents\r\n */\r\nexport function getBreakpoint() {\r\n  let breakpoint;\r\n  const windowWidth = window.innerWidth\r\n    || document.documentElement.clientWidth\r\n    || document.body.clientWidth;\r\n  switch (true) {\r\n    case windowWidth < breakpoints.xs: breakpoint = breakpoints.xxs; break;\r\n    case windowWidth < breakpoints.s: breakpoint = breakpoints.xs; break;\r\n    case windowWidth < breakpoints.m: breakpoint = breakpoints.s; break;\r\n    case windowWidth < breakpoints.l: breakpoint = breakpoints.m; break;\r\n    case windowWidth < breakpoints.xl: breakpoint = breakpoints.l; break;\r\n    case windowWidth < breakpoints.xxl: breakpoint = breakpoints.xl; break;\r\n    default: breakpoint = breakpoints.xxl;\r\n  }\r\n  return breakpoint;\r\n}\r\n/**\r\n * Returns the current breakpoint that is closest to the window's width\r\n * @param {number} breakpoint - the breakpoint label enumerator that the current width represents\r\n * (yield with a getBreakpoint() call or passed manually )\r\n * @returns {string} breakpoint - the breakpoint label that the current width represents,\r\n * as a string\r\n */\r\nexport function getBreakpointName(breakpoint) {\r\n  let resultBreakpoint;\r\n  const windowWidth = breakpoint || window.innerWidth;\r\n  switch (true) {\r\n    case windowWidth < breakpoints.xs: resultBreakpoint = 'xxs'; break;\r\n    case windowWidth < breakpoints.s: resultBreakpoint = 'xs'; break;\r\n    case windowWidth < breakpoints.m: resultBreakpoint = 's'; break;\r\n    case windowWidth < breakpoints.l: resultBreakpoint = 'm'; break;\r\n    case windowWidth < breakpoints.xl: resultBreakpoint = 'l'; break;\r\n    case windowWidth < breakpoints.xxl: resultBreakpoint = 'xl'; break;\r\n    default: resultBreakpoint = 'xxl';\r\n  }\r\n  return resultBreakpoint;\r\n}\r\n","import globalConfig from '../globalConfig';\r\nimport { addHours, addDays } from '../utils/time';\r\nimport { debounce } from '../utils/breakpoints';\r\n\r\nexport const keys = {\r\n  impressions: 'impressions',\r\n  frequency: 'frequency',\r\n  /**\r\n   * [0] - full match\r\n   * [1] - impression count i.e: \"1\" | \"22\"\r\n   * [2] - impression expiry range quantifier  i.e: \"1\" | \"22\"\r\n   * [3] - impression expiry range unit i.e: \"day\" | \"hour\"\r\n   */\r\n  frequencyRegex: /(\\d+)\\/(\\d+)(day|hour)/,\r\n  expires: 'expires',\r\n  exposed: 'exposed',\r\n  target: 'target',\r\n  maxImpressions: 'maxImpressions',\r\n  hours: 'hour',\r\n  days: 'day',\r\n  adSlotId: 'id',\r\n};\r\n\r\nexport default class ImpressionsManager {\r\n\r\n  constructor(impressionManagerConfig) {\r\n    this.now = (new Date()).getTime(); // this date is used for comparisons only\r\n    this.config = Object.assign({}, impressionManagerConfig);\r\n    this.impressions = this.retrieveImpressionsData();\r\n    this.initImpressionMap();\r\n  }\r\n\r\n  retrieveImpressionsData() {\r\n    const impressions = this.migrateImpressionsData();\r\n    /*\r\n     Merge migrated data with new data\r\n     console.log('Migrated: ',impressions);\r\n     */\r\n    Object.keys(impressions).map((key, index) => {\r\n      impressions[key] = Object.assign({}, impressions[key], this.config[key]);\r\n      return this;\r\n    });\r\n    /*\r\n     console.log('Merged: ',impressions);\r\n     Filter out entries without frequency\r\n     */\r\n    for (const key in impressions) {\r\n      if ({}.hasOwnProperty.call(impressions, key)) {\r\n        if (!impressions[key][keys.frequency]) {\r\n          // console.log(`Removing ${key} - since it does not have a frequency`,impressions[key]);\r\n          delete impressions[key];\r\n        }\r\n      }\r\n    }\r\n    // console.log('Filtered: ',impressions);\r\n    return impressions;\r\n  }\r\n\r\n  migrateImpressionsData() {\r\n    let impressions;\r\n    let impressionsData;\r\n    try {\r\n      impressionsData = window.localStorage.getItem(keys.impressions);\r\n    }\r\n    catch (err) {\r\n      // In case of thrown 'SecurityError' or 'QuotaExceededError', the variable should be undefined\r\n      impressionsData = undefined;\r\n    }\r\n    try {\r\n      impressions = JSON.parse(impressionsData);\r\n    }\r\n    catch (err) {\r\n      // Here is where old impression data is converted to new format\r\n      impressions = {};\r\n      const oldImpressionsArray = impressionsData.split(';').filter(e => e);\r\n\r\n      oldImpressionsArray.forEach((impression) => {\r\n        try {\r\n          const adUnitImpression = impression.split(' = ');\r\n          const name = adUnitImpression[0];\r\n          const data = adUnitImpression[1];\r\n          const tmp = name.split('.');\r\n          let target = tmp.pop();\r\n          if (target && target === 'hp') {\r\n            target = 'homepage';\r\n          }\r\n          const slotId = tmp.join('.');\r\n          const id = `${slotId}_${target}`;\r\n          const exposed = parseInt(data.split('/')[0], 10) || 0;\r\n          const expires = parseInt(data.split('/')[1], 10) || this.now;\r\n          impressions[id] = {};\r\n          impressions[id][keys.adSlotId] = slotId;\r\n          impressions[id][keys.target] = target;\r\n          impressions[id][keys.exposed] = exposed;\r\n          impressions[id][keys.expires] = expires;\r\n        }\r\n        catch (err1) {\r\n          // console.log(`Failed converting impression: ${impression}`, err1);\r\n        }\r\n      });\r\n    }\r\n    return impressions || {};\r\n  }\r\n\r\n  /**\r\n   * Define the debounced version of the local storage save\r\n   */\r\n  saveImpressionsToLocalStorage() {\r\n    if (this.debouncedSave && typeof this.debouncedSave === 'function') {\r\n      this.debouncedSave();\r\n    }\r\n    else {\r\n      this.debouncedSave = debounce(this.saveImpressionsToLocalStorageImpl, 250, false);\r\n      this.debouncedSave();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Implementation of saving the impression map to localstorage\r\n   */\r\n  saveImpressionsToLocalStorageImpl() {\r\n    try {\r\n      localStorage.setItem(keys.impressions, JSON.stringify(this.impressions));\r\n    }\r\n    catch (err) {\r\n      /* In case of thrown 'SecurityError' or 'QuotaExceededError',\r\n       the operation should not break*/\r\n      console.error('localStorage isn\\'t available:', err); // eslint-disable-line no-console\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initializes the impression map based on the retrieved impressions and the global\r\n   * configuration.\r\n   */\r\n  initImpressionMap() {\r\n    Object.keys(this.config).map((key, index) => {\r\n      const adSlotId = key;\r\n      const slot = this.impressions[adSlotId];\r\n      let shouldUpdateExpiryDate = false;\r\n      // Case I: Existing slot (update)\r\n      if (slot) {\r\n        // Case I.I Existing slot, frequency has changed\r\n        if (this.config[adSlotId][keys.frequency] !== slot[keys.frequency]) {\r\n          // Updating the frequency will trigger a new expiry date\r\n          shouldUpdateExpiryDate = true;\r\n          this.impressions[adSlotId][keys.frequency] = this.config[adSlotId][keys.frequency];\r\n        } // Case I.II Existing slot, old expiry date\r\n        else if (this.now > slot[keys.expires]) {\r\n          // Old value that should trigger a new expiry date\r\n          shouldUpdateExpiryDate = true;\r\n        }\r\n      } // Case II: Non-existing slot (create new slot)\r\n      else {\r\n        this.initSlotFromConfig(adSlotId);\r\n      } // Finally, updates the expiry date (cases I.I and I.II)\r\n      if (shouldUpdateExpiryDate) {\r\n        this.updateExpiryDate(adSlotId);\r\n      }\r\n      return this;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Updates the expiry date of a slotName based on the configured slot frequency\r\n   * @param {String} slotName - the slotName to update.\r\n   */\r\n  updateExpiryDate(slotName) {\r\n    const now = new Date();\r\n    if (!(this.impressions[slotName] && this.impressions[slotName][keys.frequency])) {\r\n      throw new Error(`Unable to update expiry date for slot: ${slotName}\r\n      - this.impressions[slotName]:`, this.impressions[slotName]);\r\n    }\r\n    const frequencyMap = this.impressions[slotName][keys.frequency].match(keys.frequencyRegex);\r\n    now.setMilliseconds(0);\r\n    now.setSeconds(0);\r\n    now.setMinutes(0);\r\n    if (frequencyMap.indexOf(keys.days) > -1) {\r\n      now.setHours(0);\r\n    }\r\n    this.impressions[slotName][keys.expires] = (frequencyMap.indexOf(keys.days) > -1 ?\r\n      addDays(now, frequencyMap[2]) : addHours(now, frequencyMap[2])).getTime();\r\n\r\n    // Set max impressions:\r\n    this.impressions[slotName][keys.maxImpressions] = parseInt(frequencyMap[1], 10);\r\n    // Reset exposed\r\n    this.impressions[slotName][keys.exposed] = 0;\r\n  }\r\n\r\n  /**\r\n   * Initializes a non-existing slot from the passed global configuration for the slot\r\n   * @param {String} slotName - the name of the slot to create\r\n   */\r\n  initSlotFromConfig(slotName) {\r\n    const slot = this.impressions[slotName] || {};\r\n    slot[keys.frequency] = this.config[slotName][keys.frequency];\r\n    slot[keys.target] = this.config[slotName][keys.target];\r\n    slot[keys.exposed] = 0;\r\n    this.impressions[slotName] = slot;\r\n    this.updateExpiryDate(slotName);\r\n  }\r\n\r\n  /**\r\n   * Registers an impression for a given adSlot.\r\n   * @param {String} adSlotId - the adSlot id to register an impression for\r\n   * @returns {boolean} returns true iff the impression has been registered\r\n   */\r\n  registerImpression(adSlotId) {\r\n    if (adSlotId) {\r\n      const slot = this.impressions[adSlotId];\r\n      if (slot) {\r\n        const exposed = slot[keys.exposed];\r\n        if (isNaN(parseInt(exposed, 10)) === false) {\r\n          this.impressions[adSlotId][keys.exposed] += 1;\r\n          try {\r\n            this.saveImpressionsToLocalStorage();\r\n          }\r\n          catch (err) {\r\n            // console.log('Error saving ad impressions to localStorage!', err);\r\n          }\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Checks whether an adSlot has reached it's allocated impressions count.\r\n   * @param {String} adSlotId - the adSlot to check\r\n   * @returns {boolean} true iff there is a quota for the adSlot, and it has been reached\r\n   */\r\n  reachedQuota(adSlotId) {\r\n    // An adSlotId is suffixed with _homepage | _section if it's targeting is different\r\n    // between the two. If there is no difference, an _all suffix can be used.\r\n    const slotName = this.impressions[`${adSlotId}${globalConfig.department}`] ?\r\n      `${adSlotId}${globalConfig.department}` : `${adSlotId}_all`;\r\n\r\n    const slot = this.impressions[slotName];\r\n    let atQuota = false;\r\n    if (slot) {\r\n      const now = (new Date()).getTime();\r\n      // Second element of 2/4day matches '2'\r\n      const expires = this.impressions[slotName][keys.expires];\r\n      if (expires < now) {\r\n        this.updateExpiryDate(slotName);\r\n      }\r\n      else {\r\n        const maxImpressions = this.impressions[slotName][keys.maxImpressions];\r\n        // Not expired, did reach max impressions?\r\n        if (maxImpressions) {\r\n          atQuota = this.impressions[slotName][keys.exposed] >= maxImpressions;\r\n        }\r\n      }\r\n    }\r\n    return atQuota;\r\n  }\r\n\r\n\r\n  /**\r\n   * Clears the impression map from 'exposed' impressions\r\n   */\r\n  resetImpressions() {\r\n    const impressions = this.impressions;\r\n    for (const key in impressions) {\r\n      if ({}.hasOwnProperty.call(impressions, key)) {\r\n        if (impressions[key][keys.exposed]) {\r\n          impressions[key][keys.exposed] = 0;\r\n        }\r\n      }\r\n    }\r\n    this.saveImpressionsToLocalStorage();\r\n  }\r\n}\r\n","/**\n * Checks whether two arrays are equal\n * @param {Array} a - the first array to check\n * @param {Array} b - the second array to check\n * @returns {Boolean} true iff both a and b are arrays, with equal values\n */\nexport function arraysEqual(a, b) {\n  if (!a || !b) return false;\n  if (!Array.isArray(a) || !Array.isArray(b)) return false;\n  if (a === b) return true;\n  if (a.length !== b.length) return false;\n  for (let i = 0; i < a.length; ++i) {\n    if (Array.isArray(a[i]) && Array.isArray(b[i])) {\n      if (!arraysEqual(a[i], b[i])) return false;\n    }\n    else if (a[i] !== b[i]) {\n      return false;\n    }\n  }\n  return true;\n}\nexport default arraysEqual;\n","/* global googletag */\r\nimport { adTypes } from '../objects/adManager';\r\nimport globalConfig from '../globalConfig';\r\nimport { arraysEqual } from '../utils/arrays';\r\n\r\nconst hiddenClass = globalConfig.site.indexOf('mouse') > -1 ? 'u-is-hidden' : 'h-hidden';\r\n\r\nexport default class adSlot {\r\n\r\n  constructor(adSlotConfig) {\r\n    this.config = Object.assign({}, adSlotConfig);\r\n\r\n    // Part I : Markup configuration - passed from AdManager\r\n    this.id = this.config.id;\r\n    if (!this.config.id) {\r\n      throw new Error('an adSlot requires an id!');\r\n    }\r\n    this.target = this.config.target;\r\n    this.type = this.config.type;\r\n    this.responsive = this.config.responsive;\r\n    this.fluid = this.config.fluid;\r\n    this.user = this.config.user;\r\n    this.adManager = this.config.adManager;\r\n    this.htmlElement = this.config.htmlElement;\r\n    this.priority = this.config.priority;\r\n    this.deferredSlot = this.config.deferredSlot;\r\n\r\n    // Part II : Global, general ad configuration - passed from AdManager\r\n    this.department = this.config.department;\r\n    this.network = this.config.network;\r\n    this.adUnitBase = this.config.adUnitBase;\r\n\r\n    // Part III : ad specific configuration - passed from globalConfig.adSlotConfig\r\n    this.adSizeMapping = this.config.adSizeMapping;\r\n    this.responsiveAdSizeMapping = this.config.responsiveAdSizeMapping;\r\n    this.blacklistReferrers = this.config.blacklistReferrers ?\r\n      this.config.blacklistReferrers.split(',') : [];\r\n    this.whitelistReferrers = this.config.whitelistReferrers ?\r\n      this.config.whitelistReferrers.split(',') : [];\r\n\r\n\r\n    // Part IV : Runtime configuration - calculated data - only present in runtime\r\n    this.lastResolvedSize = undefined; // Initialized in 'slotRenderEnded' callback\r\n    this.lastResolvedWithBreakpoint = undefined; // Initialized in 'slotRenderEnded' callback\r\n    this.slot = undefined; // Holds a googletag.Slot object\r\n    // [https://developers.google.com/doubleclick-gpt/reference#googletag.Slot]\r\n    try {\r\n      if (!this.deferredSlot) {\r\n        this.slot = this.defineSlot();\r\n      }\r\n    }\r\n    catch (err) {\r\n      console.error(err); // eslint-disable-line no-console\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Checks whether this adSlot is an 'Out-of-page' slot or not.\r\n   * An Out-of-page slot is a slot that is not embedded in the page 'normally'.\r\n   * @returns {boolean} true iff this adSlot is one of the predefined 'out-of-page' slots.\r\n   */\r\n  isOutOfPage() {\r\n    if (typeof this.type !== 'string') {\r\n      throw new Error('An adSlot cannot by typeless!', this);\r\n    }\r\n    if (this.isMobile() === true) {\r\n      return false;\r\n    }\r\n    switch (this.type) {\r\n      case adTypes.maavaron: return false;\r\n      case adTypes.popunder: return true;\r\n      case adTypes.talkback: return false;\r\n      case adTypes.regular: return false;\r\n      default: return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Checks whether this adSlot is a 'maavaron' slot or not.\r\n   * An Out-of-page slot is a slot that is not embedded in the page 'normally'.\r\n   * @returns {boolean} true iff this adSlot is one of the predefined 'out-of-page' slots.\r\n   */\r\n  isMaavaron() {\r\n    if (typeof this.type !== 'string') {\r\n      throw new Error('An adSlot cannot by typeless!', this);\r\n    }\r\n    if (this.isMobile() === true) {\r\n      return false;\r\n    }\r\n    switch (this.type) {\r\n      case adTypes.maavaron: return false;\r\n      default: return false;\r\n    }\r\n  }\r\n\r\n  isMobile() {\r\n    return (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i\r\n      .test(window.navigator.userAgent || ''));\r\n  }\r\n  /**\r\n   * Checks whether or not this adSlot has a non-empty whitelist, and if so, that the current\r\n   * referrer appears in the whitelist.\r\n   * Should return false iff there is a whitelist for the current adSlot, but the referrer is not\r\n   * mentioned in the whitelist.\r\n   * @returns {boolean} true iff the ad can be displayed.\r\n   */\r\n  isWhitelisted() {\r\n    let whitelisted = false;\r\n    if (this.whitelistReferrers.length !== 0) {\r\n      for (const referrer of this.whitelistReferrers) {\r\n        if (globalConfig.referrer.indexOf(referrer) > -1) {\r\n          whitelisted = true;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    else {\r\n      whitelisted = true;\r\n    }\r\n    return whitelisted;\r\n  }\r\n\r\n  /**\r\n   * Checks whether or not this adSlot has a non-empty blacklist, and if so, that the current\r\n   * referrer does not appear in the blacklist.\r\n   * Should return true iff there is a blacklist for the current adSlot, and the referrer is\r\n   * mentioned in the blacklist - to indicate that the adSlot is 'blocked'.\r\n   * @returns {boolean} true iff the ad cannot be displayed.\r\n   */\r\n  isBlacklisted() {\r\n    let blacklisted = false;\r\n    if (this.blacklistReferrers.length !== 0) {\r\n      for (const referrer of this.blacklistReferrers) {\r\n        if (globalConfig.referrer.indexOf(referrer) > -1) {\r\n          blacklisted = true;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    return blacklisted;\r\n  }\r\n\r\n\r\n  /**\r\n   * Shows the current adSlot.\r\n   * It assumes a markup is available for this slot (any tag with an id attribute = this.id)\r\n   */\r\n  show() {\r\n    if (!this.shown === true) {\r\n      this.shown = true; // Ensure show will be called once per adSlot\r\n      googletag.cmd.push(() => {\r\n        if (this.deferredSlot) {\r\n          this.slot = this.defineSlot();\r\n        }\r\n        // console.log('calling show for slot',this.id,' called @',window.performance.now());\r\n        document.getElementById(this.id).classList.remove(hiddenClass);\r\n        googletag.display(this.id);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Shows the current adSlot.\r\n   * It assumes a markup is available for this slot (any tag with an id attribute = this.id)\r\n   */\r\n  hide() {\r\n    googletag.cmd.push(() => {\r\n      document.getElementById(this.id).classList.add(hiddenClass);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Initializes page-level slot definition for the current slot\r\n   * @return {Slot} slot - the Google Slot that was defined from this AdSlot configuration\r\n   */\r\n  defineSlot() {\r\n    if (this.isMaavaron()) {\r\n      const maavaronSlot = this.defineMaavaron();\r\n      if (this.adManager.shouldSendRequestToDfp(this)) {\r\n        if (!this.shown) {\r\n          this.shown = true; // Ensure show will be called once\r\n          maavaronSlot.display();\r\n        }\r\n      }\r\n      return maavaronSlot;\r\n    }\r\n    const googletag = window.googletag;\r\n    const pubads = googletag.pubads();\r\n    const args = [];\r\n    const defineFn = this.isOutOfPage() ? googletag.defineOutOfPageSlot : googletag.defineSlot;\r\n    // 3 or 2 params according to the function that we want to activate.\r\n    args.push(this.getPath());\r\n    if (this.isOutOfPage() === false) {\r\n      if (this.fluid) {\r\n        args.push('fluid');\r\n      }\r\n      else {\r\n        args.push(this.adSizeMapping);\r\n      }\r\n    }\r\n    args.push(this.id);\r\n    let slot = defineFn.apply(defineFn, args);\r\n    if (slot) {\r\n      // Responsive size Mapping\r\n      if (this.responsive) {\r\n        let responsiveSlotSizeMapping = googletag.sizeMapping();\r\n        const breakpoints = globalConfig.breakpointsConfig.breakpoints;\r\n        const keys = Object.keys(this.responsiveAdSizeMapping);\r\n        for (const key of keys) { // ['xxs','xs',...]\r\n          responsiveSlotSizeMapping.addSize(\r\n            [breakpoints[key], 100], // 100 is a default height, since it is height agnostic\r\n            !arraysEqual(this.responsiveAdSizeMapping[key], [[0, 0]]) ?\r\n              this.responsiveAdSizeMapping[key] : []);\r\n        }\r\n        responsiveSlotSizeMapping = responsiveSlotSizeMapping.build();\r\n        slot = slot.defineSizeMapping(responsiveSlotSizeMapping);\r\n      }\r\n      slot = slot.addService(pubads);\r\n      if (this.isOutOfPage() === false) {\r\n        slot.setCollapseEmptyDiv(true);\r\n      }\r\n    }\r\n    return slot;\r\n  }\r\n\r\n  /**\r\n   * Returns the current path calculated for the adSlot\r\n   * @returns {String} a formatted string that represent the path for the slot definition\r\n   */\r\n  getPath() {\r\n    /* eslint-disable no-shadow */\r\n    let path = globalConfig.path || [];\r\n    path = path.filter(path => path !== '.');\r\n    path = path.map(section => `${this.id}${this.department}${section}`).join('/');\r\n    // If a path exist, it will be preceded with a forward slash\r\n    path = path && this.config.department !== '_homepage' ? `/${path}` : '';\r\n    /* eslint-enable no-shadow */\r\n    const calculatedPath = `/${this.config.network}/${this.config.adUnitBase}/${this.id}/${this.id}${this.department}${path}`; // eslint-disable-line max-len\r\n    return calculatedPath.toLowerCase();\r\n  }\r\n\r\n  /* eslint-disable */\r\n  slotRendered(event) {\r\n    const id = event.slot.getAdUnitPath().split('/')[3]; // Convention: [0]/[1]network/[2]base/[3]id\r\n    const isEmpty = event.isEmpty; // Did the ad return as empty?\r\n    const resolvedSize = event.size; // What 'creative' size did the ad return with?\r\n    // Empty or onload callback should be called next?\r\n  }\r\n  /* eslint-enable */\r\n\r\n  /**\r\n   * Refresh this adSlot\r\n   */\r\n  refresh() {\r\n    googletag.cmd.push(() => {\r\n      googletag.pubads().refresh([this.slot]);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Shows 'Maavaron' type adSlot using Passback definition\r\n   * @return {Slot} slot - the Google Slot that was defined for Maavaron\r\n   */\r\n  defineMaavaron() {\r\n    if (!document.referrer.match('loc.haaretz')) {\r\n      const adUnitMaavaronPath = this.getPath();\r\n      const adUnitMaavaronSize = [\r\n        [2, 1],\r\n      ];\r\n      const slot = googletag.pubads().definePassback(adUnitMaavaronPath, adUnitMaavaronSize)\r\n        .setTargeting('UserType', [this.user.type])\r\n        .setTargeting('age', [this.user.age])\r\n        .setTargeting('urgdr', [this.user.gender])\r\n        .setTargeting('articleId', [globalConfig.articleId])\r\n        .setTargeting('stg', [globalConfig.environment]);\r\n      return slot;\r\n    }\r\n    return null;\r\n  }\r\n}\r\n","export default (function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n});","export default (function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n})();","export default (function (arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n});","import getCookieAsMap from '../utils/cookieUtils';\r\nimport ImpressionManager from './impressionsManager';\r\nimport globalConfig from '../globalConfig';\r\n\r\nexport const userTypes = {\r\n  payer: 'payer',\r\n  registered: 'registered',\r\n  anonymous: 'anonymous',\r\n};\r\n\r\nexport default class User {\r\n  constructor(config) {\r\n    this.config = Object.assign({}, config.userConfig);\r\n    const cookieMap = getCookieAsMap();\r\n    this.ssoKey = globalConfig.sso;\r\n    if (!cookieMap[this.ssoKey]) {\r\n      // Flips the ssoKey, since cookieMap.ssoKey cannot be used to retrieve data\r\n      this.ssoKey = this.ssoKey === 'tmsso' ? 'engsso' : 'tmsso';\r\n    }\r\n    this.type = this.getUserType(cookieMap);\r\n    this.impressionManager = new ImpressionManager(config.impressionManagerConfig);\r\n    this.age = this.getUserAge(cookieMap);\r\n    this.gender = this.getUserGender(cookieMap);\r\n  }\r\n\r\n  getUserType(cookieMap) {\r\n    let userType;\r\n    if (cookieMap && cookieMap[this.ssoKey]) {\r\n      const payerProp = window.location.hostname.indexOf('haaretz.com') > -1 ?\r\n        'HdcPusr' : 'HtzPusr';\r\n      userType = cookieMap[payerProp] ? userTypes.payer : userTypes.registered;\r\n    }\r\n    else {\r\n      userType = userTypes.anonymous;\r\n    }\r\n    return userType;\r\n  }\r\n\r\n  getUserAge(cookieMap) {\r\n    let age;\r\n    const usrae = cookieMap[this.ssoKey] && cookieMap[this.ssoKey].usrae;\r\n    if (usrae) {\r\n      age = parseInt(cookieMap[this.ssoKey].usrae, 10);\r\n      age = age > 0 ? age : undefined;\r\n    }\r\n    return age;\r\n  }\r\n\r\n  getUserGender(cookieMap) {\r\n    let gender;\r\n    const urgdr = cookieMap[this.ssoKey] && cookieMap[this.ssoKey].urgdr;\r\n    if (urgdr) {\r\n      gender = parseInt(cookieMap[this.ssoKey].urgdr, 10);\r\n      gender = gender === 2 || gender === 1 ? gender : undefined;\r\n    }\r\n    return gender;\r\n  }\r\n}\r\n","class ConflictResolver {\r\n  constructor(conflictManagementConfig) {\r\n    this.dependencyMap = this.initializeDependencyMap(conflictManagementConfig);\r\n    this.deferredSlots = new Set();\r\n  }\r\n  initializeDependencyMap(conflictManagementJson) {\r\n    const queue = new Map();\r\n    Object.keys(conflictManagementJson).map((key, value) => {\r\n      let rules = conflictManagementJson[key];\r\n      if (rules) {\r\n        rules = rules.filter((item) => item.onsize && item.avoid);\r\n      }\r\n      queue.set(key, {\r\n        id: key,\r\n        rules,\r\n        resolvedWith: null,\r\n      });\r\n      return this;\r\n    });\r\n    return queue;\r\n  }\r\n\r\n  updateResolvedSlot(adSlotId, resolvedSize) {\r\n    if (!adSlotId) {\r\n      throw new Error('updateResolvedSlot must be called with an adSlotId!');\r\n    }\r\n    if (!resolvedSize) {\r\n      throw new Error('updateResolvedSlot must be called with a resolved size!');\r\n    }\r\n    if (this.dependencyMap.has(adSlotId)) {\r\n      this.dependencyMap.get(adSlotId).resolvedWith = resolvedSize;\r\n    }\r\n  }\r\n\r\n\r\n  isBlocked(adSlotId) {\r\n    if (!adSlotId) {\r\n      throw new Error('isBlocked must be called with an adSlotId!');\r\n    }\r\n    let isBlocked = false;\r\n    for (const adSlotKey of this.dependencyMap.keys()) {\r\n      const adSlot = this.dependencyMap.get(adSlotKey);\r\n      for (const adSlotRule of adSlot.rules) {\r\n        // Found rule specific to our target\r\n        if (adSlotRule.avoid === adSlotId) {\r\n          const parentResolvedWith = adSlot.resolvedWith;\r\n          // Fail fast: parent is not resolved yet - unknown returned size.\r\n          if (!parentResolvedWith) {\r\n            isBlocked = true;\r\n            this.deferredSlots.add(adSlotId);\r\n          }\r\n          if (adSlotRule.onsize.split(',').find(sizeString => { // eslint-disable-line\r\n            const size = sizeString.split('x').map(numberStr => parseInt(numberStr, 10));\r\n            return this.arraysEqual(size, parentResolvedWith);\r\n          })) {\r\n            // Block found\r\n            this.deferredSlots.add(adSlotId);\r\n            isBlocked = true;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return isBlocked;\r\n  }\r\n\r\n  isBlocking(adSlotId) {\r\n    if (!adSlotId) {\r\n      throw new Error('isBlocking must be called with an adSlotId!');\r\n    }\r\n    let isBlocking = false;\r\n    for (const adSlotKey of this.dependencyMap.keys()) {\r\n      if (adSlotKey === adSlotId) {\r\n        isBlocking = true;\r\n      }\r\n    }\r\n    return isBlocking;\r\n  }\r\n\r\n  /**\r\n   * Gets an array of adSlot Ids for a given adSlotId, that are dependent on (blocked by)\r\n   * @param {String} adSlotId - the blocking slot id\r\n   * @return {Array} an array of blocked slot, that has a dependency on the given slot\r\n   */\r\n  getBlockedSlotsIds(adSlotId) {\r\n    let result;\r\n    if (this.dependencyMap.has(adSlotId)) {\r\n      result = Array.from(this.dependencyMap.get(adSlotId).rules.map(adSlot => adSlot.avoid));\r\n    }\r\n    return result || [];\r\n  }\r\n\r\n  arraysEqual(a, b) {\r\n    if (a === b) return true;\r\n    if (a === null || b === null) return false;\r\n    if (a.length !== b.length) return false;\r\n    for (let i = 0; i < a.length; ++i) {\r\n      if (a[i] !== b[i]) return false;\r\n    }\r\n    return true;\r\n  }\r\n}\r\nConflictResolver.EMPTY_SIZE = [];\r\nexport default ConflictResolver;\r\n","/* global googletag */\nimport User from '../objects/user';\nimport ConflictResolver from '../objects/conflictResolver';\nimport AdSlot from '../objects/adSlot';\nimport { getBreakpoint, getBreakpointName } from '../utils/breakpoints';\nimport { arraysEqual } from '../utils/arrays';\n\n// There are a total of 7 adTargets:\n// \"all\",\"nonPaying\",\"anonymous\",\"registered\",\"paying\",\"digitalOnly\" and \"digitalAndPrint\"\nexport const adPriorities = {\n  high: 'high',\n  normal: 'normal',\n  low: 'low',\n};\n\nexport const adTargets = {\n  all: 'all',\n  nonPaying: 'nonPaying',\n  anonymous: 'anonymous',\n  registered: 'registered',\n  paying: 'paying',\n  digitalOnly: 'digitalOnly',\n  digitalAndPrint: 'digitalAndPrint',\n};\n\n// There are a total of 3 userTypes: \"anonymous\", \"registered\" and \"payer\"\nexport const userTypes = {\n  anonymous: 'anonymous',\n  registered: 'registered',\n  payer: 'payer',\n};\n\nexport const adTypes = {\n  maavaron: '.maavaron',\n  popunder: '.popunder',\n  talkback: '.talkback',\n  regular: '',\n};\n\n\nexport default class AdManager {\n\n  constructor(config) {\n    this.config = Object.assign({}, config);\n    this.user = new User(config);\n    this.conflictResolver = new ConflictResolver(config.conflictManagementConfig);\n    /**\n     * Avoid race conditions by making sure to respect the usual timing of GPT.\n     * This DFP implementation uses Enable-Define-Display:\n     * Define page-level settings\n     * enableServices()\n     * Define slots\n     * Display slots\n     */\n    try {\n      googletag.cmd.push(() => {\n        this.initGoogleTargetingParams(); //  Define page-level settings\n        this.initGoogleGlobalSettings();  //  enableServices()\n        this.initSlotRenderedCallback();  //  Define callbacks\n      });\n      // Mouse special treatment to base path on mobile breakpoints\n      const currentBreakpointName = getBreakpointName(getBreakpoint());\n      if (this.config.adManagerConfig.adUnitBase.indexOf('mouse.co.il') > -1 &&\n        currentBreakpointName.indexOf('xs') > -1) {\n        this.config.adManagerConfig.adUnitBase = 'mouse.co.il.mobile_web';\n      }\n      // Holds adSlot objects as soon as possible.\n      googletag.cmd.push(() => {\n        this.adSlots = this.initAdSlots(config.adSlotConfig, adPriorities.high);\n      });\n      // Once DOM ready, add more adSlots.\n      const onDomLoaded = () => { // eslint-disable-line no-inner-declarations\n        try {\n          googletag.cmd.push(() => {\n            this.adSlots = this.initAdSlots(config.adSlotConfig, adPriorities.high);\n            googletag.cmd.push(() => {\n              this.adSlots = this.initAdSlots(config.adSlotConfig, adPriorities.normal);\n            });\n          });\n        }\n        catch (err) {\n          console.log(err); // eslint-disable-line no-console\n        }\n      };\n      // Once window was loaded, add the rest of the adSlots.\n      const onWindowLoaded = () => { // eslint-disable-line no-inner-declarations\n        googletag.cmd.push(() => {\n          this.adSlots = this.initAdSlots(config.adSlotConfig, adPriorities.low);\n          // Clean blocking adSlots that are not defined on this page\n          for (const blockingAdSlotKey of this.conflictResolver.dependencyMap.keys()) {\n            if (!this.adSlots.has(blockingAdSlotKey)) {\n              this.conflictResolver.dependencyMap.delete(blockingAdSlotKey);\n            }\n          }\n          this.showAllDeferredSlots();\n        });\n      };\n      switch (document.readyState) {\n        case 'loading':\n          document.addEventListener('DOMContentLoaded', onDomLoaded);\n          window.addEventListener('load', onWindowLoaded);\n          break;\n        case 'interactive':\n          onDomLoaded();\n          window.addEventListener('load', onWindowLoaded);\n          break;\n        default: // 'complete' - no need for event listeners.\n          onDomLoaded();\n          onWindowLoaded();\n      }\n    }\n    catch (err) {\n      console.error(err); // eslint-disable-line no-console\n    }\n  }\n\n  /**\n   * Shows all of the adSlots that can be displayed.\n   */\n  showAllSlots() {\n    for (const adSlotKey of this.adSlots.keys()) {\n      const adSlot = this.adSlots.get(adSlotKey);\n      if (adSlot.type !== adTypes.talkback && this.shouldSendRequestToDfp(adSlot)) {\n        adSlot.show();\n      }\n    }\n  }\n\n  /**\n   * Gets all adSlots that has a certain priority\n   * @param {adPriority} priority - the priority of the ad {high, normal, low}\n   * @return {Array<AdSlot>} adSlots - all of the defined adSlots that matches\n   * the given priority\n   */\n  getAdSlotsByPriority(priority) {\n    function priorityFilter(adSlot) {\n      return adSlot.priority === priority;\n    }\n    return Array.from(this.adSlots.values()).filter(priorityFilter);\n  }\n\n  showAllDeferredSlots() {\n    for (const deferredSlotId of this.conflictResolver.deferredSlots) {\n      if (this.adSlots.has(deferredSlotId)) {\n        if (!this.conflictResolver.isBlocked(deferredSlotId)) {\n          const deferredAdSlot = this.adSlots.get(deferredSlotId);\n          if (this.shouldSendRequestToDfp(deferredAdSlot)) {\n            deferredAdSlot.show();\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Refreshes all responsive adSlots\n   */\n  refreshAllSlots() {\n    const currentBreakpoint = getBreakpoint();\n    for (const adSlotKey of this.adSlots.keys()) {\n      const adSlot = this.adSlots.get(adSlotKey);\n      if (adSlot.responsive && adSlot.type !== adTypes.maavaron) {\n        if (adSlot.lastResolvedWithBreakpoint !== currentBreakpoint &&\n          this.shouldSendRequestToDfp(adSlot)) {\n          // console.log(`calling refresh for adSlot: ${adSlot.id}`);\n          adSlot.refresh();\n        }\n        else {\n          adSlot.hide();\n        }\n      }\n    }\n  }\n\n  /**\n   * Refreshes all adSlots\n   */\n  refreshAllSlotsInPage() {\n    for (const adSlotKey of this.adSlots.keys()) {\n      const adSlot = this.adSlots.get(adSlotKey);\n      if (this.shouldSendRequestToDfp(adSlot)) {\n        // console.log(`calling refresh for adSlot: ${adSlot.id}`);\n        adSlot.refresh();\n      }\n      else {\n        adSlot.hide();\n      }\n    }\n  }\n\n  /**\n   * Refreshes adSlot\n   */\n\n  refreshSlot(adUnitName) {\n    const adSlot = this.adSlots.get(adUnitName);\n    if (this.shouldSendRequestToDfp(adSlot)) {\n      // console.log(`calling refresh for adSlot: ${adSlot.id}`);\n      adSlot.refresh();\n    }\n    else {\n      adSlot.hide();\n    }\n  }\n\n\n      /**\n   * Initializes adSlots based on the currently found slot markup (HTML page specific),\n   * and the predefined configuration for the slots.\n   * @param {Object} adSlotConfig - the AdSlots configuration object (see: globalConfig)\n   * @param {String} filteredPriority - filters out all adSlots that does not match\n   * a given adPriority. This is used to cherry pick the init process of ads.\n   * @returns {Map}\n   */\n  initAdSlots(adSlotConfig, filteredPriority) {\n    const adSlots = new Map(this.adSlots);\n    let adSlotPlaceholders = Array.from(document.getElementsByClassName('js-dfp-ad'));\n    adSlotPlaceholders = adSlotPlaceholders.filter(node => node.id); // only nodes with an id\n    const adSlotNodeSet = new Set();\n    adSlotPlaceholders = Array.prototype.filter.call(adSlotPlaceholders, node => {\n      if (adSlotNodeSet.has(node.id) === false) { // first occurrence of Node\n        adSlotNodeSet.add(node.id);\n        return true;\n      }\n      return false;\n    });\n    // adSlotPlaceholders = adSlotPlaceholders.sort((a, b) => a.offsetTop - b.offsetTop);\n    adSlotPlaceholders.forEach(adSlot => {\n      const adSlotPriority = adSlotConfig[adSlot.id] ?\n      adSlotConfig[adSlot.id].priority || adPriorities.normal : undefined;\n      if (adSlotConfig[adSlot.id] && adSlots.has(adSlot.id) === false &&\n        adSlotPriority === filteredPriority) {\n        // The markup has a matching configuration from adSlotConfig AND was not already defined\n        try {\n          // adSlotConfig is built from globalConfig, but can be overridden by markup\n          const computedAdSlotConfig = Object.assign({}, adSlotConfig[adSlot.id], {\n            id: adSlot.id,\n            target: adSlot.attributes['data-audtarget'] ?\n              adSlot.attributes['data-audtarget'].value : adTargets.all,\n            type: this.getAdType(adSlot.id),\n            responsive: adSlotConfig[adSlot.id].responsive,\n            fluid: adSlotConfig[adSlot.id].fluid || false,\n            user: this.user,\n            adManager: this,\n            htmlElement: adSlot,\n            department: this.config.department,\n            network: this.config.adManagerConfig.network,\n            adUnitBase: this.config.adManagerConfig.adUnitBase,\n            deferredSlot: this.conflictResolver.isBlocked(adSlot.id),\n            priority: adSlotPriority,\n          });\n          const adSlotInstance = new AdSlot(computedAdSlotConfig);\n          adSlots.set(adSlot.id, adSlotInstance);\n          if (adSlotInstance.type !== adTypes.talkback &&\n            adSlotInstance.priority === adPriorities.high &&\n            this.shouldSendRequestToDfp(adSlotInstance)) {\n            /*\n             console.log('calling show for high priority slot', adSlotInstance.id, ' called @',\n             window.performance.now());\n             */\n            adSlotInstance.show();\n          }\n        }\n        catch (err) {\n          console.error(err); // eslint-disable-line no-console\n        }\n      }\n    });\n    return adSlots;\n  }\n\n  isPriority(adSlotId) {\n    return (typeof adSlotId === 'string' &&\n    (adSlotId.indexOf('plazma') > 0 ||\n    adSlotId.indexOf('maavaron') > 0 ||\n    adSlotId.indexOf('popunder') > 0));\n  }\n\n  /**\n   * Returns the adType based on the adSlot name.\n   * @param {String} adSlotId - the adSlot's identifier.\n   * @returns {*} enumerated export 'adTypes'\n   */\n  getAdType(adSlotId) {\n    if (!adSlotId) {\n      throw new Error('Missing argument: a call to getAdType must have an adSlotId');\n    }\n    if (adSlotId.indexOf(adTypes.maavaron) > -1) return adTypes.maavaron;\n    if (adSlotId.indexOf(adTypes.popunder) > -1) return adTypes.popunder;\n    if (adSlotId.indexOf(adTypes.talkback) > -1) return adTypes.talkback;\n    return adTypes.regular;\n  }\n\n  /**\n   * @param {object} adSlot the AdSlot\n   * @returns {boolean|*}\n   */\n  shouldSendRequestToDfp(adSlot) {\n    // Conflict management check\n    return this.conflictResolver.isBlocked(adSlot.id) === false &&\n      // Valid Referrer check\n      adSlot.isWhitelisted() &&\n      // Not in referrer Blacklist\n      adSlot.isBlacklisted() === false &&\n      this.shouldDisplayAdAfterAdBlockRemoval(adSlot) &&\n      //  if a paywall pop-up is shown And the number is 12 or more - SHOW MAAVRON\n      this.shouldDisplayAdMaavaronAfterPayWallBanner(adSlot) &&\n      // Responsive: breakpoint contains ad?\n      this.doesBreakpointContainAd(adSlot) &&\n      // check in case of Smartphoneapp\n      this.haveValidCookieForSmartphoneapp() &&\n      // Targeting check (userType vs. slotTargeting)\n      this.doesUserTypeMatchBannerTargeting(adSlot) &&\n      // Impressions Manager check (limits number of impressions per slot)\n      this.user.impressionManager.reachedQuota(adSlot.id) === false;\n  }\n\n  shouldDisplayAdAfterAdBlockRemoval(adSlot) {\n    return !(this.config.adBlockRemoved === true &&\n    (adSlot.type === adTypes.maavaron ||\n    adSlot.type === adTypes.popunder));\n  }\n\n  shouldDisplayAdMaavaronAfterPayWallBanner(adSlot) {\n    let shouldDisplay = true;\n    if (this.config.site === 'haaretz' && adSlot.type === adTypes.maavaron) {\n      try {\n        const paywallBanner = JSON.parse(window.localStorage.getItem('_cobj'));\n        shouldDisplay = !paywallBanner || ((paywallBanner.mc && paywallBanner.mc >= 12) ||\n                          (paywallBanner.nextslotLocation &&\n                          !paywallBanner.nextslotLocation.includes('pop')));\n      }\n      catch (err) {\n        /* eslint-disable no-console*/\n        console.error('ERROR ON shouldDisplayAdMaavaronAfterPayWallBanner');\n        /* eslint-enable no-console*/\n      }\n    }\n    return shouldDisplay;\n  }\n\n  /**\n   * Check whether or not an ad slot should appear for the current user type\n   * @param {String} adSlotOrTarget the adSlot to check or the target as a string\n   * @returns {boolean} true iff the slot should appear for the user type\n   */\n\n  haveValidCookieForSmartphoneapp() {\n    return this.config.isValidForsmartPhone;\n  }\n\n  /**\n   * Check whether or not an ad slot should appear for the current user type\n   * @param {String} adSlotOrTarget the adSlot to check or the target as a string\n   * @returns {boolean} true iff the slot should appear for the user type\n   */\n  doesUserTypeMatchBannerTargeting(adSlotOrTarget) {\n    const userType = this.user.type;\n    const adTarget = typeof adSlotOrTarget === 'string' ? adSlotOrTarget : adSlotOrTarget.target;\n\n    switch (adTarget) {\n      case adTargets.all : return true;\n      case adTargets.nonPaying :\n        return userType === userTypes.anonymous || userType === userTypes.registered;\n      case adTargets.anonymous : return userType === userTypes.anonymous;\n      case adTargets.registered : return userType === userTypes.registered;\n      case adTargets.paying : return userType === userTypes.payer;\n      case adTargets.digitalOnly : return userType === userTypes.payer;\n      case adTargets.digitalAndPrint : return userType === userTypes.payer;\n      default: return false;\n    }\n  }\n\n  /**\n   * Report to the AdManager that a breakpoint has been switched (passed from one break to\n   * another). Should there be a responsive slot with a\n   * @param {Breakpoint} breakpoint - the breakpoint that is currently being displayed\n   * @returns {Integer} affected - the number of adSlots affected by the change\n   */\n  switchedToBreakpoint(breakpoint) {\n    if (!breakpoint) {\n      throw new Error('Missing argument: a call to switchedToBreakpoint must have an breakpoint');\n    }\n    let count = 0;\n    for (const adSlotKey of this.adSlots.keys()) {\n      const adSlot = this.adSlots.get(adSlotKey);\n      if (adSlot.responsive === true && adSlot.lastResolvedWithBreakpoint) {\n        if (adSlot.lastResolvedWithBreakpoint !== breakpoint) {\n          adSlot.refresh();\n          count++;\n        }\n      }\n    }\n    return count;\n  }\n\n  /**\n   * Checks whether an adSlot is defined for a given breakpoint (Default: current breakpoint)\n   * @param {AdSlot} adSlot - the adSlot to check.\n   * @param {Breakpoint} [breakpoint=currentBreakpoint] - the breakpoint to check this ad in.\n   * @returns {boolean} true iff the adSlot is defined for the given breakpoint.\n   */\n  doesBreakpointContainAd(adSlot, breakpoint = getBreakpoint()) {\n    if (!adSlot) {\n      throw new Error('Missing argument: a call to doesBreakpointContainAd must have an adSlot');\n    }\n    let containsBreakpoint = true;\n    if (adSlot.responsive === true) {\n      const mapping = adSlot.responsiveAdSizeMapping[getBreakpointName(breakpoint)];\n      if (Array.isArray(mapping) === false) {\n        throw new Error(`Invalid argument: breakpoint:${breakpoint} doesn't exist!`, this);\n      }\n      containsBreakpoint = mapping.length > 0 && !arraysEqual(mapping, [[0, 0]]);\n    }\n    return containsBreakpoint;\n  }\n\n  /**\n   * Initializes the callback from the 'slotRenderEnded' event for each slot\n   */\n  initSlotRenderedCallback() {\n    if (window.googletag && window.googletag.apiReady) {\n      const pubads = window.googletag.pubads();\n      pubads.addEventListener('slotRenderEnded', event => {\n        const id = event.slot.getAdUnitPath().split('/')[3];\n        const isEmpty = event.isEmpty;\n        const resolvedSize = event.size;\n        // console.log('slotRenderEnded for slot',id,' called @',window.performance.now());\n        if (this.adSlots.has(id)) {\n          const adSlot = this.adSlots.get(id);\n          adSlot.lastResolvedSize = resolvedSize;\n          adSlot.lastResolvedWithBreakpoint = getBreakpoint();\n          if (isEmpty) {\n            adSlot.lastResolvedSize = ConflictResolver.EMPTY_SIZE;\n            adSlot.hide();\n            this.releaseSlotDependencies(adSlot);\n          }\n          else {\n            this.releaseSlotDependencies(adSlot, adSlot.lastResolvedSize);\n          }\n          this.user.impressionManager.registerImpression(`${adSlot.id}${this.config.department}`);\n          this.user.impressionManager.registerImpression(`${adSlot.id}_all`);\n        }\n        else {\n          /*\n           console.error(`Cannot find an adSlot with id: ${id} - Ad Unit path is\n           ${event.slot.getAdUnitPath()}`);\n           */\n        }\n      });\n    }\n    else {\n      throw new Error('googletag api was not ready when \\'initSlotRenderedCallback\\' was called!');\n    }\n  }\n\n  releaseSlotDependencies(adSlot) {\n    try {\n      const id = adSlot.id;\n      this.conflictResolver.updateResolvedSlot(id, adSlot.lastResolvedSize);\n      if (this.conflictResolver.isBlocking(id)) {\n        // Hide all blocked adSlots\n        for (const blockedSlot of this.conflictResolver.getBlockedSlotsIds(id)) {\n          if (this.conflictResolver.isBlocked(blockedSlot)) {\n            if (this.adSlots.has(blockedSlot)) {\n              this.adSlots.get(blockedSlot).hide();\n            }\n          }\n        }\n        // Show the non blocked\n        for (const deferredSlotKey of this.conflictResolver.deferredSlots.keys()) {\n          const deferredAdSlot = this.adSlots.get(deferredSlotKey);\n          if (deferredAdSlot && this.shouldSendRequestToDfp(deferredAdSlot)) {\n            this.conflictResolver.deferredSlots.delete(deferredSlotKey);\n            if (deferredAdSlot.deferredSlot) {\n              deferredAdSlot.defineSlot();\n              deferredAdSlot.deferredSlot = false;\n            }\n            deferredAdSlot.show();\n          }\n        }\n      }\n    }\n    catch (err) {\n      /* eslint-disable no-console*/\n      console.error(`Cannot updateSlotDependencies for adSlot: ${adSlot.id}`);\n      /* eslint-enable no-console*/\n    }\n  }\n\n  /**\n   * Initializes page-level targeting params.\n   */\n  initGoogleTargetingParams() {\n    if (window.googletag && window.googletag.apiReady) {\n      // Returns a reference to the pubads service.\n      const pubads = googletag.pubads();\n      // Environment targeting (dev, test, prod)\n      if (this.config.environment) {\n        pubads.setTargeting('stg', [this.config.environment]);\n      }\n\n      // User targeting\n      if (this.user.type) {\n        pubads.setTargeting('UserType', [this.user.type]);\n      }\n      if (this.user.age) {\n        pubads.setTargeting('age', [this.user.age]);\n      }\n      if (this.user.gender) {\n        pubads.setTargeting('urgdr', [this.user.gender]);\n      }\n\n      // Context targeting\n      if (this.config.articleId) {\n        pubads.setTargeting('articleId', [this.config.articleId]);\n      }\n      if (this.config.gStatCampaignNumber && this.config.gStatCampaignNumber !== -1) {\n        pubads.setTargeting('gstat_campaign_id', [this.config.gStatCampaignNumber]);\n      }\n      if (this.config.proposalNumber) {\n        pubads.setTargeting('proposaltype', [this.config.proposalNumber]);\n      }\n      if (this.config.isWriterAlerts) {\n        pubads.setTargeting('WriterAlerts', ['true']);\n      }\n      // UTM targeting\n      /* eslint-disable no-underscore-dangle */\n      if (this.config.utm_.content) {\n        pubads.setTargeting('utm_content', [this.config.utm_.content]);\n      }\n      if (this.config.utm_.source) {\n        pubads.setTargeting('utm_source', [this.config.utm_.source]);\n      }\n      if (this.config.utm_.medium) {\n        pubads.setTargeting('utm_medium', [this.config.utm_.medium]);\n      }\n      if (this.config.utm_.campaign) {\n        pubads.setTargeting('utm_campaign', [this.config.utm_.campaign]);\n      }\n      /* eslint-enable no-underscore-dangle */\n      // AdBlock removal\n      if (this.config.adBlockRemoved) {\n        pubads.setTargeting('adblock_removed', [this.config.adBlockRemoved]);\n      }\n      // University targeting - triggered via cookie\n      if (this.config.wifiLocation) {\n        pubads.setTargeting('wifi', [this.config.wifiLocation]);\n      }\n      if (this.config.tags && Array.isArray(this.config.tags)) {\n        pubads.setTargeting('tags', [...this.config.tags]);\n      }\n\n      // Ads Centering\n      pubads.setCentering(true);\n    }\n    else {\n      throw new Error('googletag api was not ready when \\'initGoogleTargetingParams\\' was called!');\n    }\n  }\n\n  /**\n   * Initializes googletag services.\n   */\n  initGoogleGlobalSettings() {\n    if (window.googletag && window.googletag.apiReady) {\n      const googleGlobalSettings = this.config.googleGlobalSettings;\n      // Enable GET parameter overrides\n      if (window.location.search) {\n        const search = window.location.search;\n        if (search.indexOf('sraon') > 0) {\n          console.log('Single Request Mode: active'); // eslint-disable-line no-console\n          googleGlobalSettings.enableSingleRequest = true;\n        }\n        else if (search.indexOf('sraoff') > 0) {\n          console.log('Single Request Mode: disabled');// eslint-disable-line no-console\n          googleGlobalSettings.enableSingleRequest = false;\n        }\n        if (search.indexOf('asyncrenderingon') > 0) {\n          console.log('Async rendering mode: active'); // eslint-disable-line no-console\n          googleGlobalSettings.enableAsyncRendering = true;\n        }\n        else if (search.indexOf('asyncrenderingonoff') > 0) {\n          console.log('Sync rendering mode: active');// eslint-disable-line no-console\n          googleGlobalSettings.enableAsyncRendering = false;\n        }\n      }\n      // Google services activation\n      if (googleGlobalSettings.enableSingleRequest === true) {\n        googletag.pubads().enableSingleRequest();\n      }\n      if (googleGlobalSettings.enableAsyncRendering === true) {\n        googletag.pubads().enableAsyncRendering();\n      }\n      else {\n        googletag.pubads().enableSyncRendering();\n      }\n      // Enables all GPT services that have been defined for ad slots on the page.\n      googletag.enableServices();\n    }\n    else {\n      throw new Error('googletag api wasn\\'t ready when \\'initGoogleGlobalSettings\\' was called!');\n    }\n  }\n}\n","/* globals googletag */\r\nimport AdManager from '../src/objects/adManager';\r\nimport globalConfig from './globalConfig';\r\nimport { getBreakpoint, debounce } from '../src/utils/breakpoints';\r\n\r\nconst defaultConfig = globalConfig || {};\r\nconst resizeTimeout = 250;\r\n\r\nexport default class DFP {\r\n\r\n  constructor(config) {\r\n    this.config = Object.assign({}, defaultConfig, config);\r\n    this.wasInitialized = false;\r\n    this.initStarted = false;\r\n    this.breakpoint = getBreakpoint();\r\n    this.initWindowResizeListener();\r\n  }\r\n\r\n  /**\r\n   * This part of the object's construction is dependent on the call to 'init'\r\n   */\r\n  resumeInit() {\r\n    try {\r\n      this.adManager = this.adManager || new AdManager(this.config);\r\n    }\r\n    catch (err) {\r\n      console.error(err); // eslint-disable-line no-console\r\n    }\r\n  }\r\n\r\n  /**\r\n   * initializes the 'googletag' global namespace and add the\r\n   * google publish tags library to the page\r\n   * @returns {Promise} that resolves to true once the googletag api is ready to use\r\n   * (googletag.apiReady = true)\r\n   */\r\n  initGoogleTag() {\r\n    const dfpThis = this;\r\n    return new Promise((resolve, reject) => {\r\n      if (dfpThis.initStarted === true) {\r\n        googletag.cmd.push(() => {\r\n          dfpThis.wasInitialized = true;\r\n          resolve(dfpThis);\r\n        });\r\n      }\r\n      else {\r\n        dfpThis.initStarted = true;\r\n        // set up a place holder for the gpt code downloaded from google\r\n        window.googletag = window.googletag || {};\r\n\r\n        // this is a command queue used by GPT any methods added to it will be\r\n        // executed when GPT code is available, if GPT is already available they\r\n        // will be executed immediately\r\n        window.googletag.cmd = window.googletag.cmd || [];\r\n        // load google tag services JavaScript\r\n        (() => {\r\n          const tag = window.document.createElement('script');\r\n          tag.async = true;\r\n          tag.type = 'text/javascript';\r\n          // Supports both https and http\r\n          tag.setAttribute('src', '//www.googletagservices.com/tag/js/gpt.js');\r\n          const node = window.document.getElementsByTagName('script')[0];\r\n          tag.addEventListener('load', () => {\r\n            dfpThis.resumeInit();\r\n            googletag.cmd.push(() => {\r\n              dfpThis.wasInitialized = true;\r\n              resolve(this);\r\n            });\r\n          });\r\n          tag.addEventListener('error', (error) => {\r\n            dfpThis.wasInitialized = false;\r\n            reject(error);\r\n          });\r\n          node.parentNode.insertBefore(tag, node);\r\n        })();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   *  Returns true iff googletag was properly initialized on the page\r\n   * @returns {boolean}\r\n   */\r\n  isGoogleTagReady() {\r\n    if (this.wasInitialized === true || (window.googletag && window.googletag.apiReady)) {\r\n      this.wasInitialized = true;\r\n    }\r\n    return this.wasInitialized;\r\n  }\r\n\r\n  /**\r\n   * Initializes the window resize listener to support responsive ad refreshes\r\n   */\r\n  initWindowResizeListener() {\r\n    const dfpThis = this;\r\n    function onResize() {\r\n      const currentBreakpoint = getBreakpoint();\r\n      if (dfpThis.breakpoint !== currentBreakpoint) {\r\n        dfpThis.breakpoint = currentBreakpoint;\r\n        if (dfpThis.adManager) {\r\n          dfpThis.adManager.refreshAllSlots();\r\n        }\r\n        else {\r\n          throw new Error('initWindowResizeListener error - adManager instance is not available');\r\n        }\r\n      }\r\n    }\r\n    const debouncedFunction = debounce(onResize, resizeTimeout);\r\n    window.onresize = debouncedFunction;\r\n  }\r\n}\r\n","import DFP from './dfp';\r\nimport globalConfig from './globalConfig';\r\nimport { version as v } from './../package.json';\r\n// const pkg = require('./../package.json');\r\n\r\n// DFP version is based on the package.json\r\nDFP.version = v || 'VERSION';\r\n\r\n/*\r\n // Only for development mode\r\n if ( process.env.NODE_ENV !== 'production' ) {\r\n DFP.dev = '123';\r\n }\r\n */\r\n\r\nexport const config = globalConfig;\r\nexport const version = DFP.version;\r\nexport default DFP;\r\n"]}