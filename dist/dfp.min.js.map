{"version":3,"file":null,"sources":["../src/utils/cookieUtils.js","../src/utils/time.js","../src/utils/breakpoints.js","../src/utils/arrays.js","../src/globalConfig.js","../src/objects/impressionsManager.js","../src/objects/user.js","../src/objects/conflictResolver.js","../src/objects/adSlot.js","../src/objects/adManager.js","../src/dfp.js","../src/index.js"],"sourcesContent":["/**\n * Htz-cookie-util\n * @module htzCookieUtil\n * @author Elia Grady elia.grady@haaretz.co.il\n * @license MIT\n */\n\n/**\n * Translates Key-Value string into a convenient map.\n * @param {String} string String in format of \"key<operator>value<separator>.....\"\n * @param {object} options object for overriding defaults:\n * options.separator is a String or regExp that separates between each key value pairs\n * (default is ';'). options.operator is a String or regExp that separates between each key\n * and value within a pair (default is '=').\n * @returns {object} a map object, with key-value mapping according to the passed configuration.\n */\nfunction stringToMap(string,\n  { separator = ';', operator = '=' } = {}) {\n  const map = {};\n  const itemsArr = string.split(separator);\n  itemsArr.forEach(element => {\n    if (typeof element === 'string') {\n      const keyValue = element.split(operator);\n      if (keyValue.length === 2) {\n        map[keyValue[0]] = decodeURIComponent(keyValue[1]);\n      }\n    }\n  });\n  return map;\n}\nexport const ssoKey = window.location.hostname.indexOf('haaretz.com') > -1 ? 'engsso' : 'tmsso';\n\n// Translates Cookie string into a convenient map.\nexport default function getCookieAsMap() {\n  const map = stringToMap(document.cookie, { separator: /;\\s?/ });\n  if (typeof map.tmsso === 'string') {\n    map.tmsso = stringToMap(map.tmsso, { separator: ':' });\n  }\n  if (typeof map.engsso === 'string') {\n    map.engsso = stringToMap(map.engsso, { separator: ':' });\n  }\n  return map;\n}\n","/**\n * Helper function. Adds N hours to a given date object.\n * @param {Date} date - the date to derive from\n * @param {Number} hours - the amount of hours to add, in whole numbers\n * @throws {SyntaxError} Will throw if the 'date' param is not provided\n * @throws {SyntaxError} Will throw if the 'hours' param is not provided\n * @throws {TypeError} Will throw if the 'hours' param is not a valid integer\n * @returns {Date} date - the new date, derived from adding the given hours\n */\nexport function addHours(date, hours) {\n  if (!date) {\n    throw new SyntaxError('addHours called without a required \\'date\\' parameter!');\n  }\n  if (!hours) {\n    throw new SyntaxError('addHours called without a required \\'hours\\' parameter!');\n  }\n  else if (isNaN(parseInt(hours, 10))) {\n    throw new TypeError('addHours called with an invalid integer \\'hours\\' parameter!');\n  }\n  const result = new Date(date);\n  result.setHours(result.getHours() + parseInt(hours, 10));\n  return result;\n}\n\n/**\n * Helper function. Adds N days to a given date object.\n * @param {Date} date - the date to derive from\n * @param {Integer} days - the amount of days to add\n * @throws {SyntaxError} Will throw if the 'date' param is not provided\n * @throws {SyntaxError} Will throw if the 'days' param is not provided\n * @throws {TypeError} Will throw if the 'hours' param is not a valid integer\n * @returns {Date} date - the new date, derived from adding the given days\n */\nexport function addDays(date, days) {\n  if (!date) {\n    throw new SyntaxError('addDays called without a required \\'date\\' parameter!');\n  }\n  if (!days) {\n    throw new SyntaxError('addDays called without a required \\'days\\' parameter!');\n  }\n  else if (isNaN(parseInt(days, 10))) {\n    throw new TypeError('addDays called with an invalid integer \\'days\\' parameter!');\n  }\n  const result = new Date(date);\n  result.setDate(result.getDate() + parseInt(days, 10));\n  return result;\n}\n","import globalConfig from '../globalConfig';\n\nconst breakpoints = globalConfig.breakpointsConfig.breakpoints;\n\n/**\n * Returns a function, that, as long as it continues to be invoked, will not\n * be triggered. The function will be called after it stops being called for\n * N milliseconds. If `immediate` is passed, trigger the function on the\n * leading edge, instead of the trailing.\n * @param {function} func - the function to run\n * @param {Number} wait - the timeout period to avoid running the function\n * @param {Boolean} immediate - leading edge modifier\n * @returns {function} the debounced function\n * //TODO translate to ES6 format or import lodash debounce instead\n */\nexport function debounce(func, wait = 100, immediate) {\n  let timeout;\n  return function debounced() {\n    const context = this;\n    const args = arguments;// eslint-disable-line prefer-rest-params\n    const later = () => {\n      timeout = null;\n      if (!immediate) func.apply(context, args);\n    };\n    const callNow = immediate && !timeout;\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n    if (callNow) func.apply(context, args);\n  };\n}\n\n/**\n * Returns the current breakpoint that is closest to the window's width\n * @returns {number} the break that the current width represents\n */\nexport function getBreakpoint() {\n  let breakpoint;\n  const windowWidth = window.innerWidth;\n  switch (windowWidth) {\n    case windowWidth < breakpoints.xs: breakpoint = breakpoints.xxs; break;\n    case windowWidth < breakpoints.s: breakpoint = breakpoints.xs; break;\n    case windowWidth < breakpoints.m: breakpoint = breakpoints.s; break;\n    case windowWidth < breakpoints.l: breakpoint = breakpoints.m; break;\n    case windowWidth < breakpoints.xl: breakpoint = breakpoints.l; break;\n    case windowWidth < breakpoints.xxl: breakpoint = breakpoints.xl; break;\n    default: breakpoint = breakpoints.xxl;\n  }\n  return breakpoint;\n}\n/**\n * Returns the current breakpoint that is closest to the window's width\n * @param {string} breakpoint - the breakpoint label enumerator that the current width represents\n * @returns {string} breakpoint - the breakpoint label that the current width represents,\n * as a string\n */\nexport function getBreakpointName(breakpoint) {\n  let resultBreakpoint;\n  const windowWidth = breakpoint || window.innerWidth;\n  switch (windowWidth) {\n    case windowWidth < breakpoints.xs: resultBreakpoint = 'xxs'; break;\n    case windowWidth < breakpoints.s: resultBreakpoint = 'xs'; break;\n    case windowWidth < breakpoints.m: resultBreakpoint = 's'; break;\n    case windowWidth < breakpoints.l: resultBreakpoint = 'm'; break;\n    case windowWidth < breakpoints.xl: resultBreakpoint = 'l'; break;\n    case windowWidth < breakpoints.xxl: resultBreakpoint = 'xl'; break;\n    default: resultBreakpoint = 'xxl';\n  }\n  return resultBreakpoint;\n}\n","/**\n * Checks whether two arrays are equal\n * @param {Array} a - the first array to check\n * @param {Array} b - the second array to check\n * @returns {Boolean} true iff both a and b are arrays, with equal values\n */\nexport function arraysEqual(a, b) {\n  if (!a || !b) return false;\n  if (!Array.isArray(a) || !Array.isArray(b)) return false;\n  if (a === b) return true;\n  if (a.length !== b.length) return false;\n  for (let i = 0; i < a.length; ++i) {\n    if (a[i] !== b[i]) return false;\n  }\n  return true;\n}\nexport default arraysEqual;\n","/* global dfpBaseConf */\nimport getCookieAsMap, { ssoKey } from './utils/cookieUtils';\n// globalConfig for DFP\nconst dfpConfig = Object.assign({\n  get referrer() {\n    return document.referrer ? document.referrer : '';\n  },\n  get isMobile() {\n    return (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i\n      .test(window.navigator.userAgent || ''));\n  },\n  /**\n   * Returns true iff the loaded page is the homepage (no inner path)\n   * @returns {boolean}\n   */\n  get isHomepage() {\n    return window.location.pathname === '/' || this.environment === 3; // 'prod'\n  },\n  get department() {\n    return this.isHomepage ? '_homepage' : '_section';\n  },\n  /**\n   * returns the domain the page was loaded to. i.e: 'haaretz.co.il', 'haaretz.com'\n   * @returns {string} the domain name from the windows's location hostname property\n   */\n  get domain() {\n    const regexMatch = /([\\d|\\w]+)(\\.co\\.il|\\.com)(.*)?/.exec(window.location.hostname);\n    const result = regexMatch ? regexMatch[0] : window.location.hostname;\n    return result;\n  },\n  /**\n   * Returns an array of concatenated paths, separated by a dot.\n   * For example, for the URL:\n   * http://www.haaretz.co.il/news/world/america/us-election-2016/LIVE-1.2869045\n   * the path is '/news/world/america/us-election-2016/LIVE-1.2869045'.\n   * This function takes the directories ['news', 'world', 'america', 'us-election-2016']\n   * and converts it to the following format:\n   * ['.news', '.news.world', '.news.world.america', '.news.world.america.us-election-2016']\n   * This denotes the path configuration for the given adSlot\n   * @returns {Array.<T>} an array of path names\n   */\n  get path() {\n    let sectionArray = this.articleId ?\n      window.location.pathname.split('/').slice(1, -1) :\n      window.location.pathname.split('/').slice(1);\n    sectionArray = sectionArray.filter(path =>\n    path !== 'wwwMobileSite' && path !== 'whtzMobileSite');\n    return sectionArray\n      .map(section => `.${section}`)\n      .map((section, index, arr) => arr.slice(0, index + 1)\n        .reduce((last, current) => last.concat(current)));\n  },\n  /**\n   * Returns the current environment targeting param, if such is defined.\n   * @returns {number} targeting param, 1 for local development, 2 for test servers and 3 for prod.\n   * May return undefined if no targeting is specified.\n   */\n  get environment() {\n    const env = {\n      dev: 1,\n      test: 2,\n      prod: 3,\n    };\n    return window.location.port === '8080' ? env.dev :\n      (window.location.hostname.indexOf('pre.haaretz.co.il') > -1\n      || window.location.hostname.indexOf('tmtest.themarker.com') > -1) ? env.test :\n        (window.location.pathname.indexOf('/cmlink/Haaretz.HomePage') > -1\n        || window.location.pathname.indexOf('/cmlink/TheMarker.HomePage') > -1)\n          ? env.prod : undefined;\n  },\n  /**\n   * Returns the articleIf if on an article page, or null otherwise\n   * @returns {string} an articleId string from the pathname, or 0 if not found\n   */\n  get articleId() {\n    const articleIdMatch = /\\d\\.\\d+/g.exec(window.location.pathname);\n    let articleId = '0';\n    if (articleIdMatch) {\n      articleId = articleIdMatch.pop(); // Converts [\"1.23145\"] to \"1.23145\"\n    }\n    return articleId;\n  },\n  utm_: {\n    get content() {\n      return this.getUrlParam('utm_content');\n    },\n    get source() {\n      return this.getUrlParam('utm_source');\n    },\n    get medium() {\n      return this.getUrlParam('utm_medium');\n    },\n    get campaign() {\n      return this.getUrlParam('utm_campaign');\n    },\n    getUrlParam(key) {\n      const results = RegExp(`(${key})(=)([^&\"]+)`).exec(window.location.search);\n      return results && results[3] ? results[3] : undefined;\n    },\n  },\n  get adBlockRemoved() {\n    let adBlockRemoved = false;\n    try {\n      if (localStorage.getItem('adblock_removed')) {\n        adBlockRemoved = true;\n      }\n    }\n    catch (err) {\n      // do nothing\n    }\n    return adBlockRemoved;\n  },\n  get wifiLocation() {\n    let wifiLocation = '';\n    const cookieMap = getCookieAsMap();\n    try {\n      if (cookieMap && cookieMap._htzwif) { // eslint-disable-line no-underscore-dangle\n        wifiLocation = (cookieMap._htzwif === 'arcaffe') // eslint-disable-line no-underscore-dangle\n          ? 'ArCafe' : 'university';\n      }\n    }\n    catch (err) {\n      // do nothing\n    }\n    return wifiLocation;\n  },\n  get gStatCampaignNumber() {\n    let gstatCampaign;\n    try {\n      gstatCampaign = localStorage.getItem('GstatCampaign') ?\n        JSON.parse(localStorage.getItem('GstatCampaign')) : undefined;\n    }\n    catch (err) {\n      /* In case of thrown 'SecurityError' or 'QuotaExceededError',\n       the variable should be undefined */\n      gstatCampaign = undefined;\n    }\n    return gstatCampaign ? gstatCampaign.CampaignNumber : undefined;\n  },\n  adSlotConfig: {\n    'haaretz.co.il.example.slot': {\n      id: 'slotId',\n      // path : \"/network/base/slotId/slotId_subsection\", Will be calculated from AdManager\n      responsive: true,\n      adSizeMapping: [['width1', 'height1'], ...['widthN', 'heightN']],\n      priority: 'normal',\n      fluid: false,\n      responsiveAdSizeMapping: {\n        xxs: [['width1', 'height1'], ...['widthN', 'heightN']],\n        xs: [['width1', 'height1'], ...['widthN', 'heightN']],\n        s: [['width1', 'height1'], ...['widthN', 'heightN']],\n        m: [['width1', 'height1'], ...['widthN', 'heightN']],\n        l: [['width1', 'height1'], ...['widthN', 'heightN']],\n        xl: [['width1', 'height1'], ...['widthN', 'heightN']],\n        xxl: [['width1', 'height1'], ...['widthN', 'heightN']],\n      },\n      blacklistReferrers: 'comma, delimited, blacklisted, referrer, list',\n      whitelistReferrers: 'comma, delimited, referrer, list',\n    },\n  },\n  adManagerConfig: {\n    network: '9401',\n    adUnitBase: 'haaretz.co.il_Web',\n  },\n  breakpointsConfig: {\n    get breakpoints() {\n      const isType1 = true; // Override in VM from backend to control this toggle.\n      return isType1 ? this.breakpoints1 : this.breakpoints2;\n    },\n    // Type 1\n    breakpoints1: {\n      xxs: 600,\n      xs: 761,\n      s: 993,\n      m: 1009,\n      l: 1291,\n      xl: 1600,\n      xxl: 1900,\n    },\n    // Type 2\n    breakpoints2: {\n      xxs: 600,\n      xs: 1000,\n      s: 1150,\n      m: 1281,\n      l: 1600,\n      xl: 1920,\n      xxl: 1920,\n    },\n  },\n  userConfig: {\n    type: undefined,\n    age: undefined,\n    gender: undefined,\n  },\n  conflictManagementConfig: {\n    'blocking.ad.unit.name': [\n      {\n        onsize: '1280x200,970x250,3x3',\n        avoid: 'blocked.ad.unit.name',\n      },\n      {\n        onsize: '1280x200,970x250,3x3',\n        avoid: 'blocked.ad.unit.name',\n      },\n    ],\n  },\n  impressionManagerConfig: {\n    'ad.unit.name': {\n      target: 'all|section|homepage',\n      frequency: '$1/$2(day|hour)',\n      exposed: 0,\n      expires: (new Date()).getTime(),\n    },\n  },\n  sso: ssoKey,\n\n}, window.dfpConfig);\n\nexport default dfpConfig;\n","import globalConfig from '../globalConfig';\nimport { addHours, addDays } from '../utils/time';\nimport { debounce } from '../utils/breakpoints';\n\nexport const keys = {\n  impressions: 'impressions',\n  frequency: 'frequency',\n  /**\n   * [0] - full match\n   * [1] - impression count i.e: \"1\" | \"22\"\n   * [2] - impression expiry range quantifier  i.e: \"1\" | \"22\"\n   * [3] - impression expiry range unit i.e: \"day\" | \"hour\"\n   */\n  frequencyRegex: /(\\d+)\\/(\\d+)(day|hour)/,\n  expires: 'expires',\n  exposed: 'exposed',\n  target: 'target',\n  maxImpressions: 'maxImpressions',\n  hours: 'hour',\n  days: 'day',\n  adSlotId: 'id',\n};\n\nexport default class ImpressionsManager {\n\n  constructor(impressionManagerConfig) {\n    this.now = (new Date()).getTime(); // this date is used for comparisons only\n    this.config = Object.assign({}, impressionManagerConfig);\n    this.impressions = this.retrieveImpressionsData();\n    this.initImpressionMap();\n  }\n\n  retrieveImpressionsData() {\n    const impressions = this.migrateImpressionsData();\n    /*\n     Merge migrated data with new data\n     console.log('Migrated: ',impressions);\n     */\n    Object.keys(impressions).map((key, index) => {\n      impressions[key] = Object.assign({}, impressions[key], this.config[key]);\n      return this;\n    });\n    /*\n     console.log('Merged: ',impressions);\n     Filter out entries without frequency\n     */\n    for (const key in impressions) {\n      if ({}.hasOwnProperty.call(impressions, key)) {\n        if (!impressions[key][keys.frequency]) {\n          // console.log(`Removing ${key} - since it does not have a frequency`,impressions[key]);\n          delete impressions[key];\n        }\n      }\n    }\n    // console.log('Filtered: ',impressions);\n    return impressions;\n  }\n\n  migrateImpressionsData() {\n    let impressions;\n    let impressionsData;\n    try {\n      impressionsData = window.localStorage.getItem(keys.impressions);\n    }\n    catch (err) {\n      // In case of thrown 'SecurityError' or 'QuotaExceededError', the variable should be undefined\n      impressionsData = undefined;\n    }\n    try {\n      impressions = JSON.parse(impressionsData);\n    }\n    catch (err) {\n      // Here is where old impression data is converted to new format\n      impressions = {};\n      const oldImpressionsArray = impressionsData.split(';').filter(e => e);\n\n      oldImpressionsArray.forEach((impression) => {\n        try {\n          const adUnitImpression = impression.split(' = ');\n          const name = adUnitImpression[0];\n          const data = adUnitImpression[1];\n          const tmp = name.split('.');\n          let target = tmp.pop();\n          if (target && target === 'hp') {\n            target = 'homepage';\n          }\n          const slotId = tmp.join('.');\n          const id = `${slotId}_${target}`;\n          const exposed = parseInt(data.split('/')[0], 10) || 0;\n          const expires = parseInt(data.split('/')[1], 10) || this.now;\n          impressions[id] = {};\n          impressions[id][keys.adSlotId] = slotId;\n          impressions[id][keys.target] = target;\n          impressions[id][keys.exposed] = exposed;\n          impressions[id][keys.expires] = expires;\n        }\n        catch (err1) {\n          // console.log(`Failed converting impression: ${impression}`, err1);\n        }\n      });\n    }\n    return impressions || {};\n  }\n\n  /**\n   * Define the debounced version of the local storage save\n   */\n  saveImpressionsToLocalStorage() {\n    if (this.debouncedSave && typeof this.debouncedSave === 'function') {\n      this.debouncedSave();\n    }\n    else {\n      this.debouncedSave = debounce(this.saveImpressionsToLocalStorageImpl, 250, false);\n      this.debouncedSave();\n    }\n  }\n\n  /**\n   * Implementation of saving the impression map to localstorage\n   */\n  saveImpressionsToLocalStorageImpl() {\n    try {\n      localStorage.setItem(keys.impressions, JSON.stringify(this.impressions));\n    }\n    catch (err) {\n      /* In case of thrown 'SecurityError' or 'QuotaExceededError',\n       the operation should not break*/\n      console.error('localStorage isn\\'t available:', err); // eslint-disable-line no-console\n    }\n  }\n\n  /**\n   * Initializes the impression map based on the retrieved impressions and the global\n   * configuration.\n   */\n  initImpressionMap() {\n    Object.keys(this.config).map((key, index) => {\n      const adSlotId = key;\n      const slot = this.impressions[adSlotId];\n      let shouldUpdateExpiryDate = false;\n      // Case I: Existing slot (update)\n      if (slot) {\n        // Case I.I Existing slot, frequency has changed\n        if (this.config[adSlotId][keys.frequency] !== slot[keys.frequency]) {\n          // Updating the frequency will trigger a new expiry date\n          shouldUpdateExpiryDate = true;\n          this.impressions[adSlotId][keys.frequency] = this.config[adSlotId][keys.frequency];\n        } // Case I.II Existing slot, old expiry date\n        else if (this.now > slot[keys.expires]) {\n          // Old value that should trigger a new expiry date\n          shouldUpdateExpiryDate = true;\n        }\n      } // Case II: Non-existing slot (create new slot)\n      else {\n        this.initSlotFromConfig(adSlotId);\n      } // Finally, updates the expiry date (cases I.I and I.II)\n      if (shouldUpdateExpiryDate) {\n        this.updateExpiryDate(adSlotId);\n      }\n      return this;\n    });\n  }\n\n  /**\n   * Updates the expiry date of a slotName based on the configured slot frequency\n   * @param {String} slotName - the slotName to update.\n   */\n  updateExpiryDate(slotName) {\n    const now = new Date();\n    if (!(this.impressions[slotName] && this.impressions[slotName][keys.frequency])) {\n      throw new Error(`Unable to update expiry date for slot: ${slotName}\n      - this.impressions[slotName]:`, this.impressions[slotName]);\n    }\n    const frequencyMap = this.impressions[slotName][keys.frequency].match(keys.frequencyRegex);\n    now.setMilliseconds(0);\n    now.setSeconds(0);\n    now.setMinutes(0);\n    if (frequencyMap.indexOf(keys.days) > -1) {\n      now.setHours(0);\n    }\n    this.impressions[slotName][keys.expires] = (frequencyMap.indexOf(keys.days) > -1 ?\n      addDays(now, frequencyMap[2]) : addHours(now, frequencyMap[2])).getTime();\n\n    // Set max impressions:\n    this.impressions[slotName][keys.maxImpressions] = parseInt(frequencyMap[1], 10);\n    // Reset exposed\n    this.impressions[slotName][keys.exposed] = 0;\n  }\n\n  /**\n   * Initializes a non-existing slot from the passed global configuration for the slot\n   * @param {String} slotName - the name of the slot to create\n   */\n  initSlotFromConfig(slotName) {\n    const slot = this.impressions[slotName] || {};\n    slot[keys.frequency] = this.config[slotName][keys.frequency];\n    slot[keys.target] = this.config[slotName][keys.target];\n    slot[keys.exposed] = 0;\n    this.impressions[slotName] = slot;\n    this.updateExpiryDate(slotName);\n  }\n\n  /**\n   * Registers an impression for a given adSlot.\n   * @param {String} adSlotId - the adSlot id to register an impression for\n   * @returns {boolean} returns true iff the impression has been registered\n   */\n  registerImpression(adSlotId) {\n    if (adSlotId) {\n      const slot = this.impressions[adSlotId];\n      if (slot) {\n        const exposed = slot[keys.exposed];\n        if (isNaN(parseInt(exposed, 10)) === false) {\n          this.impressions[adSlotId][keys.exposed] += 1;\n          try {\n            this.saveImpressionsToLocalStorage();\n          }\n          catch (err) {\n            // console.log('Error saving ad impressions to localStorage!', err);\n          }\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Checks whether an adSlot has reached it's allocated impressions count.\n   * @param {String} adSlotId - the adSlot to check\n   * @returns {boolean} true iff there is a quota for the adSlot, and it has been reached\n   */\n  reachedQuota(adSlotId) {\n    // An adSlotId is suffixed with _homepage | _section if it's targeting is different\n    // between the two. If there is no difference, an _all suffix can be used.\n    const slotName = this.impressions[`${adSlotId}${globalConfig.department}`] ?\n      `${adSlotId}${globalConfig.department}` : `${adSlotId}_all`;\n\n    const slot = this.impressions[slotName];\n    let atQuota = false;\n    if (slot) {\n      const now = (new Date()).getTime();\n      // Second element of 2/4day matches '2'\n      const expires = this.impressions[slotName][keys.expires];\n      if (expires < now) {\n        this.updateExpiryDate(slotName);\n      }\n      else {\n        const maxImpressions = this.impressions[slotName][keys.maxImpressions];\n        // Not expired, did reach max impressions?\n        if (maxImpressions) {\n          atQuota = this.impressions[slotName][keys.exposed] >= maxImpressions;\n        }\n      }\n    }\n    return atQuota;\n  }\n\n\n  /**\n   * Clears the impression map from 'exposed' impressions\n   */\n  resetImpressions() {\n    const impressions = this.impressions;\n    for (const key in impressions) {\n      if ({}.hasOwnProperty.call(impressions, key)) {\n        if (impressions[key][keys.exposed]) {\n          impressions[key][keys.exposed] = 0;\n        }\n      }\n    }\n    this.saveImpressionsToLocalStorage();\n  }\n}\n","import getCookieAsMap from '../utils/cookieUtils';\nimport ImpressionManager from './impressionsManager';\nimport globalConfig from '../globalConfig';\n\nexport const userTypes = {\n  payer: 'payer',\n  registered: 'registered',\n  anonymous: 'anonymous',\n};\n\nexport default class User {\n  constructor(config) {\n    this.config = Object.assign({}, config.userConfig);\n    const cookieMap = getCookieAsMap();\n    this.ssoKey = globalConfig.sso;\n    if (!cookieMap[this.ssoKey]) {\n      // Flips the ssoKey, since cookieMap.ssoKey cannot be used to retrieve data\n      this.ssoKey = this.ssoKey === 'tmsso' ? 'engsso' : 'tmsso';\n    }\n    this.type = this.getUserType(cookieMap);\n    this.impressionManager = new ImpressionManager(config.impressionManagerConfig);\n    this.age = this.getUserAge(cookieMap);\n    this.gender = this.getUserGender(cookieMap);\n  }\n\n  getUserType(cookieMap) {\n    let userType;\n    if (cookieMap && cookieMap[this.ssoKey]) {\n      const payerProp = window.location.hostname.indexOf('haaretz.com') > -1 ?\n        'HdcPusr' : 'HtzPusr';\n      userType = cookieMap[payerProp] ? userTypes.payer : userTypes.registered;\n    }\n    else {\n      userType = userTypes.anonymous;\n    }\n    return userType;\n  }\n\n  getUserAge(cookieMap) {\n    let age;\n    const usrae = cookieMap[this.ssoKey] && cookieMap[this.ssoKey].usrae;\n    if (usrae) {\n      age = parseInt(cookieMap[this.ssoKey].usrae, 10);\n      age = age > 0 ? age : undefined;\n    }\n    return age;\n  }\n\n  getUserGender(cookieMap) {\n    let gender;\n    const urgdr = cookieMap[this.ssoKey] && cookieMap[this.ssoKey].urgdr;\n    if (urgdr) {\n      gender = parseInt(cookieMap[this.ssoKey].urgdr, 10);\n      gender = gender === 2 || gender === 1 ? gender : undefined;\n    }\n    return gender;\n  }\n}\n","class ConflictResolver {\n  constructor(conflictManagementConfig) {\n    this.dependencyMap = this.initializeDependencyMap(conflictManagementConfig);\n    this.deferredSlots = new Set();\n  }\n  initializeDependencyMap(conflictManagementJson) {\n    const queue = new Map();\n    Object.keys(conflictManagementJson).map((key, value) => {\n      let rules = conflictManagementJson[key];\n      if (rules) {\n        rules = rules.filter((item) => item.onsize && item.avoid);\n      }\n      queue.set(key, {\n        id: key,\n        rules,\n        resolvedWith: null,\n      });\n      return this;\n    });\n    return queue;\n  }\n\n  updateResolvedSlot(adSlotId, resolvedSize) {\n    if (!adSlotId) {\n      throw new Error('updateResolvedSlot must be called with an adSlotId!');\n    }\n    if (!resolvedSize) {\n      throw new Error('updateResolvedSlot must be called with a resolved size!');\n    }\n    if (this.dependencyMap.has(adSlotId)) {\n      this.dependencyMap.get(adSlotId).resolvedWith = resolvedSize;\n    }\n  }\n\n\n  isBlocked(adSlotId) {\n    if (!adSlotId) {\n      throw new Error('isBlocked must be called with an adSlotId!');\n    }\n    let isBlocked = false;\n    for (const adSlotKey of this.dependencyMap.keys()) {\n      const adSlot = this.dependencyMap.get(adSlotKey);\n      for (const adSlotRule of adSlot.rules) {\n        // Found rule specific to our target\n        if (adSlotRule.avoid === adSlotId) {\n          const parentResolvedWith = adSlot.resolvedWith;\n          // Fail fast: parent is not resolved yet - unknown returned size.\n          if (!parentResolvedWith) {\n            isBlocked = true;\n            this.deferredSlots.add(adSlotId);\n          }\n          if (adSlotRule.onsize.split(',').find(sizeString => { // eslint-disable-line\n            const size = sizeString.split('x').map(numberStr => parseInt(numberStr, 10));\n            return this.arraysEqual(size, parentResolvedWith);\n          })) {\n            // Block found\n            this.deferredSlots.add(adSlotId);\n            isBlocked = true;\n          }\n        }\n      }\n    }\n    return isBlocked;\n  }\n\n  isBlocking(adSlotId) {\n    if (!adSlotId) {\n      throw new Error('isBlocking must be called with an adSlotId!');\n    }\n    let isBlocking = false;\n    for (const adSlotKey of this.dependencyMap.keys()) {\n      if (adSlotKey === adSlotId) {\n        isBlocking = true;\n      }\n    }\n    return isBlocking;\n  }\n\n  /**\n   * Gets an array of adSlot Ids for a given adSlotId, that are dependent on (blocked by)\n   * @param {String} adSlotId - the blocking slot id\n   * @return {Array} an array of blocked slot, that has a dependency on the given slot\n   */\n  getBlockedSlotsIds(adSlotId) {\n    let result;\n    if (this.dependencyMap.has(adSlotId)) {\n      result = Array.from(this.dependencyMap.get(adSlotId).rules.map(adSlot => adSlot.avoid));\n    }\n    return result || [];\n  }\n\n  arraysEqual(a, b) {\n    if (a === b) return true;\n    if (a === null || b === null) return false;\n    if (a.length !== b.length) return false;\n    for (let i = 0; i < a.length; ++i) {\n      if (a[i] !== b[i]) return false;\n    }\n    return true;\n  }\n}\nConflictResolver.EMPTY_SIZE = [];\nexport default ConflictResolver;\n","/* global googletag */\nimport { adTypes } from '../objects/adManager';\nimport globalConfig from '../globalConfig';\n\nexport default class adSlot {\n\n  constructor(adSlotConfig) {\n    this.config = Object.assign({}, adSlotConfig);\n\n    // Part I : Markup configuration - passed from AdManager\n    this.id = this.config.id;\n    if (!this.config.id) {\n      throw new Error('an adSlot requires an id!');\n    }\n    this.target = this.config.target;\n    this.type = this.config.type;\n    this.responsive = this.config.responsive;\n    this.fluid = this.config.fluid;\n    this.user = this.config.user;\n    this.adManager = this.config.adManager;\n    this.htmlElement = this.config.htmlElement;\n    this.priority = this.config.priority;\n    this.deferredSlot = this.config.deferredSlot;\n\n    // Part II : Global, general ad configuration - passed from AdManager\n    this.department = this.config.department;\n    this.network = this.config.network;\n    this.adUnitBase = this.config.adUnitBase;\n\n    // Part III : ad specific configuration - passed from globalConfig.adSlotConfig\n    this.adSizeMapping = this.config.adSizeMapping;\n    this.responsiveAdSizeMapping = this.config.responsiveAdSizeMapping;\n    this.blacklistReferrers = this.config.blacklistReferrers ?\n      this.config.blacklistReferrers.split(',') : [];\n    this.whitelistReferrers = this.config.whitelistReferrers ?\n      this.config.whitelistReferrers.split(',') : [];\n\n\n    // Part IV : Runtime configuration - calculated data - only present in runtime\n    this.lastResolvedSize = undefined; // Initialized in 'slotRenderEnded' callback\n    this.lastResolvedWithBreakpoint = undefined; // Initialized in 'slotRenderEnded' callback\n    this.slot = undefined; // Holds a googletag.Slot object\n    // [https://developers.google.com/doubleclick-gpt/reference#googletag.Slot]\n    try {\n      if (!this.deferredSlot) {\n        this.slot = this.defineSlot();\n      }\n    }\n    catch (err) {\n      console.error(err); // eslint-disable-line no-console\n    }\n  }\n\n  /**\n   * Checks whether this adSlot is an 'Out-of-page' slot or not.\n   * An Out-of-page slot is a slot that is not embedded in the page 'normally'.\n   * @returns {boolean} true iff this adSlot is one of the predefined 'out-of-page' slots.\n   */\n  isOutOfPage() {\n    if (typeof this.type !== 'string') {\n      throw new Error('An adSlot cannot by typeless!', this);\n    }\n    if (this.isMobile() === true) {\n      return false;\n    }\n    switch (this.type) {\n      case adTypes.maavaron: return true;\n      case adTypes.popunder: return true;\n      case adTypes.talkback: return false;\n      case adTypes.regular: return false;\n      default: return false;\n    }\n  }\n\n  /**\n   * Checks whether this adSlot is a 'maavaron' slot or not.\n   * An Out-of-page slot is a slot that is not embedded in the page 'normally'.\n   * @returns {boolean} true iff this adSlot is one of the predefined 'out-of-page' slots.\n   */\n  isMaavaron() {\n    if (typeof this.type !== 'string') {\n      throw new Error('An adSlot cannot by typeless!', this);\n    }\n    if (this.isMobile() === true) {\n      return false;\n    }\n    switch (this.type) {\n      case adTypes.maavaron: return true;\n      default: return false;\n    }\n  }\n\n  isMobile() {\n    return (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i\n      .test(window.navigator.userAgent || ''));\n  }\n  /**\n   * Checks whether or not this adSlot has a non-empty whitelist, and if so, that the current\n   * referrer appears in the whitelist.\n   * Should return false iff there is a whitelist for the current adSlot, but the referrer is not\n   * mentioned in the whitelist.\n   * @returns {boolean} true iff the ad can be displayed.\n   */\n  isWhitelisted() {\n    let whitelisted = false;\n    if (this.whitelistReferrers.length !== 0) {\n      for (const referrer of this.whitelistReferrers) {\n        if (globalConfig.referrer.indexOf(referrer) > -1) {\n          whitelisted = true;\n          break;\n        }\n      }\n    }\n    else {\n      whitelisted = true;\n    }\n    return whitelisted;\n  }\n\n  /**\n   * Checks whether or not this adSlot has a non-empty blacklist, and if so, that the current\n   * referrer does not appear in the blacklist.\n   * Should return true iff there is a blacklist for the current adSlot, and the referrer is\n   * mentioned in the blacklist - to indicate that the adSlot is 'blocked'.\n   * @returns {boolean} true iff the ad cannot be displayed.\n   */\n  isBlacklisted() {\n    let blacklisted = false;\n    if (this.blacklistReferrers.length !== 0) {\n      for (const referrer of this.blacklistReferrers) {\n        if (globalConfig.referrer.indexOf(referrer) > -1) {\n          blacklisted = true;\n          break;\n        }\n      }\n    }\n    return blacklisted;\n  }\n\n\n  /**\n   * Shows the current adSlot.\n   * It assumes a markup is available for this slot (any tag with an id attribute = this.id)\n   */\n  show() {\n    if (!this.shown === true) {\n      this.shown = true; // Ensure show will be called once per adSlot\n      googletag.cmd.push(() => {\n        if (this.deferredSlot) {\n          this.slot = this.defineSlot();\n        }\n        // console.log('calling show for slot',this.id,' called @',window.performance.now());\n        document.getElementById(this.id).classList.remove('h-hidden');\n        googletag.display(this.id);\n      });\n    }\n  }\n\n  /**\n   * Shows the current adSlot.\n   * It assumes a markup is available for this slot (any tag with an id attribute = this.id)\n   */\n  hide() {\n    googletag.cmd.push(() => {\n      document.getElementById(this.id).classList.add('h-hidden');\n    });\n  }\n\n  /**\n   * Initializes page-level slot definition for the current slot\n   * @return {Slot} slot - the Google Slot that was defined from this AdSlot configuration\n   */\n  defineSlot() {\n    if (this.isMaavaron()) {\n      const maavaronSlot = this.defineMaavaron();\n      if (this.adManager.shouldSendRequestToDfp(this)) {\n        if (!this.shown) {\n          this.shown = true; // Ensure show will be called once\n          maavaronSlot.display();\n        }\n      }\n      return maavaronSlot;\n    }\n    const googletag = window.googletag;\n    const pubads = googletag.pubads();\n    const args = [];\n    const defineFn = this.isOutOfPage() ? googletag.defineOutOfPageSlot : googletag.defineSlot;\n    // 3 or 2 params according to the function that we want to activate.\n    args.push(this.getPath());\n    if (this.isOutOfPage() === false) {\n      if (this.fluid) {\n        args.push('fluid');\n      }\n      else {\n        args.push(this.adSizeMapping);\n      }\n    }\n    args.push(this.id);\n    let slot = defineFn.apply(defineFn, args);\n    if (slot) {\n      // Responsive size Mapping\n      if (this.responsive) {\n        let responsiveSlotSizeMapping = googletag.sizeMapping();\n        const breakpoints = globalConfig.breakpointsConfig.breakpoints;\n        const keys = Object.keys(this.responsiveAdSizeMapping);\n        for (const key of keys) { // ['xxs','xs',...]\n          responsiveSlotSizeMapping.addSize(\n            [breakpoints[key], 100], // 100 is a default height, since it is height agnostic\n            this.responsiveAdSizeMapping[key]);\n        }\n        responsiveSlotSizeMapping = responsiveSlotSizeMapping.build();\n        slot = slot.defineSizeMapping(responsiveSlotSizeMapping);\n      }\n      slot = slot.addService(pubads);\n      if (this.isOutOfPage() === false) {\n        slot.setCollapseEmptyDiv(true);\n      }\n    }\n    return slot;\n  }\n\n  /**\n   * Returns the current path calculated for the adSlot\n   * @returns {String} a formatted string that represent the path for the slot definition\n   */\n  getPath() {\n    /* eslint-disable no-shadow */\n    let path = globalConfig.path || [];\n    path = path.filter(path => path !== '.');\n    path = path.map(section => `${this.id}${this.department}${section}`).join('/');\n    // If a path exist, it will be preceded with a forward slash\n    path = path && this.config.department !== '_homepage' ? `/${path}` : '';\n    /* eslint-enable no-shadow */\n    const calculatedPath = `/${this.config.network}/${this.config.adUnitBase}/${this.id}/${this.id}${this.department}${path}`; // eslint-disable-line max-len\n    return calculatedPath.toLowerCase();\n  }\n\n  /* eslint-disable */\n  slotRendered(event) {\n    const id = event.slot.getAdUnitPath().split('/')[3]; // Convention: [0]/[1]network/[2]base/[3]id\n    const isEmpty = event.isEmpty; // Did the ad return as empty?\n    const resolvedSize = event.size; // What 'creative' size did the ad return with?\n    // Empty or onload callback should be called next?\n  }\n  /* eslint-enable */\n\n  /**\n   * Refresh this adSlot\n   */\n  refresh() {\n    googletag.cmd.push(() => {\n      googletag.pubads().refresh([this.slot]);\n    });\n  }\n\n  /**\n   * Shows 'Maavaron' type adSlot using Passback definition\n   * @return {Slot} slot - the Google Slot that was defined for Maavaron\n   */\n  defineMaavaron() {\n    if (!document.referrer.match('loc.haaretz')) {\n      const adUnitMaavaronPath = this.getPath();\n      const adUnitMaavaronSize = [\n        [2, 1],\n      ];\n      const slot = googletag.pubads().definePassback(adUnitMaavaronPath, adUnitMaavaronSize)\n        .setTargeting('UserType', [this.user.type])\n        .setTargeting('age', [this.user.age])\n        .setTargeting('urgdr', [this.user.gender])\n        .setTargeting('articleId', [globalConfig.articleId])\n        .setTargeting('stg', [globalConfig.environment]);\n      return slot;\n    }\n    return null;\n  }\n}\n","/* global googletag */\nimport User from '../objects/user';\nimport ConflictResolver from '../objects/conflictResolver';\nimport AdSlot from '../objects/adSlot';\nimport { getBreakpoint, getBreakpointName } from '../utils/breakpoints';\nimport { arraysEqual } from '../utils/arrays';\n\n// There are a total of 7 adTargets:\n// \"all\",\"nonPaying\",\"anonymous\",\"registered\",\"paying\",\"digitalOnly\" and \"digitalAndPrint\"\nexport const adPriorities = {\n  high: 'high',\n  normal: 'normal',\n  low: 'low',\n};\n\nexport const adTargets = {\n  all: 'all',\n  nonPaying: 'nonPaying',\n  anonymous: 'anonymous',\n  registered: 'registered',\n  paying: 'paying',\n  digitalOnly: 'digitalOnly',\n  digitalAndPrint: 'digitalAndPrint',\n};\n\n// There are a total of 3 userTypes: \"anonymous\", \"registered\" and \"payer\"\nexport const userTypes = {\n  anonymous: 'anonymous',\n  registered: 'registered',\n  payer: 'payer',\n};\n\nexport const adTypes = {\n  maavaron: '.maavaron',\n  popunder: '.popunder',\n  talkback: '.talkback',\n  regular: '',\n};\n\n\nexport default class AdManager {\n\n  constructor(config) {\n    this.config = Object.assign({}, config);\n    this.user = new User(config);\n    this.conflictResolver = new ConflictResolver(config.conflictManagementConfig);\n    /**\n     * Avoid race conditions by making sure to respect the usual timing of GPT.\n     * This DFP implementation uses Enable-Define-Display:\n     * Define page-level settings\n     * enableServices()\n     * Define slots\n     * Display slots\n     */\n    try {\n      googletag.cmd.push(() => {\n        this.initGoogleTargetingParams(); //  Define page-level settings\n        this.initGoogleGlobalSettings();  //  enableServices()\n        this.initSlotRenderedCallback();  //  Define callbacks\n      });\n      // Holds adSlot objects as soon as possible.\n      googletag.cmd.push(() => {\n        this.adSlots = this.initAdSlots(config.adSlotConfig, adPriorities.high);\n      });\n      // Once DOM ready, add more adSlots.\n      document.addEventListener('DOMContentLoaded', () => {\n        googletag.cmd.push(() => {\n          this.adSlots = this.initAdSlots(config.adSlotConfig, adPriorities.high);\n          googletag.cmd.push(() => {\n            this.adSlots = this.initAdSlots(config.adSlotConfig, adPriorities.normal);\n          });\n        });\n      });\n      // Once window was loaded, add the rest of the adSlots.\n      window.addEventListener('load', () => {\n        googletag.cmd.push(() => {\n          this.adSlots = this.initAdSlots(config.adSlotConfig, adPriorities.low);\n        });\n      });\n    }\n    catch (err) {\n      console.error(err); // eslint-disable-line no-console\n    }\n  }\n\n  /**\n   * Shows all of the adSlots that can be displayed.\n   */\n  showAllSlots() {\n    for (const adSlotKey of this.adSlots.keys()) {\n      const adSlot = this.adSlots.get(adSlotKey);\n      if (adSlot.type !== adTypes.talkback && this.shouldSendRequestToDfp(adSlot)) {\n        adSlot.show();\n      }\n    }\n  }\n\n  /**\n   * Gets all adSlots that has a certain priority\n   * @param {adPriority} priority - the priority of the ad {high, normal, low}\n   * @return {Array<AdSlot>} adSlots - all of the defined adSlots that matches\n   * the given priority\n   */\n  getAdSlotsByPriority(priority) {\n    function priorityFilter(adSlot) {\n      return adSlot.priority === priority;\n    }\n    return Array.from(this.adSlots.values()).filter(priorityFilter);\n  }\n\n  showAllDeferredSlots() {\n    for (const deferredSlotId of this.conflictResolver.deferredSlots) {\n      if (this.adSlots.has(deferredSlotId)) {\n        if (!this.conflictResolver.isBlocked(deferredSlotId)) {\n          const deferredAdSlot = this.adSlots.get(deferredSlotId);\n          if (this.shouldSendRequestToDfp(deferredAdSlot)) {\n            deferredAdSlot.show();\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Refreshes all responsive adSlots\n   */\n  refreshAllSlots() {\n    const currentBreakpoint = getBreakpoint();\n    for (const adSlotKey of this.adSlots.keys()) {\n      const adSlot = this.adSlots.get(adSlotKey);\n      if (adSlot.responsive) {\n        if (adSlot.lastResolvedWithBreakpoint !== currentBreakpoint &&\n          this.shouldSendRequestToDfp(adSlot)) {\n          // console.log(`calling refresh for adSlot: ${adSlot.id}`);\n          adSlot.refresh();\n        }\n        else {\n          adSlot.hide();\n        }\n      }\n    }\n  }\n\n  /**\n   * Initializes adSlots based on the currently found slot markup (HTML page specific),\n   * and the predefined configuration for the slots.\n   * @param {Object} adSlotConfig - the AdSlots configuration object (see: globalConfig)\n   * @param {String} filteredPriority - filters out all adSlots that does not match\n   * a given adPriority. This is used to cherry pick the init process of ads.\n   * @returns {Map}\n   */\n  initAdSlots(adSlotConfig, filteredPriority) {\n    const adSlots = new Map(this.adSlots);\n    let adSlotPlaceholders = Array.from(document.getElementsByClassName('js-dfp-ad'));\n    adSlotPlaceholders = adSlotPlaceholders.filter(node => node.id); // only nodes with an id\n    const adSlotNodeSet = new Set();\n    adSlotPlaceholders = Array.prototype.filter.call(adSlotPlaceholders, node => {\n      if (adSlotNodeSet.has(node.id) === false) { // first occurrence of Node\n        adSlotNodeSet.add(node.id);\n        return true;\n      }\n      return false;\n    });\n    // adSlotPlaceholders = adSlotPlaceholders.sort((a,b) => a.offsetTop - b.offsetTop);\n    adSlotPlaceholders.forEach(adSlot => {\n      const adSlotPriority = adSlotConfig[adSlot.id] ?\n      adSlotConfig[adSlot.id].priority || adPriorities.normal : undefined;\n      if (adSlotConfig[adSlot.id] && adSlots.has(adSlot.id) === false &&\n        adSlotPriority === filteredPriority) {\n        // The markup has a matching configuration from adSlotConfig AND was not already defined\n        try {\n          // adSlotConfig is built from globalConfig, but can be overridden by markup\n          const computedAdSlotConfig = Object.assign({}, adSlotConfig[adSlot.id], {\n            id: adSlot.id,\n            target: adSlot.attributes['data-audtarget'] ?\n              adSlot.attributes['data-audtarget'].value : adTargets.all,\n            type: this.getAdType(adSlot.id),\n            responsive: adSlotConfig[adSlot.id].responsive,\n            fluid: adSlotConfig[adSlot.id].fluid || false,\n            user: this.user,\n            adManager: this,\n            htmlElement: adSlot,\n            department: this.config.department,\n            network: this.config.adManagerConfig.network,\n            adUnitBase: this.config.adManagerConfig.adUnitBase,\n            deferredSlot: this.conflictResolver.isBlocked(adSlot.id),\n            priority: adSlotPriority,\n          });\n          const adSlotInstance = new AdSlot(computedAdSlotConfig);\n          adSlots.set(adSlot.id, adSlotInstance);\n          if (adSlotInstance.type !== adTypes.talkback &&\n            adSlotInstance.priority === adPriorities.high &&\n            this.shouldSendRequestToDfp(adSlotInstance)) {\n            /*\n             console.log('calling show for high priority slot', adSlotInstance.id, ' called @',\n             window.performance.now());\n             */\n            adSlotInstance.show();\n          }\n        }\n        catch (err) {\n          console.error(err); // eslint-disable-line no-console\n        }\n      }\n    });\n    return adSlots;\n  }\n\n  isPriority(adSlotId) {\n    return (typeof adSlotId === 'string' &&\n    (adSlotId.indexOf('plazma') > 0 ||\n    adSlotId.indexOf('maavaron') > 0 ||\n    adSlotId.indexOf('popunder') > 0));\n  }\n\n  /**\n   * Returns the adType based on the adSlot name.\n   * @param {String} adSlotId - the adSlot's identifier.\n   * @returns {*} enumerated export 'adTypes'\n   */\n  getAdType(adSlotId) {\n    if (!adSlotId) {\n      throw new Error('Missing argument: a call to getAdType must have an adSlotId');\n    }\n    if (adSlotId.indexOf(adTypes.maavaron) > -1) return adTypes.maavaron;\n    if (adSlotId.indexOf(adTypes.popunder) > -1) return adTypes.popunder;\n    if (adSlotId.indexOf(adTypes.talkback) > -1) return adTypes.talkback;\n    return adTypes.regular;\n  }\n\n  /**\n   * @param {object} adSlot the AdSlot\n   * @returns {boolean|*}\n   */\n  shouldSendRequestToDfp(adSlot) {\n    // Conflict management check\n    return this.conflictResolver.isBlocked(adSlot.id) === false &&\n      // Valid Referrer check\n      adSlot.isWhitelisted() &&\n      // Not in referrer Blacklist\n      adSlot.isBlacklisted() === false &&\n      this.shouldDisplayAdAfterAdBlockRemoval(adSlot) &&\n      // Responsive: breakpoint contains ad?\n      this.doesBreakpointContainAd(adSlot) &&\n      // Targeting check (userType vs. slotTargeting)\n      this.doesUserTypeMatchBannerTargeting(adSlot) &&\n      // Impressions Manager check (limits number of impressions per slot)\n      this.user.impressionManager.reachedQuota(adSlot.id) === false;\n  }\n\n  shouldDisplayAdAfterAdBlockRemoval(adSlot) {\n    return !(this.config.adBlockRemoved === true &&\n    (adSlot.type === adTypes.maavaron ||\n    adSlot.type === adTypes.popunder));\n  }\n\n  /**\n   * Check whether or not an ad slot should appear for the current user type\n   * @param {String} adSlotOrTarget the adSlot to check or the target as a string\n   * @returns {boolean} true iff the slot should appear for the user type\n   */\n  doesUserTypeMatchBannerTargeting(adSlotOrTarget) {\n    const userType = this.user.type;\n    const adTarget = typeof adSlotOrTarget === 'string' ? adSlotOrTarget : adSlotOrTarget.target;\n\n    switch (adTarget) {\n      case adTargets.all : return true;\n      case adTargets.nonPaying :\n        return userType === userTypes.anonymous || userType === userTypes.registered;\n      case adTargets.anonymous : return userType === userTypes.anonymous;\n      case adTargets.registered : return userType === userTypes.registered;\n      case adTargets.paying : return userType === userTypes.payer;\n      case adTargets.digitalOnly : return userType === userTypes.payer;\n      case adTargets.digitalAndPrint : return userType === userTypes.payer;\n      default: return false;\n    }\n  }\n\n  /**\n   * Report to the AdManager that a breakpoint has been switched (passed from one break to\n   * another). Should there be a responsive slot with a\n   * @param {Breakpoint} breakpoint - the breakpoint that is currently being displayed\n   * @returns {Integer} affected - the number of adSlots affected by the change\n   */\n  switchedToBreakpoint(breakpoint) {\n    if (!breakpoint) {\n      throw new Error('Missing argument: a call to switchedToBreakpoint must have an breakpoint');\n    }\n    let count = 0;\n    for (const adSlotKey of this.adSlots.keys()) {\n      const adSlot = this.adSlots.get(adSlotKey);\n      if (adSlot.responsive === true && adSlot.lastResolvedWithBreakpoint) {\n        if (adSlot.lastResolvedWithBreakpoint !== breakpoint) {\n          adSlot.refresh();\n          count++;\n        }\n      }\n    }\n    return count;\n  }\n\n  /**\n   * Checks whether an adSlot is defined for a given breakpoint (Default: current breakpoint)\n   * @param {AdSlot} adSlot - the adSlot to check.\n   * @param {Breakpoint} [breakpoint=currentBreakpoint] - the breakpoint to check this ad in.\n   * @returns {boolean} true iff the adSlot is defined for the given breakpoint.\n   */\n  doesBreakpointContainAd(adSlot, breakpoint = getBreakpoint()) {\n    if (!adSlot) {\n      throw new Error('Missing argument: a call to doesBreakpointContainAd must have an adSlot');\n    }\n    let containsBreakpoint = true;\n    if (adSlot.responsive === true) {\n      const mapping = adSlot.responsiveAdSizeMapping[getBreakpointName(breakpoint)];\n      if (Array.isArray(mapping) === false) {\n        throw new Error(`Invalid argument: breakpoint:${breakpoint} doesn't exist!`, this);\n      }\n      containsBreakpoint = mapping.length > 0 && !arraysEqual(mapping, [0, 0]);\n    }\n    return containsBreakpoint;\n  }\n\n  /**\n   * Initializes the callback from the 'slotRenderEnded' event for each slot\n   */\n  initSlotRenderedCallback() {\n    if (window.googletag && window.googletag.apiReady) {\n      const pubads = window.googletag.pubads();\n      pubads.addEventListener('slotRenderEnded', event => {\n        const id = event.slot.getAdUnitPath().split('/')[3];\n        const isEmpty = event.isEmpty;\n        const resolvedSize = event.size;\n        // console.log('slotRenderEnded for slot',id,' called @',window.performance.now());\n        if (this.adSlots.has(id)) {\n          const adSlot = this.adSlots.get(id);\n          adSlot.lastResolvedSize = resolvedSize;\n          adSlot.lastResolvedWithBreakpoint = getBreakpoint();\n          if (isEmpty) {\n            adSlot.lastResolvedSize = ConflictResolver.EMPTY_SIZE;\n            adSlot.hide();\n            this.releaseSlotDependencies(adSlot);\n          }\n          else {\n            this.user.impressionManager.registerImpression(`${adSlot.id}${this.config.department}`);\n            this.user.impressionManager.registerImpression(`${adSlot.id}_all`);\n            this.releaseSlotDependencies(adSlot, adSlot.lastResolvedSize);\n          }\n        }\n        else {\n          /*\n           console.error(`Cannot find an adSlot with id: ${id} - Ad Unit path is\n           ${event.slot.getAdUnitPath()}`);\n           */\n        }\n      });\n    }\n    else {\n      throw new Error('googletag api was not ready when \\'initSlotRenderedCallback\\' was called!');\n    }\n  }\n\n  releaseSlotDependencies(adSlot) {\n    try {\n      const id = adSlot.id;\n      this.conflictResolver.updateResolvedSlot(id, adSlot.lastResolvedSize);\n      if (this.conflictResolver.isBlocking(id)) {\n        // Hide all blocked adSlots\n        for (const blockedSlot of this.conflictResolver.getBlockedSlotsIds(id)) {\n          if (this.conflictResolver.isBlocked(blockedSlot)) {\n            if (this.adSlots.has(blockedSlot)) {\n              this.adSlots.get(blockedSlot).hide();\n            }\n          }\n        }\n        // Show the non blocked\n        for (const deferredSlotKey of this.conflictResolver.deferredSlots.keys()) {\n          const deferredAdSlot = this.adSlots.get(deferredSlotKey);\n          if (deferredAdSlot && this.shouldSendRequestToDfp(deferredAdSlot)) {\n            this.conflictResolver.deferredSlots.delete(deferredSlotKey);\n            if (deferredAdSlot.deferredSlot) {\n              deferredAdSlot.defineSlot();\n              deferredAdSlot.deferredSlot = false;\n            }\n            deferredAdSlot.show();\n          }\n        }\n      }\n    }\n    catch (err) {\n      /* eslint-disable no-console*/\n      console.error(`Cannot updateSlotDependencies for adSlot: ${adSlot.id}`);\n      /* eslint-enable no-console*/\n    }\n  }\n\n  /**\n   * Initializes page-level targeting params.\n   */\n  initGoogleTargetingParams() {\n    if (window.googletag && window.googletag.apiReady) {\n      // Returns a reference to the pubads service.\n      const pubads = googletag.pubads();\n      // Environment targeting (dev, test, prod)\n      if (this.config.environment) {\n        pubads.setTargeting('stg', [this.config.environment]);\n      }\n\n      // User targeting\n      if (this.user.type) {\n        pubads.setTargeting('UserType', [this.user.type]);\n      }\n      if (this.user.age) {\n        pubads.setTargeting('age', [this.user.age]);\n      }\n      if (this.user.gender) {\n        pubads.setTargeting('urgdr', [this.user.gender]);\n      }\n\n      // Context targeting\n      if (this.config.articleId) {\n        pubads.setTargeting('articleId', [this.config.articleId]);\n      }\n      if (this.config.gStatCampaignNumber && this.config.gStatCampaignNumber !== -1) {\n        pubads.setTargeting('gstat_campaign_id', [this.config.gStatCampaignNumber]);\n      }\n\n      // UTM targeting\n      /* eslint-disable no-underscore-dangle */\n      if (this.config.utm_.content) {\n        pubads.setTargeting('utm_content', [this.config.utm_.content]);\n      }\n      if (this.config.utm_.source) {\n        pubads.setTargeting('utm_source', [this.config.utm_.source]);\n      }\n      if (this.config.utm_.medium) {\n        pubads.setTargeting('utm_medium', [this.config.utm_.medium]);\n      }\n      if (this.config.utm_.campaign) {\n        pubads.setTargeting('utm_campaign', [this.config.utm_.campaign]);\n      }\n      /* eslint-enable no-underscore-dangle */\n      // AdBlock removal\n      if (this.config.adBlockRemoved) {\n        pubads.setTargeting('adblock_removed', [this.config.adBlockRemoved]);\n      }\n      // University targeting - triggered via cookie\n      if (this.config.wifiLocation) {\n        pubads.setTargeting('wifi', [this.config.wifiLocation]);\n      }\n\n      // Ads Centering\n      pubads.setCentering(true);\n    }\n    else {\n      throw new Error('googletag api was not ready when \\'initGoogleTargetingParams\\' was called!');\n    }\n  }\n\n  /**\n   * Initializes googletag services.\n   */\n  initGoogleGlobalSettings() {\n    if (window.googletag && window.googletag.apiReady) {\n      if (window.location.search &&\n        window.location.search.indexOf('sraon') > 0) {\n        console.log('enableSingleRequest mode: active');// eslint-disable-line no-console\n        googletag.pubads().enableSingleRequest();\n      }\n      if (!this.config.isMobile) {\n        googletag.pubads().enableAsyncRendering();\n      }\n      else {\n        googletag.pubads().enableAsyncRendering();\n        // disabled: googletag.pubads().enableSyncRendering();\n      }\n      // Enables all GPT services that have been defined for ad slots on the page.\n      googletag.enableServices();\n    }\n    else {\n      throw new Error('googletag api wasn\\'t ready when \\'initGoogleGlobalSettings\\' was called!');\n    }\n  }\n}\n","/* globals googletag */\nimport AdManager from '../src/objects/adManager';\nimport globalConfig from './globalConfig';\nimport { getBreakpoint, debounce } from '../src/utils/breakpoints';\n\nconst defaultConfig = globalConfig || {};\nconst googletagInitTimeout = 10000;\nconst resizeTimeout = 250;\n\nexport default class DFP {\n\n  constructor(config) {\n    this.config = Object.assign({}, defaultConfig, config);\n    this.wasInitialized = false;\n    this.breakpoint = getBreakpoint();\n    this.initWindowResizeListener();\n  }\n\n  /**\n   * This part of the object's construction is dependent on the call to 'init'\n   */\n  resumeInit() {\n    try {\n      this.adManager = new AdManager(this.config);\n    }\n    catch (err) {\n      console.error(err); // eslint-disable-line no-console\n    }\n  }\n\n  /**\n   * initializes the 'googletag' global namespace and add the\n   * google publish tags library to the page\n   * @returns {Promise} that resolves to true once the googletag api is ready to use\n   * (googletag.apiReady = true)\n   */\n  initGoogleTag() {\n    const dfpThis = this;\n    return new Promise((resolve, reject) => {\n      if (dfpThis.wasInitialized === true || (window.googletag && window.googletag.apiReady)) {\n        this.adManager = this.adManager || new AdManager(this.config);\n        dfpThis.wasInitialized = true;\n        resolve(this.isGoogleTagReady);\n      }\n      else {\n        // set up a place holder for the gpt code downloaded from google\n        window.googletag = window.googletag || {};\n\n        // this is a command queue used by GPT any methods added to it will be\n        // executed when GPT code is available, if GPT is already available they\n        // will be executed immediately\n        window.googletag.cmd = window.googletag.cmd || [];\n        // load google tag services JavaScript\n        (() => {\n          const tag = window.document.createElement('script');\n          tag.async = false;\n          tag.type = 'text/javascript';\n          // var useSSL = 'https:' == document.location.protocol;\n          tag.setAttribute('src', '//www.googletagservices.com/tag/js/gpt.js');\n          const node = window.document.getElementsByTagName('script')[0];\n          tag.onload = () => {\n            dfpThis.wasInitialized = true;\n            dfpThis.resumeInit();\n            resolve(this.isGoogleTagReady);\n          };\n          tag.onerror = (error) => {\n            dfpThis.wasInitialized = false;\n            reject(error);\n          };\n          node.parentNode.insertBefore(tag, node);\n        })();\n      }\n    });\n  }\n\n  /**\n   *\n   * @returns {Promise}\n   */\n  isGoogleTagReady() {\n    const promise = new Promise((resolve, reject) => {\n      googletag.cmd.push(() => {\n        resolve(this);\n      });\n      setTimeout(() => {\n        if (!(googletag && googletag.apiReady === true)) {\n          reject(new Error('googletag failed to initialize on the page!'));\n        }\n      }, googletagInitTimeout);\n    });\n    return promise;\n  }\n\n  /**\n   * Initializes the window resize listener to support responsive ad refreshes\n   */\n  initWindowResizeListener() {\n    const dfpThis = this;\n    function onResize() {\n      const currentBreakpoint = getBreakpoint();\n      if (dfpThis.breakpoint !== currentBreakpoint) {\n        dfpThis.breakpoint = currentBreakpoint;\n        if (dfpThis.adManager) {\n          dfpThis.adManager.refreshAllSlots();\n        }\n        else {\n          throw new Error('initWindowResizeListener error - adManager instance is not available');\n        }\n      }\n    }\n    const debouncedFunction = debounce(onResize, resizeTimeout);\n    window.onresize = debouncedFunction;\n  }\n}\n","import DFP from './dfp';\nimport globalConfig from './globalConfig';\nimport { version as v } from './../package.json';\n// const pkg = require('./../package.json');\n\n// DFP version is based on the package.json\nDFP.version = v || 'VERSION';\n\n/*\n // Only for development mode\n if ( process.env.NODE_ENV !== 'production' ) {\n DFP.dev = '123';\n }\n */\n\nexport const config = globalConfig;\nexport const version = DFP.version;\nexport default DFP;\n"],"names":["stringToMap","string","separator","operator","map","itemsArr","split","forEach","element","keyValue","length","decodeURIComponent","getCookieAsMap","document","cookie","tmsso","engsso","addHours","date","hours","SyntaxError","isNaN","parseInt","TypeError","result","Date","setHours","getHours","addDays","days","setDate","getDate","debounce","func","wait","immediate","timeout","context","this","args","arguments","later","apply","callNow","setTimeout","getBreakpoint","breakpoint","windowWidth","window","innerWidth","breakpoints","xs","xxs","s","m","l","xl","xxl","getBreakpointName","resultBreakpoint","arraysEqual","a","b","Array","isArray","i","ssoKey","location","hostname","indexOf","dfpConfig","Object","assign","referrer","isMobile","test","navigator","userAgent","isHomepage","pathname","environment","department","domain","regexMatch","exec","path","sectionArray","articleId","slice","filter","section","index","arr","reduce","last","current","concat","env","port","dev","prod","undefined","articleIdMatch","pop","content","getUrlParam","source","medium","campaign","key","results","RegExp","search","adBlockRemoved","localStorage","getItem","err","wifiLocation","cookieMap","_htzwif","gStatCampaignNumber","gstatCampaign","JSON","parse","CampaignNumber","isType1","breakpoints1","breakpoints2","getTime","globalConfig","breakpointsConfig","keys","ImpressionsManager","impressionManagerConfig","now","config","impressions","retrieveImpressionsData","initImpressionMap","migrateImpressionsData","_this","hasOwnProperty","call","frequency","impressionsData","oldImpressionsArray","e","impression","adUnitImpression","name","data","tmp","target","slotId","join","id","exposed","expires","_this2","adSlotId","err1","debouncedSave","saveImpressionsToLocalStorageImpl","setItem","stringify","error","slot","_this3","shouldUpdateExpiryDate","initSlotFromConfig","updateExpiryDate","slotName","Error","frequencyMap","match","frequencyRegex","setMilliseconds","setSeconds","setMinutes","maxImpressions","saveImpressionsToLocalStorage","atQuota","userTypes","User","userConfig","sso","type","getUserType","impressionManager","ImpressionManager","age","getUserAge","gender","getUserGender","userType","payerProp","payer","registered","anonymous","usrae","urgdr","ConflictResolver","conflictManagementConfig","dependencyMap","initializeDependencyMap","deferredSlots","Set","conflictManagementJson","queue","Map","value","rules","item","onsize","avoid","set","resolvedSize","has","get","resolvedWith","isBlocked","adSlotKey","adSlot","adSlotRule","parentResolvedWith","add","find","size","sizeString","numberStr","isBlocking","from","EMPTY_SIZE","adSlotConfig","responsive","fluid","user","adManager","htmlElement","priority","deferredSlot","network","adUnitBase","adSizeMapping","responsiveAdSizeMapping","blacklistReferrers","whitelistReferrers","lastResolvedSize","lastResolvedWithBreakpoint","defineSlot","adTypes","maavaron","popunder","talkback","regular","whitelisted","blacklisted","shown","cmd","push","getElementById","classList","remove","display","isMaavaron","maavaronSlot","defineMaavaron","shouldSendRequestToDfp","googletag","pubads","defineFn","isOutOfPage","defineOutOfPageSlot","getPath","responsiveSlotSizeMapping","sizeMapping","addSize","build","defineSizeMapping","addService","setCollapseEmptyDiv","calculatedPath","toLowerCase","event","getAdUnitPath","isEmpty","refresh","_this4","adUnitMaavaronPath","adUnitMaavaronSize","definePassback","setTargeting","adPriorities","adTargets","AdManager","conflictResolver","initGoogleTargetingParams","initGoogleGlobalSettings","initSlotRenderedCallback","adSlots","initAdSlots","high","addEventListener","normal","low","show","priorityFilter","values","deferredSlotId","deferredAdSlot","currentBreakpoint","hide","filteredPriority","adSlotPlaceholders","getElementsByClassName","node","adSlotNodeSet","prototype","adSlotPriority","computedAdSlotConfig","attributes","all","getAdType","adManagerConfig","adSlotInstance","AdSlot","isWhitelisted","isBlacklisted","shouldDisplayAdAfterAdBlockRemoval","doesBreakpointContainAd","doesUserTypeMatchBannerTargeting","reachedQuota","adSlotOrTarget","adTarget","nonPaying","paying","digitalOnly","digitalAndPrint","count","containsBreakpoint","mapping","apiReady","releaseSlotDependencies","registerImpression","updateResolvedSlot","getBlockedSlotsIds","blockedSlot","deferredSlotKey","delete","utm_","setCentering","log","enableSingleRequest","enableAsyncRendering","enableServices","defaultConfig","googletagInitTimeout","resizeTimeout","DFP","wasInitialized","initWindowResizeListener","dfpThis","Promise","resolve","reject","isGoogleTagReady","tag","createElement","async","setAttribute","getElementsByTagName","onload","resumeInit","onerror","parentNode","insertBefore","promise","onResize","refreshAllSlots","debouncedFunction","onresize","version","v"],"mappings":"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"}