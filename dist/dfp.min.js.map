{"version":3,"file":"dfp.min.js","sources":["../src/utils/cookieUtils.js","../src/globalConfig.js","../src/utils/time.js","../src/utils/breakpoints.js","../src/objects/impressionsManager.js","../src/objects/user.js","../src/objects/conflictResolver.js","../src/objects/adSlot.js","../src/utils/arrays.js","../src/objects/adManager.js","../src/dfp.js","../src/index.js"],"sourcesContent":["/**\n * Htz-cookie-util\n * @module htzCookieUtil\n * @author Elia Grady elia.grady@haaretz.co.il\n * @license MIT\n */\n\n/**\n * Translates Key-Value string into a convenient map.\n * @param {string} string String in format of \"key<operator>value<separator>.....\"\n * @param {object} options object for overriding defaults:\n * options.separator is a String or regExp that separates between each key value pairs\n * (default is ';'). options.operator is a String or regExp that separates between each key\n * and value within a pair (default is '=').\n * @returns {object} a map object, with key-value mapping according to the passed configuration.\n */\nfunction stringToMap(string,\n  { separator = ';', operator = '=' } = {}) {\n  const map = {};\n  const itemsArr = string.split(separator);\n  //console.log(`called stringToMap with separator:`, separator, `therefore, itemsArr is now:`,itemsArr);\n  for (const key in itemsArr) {\n    if (itemsArr.hasOwnProperty(key)) {\n      const keyValue = itemsArr[key].split(operator);\n      if(keyValue.length == 2 ) { //Only operate on valid splits\n        map[keyValue[0]] = decodeURIComponent(keyValue[1]);\n      }\n    }\n  }\n  return map;\n}\nexport const ssoKey = window.location.hostname.indexOf('haaretz.com') > -1 ? 'engsso' : 'tmsso';\n\n// Translates Cookie string into a convenient map.\nexport default function getCookieAsMap() {\n  const map = stringToMap(document.cookie, { separator: /;\\s?/ });\n  if (typeof map['tmsso'] === 'string') {\n    map['tmsso'] = stringToMap(map['tmsso'], { separator: ':' });\n  }\n  if (typeof map['engsso'] === 'string') {\n    map['engsso'] = stringToMap(map['engsso'], { separator: ':' });\n  }\n  return map;\n}\n\n","/*global dfpBaseConf*/\r\nimport { ssoKey } from '../src/utils/cookieUtils';\r\n//globalConfig for DFP\r\nconst dfpConfig = Object.assign({\r\n  get referrer() {\r\n    return document.referrer ? document.referrer : \"\";\r\n  },\r\n  get isMobile() {\r\n    return (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i\r\n      .test(window.navigator.userAgent || \"\"));\r\n  },\r\n  /**\r\n   * Returns true iff the loaded page is the homepage (no inner path)\r\n   * @returns {boolean}\r\n   */\r\n  get isHomepage() {\r\n    return window.location.pathname === \"/\" || this.environment === 3; //'prod'\r\n  },\r\n  get department() {\r\n    return this.isHomepage ? '_homepage' : '_section';\r\n  },\r\n  /**\r\n   * returns the domain the page was loaded to. i.e: 'haaretz.co.il', 'haaretz.com'\r\n   * @returns {string} the domain name from the windows's location hostname property\r\n   */\r\n  get domain() {\r\n    const regexMatch = /([\\d|\\w]+)(\\.co\\.il|\\.com)(.*)?/.exec(window.location.hostname);\r\n    const result = regexMatch ? regexMatch[0] : window.location.hostname;\r\n    return result;\r\n  },\r\n  /**\r\n   * Returns an array of concatenated paths, separated by a dot.\r\n   * For example, for the URL:\r\n   * http://www.haaretz.co.il/news/world/america/us-election-2016/LIVE-1.2869045\r\n   * the path is '/news/world/america/us-election-2016/LIVE-1.2869045'.\r\n   * This function takes the directories ['news', 'world', 'america', 'us-election-2016']\r\n   * and converts it to the following format:\r\n   * ['.news', '.news.world', '.news.world.america', '.news.world.america.us-election-2016']\r\n   * This denotes the path configuration for the given adSlot\r\n   * @returns {Array.<T>} an array of path names\r\n   */\r\n  get path() {\r\n    let sectionArray = this.articleId ?\r\n      window.location.pathname.split('/').slice(1,-1) :\r\n      window.location.pathname.split('/').slice(1);\r\n    sectionArray = sectionArray.filter(path => path != 'wwwMobileSite' && path != 'whtzMobileSite');\r\n    return sectionArray\r\n      .map(section => `.${section}`)\r\n      .map((section, index, arr) => arr.slice(0,index+1)\r\n        .reduce((last, current) => last.concat(current)));\r\n  },\r\n  /**\r\n   * Returns the current environment targeting param, if such is defined.\r\n   * @returns {number} targeting param, 1 for local development, 2 for test servers and 3 for prod.\r\n   * May return undefined if no targeting is specified.\r\n   */\r\n  get environment() {\r\n    const env = {\r\n      dev: 1,\r\n      test: 2,\r\n      prod: 3,\r\n    };\r\n    return window.location.port === '8080' ? env.dev :\r\n      (window.location.hostname.indexOf('pre.haaretz.co.il') > -1\r\n      || window.location.hostname.indexOf('tmtest.themarker.com') > -1) ? env.test :\r\n        (window.location.pathname.indexOf('/cmlink/Haaretz.HomePage') > -1\r\n        || window.location.pathname.indexOf('/cmlink/TheMarker.HomePage') > -1) ? env.prod : undefined;\r\n  },\r\n  /**\r\n   * Returns the articleIf if on an article page, or null otherwise\r\n   * @returns {string} an articleId string from the pathname, or null if none is found\r\n   */\r\n  get articleId() {\r\n    const articleIdMatch = /\\d\\.\\d+/g.exec(window.location.pathname);\r\n    let articleId;\r\n    if(articleIdMatch) {\r\n      articleId = articleIdMatch.pop(); //Converts [\"1.23145\"] to \"1.23145\"\r\n    }\r\n    return articleId;\r\n  },\r\n  utm_ : {\r\n    get content() {\r\n      return this.getUrlParam('utm_content');\r\n    },\r\n    get source() {\r\n      return this.getUrlParam('utm_source');\r\n    },\r\n    get medium() {\r\n      return this.getUrlParam('utm_medium');\r\n    },\r\n    get campaign() {\r\n      return this.getUrlParam('utm_campaign');\r\n    },\r\n    getUrlParam(key) {\r\n      let results = RegExp(`(${key})(=)([^&\"]+)`).exec(window.location.search);\r\n      return results && results[3] ? results[3] : undefined;\r\n    },\r\n  },\r\n  get adBlockRemoved() {\r\n    let adBlockRemoved;\r\n    try {\r\n      adBlockRemoved = localStorage.getItem('adblock_removed') ?\r\n        true : false;\r\n    }\r\n    catch (err) {\r\n      adBlockRemoved = false;\r\n    }\r\n    return adBlockRemoved;\r\n  },\r\n  get gStatCampaignNumber() {\r\n    let gstatCampaign;\r\n    try {\r\n      gstatCampaign = localStorage.getItem('GstatCampaign') ?\r\n        JSON.parse(localStorage.getItem('GstatCampaign')) : undefined;\r\n    }\r\n    catch (err) {\r\n      //In case of thrown 'SecurityError' or 'QuotaExceededError', the variable should be undefined\r\n      gstatCampaign = undefined;\r\n    }\r\n    return gstatCampaign ? gstatCampaign['CampaignNumber'] : undefined;\r\n  },\r\n  adSlotConfig: {\r\n    \"haaretz.co.il.example.slot\" : {\r\n      id: \"slotId\",\r\n      //path : \"/network/base/slotId/slotId_subsection\", Will be calculated from AdManager\r\n      responsive: true,\r\n      adSizeMapping: [['width1','height1'],...['widthN','heightN']],\r\n      responsiveAdSizeMapping : {\r\n        xxs: [['width1','height1'],...['widthN','heightN'],],\r\n        xs: [['width1','height1'],...['widthN','heightN'],],\r\n        s: [['width1','height1'],...['widthN','heightN'],],\r\n        m: [['width1','height1'],...['widthN','heightN'],],\r\n        l: [['width1','height1'],...['widthN','heightN'],],\r\n        xl: [['width1','height1'],...['widthN','heightN'],],\r\n        xxl: [['width1','height1'],...['widthN','heightN'],],\r\n      },\r\n      blacklistReferrers: \"comma, delimited, blacklisted, referrer, list\",\r\n      whitelistReferrers: \"comma, delimited, referrer, list\",\r\n    }\r\n  },\r\n  adManagerConfig : {\r\n    network: '9401',\r\n    adUnitBase: 'haaretz.co.il_Web',\r\n  },\r\n  breakpointsConfig : {\r\n    get breakpoints() {\r\n      const isType1 = true; //Override in VM from backend to control this toggle.\r\n      return isType1 ? this.breakpoints1 : this.breakpoints2;\r\n    },\r\n    // Type 1\r\n    breakpoints1 : {\r\n      xxs: 600,\r\n      xs: 761,\r\n      s: 993,\r\n      m: 1009,\r\n      l: 1291,\r\n      xl: 1600,\r\n      xxl: 1900,\r\n    },\r\n    // Type 2\r\n    breakpoints2 : {\r\n      xxs: 600,\r\n      xs: 1000,\r\n      s: 1150,\r\n      m: 1281,\r\n      l: 1600,\r\n      xl: 1920,\r\n      xxl: 1920,\r\n    }\r\n  },\r\n  userConfig: {\r\n    type : undefined,\r\n    age: undefined,\r\n    gender: undefined,\r\n  },\r\n  conflictManagementConfig: {\r\n    \"blocking.ad.unit.name\": [\r\n      {\r\n        onsize: \"1280x200,970x250,3x3\",\r\n        avoid: \"blocked.ad.unit.name\"\r\n      },\r\n      {\r\n        onsize: \"1280x200,970x250,3x3\",\r\n        avoid: \"blocked.ad.unit.name\"\r\n      }\r\n    ]\r\n  },\r\n  impressionManagerConfig: {\r\n    \"ad.unit.name\": {\r\n      target: 'all|section|homepage',\r\n      frequency: '$1/$2(day|hour)',\r\n      exposed: 0,\r\n      expires: (new Date).getTime()\r\n    }\r\n  },\r\n  sso: ssoKey,\r\n\r\n},window.dfpConfig);\r\n\r\nexport default dfpConfig;\r\n","/**\n * Helper function. Adds N hours to a given date object.\n * @param date the date to derive from\n * @param hours the amount of hours to add, in whole numbers\n * @returns {Date} the new date, derived from adding the given hours\n */\nexport function addHours(date, hours) {\n  if(!date) {\n    throw new SyntaxError(`addHours called without a required 'date' parameter!`);\n  }\n  if(!hours) {\n    throw new SyntaxError(`addHours called without a required 'hours' parameter!`);\n  }\n  else if(isNaN(parseInt(hours))) {\n    throw new TypeError(`addHours called with an invalid integer 'hours' parameter!`);\n  }\n  const result = new Date(date);\n  result.setHours(result.getHours() + parseInt(hours));\n  return result;\n}\n\n/**\n * Helper function. Adds N days to a given date object.\n * @param date the date to derive from\n * @param hours the amount of days to add, in whole numbers\n * @returns {Date} the new date, derived from adding the given days\n */\nexport function addDays(date, days) {\n  if(!date) {\n    throw new SyntaxError(`addDays called without a required 'date' parameter!`);\n  }\n  if(!days) {\n    throw new SyntaxError(`addDays called without a required 'hours' parameter!`);\n  }\n  else if(isNaN(parseInt(days))) {\n    throw new TypeError(`addDays called with an invalid integer 'hours' parameter!`);\n  }\n  const result = new Date(date);\n  result.setDate(result.getDate() + parseInt(days));\n  return result;\n}\n","import globalConfig from '../globalConfig';\n\nconst breakpoints = globalConfig.breakpointsConfig.breakpoints;\n\n/**\n * Returns a function, that, as long as it continues to be invoked, will not\n * be triggered. The function will be called after it stops being called for\n * N milliseconds. If `immediate` is passed, trigger the function on the\n * leading edge, instead of the trailing.\n * @param func the function to run\n * @param wait the timeout period to avoid running the function\n * @param immediate leading edge modifier\n * @returns {Function} the debounced function\n * //TODO translate to ES6 format - in progress...\n */\nexport function debounce(func, wait = 100, immediate) {\n  let timeout;\n  return function() {\n    const context = this, args = arguments;\n    const later = () => {\n      timeout = null;\n      if (!immediate) func.apply(context, args);\n    };\n    const callNow = immediate && !timeout;\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n    if (callNow) func.apply(context, args);\n  };\n}\n\n/**\n * Returns the current breakpoint that is closest to the window's width\n * @returns {number} the break that the current width represents\n */\nexport function getBreakpoint() {\n  let breakpoint = breakpoints.xxl;\n  let windowWidth = window.innerWidth;\n  if(windowWidth < breakpoints.xxl) { breakpoint = breakpoints.xl } else { return breakpoint }\n  if(windowWidth < breakpoints.xl) { breakpoint = breakpoints.l } else { return breakpoint }\n  if(windowWidth < breakpoints.l) { breakpoint = breakpoints.m } else { return breakpoint }\n  if(windowWidth < breakpoints.m) { breakpoint = breakpoints.s } else { return breakpoint }\n  if(windowWidth < breakpoints.s) { breakpoint = breakpoints.xs } else { return breakpoint }\n  if(windowWidth < breakpoints.xs) { breakpoint = breakpoints.xxs } else { return breakpoint }\n  return breakpoint\n}\n/**\n * Returns the current breakpoint that is closest to the window's width\n * @returns {string} the breakpoint label that the current width represents\n */\nexport function getBreakpointName(breakpoint) {\n  let resultBreakpoint = 'xxl';\n  let windowWidth = breakpoint || window.innerWidth;\n  if(windowWidth < breakpoints.xxl) { resultBreakpoint = 'xl' } else { return resultBreakpoint }\n  if(windowWidth < breakpoints.xl) { resultBreakpoint = 'l' } else { return resultBreakpoint }\n  if(windowWidth < breakpoints.l) { resultBreakpoint = 'm' } else { return resultBreakpoint }\n  if(windowWidth < breakpoints.m) { resultBreakpoint = 's' } else { return resultBreakpoint }\n  if(windowWidth < breakpoints.s) { resultBreakpoint = 'xs' } else { return resultBreakpoint }\n  if(windowWidth < breakpoints.xs) { resultBreakpoint = 'xxs' } else { return resultBreakpoint }\n  return resultBreakpoint\n}\n\n","import globalConfig from '../globalConfig';\nimport { addHours, addDays } from '../utils/time';\nimport { debounce }  from '../utils/breakpoints';\n\nexport const keys = {\n  impressions : 'impressions',\n  frequency : 'frequency',\n  /**\n   * [0] - full match\n   * [1] - impression count i.e: \"1\" | \"22\"\n   * [2] - impression expiry range quantifier  i.e: \"1\" | \"22\"\n   * [3] - impression expiry range unit i.e: \"day\" | \"hour\"\n   */\n  frequencyRegex: /(\\d+)\\/(\\d+)(day|hour)/,\n  expires : 'expires',\n  exposed : 'exposed',\n  target : 'target',\n  maxImpressions : 'maxImpressions',\n  hours : 'hour',\n  days : 'day',\n  adSlotId : 'id',\n};\n\n\n\n\nexport default class ImpressionsManager {\n\n  constructor(impressionManagerConfig) {\n    this.now = (new Date).getTime(); //this date is used for comparisons only\n    this.config = Object.assign({}, impressionManagerConfig);\n    this.impressions = this.retrieveImpressionsData();\n    this.initImpressionMap();\n  }\n\n  retrieveImpressionsData() {\n    let impressions = this.migrateImpressionsData();\n    //Merge migrated data with new data\n    //console.log('Migrated: ',impressions);\n    Object.keys(impressions).map((key, index) => {\n      impressions[key] = Object.assign({},impressions[key],this.config[key]);\n    });\n    //console.log('Merged: ',impressions);\n    //Filter out entries without frequency\n    for(const key in impressions) {\n      if(impressions.hasOwnProperty(key)) {\n        if(!impressions[key][keys.frequency]) {\n          //console.log(`Removing ${key} - since it does not have a frequency`,impressions[key]);\n          delete impressions[key];\n        }\n      }\n    }\n    //console.log('Filtered: ',impressions);\n    return impressions;\n  }\n\n  migrateImpressionsData() {\n    let impressions;\n    let impressionsData;\n    try {\n      impressionsData = window.localStorage.getItem(keys.impressions);\n    }\n    catch (err) {\n      //In case of thrown 'SecurityError' or 'QuotaExceededError', the variable should be undefined\n      impressionsData = undefined;\n    }\n    try {\n      impressions = JSON.parse(impressionsData);\n    }\n    catch (err) {\n      //Here is where old impression data is converted to new format\n      impressions = {};\n      const oldImpressionsArray = impressionsData.split(';').filter(e => e);\n\n      oldImpressionsArray.forEach((impression) => {\n        try {\n          const adUnitImpression = impression.split(' = ');\n          const name = adUnitImpression[0];\n          const data = adUnitImpression[1];\n          let tmp = name.split('.');\n          let target = tmp.pop();\n          if(target && target == 'hp') {\n            target = 'homepage';\n          }\n          const slotId = tmp.join('.');\n          const id = `${slotId}_${target}`;\n          const exposed = parseInt(data.split('/')[0]) || 0;\n          const expires = parseInt(data.split('/')[1]) || this.now;\n          impressions[id] = {};\n          impressions[id][keys.adSlotId] = slotId;\n          impressions[id][keys.target] = target;\n          impressions[id][keys.exposed] = exposed;\n          impressions[id][keys.expires] = expires;\n        }\n        catch (err) {\n          console.log(`Failed converting impression: ${impression}`,err);\n        }\n\n      });\n    }\n    return impressions || {};\n  }\n\n  /**\n   * Define the debounced version of the local storage save\n   */\n  saveImpressionsToLocalStorage() {\n    if(this.debouncedSave && typeof this.debouncedSave === 'function') {\n      this.debouncedSave();\n    }\n    else {\n      this.debouncedSave = debounce(this.saveImpressionsToLocalStorageImpl, 250, false);\n      this.debouncedSave();\n    }\n  }\n\n  /**\n   * Implementation of saving the impression map to localstorage\n   */\n  saveImpressionsToLocalStorageImpl() {\n    try {\n      localStorage.setItem(keys.impressions, JSON.stringify(this.impressions));\n    }\n    catch (err) {\n      //In case of thrown 'SecurityError' or 'QuotaExceededError', the operation should not break\n      console.log(`localStorage isn't available:`,err);\n    }\n  }\n\n  /**\n   * Initializes the impression map based on the retrieved impressions and the global\n   * configuration.\n   */\n  initImpressionMap() {\n    Object.keys(this.config).map((key, index) => {\n      const adSlotId = key;\n      let slot, shouldUpdateExpiryDate = false;\n      // Case I: Existing slot (update)\n      if(slot = this.impressions[adSlotId]) {\n        // Case I.I Existing slot, frequency has changed\n        if( this.config[adSlotId][keys.frequency] =!  slot[keys.frequency]) {\n          // Updating the frequency will trigger a new expiry date\n          shouldUpdateExpiryDate = true;\n          this.impressions[adSlotId][keys.frequency] = this.config[adSlotId][keys.frequency];\n        } // Case I.II Existing slot, old expiry date\n        else if(this.now >  slot[keys.expires]) {\n          // Old value that should trigger a new expiry date\n          shouldUpdateExpiryDate = true;\n        }\n      } // Case II: Non-existing slot (create new slot)\n      else {\n        this.initSlotFromConfig(adSlotId);\n      } //Finally, updates the expiry date (cases I.I and I.II)\n      if(shouldUpdateExpiryDate) {\n        this.updateExpiryDate(adSlotId);\n      }\n    });\n  }\n\n  /**\n   * Updates the expiry date of a slotName based on the configured slot frequency\n   * @param slotName the slotName to update.\n   */\n  updateExpiryDate(slotName) {\n    let now = new Date();\n    if(!(this.impressions[slotName] && this.impressions[slotName][keys.frequency])) {\n      throw new Error(`Unable to update expiry date for slot: ${slotName}\n      - this.impressions[slotName]:`,this.impressions[slotName]);\n    }\n    const frequencyMap = this.impressions[slotName][keys.frequency].match(keys.frequencyRegex);\n    now.setMilliseconds(0);\n    now.setSeconds(0);\n    now.setMinutes(0);\n    if(frequencyMap.indexOf(keys.days) > -1) {\n      now.setHours(0);\n    }\n    this.impressions[slotName][keys.expires] = (frequencyMap.indexOf(keys.days) > -1 ?\n      addDays(now, frequencyMap[2]) : addHours(now, frequencyMap[2])).getTime();\n\n    //Set max impressions:\n    this.impressions[slotName][keys.maxImpressions] = parseInt(frequencyMap[1]);\n    //Reset exposed\n    this.impressions[slotName][keys.exposed] = 0;\n  }\n\n\n\n  /**\n   * Initializes a non-existing slot from the passed global configuration for the slot\n   * @param slotName the name of the slot to create\n   */\n  initSlotFromConfig(slotName) {\n    let slot = this.impressions[slotName] || {};\n    slot[keys.frequency] = this.config[slotName][keys.frequency];\n    slot[keys.target] = this.config[slotName][keys.target];\n    slot[keys.exposed] = 0;\n    this.impressions[slotName] = slot;\n    this.updateExpiryDate(slotName);\n  }\n\n  /**\n   * Registers an impression for a given adSlot.\n   * @param adSlotId the adSlot id to register an impression for\n   * @returns {boolean} returns true iff the impression has been registered\n   */\n  registerImpression(adSlotId) {\n    if(adSlotId) {\n      const slot = this.impressions[adSlotId];\n      if(slot) {\n        const exposed = slot[keys.exposed];\n        if(isNaN(parseInt(exposed)) === false) {\n          this.impressions[adSlotId][keys.exposed] += 1;\n          try {\n            this.saveImpressionsToLocalStorage();\n          }\n          catch (err) {\n            console.log('Error saving ad impressions to localStorage!', err);\n          }\n          return true;\n        }\n      }\n\n    }\n    return false;\n  }\n\n  /**\n   * Checks whether an adSlot has reached it's allocated impressions count.\n   * @param adSlotId the adSlot to check\n   * @returns {boolean} true iff there is a quota for the adSlot, and it has been reached\n   */\n  reachedQuota(adSlotId) {\n    // An adSlotId is suffixed with _homepage | _section if it's targeting is different\n    // between the two. If there is no difference, an _all suffix can be used.\n    adSlotId = this.impressions[`${adSlotId}${globalConfig.department}`] ?\n      `${adSlotId}${globalConfig.department}`: `${adSlotId}_all`;\n\n    let slot = this.impressions[adSlotId];\n    let atQuota = false;\n    if(slot) {\n      let now = (new Date()).getTime();\n      //Second element of 2/4day matches '2'\n      const expires = this.impressions[adSlotId][keys.expires];\n      if(expires < now) {\n        this.updateExpiryDate(adSlotId);\n      }\n      else {\n        const maxImpressions = this.impressions[adSlotId][keys.maxImpressions];\n        //Not expired, did reach max impressions?\n        if(maxImpressions) {\n          atQuota = this.impressions[adSlotId][keys.exposed] >= maxImpressions;\n        }\n      }\n\n    }\n    return atQuota;\n  }\n\n\n  /**\n   * Clears the impression map from 'exposed' impressions\n   */\n  resetImpressions() {\n    const impressions = this.impressions;\n    for(const key in impressions) {\n      if(impressions.hasOwnProperty(key)) {\n        if(impressions[key][keys.exposed]) {\n          impressions[key][keys.exposed] = 0;\n        }\n      }\n    }\n    this.saveImpressionsToLocalStorage();\n  }\n}\n","import getCookieAsMap, { ssoKey } from '../utils/cookieUtils';\nimport ImpressionManager from './impressionsManager';\nimport globalConfig from '../globalConfig';\n\nexport const userTypes = {\n  payer: 'payer',\n  registered: 'registered',\n  anonymous: 'anonymous'\n};\n\nexport default class User {\n  constructor(config) {\n    this.config = Object.assign({}, config.userConfig);\n    let cookieMap = getCookieAsMap();\n    this.ssoKey = globalConfig.sso;\n    if(!cookieMap[this.ssoKey]) {\n      //console.log(`ssoKey flipped! - was ${this.ssoKey}`);\n      //Flips the ssoKey, since cookieMap.ssoKey cannot be used to retrieve data\n      this.ssoKey = this.ssoKey === 'tmsso' ? 'engsso' : 'tmsso';\n      //console.log(`ssoKey flipped! - now ${this.ssoKey}`);\n    }\n    this.type = this.getUserType(cookieMap);\n    this.impressionManager = new ImpressionManager(config.impressionManagerConfig);\n    this.age = this.getUserAge(cookieMap);\n    this.gender = this.getUserGender(cookieMap);\n  }\n\n  getUserType(cookieMap) {\n    if(cookieMap && cookieMap[this.ssoKey]) {\n      const payerProp = window.location.hostname.indexOf(\"haaretz.com\") > -1 ? 'HdcPusr' : 'HtzPusr';\n      return cookieMap[payerProp] ? userTypes.payer : userTypes.registered\n    }\n    else {\n      return userTypes.anonymous;\n    }\n  }\n\n  getUserAge(cookieMap) {\n    let age;\n    const usrae = cookieMap[this.ssoKey] && cookieMap[this.ssoKey].usrae;\n    if(usrae) {\n      age = parseInt(cookieMap[this.ssoKey].usrae);\n      age = age > 0 ? age : undefined;\n    }\n    return age;\n  }\n\n  getUserGender(cookieMap) {\n    let gender;\n    const urgdr = cookieMap[this.ssoKey] && cookieMap[this.ssoKey].urgdr;\n    if(urgdr) {\n      gender = parseInt(cookieMap[this.ssoKey].urgdr);\n      gender = gender === 2 || gender === 1 ? gender : undefined;\n    }\n    return gender;\n  }\n}\n","class ConflictResolver {\n  constructor(conflictManagementConfig) {\n    this.dependencyMap = this.initializeDependencyMap(conflictManagementConfig);\n    this.deferredSlots = new Set();\n  }\n  initializeDependencyMap(conflictManagementJson) {\n    let queue = new Map();\n    Object.keys(conflictManagementJson).map(function(key, value) {\n      let rules = conflictManagementJson[key];\n      if(rules) {\n        rules = rules.filter((item) => item.onsize && item.avoid);\n      }\n      queue.set(key, {\n        id: key,\n        rules: rules,\n        resolvedWith: null\n      })\n    });\n    return queue;\n  }\n\n  updateResolvedSlot(adSlotId,resolvedSize) {\n    if(!adSlotId) {\n      throw new Error(\"updateResolvedSlot must be called with an adSlotId!\");\n    }\n    if(!resolvedSize) {\n      throw new Error(\"updateResolvedSlot must be called with a resolved size!\");\n    }\n    if(this.dependencyMap.has(adSlotId)) {\n      this.dependencyMap.get(adSlotId).resolvedWith = resolvedSize;\n    }\n  }\n\n\n  isBlocked(adSlotId) {\n    if(!adSlotId) {\n      throw new Error(\"isBlocked must be called with an adSlotId!\");\n    }\n    let isBlocked = false;\n    for(const adSlotKey of this.dependencyMap.keys()) {\n      const adSlot = this.dependencyMap.get(adSlotKey);\n      for(const adSlotRule of adSlot.rules) {\n        //Found rule specific to our target\n        if(adSlotRule.avoid === adSlotId) {\n          const parentResolvedWith = adSlot.resolvedWith;\n          // Fail fast: parent is not resolved yet - unknown returned size.\n          if(!parentResolvedWith) {\n            isBlocked = true;\n            this.deferredSlots.add(adSlotId);\n          }\n          if(adSlotRule.onsize.split(',').find(size => {\n              size = size.split('x').map(numberStr => parseInt(numberStr));\n              return this.arraysEqual(size,parentResolvedWith)\n            })) {\n            //Block found\n            this.deferredSlots.add(adSlotId);\n            isBlocked = true;\n          }\n        }\n      }\n    }\n    return isBlocked;\n  }\n\n  isBlocking(adSlotId) {\n    if(!adSlotId) {\n      throw new Error(\"isBlocking must be called with an adSlotId!\");\n    }\n    let isBlocking = false;\n    for(const adSlotKey of this.dependencyMap.keys()) {\n      if(adSlotKey === adSlotId) {\n        isBlocking = true;\n      }\n    }\n    return isBlocking;\n  }\n\n  getBlockedSlotsIds(adSlotId) {\n    if(this.dependencyMap.has(adSlotId)) {\n      return Array.from(this.dependencyMap.get(adSlotId).rules.map(adSlot => adSlot.avoid));\n    }\n  }\n\n  arraysEqual(a, b) {\n    if (a === b) return true;\n    if (a == null || b == null) return false;\n    if (a.length != b.length) return false;\n    for (let i = 0; i < a.length; ++i) {\n      if (a[i] !== b[i]) return false;\n    }\n    return true;\n  }\n}\nConflictResolver.EMPTY_SIZE = []; //TODO : add this to the testing scenarios\nexport default ConflictResolver;\n","import { adTargets, adTypes } from '../objects/adManager';\nimport globalConfig from '../globalConfig';\nimport dfpInstance from '../index';\nexport default class adSlot {\n\n  constructor(adSlotConfig) {\n    this.config = Object.assign({}, adSlotConfig);\n\n    // Part I : Markup configuration - passed from AdManager\n    this.id = this.config.id;\n    if(!this.config.id) {\n      throw new Error(\"an adSlot requires an id!\")\n    }\n    this.target = this.config.target;\n    this.type = this.config.type;\n    this.responsive = this.config.responsive;\n    this.user = this.config.user;\n    this.adManager = this.config.adManager;\n    this.deferredSlot = this.config.deferredSlot;\n\n    // Part II : Global, general ad configuration - passed from AdManager\n    this.department = this.config.department;\n    this.network = this.config.network;\n    this.adUnitBase = this.config.adUnitBase;\n\n    // Part III : ad specific configuration - passed from globalConfig.adSlotConfig\n    this.adSizeMapping = this.config.adSizeMapping;\n    this.responsiveAdSizeMapping = this.config.responsiveAdSizeMapping;\n    this.blacklistReferrers = this.config.blacklistReferrers ?\n      this.config.blacklistReferrers.split(',') : [];\n    this.whitelistReferrers = this.config.whitelistReferrers ?\n      this.config.whitelistReferrers.split(',') : [];\n\n\n    // Part IV : Runtime configuration - calculated data - only present in runtime\n    this.lastResolvedSize = undefined; // Initialized in 'slotRenderEnded' callback\n    this.lastResolvedWithBreakpoint = undefined; // Initialized in 'slotRenderEnded' callback\n    this.slot  = undefined; // Holds a googletag.Slot object\n    // [https://developers.google.com/doubleclick-gpt/reference#googletag.Slot]\n    try {\n      if(!this.deferredSlot) {\n        this.slot = this.defineSlot();\n      }\n    }\n    catch (err) {\n      console.log(err);\n    }\n  }\n\n  /**\n   * Checks whether this adSlot is an 'Out-of-page' slot or not.\n   * An Out-of-page slot is a slot that is not embedded in the page 'normally'.\n   * @returns {boolean} true iff this adSlot is one of the predefined 'out-of-page' slots.\n   */\n  isOutOfPage() {\n    if(typeof this.type != 'string') {\n      throw new Error(\"An adSlot cannot by typeless!\",this);\n    }\n    if(this.isMobile() == true) {\n      return false;\n    }\n    switch(this.type) {\n      case adTypes.maavaron: return true;\n      case adTypes.popunder: return true;\n      case adTypes.talkback: return false;\n      case adTypes.regular: return false;\n      default: return false;\n    }\n  }\n\n  /**\n   * Checks whether this adSlot is a 'maavaron' slot or not.\n   * An Out-of-page slot is a slot that is not embedded in the page 'normally'.\n   * @returns {boolean} true iff this adSlot is one of the predefined 'out-of-page' slots.\n   */\n  isMaavaron() {\n    if(typeof this.type != 'string') {\n      throw new Error(\"An adSlot cannot by typeless!\",this);\n    }\n    if(this.isMobile() == true) {\n      return false;\n    }\n    switch(this.type) {\n      case adTypes.maavaron: return true;\n      default: return false;\n    }\n  }\n\n  isMobile() {\n    return (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i\n      .test(window.navigator.userAgent || \"\"));\n  }\n  /**\n   * Checks whether or not this adSlot has a non-empty whitelist, and if so, that the current\n   * referrer appears in the whitelist.\n   * Should return false iff there is a whitelist for the current adSlot, but the referrer is not\n   * mentioned in the whitelist.\n   * @returns {boolean} true iff the ad can be displayed.\n   */\n  isWhitelisted() {\n    let whitelisted = false;\n    if (this.whitelistReferrers.length !== 0) {\n      for (const referrer of this.whitelistReferrers) {\n        if (globalConfig.referrer.indexOf(referrer) > -1) {\n          whitelisted = true;\n          break;\n        }\n      }\n    }\n    else {\n      whitelisted = true;\n    }\n    return whitelisted;\n  }\n\n  /**\n   * Checks whether or not this adSlot has a non-empty blacklist, and if so, that the current\n   * referrer does not appear in the blacklist.\n   * Should return true iff there is a blacklist for the current adSlot, and the referrer is\n   * mentioned in the blacklist - to indicate that the adSlot is 'blocked'.\n   * @returns {boolean} true iff the ad cannot be displayed.\n   */\n  isBlacklisted() {\n    let blacklisted = false;\n    if (this.blacklistReferrers.length !== 0) {\n      for (const referrer of this.blacklistReferrers) {\n        if (globalConfig.referrer.indexOf(referrer) > -1) {\n          blacklisted = true;\n          break;\n        }\n      }\n    }\n    return blacklisted;\n  }\n\n\n  /**\n   * Shows the current adSlot.\n   * It assumes a markup is available for this slot (any tag with an id attribute = this.id)\n   */\n  show() {\n    googletag.cmd.push(() =>  {\n      console.log('calling show for slot',this.id,' called @',window.performance.now());\n      document.getElementById(this.id).classList.remove('h-hidden');\n      googletag.display(this.id);\n    })\n  }\n\n  /**\n   * Shows the current adSlot.\n   * It assumes a markup is available for this slot (any tag with an id attribute = this.id)\n   */\n  hide() {\n    googletag.cmd.push(() =>  {\n      document.getElementById(this.id).classList.add('h-hidden');\n    })\n  }\n\n  /**\n   * Initializes page-level slot definition for the current slot\n   */\n  defineSlot() {\n    if(this.isMaavaron()) {\n      const maavaronSlot = this.defineMaavaron();\n      if(this.adManager.shouldSendRequestToDfp(this)) {\n        maavaronSlot.display();\n      }\n      return maavaronSlot;\n    }\n    const googletag = window.googletag;\n    const pubads = googletag.pubads();\n    let args = [];\n    let defineFn = this.isOutOfPage() ? googletag.defineOutOfPageSlot : googletag.defineSlot;\n    //3 or 2 params according to the function that we want to activate.\n    args.push(this.getPath());\n    if(this.isOutOfPage() === false) {\n      args.push(this.adSizeMapping);\n    }\n    args.push(this.id);\n    let slot = defineFn.apply(defineFn, args);\n    if(slot) {\n      // Responsive size Mapping\n      if(this.responsive) {\n        let responsiveSlotSizeMapping = googletag.sizeMapping();\n        const breakpoints = globalConfig.breakpointsConfig.breakpoints;\n        const keys = Object.keys(this.responsiveAdSizeMapping);\n        for(const key of keys) { //['xxs','xs',...]\n          responsiveSlotSizeMapping.addSize(\n            [breakpoints[key],100],//100 is a default height, since it is height agnostic\n            this.responsiveAdSizeMapping[key]);\n        }\n        responsiveSlotSizeMapping = responsiveSlotSizeMapping.build();\n        slot = slot.defineSizeMapping(responsiveSlotSizeMapping);\n      }\n      slot = slot.addService(pubads);\n      if(this.isOutOfPage() === false) {\n        slot.setCollapseEmptyDiv(true);\n      }\n    }\n    return slot;\n  }\n\n  /**\n   * Returns the current path calculated for the adSlot\n   * @returns {*} a formatted string that represent the path for the slot definition\n   */\n  getPath() {\n    let path = globalConfig.path || [];\n    path = path.filter(path => path != '.');\n    path = path.map(section => `${this.id}${this.department}${section}`).join('/');\n    //If a path exist, it will be preceded with a forward slash\n    path = path && this.config.department !== '_homepage' ? `/${path}` : '';\n    const calculatedPath = `/${this.config.network}/${this.config.adUnitBase}/${this.id}/${this.id}${this.department}${path}`;\n    return calculatedPath.toLowerCase();\n  }\n\n  slotRendered(event) {\n    const id = event.slot.getAdUnitPath().split('/')[3]; // Convention: [0]/[1]network/[2]base/[3]id\n    const isEmpty = event.isEmpty; // Did the ad return as empty?\n    const resolvedSize = event.size; // What 'creative' size did the ad return with?\n    // Empty or onload callback should be called next?\n    \n  }\n\n  /**\n   * Refresh this adSlot\n   */\n  refresh() {\n    googletag.cmd.push(() => {\n      googletag.pubads().refresh([this.slot]);\n    });\n  }\n\n  /**\n   * Shows 'Maavaron' type adSlot using Passback definition\n   */\n  defineMaavaron() {\n    if(!document.referrer.match('loc.haaretz')) {\n      const adUnitMaavaronPath = this.getPath();\n      const adUnitMaavaronSize = [\n        [2, 1]\n      ];\n      const slot = googletag.pubads().definePassback(adUnitMaavaronPath, adUnitMaavaronSize)\n        .setTargeting('UserType', [this.user.type])\n        .setTargeting('age', [this.user.age])\n        .setTargeting('urgdr', [this.user.gender])\n        .setTargeting('articleId', [globalConfig.articleId])\n        .setTargeting('stg', [globalConfig.environment]);\n      return slot;\n    }\n  }\n  /*\n   These functions were on the adUnitDFP prototype:\n   getNumOfImpressions: ()\n   getPeriodImpression: ()\n   hasMoreImpressions: ()\n   hasValidReferrer: ()\n   hide: ()\n   isMaavaron: ()\n   maxImpressions: ()\n   maxImpressionsPeriod: ()\n   nextExpiresDate: ()\n   onEmptyCallBack: ()\n   onLoaded: ()\n   refresh: ()\n   setNumOfImpressions: ()\n   show: ()\n   updateNumOfImpressions: ()\n   */\n}\n","/**\n * Checks whether two arrays are equal\n * @param a the first array to check\n * @param b the second array to check\n * @returns {boolean} true iff both a and b are arrays, with equal values\n */\nexport function arraysEqual(a, b) {\n  if (!a || !b) return false;\n  if (!Array.isArray(a) || !Array.isArray(b)) return false;\n  if (a === b) return true;\n  if (a.length != b.length) return false;\n  for (let i = 0; i < a.length; ++i) {\n    if (a[i] !== b[i]) return false;\n  }\n  return true;\n}\n","/*global googletag*/\nimport User from '../objects/user';\nimport ConflictResolver from '../objects/conflictResolver';\nimport AdSlot from '../objects/adSlot';\nimport globalConfig from '../globalConfig';\nimport { getBreakpoint, getBreakpointName } from '../utils/breakpoints';\nimport { arraysEqual } from '../utils/arrays';\n\n// There are a total of 7 adTargets:\n// \"all\",\"nonPaying\",\"anonymous\",\"registered\",\"paying\",\"digitalOnly\" and \"digitalAndPrint\"\nexport const adTargets = {\n  all: 'all',\n  nonPaying: 'nonPaying',\n  anonymous: 'anonymous',\n  registered: 'registered',\n  paying: 'paying',\n  digitalOnly: 'digitalOnly',\n  digitalAndPrint: 'digitalAndPrint',\n};\n\n// There are a total of 3 userTypes: \"anonymous\", \"registered\" and \"payer\"\nexport const userTypes = {\n  anonymous: 'anonymous',\n  registered: 'registered',\n  payer: 'payer',\n};\n\nexport const adTypes = {\n  maavaron: '.maavaron',\n  popunder: '.popunder',\n  talkback: '.talkback',\n  regular: '',\n};\n\n\nexport default class AdManager {\n\n  constructor(config) {\n    this.config = Object.assign({}, config);\n    this.user = new User(config);\n    this.conflictResolver = new ConflictResolver(config.conflictManagementConfig);\n    /**\n     * Avoid race conditions by making sure to respect the usual timing of GPT.\n     * This DFP implementation uses Enable-Define-Display:\n     * Define page-level settings\n     * enableServices()\n     * Define slots\n     * Display slots\n     */\n    try {\n      googletag.cmd.push(() => {\n        this.initGoogleTargetingParams();\n        this.initSlotRenderedCallback();\n      });\n      // Holds adSlot objects as soon as possible.\n      googletag.cmd.push(() => {\n        this.adSlots = this.initAdSlots(config.adSlotConfig);\n      });\n      // Once DOM ready, add the rest of the adSlots.\n      document.addEventListener('DOMContentLoaded', () => {\n        googletag.cmd.push(() => {\n          this.adSlots = this.initAdSlots(config.adSlotConfig);\n          this.initGoogleGlobalSettings();\n        });\n      });\n    }\n    catch (err) {\n      console.log(err);\n    }\n  }\n\n  /**\n   * Shows all of the adSlots that can be displayed.\n   */\n  showAllSlots() {\n    for(const adSlotKey of this.adSlots.keys()) {\n      const adSlot = this.adSlots.get(adSlotKey);\n      if(adSlot.type !== adTypes.talkback && this.shouldSendRequestToDfp(adSlot)) {\n        adSlot.show();\n      }\n    }\n  }\n\n  showAllDeferredSlots() {\n    for(const deferredSlotId of this.conflictResolver.deferredSlots) {\n      if(this.adSlots.has(deferredSlotId)) {\n        if(!this.conflictResolver.isBlocked(deferredSlotId)) {\n          const deferredAdSlot = this.adSlots.get(deferredSlotId);\n          if(this.shouldSendRequestToDfp(deferredAdSlot)) {\n            deferredAdSlot.show();\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Refreshes all responsive adSlots\n   */\n  refreshAllSlots() {\n    const currentBreakpoint = getBreakpoint();\n    for(const adSlotKey of this.adSlots.keys()) {\n      const adSlot = this.adSlots.get(adSlotKey);\n      if(adSlot.responsive) {\n        if(adSlot.lastResolvedWithBreakpoint != currentBreakpoint && this.shouldSendRequestToDfp(adSlot)) {\n          console.log(`calling refresh for adSlot: ${adSlot.id}`);\n          adSlot.refresh();\n        } else {\n          adSlot.hide();\n        }\n      }\n    }\n  }\n\n  /**\n   * Initializes adSlots based on the currently found slot markup (HTML page specific),\n   * and the predefined configuration for the slots.\n   * @param adSlotConfig\n   * @returns {Map}\n   */\n  initAdSlots(adSlotConfig) {\n    let adSlots = new Map(this.adSlots);\n    let adSlotPlaceholders = Array.from(document.getElementsByClassName('js-dfp-ad'));\n    adSlotPlaceholders = adSlotPlaceholders.filter(node => node.id); //only nodes with an id\n    const adSlotNodeSet = new Set();\n    adSlotPlaceholders = Array.prototype.filter.call(adSlotPlaceholders, node => {\n      if(adSlotNodeSet.has(node.id) === false) { //first occurrence of Node\n        adSlotNodeSet.add(node.id);\n        return true;\n      }\n      return false;\n    });\n    adSlotPlaceholders = adSlotPlaceholders.sort((a,b) => a.offsetTop - b.offsetTop);\n    adSlotPlaceholders.forEach(adSlot => {\n      if(adSlotConfig[adSlot.id] && adSlots.has(adSlot.id) === false) {\n        //the markup has a matching configuration from adSlotConfig AND was not already defined\n        try {\n          // adSlotConfig is built from globalConfig, but can be overridden by markup\n          const computedAdSlotConfig = Object.assign({},adSlotConfig[adSlot.id],{\n            id: adSlot.id,\n            target: adSlot.attributes['data-audtarget'] ? adSlot.attributes['data-audtarget'].value : adTargets.all,\n            type: this.getAdType(adSlot.id),\n            responsive: adSlotConfig[adSlot.id].responsive && adSlot.classList.contains('js-dfp-resp-refresh'), //TODO change to global config\n            user: this.user,\n            adManager: this,\n            department: this.config.department,\n            network: this.config.adManagerConfig.network,\n            adUnitBase: this.config.adManagerConfig.adUnitBase,\n            deferredSlot: this.conflictResolver.isBlocked(adSlot.id) || !this.isPriority(adSlot.id),\n          });\n          adSlots.set(adSlot.id,new AdSlot(computedAdSlotConfig));\n        }\n        catch (err) {\n          console.log(err);\n        }\n      }\n    });\n    return adSlots;\n  }\n\n  isPriority(adSlotId) {\n    return (typeof adSlotId === 'string' && (adSlotId.indexOf('plazma') > 0 || adSlotId.indexOf('maavaron') > 0 || adSlotId.indexOf('popunder') > 0 ));\n  }\n\n  /**\n   * Returns the adType based on the adSlot name.\n   * @param adSlotId the adSlot's identifier.\n   * @returns {*} enumerated export 'adTypes'\n   */\n  getAdType(adSlotId) {\n    if(!adSlotId) {\n      throw new Error(`Missing argument: a call to getAdType must have an adSlotId`,this);\n    }\n    if(adSlotId.indexOf(adTypes.maavaron) > -1) return adTypes.maavaron;\n    if(adSlotId.indexOf(adTypes.popunder) > -1) return adTypes.popunder;\n    if(adSlotId.indexOf(adTypes.talkback) > -1) return adTypes.talkback;\n    return adTypes.regular;\n  }\n\n  /**\n   *  //TODO: add explicit type override\n   * @param {object} adSlot the AdSlot\n   * @returns {boolean|*}\n   */\n  shouldSendRequestToDfp(adSlot) {\n    // TODO: go over each one of the following and mark as checked once implemented\n    // Conflict management check\n    return this.conflictResolver.isBlocked(adSlot.id) === false &&\n        // Valid Referrer check\n      adSlot.isWhitelisted() &&\n        // Not in referrer Blacklist\n      adSlot.isBlacklisted() === false &&\n        // Not a Talkback adUnit type, not a Maavaron type and not a Popunder type\n      // adSlot.type !== adTypes.maavaron &&\n      // adSlot.type !== adTypes.talkback &&\n      this.shouldDisplayAdAfterAdBlockRemoval(adSlot) &&\n        // Responsive: breakpoint contains ad?\n      this.doesBreakpointContainAd(adSlot) &&\n        // Targeting check (userType vs. slotTargeting)\n      this.doesUserTypeMatchBannerTargeting(adSlot) &&\n        // Impressions Manager check (limits number of impressions per slot)\n      this.user.impressionManager.reachedQuota(adSlot.id) === false;\n  }\n\n  shouldDisplayAdAfterAdBlockRemoval(adSlot) {\n    return !(this.config.adBlockRemoved && (adSlot.type === adTypes.maavaron || adSlot.type === adTypes.popunder));\n  }\n\n  /**\n   * Check whether or not an ad slot should appear for the current user type\n   * @param adSlotOrTarget the adSlot to check or the target as a sting\n   * @returns {boolean} true iff the slot should appear for the user type\n   */\n  doesUserTypeMatchBannerTargeting(adSlotOrTarget) {\n\n    const userType = this.user.type;\n    const adTarget = typeof adSlotOrTarget === 'string' ? adSlotOrTarget : adSlotOrTarget.target;\n\n    switch (adTarget) {\n      case adTargets.all : return true;\n      case adTargets.nonPaying : return userType === userTypes.anonymous || userType === userTypes.registered;\n      case adTargets.anonymous : return userType === userTypes.anonymous;\n      case adTargets.registered : return userType === userTypes.registered;\n      case adTargets.paying : return userType === userTypes.payer;\n      case adTargets.digitalOnly : return userType === userTypes.payer;\n      case adTargets.digitalAndPrint : return userType === userTypes.payer;\n      default: return false;\n    }\n  }\n\n  /**\n   * Report to the AdManager that a breakpoint has been switched (passed from one break to\n   * another). Should there be a responsive slot with a\n   * @param breakpoint the breakpoint that is currently being displayed\n   * @returns {number} the number of adSlots affected by the change\n   */\n  switchedToBreakpoint(breakpoint) {\n    if(!breakpoint) {\n      throw new Error(`Missing argument: a call to switchedToBreakpoint must have an breakpoint`,this);\n    }\n    let count = 0;\n    for(const adSlotKey of this.adSlots.keys()) {\n      const adSlot = this.adSlots.get(adSlotKey);\n      if(adSlot.responsive === true && adSlot.lastResolvedWithBreakpoint) {\n        if(adSlot.lastResolvedWithBreakpoint != breakpoint) {\n          adSlot.refresh(); //TODO check logic - should it check the responsiveAdSizeMapping first?\n          count++;\n        }\n      }\n    }\n    return count;\n  }\n\n  /**\n   * Checks whether an adSlot is defined for a given breakpoint (Default: current breakpoint)\n   * @returns {boolean} true iff the adSlot is defined for the given breakpoint.\n   */\n  doesBreakpointContainAd(adSlot, breakpoint = getBreakpoint()) {\n    if(!adSlot) {\n      throw new Error(`Missing argument: a call to doesBreakpointContainAd must have an adSlot`,this);\n    }\n    //TODO check if default value is being passed (if the next line is redundant)\n    breakpoint = breakpoint || getBreakpoint();\n    let containsBreakpoint = true;\n    if(adSlot.responsive === true) {\n      const mapping = adSlot.responsiveAdSizeMapping[getBreakpointName(breakpoint)];\n      if(Array.isArray(mapping) === false) {\n        throw new Error(`Invalid argument: breakpoint:${breakpoint} doesn't exist!`,this);\n      }\n      containsBreakpoint = mapping.length > 0 && !arraysEqual(mapping,[0,0]);\n    }\n    return containsBreakpoint;\n  }\n\n  /**\n   * Initializes the callback from the 'slotRenderEnded' event for each slot\n   * //TODO refactor: break down to smaller submethods\n   */\n  initSlotRenderedCallback() {\n    if(window.googletag && window.googletag.apiReady) {\n      const pubads = window.googletag.pubads();\n      pubads.addEventListener('slotRenderEnded', event => {\n        const id = event.slot.getAdUnitPath().split('/')[3];\n        const isEmpty = event.isEmpty;\n        const resolvedSize = event.size;\n        console.log('slotRenderEnded for slot',id,' called @',window.performance.now());\n        if(this.adSlots.has(id)) {\n          const adSlot = this.adSlots.get(id);\n          adSlot.lastResolvedSize = resolvedSize;\n          adSlot.lastResolvedWithBreakpoint = getBreakpoint();\n          if(isEmpty) {\n            adSlot.hide();\n            this.releaseSlotDependencies(adSlot);\n          }\n          else {\n            this.user.impressionManager.registerImpression(`${adSlot.id}${this.config.department}`);\n            this.user.impressionManager.registerImpression(`${adSlot.id}_all`);\n            this.releaseSlotDependencies(adSlot);\n          }\n        }\n        else {\n          //Log an error\n          console.log(`Cannot find an ad with id: ${id} - Ad Unit path is ${event.slot.getAdUnitPath()}`);\n        }\n      });\n    }\n    else {\n      throw new Error(`googletag api was not ready when 'initSlotRenderedCallback' was called!`);\n    }\n  }\n\n  releaseSlotDependencies(adSlot) {\n    try {\n      const id = adSlot.id;\n      this.conflictResolver.updateResolvedSlot(id,ConflictResolver.EMPTY_SIZE);\n      if(this.conflictResolver.isBlocking(id)) {\n        // Hide all blocked adSlots\n        for(const blockedSlot of this.conflictResolver.getBlockedSlotsIds(id)) {\n          if(this.conflictResolver.isBlocked(blockedSlot)) {\n            if(this.adSlots.has(blockedSlot)) {\n              this.adSlots.get(blockedSlot).hide();\n            }\n          }\n        }\n        // Show the non blocked\n        for(const deferredSlotKey of this.conflictResolver.deferredSlots.keys()) {\n          const deferredAdSlot = this.adSlots.get(deferredSlotKey);\n          if(deferredAdSlot && this.shouldSendRequestToDfp(deferredAdSlot)) {\n            this.conflictResolver.deferredSlots.delete(deferredSlotKey);\n            if(deferredAdSlot.deferredSlot) {\n              deferredAdSlot.defineSlot();\n              deferredAdSlot.deferredSlot = false;\n            }\n            deferredAdSlot.show();\n          }\n        }\n      }\n    }\n    catch (err) {\n      console.log(`Cannot updateSlotDependencies for adSlot: ${adSlot.id}`);\n    }\n  }\n\n  /**\n   * Initializes page-level targeting params.\n   */\n  initGoogleTargetingParams() {\n    if(window.googletag && window.googletag.apiReady) {\n\n      //Returns a reference to the pubads service.\n      const pubads = googletag.pubads();\n\n      // Environment targeting (dev, test, prod)\n      if (this.config.environment) {\n        pubads.setTargeting('stg', [this.config.environment]);\n      }\n\n      // User targeting\n      if (this.user.type) {\n        pubads.setTargeting('UserType', [this.user.type]);\n      }\n      if (this.user.age) {\n        pubads.setTargeting('age', [this.user.age]);\n      }\n      if (this.user.gender) {\n        pubads.setTargeting('urgdr', [this.user.gender]);\n      }\n\n      // Context targeting\n      if (this.config.articleId) {\n        pubads.setTargeting('articleId', [this.config.articleId]);\n      }\n      if (this.config.gStatCampaignNumber && this.config.gStatCampaignNumber != -1) {\n        pubads.setTargeting('gstat_campaign_id', [this.config.gStatCampaignNumber]);\n      }\n\n      // UTM targeting\n      if (this.config.utm_.content) {\n        pubads.setTargeting('utm_content', [this.config.utm_.content]);\n      }\n      if (this.config.utm_.source) {\n        pubads.setTargeting('utm_source', [this.config.utm_.source]);\n      }\n      if (this.config.utm_.medium) {\n        pubads.setTargeting('utm_medium', [this.config.utm_.medium]);\n      }\n      if (this.config.utm_.campaign) {\n        pubads.setTargeting('utm_campaign', [this.config.utm_.campaign]);\n      }\n      // AdBlock removal\n      if (this.config.adBlockRemoved) {\n        pubads.setTargeting('adblock_removed', [this.config.adBlockRemoved]);\n      }\n\n      // Ads Centering\n      pubads.setCentering(true);\n    }\n    else {\n      throw new Error(`googletag api was not ready when 'initGoogleTargetingParams' was called!`);\n    }\n  }\n\n  /**\n   * Initializes googletag services.\n   */\n  initGoogleGlobalSettings() {\n    if(window.googletag && window.googletag.apiReady) {\n      if(window.location.search && window.location.search.indexOf('sraon') > 0) {\n        console.log('enableSingleRequest mode: active');\n        googletag.pubads().enableSingleRequest();\n      }\n      if(!this.config.isMobile) {\n        googletag.pubads().enableAsyncRendering();\n      }\n      else {\n        googletag.pubads().enableAsyncRendering(); // disabled: googletag.pubads().enableSyncRendering();\n      }\n      // Enables all GPT services that have been defined for ad slots on the page.\n      googletag.enableServices();\n    }\n    else {\n      throw new Error(`googletag api was not ready when 'initGoogleGlobalSettings' was called!`);\n    }\n  }\n}\n","/* globals googletag */\nimport AdManager  from '../src/objects/adManager';\nimport globalConfig from './globalConfig';\nconst defaultConfig = globalConfig || {};\nimport { getBreakpoint, getBreakpointName, debounce }  from '../src/utils/breakpoints';\nconst googletagInitTimeout = 10000;\nconst resizeTimeout = 250;\n\nexport default class DFP {\n\n  constructor(config) {\n    this.config = Object.assign({}, defaultConfig, config);\n    this.wasInitialized = false;\n    this.breakpoint = getBreakpoint();\n    this.initWindowResizeListener();\n  }\n\n  /**\n   * This part of the object's construction is dependent on the call to 'init'\n   */\n  resumeInit() {\n    try{\n      this.adManager = new AdManager(this.config);\n    }\n    catch (err) {\n      console.log(err);\n    }\n  }\n\n  /**\n   * initializes the 'googletag' global namespace and add the\n   * google publish tags library to the page\n   * @returns {Promise} that resolves to true once the googletag api is ready to use\n   * (googletag.apiReady = true)\n   */\n  initGoogleTag() {\n    const dfpThis = this;\n    return new Promise((resolve,reject) => {\n      if (dfpThis.wasInitialized == true || (window.googletag && window.googletag.apiReady)) {\n        this.adManager = this.adManager || new AdManager(this.config);\n        dfpThis.wasInitialized = true;\n        resolve(this.isGoogleTagReady);\n      }\n      else {\n        // set up a place holder for the gpt code downloaded from google\n        window.googletag = window.googletag || {};\n\n        // this is a command queue used by GPT any methods added to it will be\n        // executed when GPT code is available, if GPT is already available they\n        // will be executed immediately\n        window.googletag.cmd = window.googletag.cmd || [];\n        //load google tag services JavaScript\n        (() => {\n          const tag = window.document.createElement('script');\n          tag.async = false;\n          tag.type = 'text/javascript';\n          //var useSSL = 'https:' == document.location.protocol;\n          tag.setAttribute('src','//www.googletagservices.com/tag/js/gpt.js');\n          var node = window.document.getElementsByTagName('script')[0];\n          tag.onload = (() => {\n            dfpThis.wasInitialized = true;\n            dfpThis.resumeInit();\n            resolve(this.isGoogleTagReady);\n          });\n          tag.onerror = ((error) => {\n            dfpThis.wasInitialized = false;\n            reject(error);\n          });\n          node.parentNode.insertBefore(tag, node);\n        })();\n      }\n    });\n  }\n\n  /**\n   *\n   * @returns {Promise}\n   */\n  isGoogleTagReady() {\n    let promise = new Promise((resolve,reject) => {\n      googletag.cmd.push(() => {\n        resolve(this);\n      });\n      setTimeout(() => {\n        if(!(googletag && googletag.apiReady === true)) {\n          reject(new Error(\"googletag failed to initialize on the page!\"));\n        }\n      },googletagInitTimeout);\n    });\n    return promise;\n  }\n\n  /**\n   * Initializes the window resize listener to support responsive ad refreshes\n   */\n  initWindowResizeListener() {\n    const dfpThis = this;\n    function onResize() {\n      const currentBreakpoint = getBreakpoint();\n      if(dfpThis.breakpoint != currentBreakpoint) {\n        dfpThis.breakpoint = currentBreakpoint;\n        if(dfpThis.adManager) {\n          dfpThis.adManager.refreshAllSlots();\n        }\n        else {\n          throw new Error(\"initWindowResizeListener error - adManager instance is not available\")\n        }\n      }\n    }\n    const debouncedFunction = debounce(onResize,resizeTimeout);\n    window.onresize = debouncedFunction;\n  }\n}\n","import DFP from './dfp';\nimport globalConfig from './globalConfig';\n\n// Correct version will be set with the 'rollup-replace plugin'\nDFP.version = 'VERSION';\n\n//// Only for development mode\n//if ( process.env.NODE_ENV !== 'production' ) {\n//  DFP.dev = '123';\n//}\n\nexport const config = globalConfig;\nexport const version = DFP.version;\nexport default DFP;\n"],"names":["stringToMap","string","separator","operator","map","itemsArr","split","key","hasOwnProperty","keyValue","length","decodeURIComponent","getCookieAsMap","document","cookie","addHours","date","hours","SyntaxError","isNaN","parseInt","TypeError","result","Date","setHours","getHours","addDays","days","setDate","getDate","debounce","func","wait","immediate","timeout","context","this","args","arguments","later","apply","callNow","setTimeout","getBreakpoint","breakpoint","breakpoints","xxl","windowWidth","window","innerWidth","xl","l","m","s","xs","xxs","getBreakpointName","resultBreakpoint","arraysEqual","a","b","Array","isArray","i","ssoKey","location","hostname","indexOf","dfpConfig","Object","assign","referrer","isMobile","test","navigator","userAgent","isHomepage","pathname","environment","department","domain","regexMatch","exec","path","sectionArray","articleId","slice","filter","section","index","arr","reduce","last","current","concat","env","port","dev","prod","undefined","articleIdMatch","pop","content","getUrlParam","source","medium","campaign","results","RegExp","search","adBlockRemoved","localStorage","getItem","err","gStatCampaignNumber","gstatCampaign","JSON","parse","isType1","breakpoints1","breakpoints2","getTime","globalConfig","breakpointsConfig","keys","ImpressionsManager","impressionManagerConfig","now","config","impressions","retrieveImpressionsData","initImpressionMap","migrateImpressionsData","_this","frequency","impressionsData","oldImpressionsArray","e","forEach","impression","adUnitImpression","name","data","tmp","target","slotId","join","id","exposed","expires","_this2","adSlotId","log","debouncedSave","saveImpressionsToLocalStorageImpl","setItem","stringify","slot","shouldUpdateExpiryDate","_this3","initSlotFromConfig","updateExpiryDate","slotName","Error","frequencyMap","match","frequencyRegex","setMilliseconds","setSeconds","setMinutes","maxImpressions","saveImpressionsToLocalStorage","atQuota","userTypes","User","userConfig","cookieMap","sso","type","getUserType","impressionManager","ImpressionManager","age","getUserAge","gender","getUserGender","payerProp","payer","registered","anonymous","usrae","urgdr","ConflictResolver","conflictManagementConfig","dependencyMap","initializeDependencyMap","deferredSlots","Set","conflictManagementJson","queue","Map","value","rules","item","onsize","avoid","set","resolvedSize","has","get","resolvedWith","isBlocked","adSlotKey","adSlot","adSlotRule","parentResolvedWith","add","find","size","numberStr","isBlocking","from","EMPTY_SIZE","adSlotConfig","responsive","user","adManager","deferredSlot","network","adUnitBase","adSizeMapping","responsiveAdSizeMapping","blacklistReferrers","whitelistReferrers","lastResolvedSize","lastResolvedWithBreakpoint","defineSlot","adTypes","maavaron","popunder","talkback","regular","whitelisted","blacklisted","cmd","push","performance","getElementById","classList","remove","display","isMaavaron","maavaronSlot","defineMaavaron","shouldSendRequestToDfp","googletag","pubads","defineFn","isOutOfPage","defineOutOfPageSlot","getPath","responsiveSlotSizeMapping","sizeMapping","addSize","build","defineSizeMapping","addService","setCollapseEmptyDiv","calculatedPath","toLowerCase","event","getAdUnitPath","isEmpty","refresh","_this4","adUnitMaavaronPath","adUnitMaavaronSize","definePassback","setTargeting","adTargets","AdManager","conflictResolver","initGoogleTargetingParams","initSlotRenderedCallback","adSlots","initAdSlots","addEventListener","initGoogleGlobalSettings","show","deferredSlotId","deferredAdSlot","currentBreakpoint","hide","adSlotPlaceholders","getElementsByClassName","node","adSlotNodeSet","prototype","call","sort","offsetTop","computedAdSlotConfig","attributes","all","getAdType","contains","adManagerConfig","isPriority","AdSlot","isWhitelisted","isBlacklisted","shouldDisplayAdAfterAdBlockRemoval","doesBreakpointContainAd","doesUserTypeMatchBannerTargeting","reachedQuota","adSlotOrTarget","userType","adTarget","nonPaying","paying","digitalOnly","digitalAndPrint","count","containsBreakpoint","mapping","apiReady","releaseSlotDependencies","registerImpression","updateResolvedSlot","getBlockedSlotsIds","blockedSlot","deferredSlotKey","delete","utm_","setCentering","enableSingleRequest","enableAsyncRendering","enableServices","defaultConfig","googletagInitTimeout","resizeTimeout","DFP","wasInitialized","initWindowResizeListener","dfpThis","Promise","resolve","reject","isGoogleTagReady","tag","createElement","async","setAttribute","getElementsByTagName","onload","resumeInit","onerror","error","parentNode","insertBefore","promise","onResize","refreshAllSlots","debouncedFunction","onresize","version"],"mappings":"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"}