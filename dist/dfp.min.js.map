{"version":3,"sources":["../src/utils/cookieUtils.js","../src/utils/time.js","../src/utils/breakpoints.js","../src/utils/arrays.js","../jspm_packages/npm/systemjs-plugin-babel@0.0.17/babel-helpers/classCallCheck.js","../jspm_packages/npm/systemjs-plugin-babel@0.0.17/babel-helpers/createClass.js","../src/globalConfig.js","../src/objects/impressionsManager.js","../src/objects/user.js","../src/objects/conflictResolver.js","../src/objects/adSlot.js","../src/objects/adManager.js","../src/dfp.js","../src/index.js"],"names":["stringToMap","string","separator","undefined","_ref$separator","operator","_ref$operator","map","itemsArr","split","forEach","element","keyValue","length","decodeURIComponent","e","getCookieAsMap","document","cookie","tmsso","engsso","addHours","date","hours","SyntaxError","isNaN","parseInt","TypeError","result","Date","setHours","getHours","addDays","days","setDate","getDate","debounce","func","wait","arguments","immediate","timeout","context","this","args","later","apply","callNow","setTimeout","getBreakpoint","breakpoint","windowWidth","window","innerWidth","documentElement","clientWidth","body","breakpoints","xs","xxs","s","m","l","xl","xxl","getBreakpointName","resultBreakpoint","arraysEqual$1","a","b","Array","isArray","i","version","_","instance","Constructor","defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","key","protoProps","staticProps","prototype","ssoKey","location","hostname","indexOf","dfpConfig","Object","assign","referrer","isMobile","test","navigator","userAgent","isHomepage","pathname","environment","department","domain","regexMatch","exec","path","sectionArray","articleId","slice","filter","section","index","arr","reduce","last","current","concat","site","env","port","dev","prod","articleIdMatch","pop","content","getUrlParam","source","medium","campaign","results","RegExp","search","adBlockRemoved","localStorage","getItem","err","isWriterAlerts","wifiLocation","cookieMap","_htzwif","gStatCampaignNumber","gstatCampaign","JSON","parse","CampaignNumber","breakpoints2","breakpoints3","breakpoints1","getTime","breakpointsConfig","keys","impressionManagerConfig","ImpressionsManager","now","config","impressions","retrieveImpressionsData","initImpressionMap","migrateImpressionsData","_this","hasOwnProperty","call","frequency","impressionsData","oldImpressionsArray","impression","adUnitImpression","name","data","tmp","slotId","join","id","exposed","expires","_this2","adSlotId","err1","debouncedSave","saveImpressionsToLocalStorageImpl","setItem","stringify","error","slot","_this3","shouldUpdateExpiryDate","initSlotFromConfig","updateExpiryDate","slotName","Error","frequencyMap","match","frequencyRegex","setMilliseconds","setSeconds","setMinutes","maxImpressions","saveImpressionsToLocalStorage","atQuota","userTypes$1","User","userConfig","sso","type","getUserType","impressionManager","age","getUserAge","gender","getUserGender","userType","payerProp","payer","registered","anonymous","usrae","urgdr","ConflictResolver","conflictManagementConfig","dependencyMap","initializeDependencyMap","deferredSlots","Set","queue","Map","conflictManagementJson","value","rules","item","onsize","avoid","set","resolvedSize","has","get","resolvedWith","isBlocked","_step","Symbol","iterator","_iteratorNormalCompletion","_iterator","next","done","adSlotKey","adSlot","_step2","_iteratorNormalCompletion2","_iterator2","adSlotRule","parentResolvedWith","add","find","sizeString","size","numberStr","arraysEqual","return","_iteratorError2","_iteratorError","isBlocking","_step3","_iteratorNormalCompletion3","_iterator3","_iteratorError3","from","EMPTY_SIZE","hiddenClass","adSlotConfig","responsive","fluid","user","adManager","htmlElement","priority","deferredSlot","network","adUnitBase","adSizeMapping","responsiveAdSizeMapping","blacklistReferrers","whitelistReferrers","lastResolvedSize","lastResolvedWithBreakpoint","defineSlot","adTypes","maavaron","popunder","talkback","regular","whitelisted","blacklisted","shown","cmd","push","getElementById","classList","remove","display","isMaavaron","maavaronSlot","defineMaavaron","shouldSendRequestToDfp","googletag","pubads","defineFn","isOutOfPage","defineOutOfPageSlot","getPath","responsiveSlotSizeMapping","sizeMapping","addSize","build","defineSizeMapping","addService","setCollapseEmptyDiv","calculatedPath","toLowerCase","event","getAdUnitPath","isEmpty","refresh","_this4","adUnitMaavaronPath","adUnitMaavaronSize","definePassback","setTargeting","adPriorities","adTargets","userTypes$$1","AdManager","conflictResolver","initGoogleTargetingParams","initGoogleGlobalSettings","initSlotRenderedCallback","currentBreakpointName","adManagerConfig","adSlots","initAdSlots","high","addEventListener","normal","low","adSlot$$1","show","priorityFilter","values","deferredSlotId","deferredAdSlot","currentBreakpoint","hide","filteredPriority","adSlotPlaceholders","getElementsByClassName","node","adSlotNodeSet","adSlotPriority","computedAdSlotConfig","attributes","all","getAdType","adSlotInstance","isWhitelisted","isBlacklisted","shouldDisplayAdAfterAdBlockRemoval","doesBreakpointContainAd","doesUserTypeMatchBannerTargeting","reachedQuota","adTarget","adSlotOrTarget","nonPaying","paying","digitalOnly","digitalAndPrint","count","_step4","_iteratorNormalCompletion4","_iterator4","_iteratorError4","containsBreakpoint","mapping","apiReady","releaseSlotDependencies","registerImpression","updateResolvedSlot","_step5","getBlockedSlotsIds","_iteratorNormalCompletion5","_iterator5","blockedSlot","_iteratorError5","_step6","_iteratorNormalCompletion6","_iterator6","deferredSlotKey","delete","_iteratorError6","utm_","setCentering","googleGlobalSettings","log","enableSingleRequest","enableAsyncRendering","enableSyncRendering","enableServices","defaultConfig","resizeTimeout","DFP$1","DFP","wasInitialized","initStarted","initWindowResizeListener","dfpThis","Promise","resolve","reject","tag","createElement","async","setAttribute","getElementsByTagName","resumeInit","parentNode","insertBefore","onResize","refreshAllSlots","debouncedFunction","onresize","version$1"],"mappings":"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","file":"dfp.min.js","sourcesContent":["/**\n * Htz-cookie-util\n * @module htzCookieUtil\n * @author Elia Grady elia.grady@haaretz.co.il\n * @license MIT\n */\n\n/**\n * Translates Key-Value string into a convenient map.\n * @param {String} string String in format of \"key<operator>value<separator>.....\"\n * @param {object} options object for overriding defaults:\n * options.separator is a String or regExp that separates between each key value pairs\n * (default is ';'). options.operator is a String or regExp that separates between each key\n * and value within a pair (default is '=').\n * @returns {object} a map object, with key-value mapping according to the passed configuration.\n */\nfunction stringToMap(string,\n  { separator = ';', operator = '=' } = {}) {\n  const map = {};\n  const itemsArr = string.split(separator);\n  itemsArr.forEach(element => {\n    if (typeof element === 'string') {\n      const keyValue = element.split(operator);\n      if (keyValue.length === 2) {\n        try {\n          map[keyValue[0]] = decodeURIComponent(keyValue[1]);\n        }\n        catch (e) {\n          // Do nothing, malformed URI\n        }\n      }\n    }\n  });\n  return map;\n}\nexport const ssoKey = window.location.hostname.indexOf('haaretz.com') > -1 ? 'engsso' : 'tmsso';\n\n// Translates Cookie string into a convenient map.\nexport default function getCookieAsMap() {\n  const map = stringToMap(document.cookie, { separator: /;\\s?/ });\n  if (typeof map.tmsso === 'string') {\n    map.tmsso = stringToMap(map.tmsso, { separator: ':' });\n  }\n  if (typeof map.engsso === 'string') {\n    map.engsso = stringToMap(map.engsso, { separator: ':' });\n  }\n  return map;\n}\n","/**\n * Helper function. Adds N hours to a given date object.\n * @param {Date} date - the date to derive from\n * @param {Number} hours - the amount of hours to add, in whole numbers\n * @throws {SyntaxError} Will throw if the 'date' param is not provided\n * @throws {SyntaxError} Will throw if the 'hours' param is not provided\n * @throws {TypeError} Will throw if the 'hours' param is not a valid integer\n * @returns {Date} date - the new date, derived from adding the given hours\n */\nexport function addHours(date, hours) {\n  if (!date) {\n    throw new SyntaxError('addHours called without a required \\'date\\' parameter!');\n  }\n  if (!hours) {\n    throw new SyntaxError('addHours called without a required \\'hours\\' parameter!');\n  }\n  else if (isNaN(parseInt(hours, 10))) {\n    throw new TypeError('addHours called with an invalid integer \\'hours\\' parameter!');\n  }\n  const result = new Date(date);\n  result.setHours(result.getHours() + parseInt(hours, 10));\n  return result;\n}\n\n/**\n * Helper function. Adds N days to a given date object.\n * @param {Date} date - the date to derive from\n * @param {Integer} days - the amount of days to add\n * @throws {SyntaxError} Will throw if the 'date' param is not provided\n * @throws {SyntaxError} Will throw if the 'days' param is not provided\n * @throws {TypeError} Will throw if the 'hours' param is not a valid integer\n * @returns {Date} date - the new date, derived from adding the given days\n */\nexport function addDays(date, days) {\n  if (!date) {\n    throw new SyntaxError('addDays called without a required \\'date\\' parameter!');\n  }\n  if (!days) {\n    throw new SyntaxError('addDays called without a required \\'days\\' parameter!');\n  }\n  else if (isNaN(parseInt(days, 10))) {\n    throw new TypeError('addDays called with an invalid integer \\'days\\' parameter!');\n  }\n  const result = new Date(date);\n  result.setDate(result.getDate() + parseInt(days, 10));\n  return result;\n}\n","import globalConfig from '../globalConfig';\n\nconst breakpoints = globalConfig.breakpointsConfig.breakpoints;\n\n/**\n * Returns a function, that, as long as it continues to be invoked, will not\n * be triggered. The function will be called after it stops being called for\n * N milliseconds. If `immediate` is passed, trigger the function on the\n * leading edge, instead of the trailing.\n * @param { function } func - the function to run\n * @param { number } wait - the timeout period to avoid running the function\n * @param { boolean } immediate - leading edge modifier\n * @returns {function } the debounced function\n */\nexport function debounce(func, wait = 100, immediate) {\n  let timeout;\n  return function debounced() {\n    const context = this;\n    const args = arguments;// eslint-disable-line prefer-rest-params\n    const later = () => {\n      timeout = null;\n      if (!immediate) func.apply(context, args);\n    };\n    const callNow = immediate && !timeout;\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n    if (callNow) func.apply(context, args);\n  };\n}\n\n/**\n * Returns the current breakpoint that is closest to the window's width\n * @returns {number} the break that the current width represents\n */\nexport function getBreakpoint() {\n  let breakpoint;\n  const windowWidth = window.innerWidth\n    || document.documentElement.clientWidth\n    || document.body.clientWidth;\n  switch (true) {\n    case windowWidth < breakpoints.xs: breakpoint = breakpoints.xxs; break;\n    case windowWidth < breakpoints.s: breakpoint = breakpoints.xs; break;\n    case windowWidth < breakpoints.m: breakpoint = breakpoints.s; break;\n    case windowWidth < breakpoints.l: breakpoint = breakpoints.m; break;\n    case windowWidth < breakpoints.xl: breakpoint = breakpoints.l; break;\n    case windowWidth < breakpoints.xxl: breakpoint = breakpoints.xl; break;\n    default: breakpoint = breakpoints.xxl;\n  }\n  return breakpoint;\n}\n/**\n * Returns the current breakpoint that is closest to the window's width\n * @param {number} breakpoint - the breakpoint label enumerator that the current width represents\n * (yield with a getBreakpoint() call or passed manually )\n * @returns {string} breakpoint - the breakpoint label that the current width represents,\n * as a string\n */\nexport function getBreakpointName(breakpoint) {\n  let resultBreakpoint;\n  const windowWidth = breakpoint || window.innerWidth;\n  switch (true) {\n    case windowWidth < breakpoints.xs: resultBreakpoint = 'xxs'; break;\n    case windowWidth < breakpoints.s: resultBreakpoint = 'xs'; break;\n    case windowWidth < breakpoints.m: resultBreakpoint = 's'; break;\n    case windowWidth < breakpoints.l: resultBreakpoint = 'm'; break;\n    case windowWidth < breakpoints.xl: resultBreakpoint = 'l'; break;\n    case windowWidth < breakpoints.xxl: resultBreakpoint = 'xl'; break;\n    default: resultBreakpoint = 'xxl';\n  }\n  return resultBreakpoint;\n}\n","/**\r\n * Checks whether two arrays are equal\r\n * @param {Array} a - the first array to check\r\n * @param {Array} b - the second array to check\r\n * @returns {Boolean} true iff both a and b are arrays, with equal values\r\n */\r\nexport function arraysEqual(a, b) {\r\n  if (!a || !b) return false;\r\n  if (!Array.isArray(a) || !Array.isArray(b)) return false;\r\n  if (a === b) return true;\r\n  if (a.length !== b.length) return false;\r\n  for (let i = 0; i < a.length; ++i) {\r\n    if (Array.isArray(a[i]) && Array.isArray(b[i])) {\r\n      if (!arraysEqual(a[i], b[i])) return false;\r\n    }\r\n    else if (a[i] !== b[i]) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\nexport default arraysEqual;\r\n","export default (function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n});","export default (function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n})();","/* global dfpBaseConf */\nimport getCookieAsMap, { ssoKey } from './utils/cookieUtils';\n// globalConfig for DFP\nconst dfpConfig = Object.assign({\n  get referrer() {\n    return document.referrer ? document.referrer : '';\n  },\n  get isMobile() {\n    return (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i\n      .test(window.navigator.userAgent || ''));\n  },\n  /**\n   * Returns true iff the loaded page is the homepage (no inner path)\n   * @returns {boolean}\n   */\n  get isHomepage() {\n    return window.location.pathname === '/' || this.environment === 3; // 'prod'\n  },\n  get department() {\n    return this.isHomepage ? '_homepage' : '_section';\n  },\n  /**\n   * returns the domain the page was loaded to. i.e: 'haaretz.co.il', 'haaretz.com'\n   * @returns {string} the domain name from the windows's location hostname property\n   */\n  get domain() {\n    const regexMatch = /([\\d|\\w]+)(\\.co\\.il|\\.com)(.*)?/.exec(window.location.hostname);\n    const result = regexMatch ? regexMatch[0] : window.location.hostname;\n    return result;\n  },\n  /**\n   * Returns an array of concatenated paths, separated by a dot.\n   * For example, for the URL:\n   * http://www.haaretz.co.il/news/world/america/us-election-2016/LIVE-1.2869045\n   * the path is '/news/world/america/us-election-2016/LIVE-1.2869045'.\n   * This function takes the directories ['news', 'world', 'america', 'us-election-2016']\n   * and converts it to the following format:\n   * ['.news', '.news.world', '.news.world.america', '.news.world.america.us-election-2016']\n   * This denotes the path configuration for the given adSlot\n   * non articles (sections) will be given a '0' - no articleId value for targeting purposes)\n   * @returns {Array.<T>} an array of path names\n   */\n  get path() {\n    let sectionArray = this.articleId && this.articleId !== '0' ?\n      window.location.pathname.split('/').slice(1, -1) :\n      window.location.pathname.split('/').slice(1);\n    sectionArray = sectionArray.filter(path =>\n    path !== 'wwwMobileSite' && path !== 'whtzMobileSite');\n    return sectionArray\n      .map(section => `.${section}`)\n      .map((section, index, arr) => arr.slice(0, index + 1)\n        .reduce((last, current) => last.concat(current)));\n  },\n  /**\n   * Returns a string representation for the name of the site\n   * @return {*|string}\n   */\n  get site() {\n    let site;\n    if (window.location.hostname.indexOf('haaretz.co.il') > -1) {\n      site = 'haaretz';\n    }\n    else if (window.location.hostname.indexOf('themarker.com') > -1) {\n      site = 'themarker';\n    }\n    else if (window.location.hostname.indexOf('mouse.co.il') > -1) {\n      site = 'mouse';\n    }\n    return site || 'haaretz';\n  },\n  /**\n   * Returns the current environment targeting param, if such is defined.\n   * @returns {number} targeting param, 1 for local development, 2 for test servers and 3 for prod.\n   * May return undefined if no targeting is specified.\n   */\n  get environment() {\n    const env = {\n      dev: 1,\n      test: 2,\n      prod: 3,\n    };\n    return window.location.port === '8080' ? env.dev :\n      (window.location.hostname.indexOf('pre.haaretz.co.il') > -1\n      || window.location.hostname.indexOf('tmtest.themarker.com') > -1\n      || window.location.hostname.indexOf('prodmouse.mouse.co.il') > -1) ? env.test :\n        (window.location.pathname.indexOf('/cmlink/Haaretz.HomePage') > -1\n        || window.location.pathname.indexOf('/cmlink/TheMarker.HomePage') > -1\n        || window.location.pathname.indexOf('/cmlink/Mouse.HomePage') > -1)\n          ? env.prod : undefined;\n  },\n  /**\n   * Returns the articleIf if on an article page, or null otherwise\n   * @returns {string} an articleId string from the pathname, or 0 if not found\n   */\n  get articleId() {\n    const articleIdMatch = /\\d\\.\\d+/g.exec(window.location.pathname);\n    let articleId = '0';\n    if (articleIdMatch) {\n      articleId = articleIdMatch.pop(); // Converts [\"1.23145\"] to \"1.23145\"\n    }\n    return articleId;\n  },\n  utm_: {\n    get content() {\n      return this.getUrlParam('utm_content');\n    },\n    get source() {\n      return this.getUrlParam('utm_source');\n    },\n    get medium() {\n      return this.getUrlParam('utm_medium');\n    },\n    get campaign() {\n      return this.getUrlParam('utm_campaign');\n    },\n    getUrlParam(key) {\n      const results = RegExp(`(${key})(=)([^&\"]+)`).exec(window.location.search);\n      return results && results[3] ? results[3] : undefined;\n    },\n  },\n  get adBlockRemoved() {\n    let adBlockRemoved = false;\n    try {\n      if (localStorage.getItem('adblock_removed')) {\n        adBlockRemoved = true;\n      }\n    }\n    catch (err) {\n      // do nothing\n    }\n    return adBlockRemoved;\n  },\n  get isWriterAlerts() {\n    return (location.search.indexOf('writerAlerts=true') > -1);\n  },\n  get wifiLocation() {\n    let wifiLocation = '';\n    const cookieMap = getCookieAsMap();\n    try {\n      if (cookieMap && cookieMap._htzwif) { // eslint-disable-line no-underscore-dangle\n        wifiLocation = (cookieMap._htzwif === 'arcaffe') // eslint-disable-line no-underscore-dangle\n          ? 'ArCafe' : 'university';\n      }\n    }\n    catch (err) {\n      // do nothing\n    }\n    return wifiLocation;\n  },\n  get gStatCampaignNumber() {\n    let gstatCampaign;\n    try {\n      gstatCampaign = localStorage.getItem('GstatCampaign') ?\n        JSON.parse(localStorage.getItem('GstatCampaign')) : undefined;\n    }\n    catch (err) {\n      /* In case of thrown 'SecurityError' or 'QuotaExceededError',\n       the variable should be undefined */\n      gstatCampaign = undefined;\n    }\n    return gstatCampaign ? gstatCampaign.CampaignNumber : undefined;\n  },\n  adSlotConfig: {\n    'haaretz.co.il.example.slot': {\n      id: 'slotId',\n      // path : \"/network/base/slotId/slotId_subsection\", Will be calculated from AdManager\n      responsive: true,\n      adSizeMapping: [['width1', 'height1'], ...['widthN', 'heightN']],\n      priority: 'normal',\n      fluid: false,\n      responsiveAdSizeMapping: {\n        xxs: [['width1', 'height1'], ...['widthN', 'heightN']],\n        xs: [['width1', 'height1'], ...['widthN', 'heightN']],\n        s: [['width1', 'height1'], ...['widthN', 'heightN']],\n        m: [['width1', 'height1'], ...['widthN', 'heightN']],\n        l: [['width1', 'height1'], ...['widthN', 'heightN']],\n        xl: [['width1', 'height1'], ...['widthN', 'heightN']],\n        xxl: [['width1', 'height1'], ...['widthN', 'heightN']],\n      },\n      blacklistReferrers: 'comma, delimited, blacklisted, referrer, list',\n      whitelistReferrers: 'comma, delimited, referrer, list',\n    },\n  },\n  adManagerConfig: {\n    network: '9401',\n    adUnitBase: 'haaretz.co.il_Web',\n  },\n  breakpointsConfig: {\n    get breakpoints() {\n      // Override in VM from backend to control this toggle.\n      let breakpoints;\n      switch (dfpConfig.site) {\n        case 'themarker': breakpoints = this.breakpoints2; break;\n        case 'mouse': breakpoints = this.breakpoints3; break;\n        default: breakpoints = this.breakpoints1;\n      }\n      return breakpoints;\n    },\n    // Type 1\n    breakpoints1: {\n      xxs: 600,\n      xs: 761,\n      s: 993,\n      m: 1009,\n      l: 1291,\n      xl: 1600,\n      xxl: 1900,\n    },\n    // Type 2\n    breakpoints2: {\n      xxs: 600,\n      xs: 1000,\n      s: 1150,\n      m: 1281,\n      l: 1600,\n      xl: 1920,\n      xxl: 1920,\n    },\n    // Type 3\n    breakpoints3: {\n      xxs: 100,\n      xs: 480,\n      s: 600,\n      m: 768,\n      l: 1024,\n      xl: 1280,\n      xxl: 1900,\n    },\n  },\n  userConfig: {\n    type: undefined,\n    age: undefined,\n    gender: undefined,\n  },\n  conflictManagementConfig: {\n    'blocking.ad.unit.name': [\n      {\n        onsize: '1280x200,970x250,3x3',\n        avoid: 'blocked.ad.unit.name',\n      },\n      {\n        onsize: '1280x200,970x250,3x3',\n        avoid: 'blocked.ad.unit.name',\n      },\n    ],\n  },\n  impressionManagerConfig: {\n    'ad.unit.name': {\n      target: 'all|section|homepage',\n      frequency: '$1/$2(day|hour)',\n      exposed: 0,\n      expires: (new Date()).getTime(),\n    },\n  },\n  googleGlobalSettings: {\n    enableSingleRequest: true,\n    enableAsyncRendering: true,\n  },\n  sso: ssoKey,\n\n}, window.dfpConfig);\n\nexport default dfpConfig;\n","import globalConfig from '../globalConfig';\nimport { addHours, addDays } from '../utils/time';\nimport { debounce } from '../utils/breakpoints';\n\nexport const keys = {\n  impressions: 'impressions',\n  frequency: 'frequency',\n  /**\n   * [0] - full match\n   * [1] - impression count i.e: \"1\" | \"22\"\n   * [2] - impression expiry range quantifier  i.e: \"1\" | \"22\"\n   * [3] - impression expiry range unit i.e: \"day\" | \"hour\"\n   */\n  frequencyRegex: /(\\d+)\\/(\\d+)(day|hour)/,\n  expires: 'expires',\n  exposed: 'exposed',\n  target: 'target',\n  maxImpressions: 'maxImpressions',\n  hours: 'hour',\n  days: 'day',\n  adSlotId: 'id',\n};\n\nexport default class ImpressionsManager {\n\n  constructor(impressionManagerConfig) {\n    this.now = (new Date()).getTime(); // this date is used for comparisons only\n    this.config = Object.assign({}, impressionManagerConfig);\n    this.impressions = this.retrieveImpressionsData();\n    this.initImpressionMap();\n  }\n\n  retrieveImpressionsData() {\n    const impressions = this.migrateImpressionsData();\n    /*\n     Merge migrated data with new data\n     console.log('Migrated: ',impressions);\n     */\n    Object.keys(impressions).map((key, index) => {\n      impressions[key] = Object.assign({}, impressions[key], this.config[key]);\n      return this;\n    });\n    /*\n     console.log('Merged: ',impressions);\n     Filter out entries without frequency\n     */\n    for (const key in impressions) {\n      if ({}.hasOwnProperty.call(impressions, key)) {\n        if (!impressions[key][keys.frequency]) {\n          // console.log(`Removing ${key} - since it does not have a frequency`,impressions[key]);\n          delete impressions[key];\n        }\n      }\n    }\n    // console.log('Filtered: ',impressions);\n    return impressions;\n  }\n\n  migrateImpressionsData() {\n    let impressions;\n    let impressionsData;\n    try {\n      impressionsData = window.localStorage.getItem(keys.impressions);\n    }\n    catch (err) {\n      // In case of thrown 'SecurityError' or 'QuotaExceededError', the variable should be undefined\n      impressionsData = undefined;\n    }\n    try {\n      impressions = JSON.parse(impressionsData);\n    }\n    catch (err) {\n      // Here is where old impression data is converted to new format\n      impressions = {};\n      const oldImpressionsArray = impressionsData.split(';').filter(e => e);\n\n      oldImpressionsArray.forEach((impression) => {\n        try {\n          const adUnitImpression = impression.split(' = ');\n          const name = adUnitImpression[0];\n          const data = adUnitImpression[1];\n          const tmp = name.split('.');\n          let target = tmp.pop();\n          if (target && target === 'hp') {\n            target = 'homepage';\n          }\n          const slotId = tmp.join('.');\n          const id = `${slotId}_${target}`;\n          const exposed = parseInt(data.split('/')[0], 10) || 0;\n          const expires = parseInt(data.split('/')[1], 10) || this.now;\n          impressions[id] = {};\n          impressions[id][keys.adSlotId] = slotId;\n          impressions[id][keys.target] = target;\n          impressions[id][keys.exposed] = exposed;\n          impressions[id][keys.expires] = expires;\n        }\n        catch (err1) {\n          // console.log(`Failed converting impression: ${impression}`, err1);\n        }\n      });\n    }\n    return impressions || {};\n  }\n\n  /**\n   * Define the debounced version of the local storage save\n   */\n  saveImpressionsToLocalStorage() {\n    if (this.debouncedSave && typeof this.debouncedSave === 'function') {\n      this.debouncedSave();\n    }\n    else {\n      this.debouncedSave = debounce(this.saveImpressionsToLocalStorageImpl, 250, false);\n      this.debouncedSave();\n    }\n  }\n\n  /**\n   * Implementation of saving the impression map to localstorage\n   */\n  saveImpressionsToLocalStorageImpl() {\n    try {\n      localStorage.setItem(keys.impressions, JSON.stringify(this.impressions));\n    }\n    catch (err) {\n      /* In case of thrown 'SecurityError' or 'QuotaExceededError',\n       the operation should not break*/\n      console.error('localStorage isn\\'t available:', err); // eslint-disable-line no-console\n    }\n  }\n\n  /**\n   * Initializes the impression map based on the retrieved impressions and the global\n   * configuration.\n   */\n  initImpressionMap() {\n    Object.keys(this.config).map((key, index) => {\n      const adSlotId = key;\n      const slot = this.impressions[adSlotId];\n      let shouldUpdateExpiryDate = false;\n      // Case I: Existing slot (update)\n      if (slot) {\n        // Case I.I Existing slot, frequency has changed\n        if (this.config[adSlotId][keys.frequency] !== slot[keys.frequency]) {\n          // Updating the frequency will trigger a new expiry date\n          shouldUpdateExpiryDate = true;\n          this.impressions[adSlotId][keys.frequency] = this.config[adSlotId][keys.frequency];\n        } // Case I.II Existing slot, old expiry date\n        else if (this.now > slot[keys.expires]) {\n          // Old value that should trigger a new expiry date\n          shouldUpdateExpiryDate = true;\n        }\n      } // Case II: Non-existing slot (create new slot)\n      else {\n        this.initSlotFromConfig(adSlotId);\n      } // Finally, updates the expiry date (cases I.I and I.II)\n      if (shouldUpdateExpiryDate) {\n        this.updateExpiryDate(adSlotId);\n      }\n      return this;\n    });\n  }\n\n  /**\n   * Updates the expiry date of a slotName based on the configured slot frequency\n   * @param {String} slotName - the slotName to update.\n   */\n  updateExpiryDate(slotName) {\n    const now = new Date();\n    if (!(this.impressions[slotName] && this.impressions[slotName][keys.frequency])) {\n      throw new Error(`Unable to update expiry date for slot: ${slotName}\n      - this.impressions[slotName]:`, this.impressions[slotName]);\n    }\n    const frequencyMap = this.impressions[slotName][keys.frequency].match(keys.frequencyRegex);\n    now.setMilliseconds(0);\n    now.setSeconds(0);\n    now.setMinutes(0);\n    if (frequencyMap.indexOf(keys.days) > -1) {\n      now.setHours(0);\n    }\n    this.impressions[slotName][keys.expires] = (frequencyMap.indexOf(keys.days) > -1 ?\n      addDays(now, frequencyMap[2]) : addHours(now, frequencyMap[2])).getTime();\n\n    // Set max impressions:\n    this.impressions[slotName][keys.maxImpressions] = parseInt(frequencyMap[1], 10);\n    // Reset exposed\n    this.impressions[slotName][keys.exposed] = 0;\n  }\n\n  /**\n   * Initializes a non-existing slot from the passed global configuration for the slot\n   * @param {String} slotName - the name of the slot to create\n   */\n  initSlotFromConfig(slotName) {\n    const slot = this.impressions[slotName] || {};\n    slot[keys.frequency] = this.config[slotName][keys.frequency];\n    slot[keys.target] = this.config[slotName][keys.target];\n    slot[keys.exposed] = 0;\n    this.impressions[slotName] = slot;\n    this.updateExpiryDate(slotName);\n  }\n\n  /**\n   * Registers an impression for a given adSlot.\n   * @param {String} adSlotId - the adSlot id to register an impression for\n   * @returns {boolean} returns true iff the impression has been registered\n   */\n  registerImpression(adSlotId) {\n    if (adSlotId) {\n      const slot = this.impressions[adSlotId];\n      if (slot) {\n        const exposed = slot[keys.exposed];\n        if (isNaN(parseInt(exposed, 10)) === false) {\n          this.impressions[adSlotId][keys.exposed] += 1;\n          try {\n            this.saveImpressionsToLocalStorage();\n          }\n          catch (err) {\n            // console.log('Error saving ad impressions to localStorage!', err);\n          }\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Checks whether an adSlot has reached it's allocated impressions count.\n   * @param {String} adSlotId - the adSlot to check\n   * @returns {boolean} true iff there is a quota for the adSlot, and it has been reached\n   */\n  reachedQuota(adSlotId) {\n    // An adSlotId is suffixed with _homepage | _section if it's targeting is different\n    // between the two. If there is no difference, an _all suffix can be used.\n    const slotName = this.impressions[`${adSlotId}${globalConfig.department}`] ?\n      `${adSlotId}${globalConfig.department}` : `${adSlotId}_all`;\n\n    const slot = this.impressions[slotName];\n    let atQuota = false;\n    if (slot) {\n      const now = (new Date()).getTime();\n      // Second element of 2/4day matches '2'\n      const expires = this.impressions[slotName][keys.expires];\n      if (expires < now) {\n        this.updateExpiryDate(slotName);\n      }\n      else {\n        const maxImpressions = this.impressions[slotName][keys.maxImpressions];\n        // Not expired, did reach max impressions?\n        if (maxImpressions) {\n          atQuota = this.impressions[slotName][keys.exposed] >= maxImpressions;\n        }\n      }\n    }\n    return atQuota;\n  }\n\n\n  /**\n   * Clears the impression map from 'exposed' impressions\n   */\n  resetImpressions() {\n    const impressions = this.impressions;\n    for (const key in impressions) {\n      if ({}.hasOwnProperty.call(impressions, key)) {\n        if (impressions[key][keys.exposed]) {\n          impressions[key][keys.exposed] = 0;\n        }\n      }\n    }\n    this.saveImpressionsToLocalStorage();\n  }\n}\n","import getCookieAsMap from '../utils/cookieUtils';\nimport ImpressionManager from './impressionsManager';\nimport globalConfig from '../globalConfig';\n\nexport const userTypes = {\n  payer: 'payer',\n  registered: 'registered',\n  anonymous: 'anonymous',\n};\n\nexport default class User {\n  constructor(config) {\n    this.config = Object.assign({}, config.userConfig);\n    const cookieMap = getCookieAsMap();\n    this.ssoKey = globalConfig.sso;\n    if (!cookieMap[this.ssoKey]) {\n      // Flips the ssoKey, since cookieMap.ssoKey cannot be used to retrieve data\n      this.ssoKey = this.ssoKey === 'tmsso' ? 'engsso' : 'tmsso';\n    }\n    this.type = this.getUserType(cookieMap);\n    this.impressionManager = new ImpressionManager(config.impressionManagerConfig);\n    this.age = this.getUserAge(cookieMap);\n    this.gender = this.getUserGender(cookieMap);\n  }\n\n  getUserType(cookieMap) {\n    let userType;\n    if (cookieMap && cookieMap[this.ssoKey]) {\n      const payerProp = window.location.hostname.indexOf('haaretz.com') > -1 ?\n        'HdcPusr' : 'HtzPusr';\n      userType = cookieMap[payerProp] ? userTypes.payer : userTypes.registered;\n    }\n    else {\n      userType = userTypes.anonymous;\n    }\n    return userType;\n  }\n\n  getUserAge(cookieMap) {\n    let age;\n    const usrae = cookieMap[this.ssoKey] && cookieMap[this.ssoKey].usrae;\n    if (usrae) {\n      age = parseInt(cookieMap[this.ssoKey].usrae, 10);\n      age = age > 0 ? age : undefined;\n    }\n    return age;\n  }\n\n  getUserGender(cookieMap) {\n    let gender;\n    const urgdr = cookieMap[this.ssoKey] && cookieMap[this.ssoKey].urgdr;\n    if (urgdr) {\n      gender = parseInt(cookieMap[this.ssoKey].urgdr, 10);\n      gender = gender === 2 || gender === 1 ? gender : undefined;\n    }\n    return gender;\n  }\n}\n","class ConflictResolver {\n  constructor(conflictManagementConfig) {\n    this.dependencyMap = this.initializeDependencyMap(conflictManagementConfig);\n    this.deferredSlots = new Set();\n  }\n  initializeDependencyMap(conflictManagementJson) {\n    const queue = new Map();\n    Object.keys(conflictManagementJson).map((key, value) => {\n      let rules = conflictManagementJson[key];\n      if (rules) {\n        rules = rules.filter((item) => item.onsize && item.avoid);\n      }\n      queue.set(key, {\n        id: key,\n        rules,\n        resolvedWith: null,\n      });\n      return this;\n    });\n    return queue;\n  }\n\n  updateResolvedSlot(adSlotId, resolvedSize) {\n    if (!adSlotId) {\n      throw new Error('updateResolvedSlot must be called with an adSlotId!');\n    }\n    if (!resolvedSize) {\n      throw new Error('updateResolvedSlot must be called with a resolved size!');\n    }\n    if (this.dependencyMap.has(adSlotId)) {\n      this.dependencyMap.get(adSlotId).resolvedWith = resolvedSize;\n    }\n  }\n\n\n  isBlocked(adSlotId) {\n    if (!adSlotId) {\n      throw new Error('isBlocked must be called with an adSlotId!');\n    }\n    let isBlocked = false;\n    for (const adSlotKey of this.dependencyMap.keys()) {\n      const adSlot = this.dependencyMap.get(adSlotKey);\n      for (const adSlotRule of adSlot.rules) {\n        // Found rule specific to our target\n        if (adSlotRule.avoid === adSlotId) {\n          const parentResolvedWith = adSlot.resolvedWith;\n          // Fail fast: parent is not resolved yet - unknown returned size.\n          if (!parentResolvedWith) {\n            isBlocked = true;\n            this.deferredSlots.add(adSlotId);\n          }\n          if (adSlotRule.onsize.split(',').find(sizeString => { // eslint-disable-line\n            const size = sizeString.split('x').map(numberStr => parseInt(numberStr, 10));\n            return this.arraysEqual(size, parentResolvedWith);\n          })) {\n            // Block found\n            this.deferredSlots.add(adSlotId);\n            isBlocked = true;\n          }\n        }\n      }\n    }\n    return isBlocked;\n  }\n\n  isBlocking(adSlotId) {\n    if (!adSlotId) {\n      throw new Error('isBlocking must be called with an adSlotId!');\n    }\n    let isBlocking = false;\n    for (const adSlotKey of this.dependencyMap.keys()) {\n      if (adSlotKey === adSlotId) {\n        isBlocking = true;\n      }\n    }\n    return isBlocking;\n  }\n\n  /**\n   * Gets an array of adSlot Ids for a given adSlotId, that are dependent on (blocked by)\n   * @param {String} adSlotId - the blocking slot id\n   * @return {Array} an array of blocked slot, that has a dependency on the given slot\n   */\n  getBlockedSlotsIds(adSlotId) {\n    let result;\n    if (this.dependencyMap.has(adSlotId)) {\n      result = Array.from(this.dependencyMap.get(adSlotId).rules.map(adSlot => adSlot.avoid));\n    }\n    return result || [];\n  }\n\n  arraysEqual(a, b) {\n    if (a === b) return true;\n    if (a === null || b === null) return false;\n    if (a.length !== b.length) return false;\n    for (let i = 0; i < a.length; ++i) {\n      if (a[i] !== b[i]) return false;\n    }\n    return true;\n  }\n}\nConflictResolver.EMPTY_SIZE = [];\nexport default ConflictResolver;\n","/* global googletag */\nimport { adTypes } from '../objects/adManager';\nimport globalConfig from '../globalConfig';\nimport { arraysEqual } from '../utils/arrays';\n\nconst hiddenClass = globalConfig.site.indexOf('mouse') > -1 ? 'u-is-hidden' : 'h-hidden';\n\nexport default class adSlot {\n\n  constructor(adSlotConfig) {\n    this.config = Object.assign({}, adSlotConfig);\n\n    // Part I : Markup configuration - passed from AdManager\n    this.id = this.config.id;\n    if (!this.config.id) {\n      throw new Error('an adSlot requires an id!');\n    }\n    this.target = this.config.target;\n    this.type = this.config.type;\n    this.responsive = this.config.responsive;\n    this.fluid = this.config.fluid;\n    this.user = this.config.user;\n    this.adManager = this.config.adManager;\n    this.htmlElement = this.config.htmlElement;\n    this.priority = this.config.priority;\n    this.deferredSlot = this.config.deferredSlot;\n\n    // Part II : Global, general ad configuration - passed from AdManager\n    this.department = this.config.department;\n    this.network = this.config.network;\n    this.adUnitBase = this.config.adUnitBase;\n\n    // Part III : ad specific configuration - passed from globalConfig.adSlotConfig\n    this.adSizeMapping = this.config.adSizeMapping;\n    this.responsiveAdSizeMapping = this.config.responsiveAdSizeMapping;\n    this.blacklistReferrers = this.config.blacklistReferrers ?\n      this.config.blacklistReferrers.split(',') : [];\n    this.whitelistReferrers = this.config.whitelistReferrers ?\n      this.config.whitelistReferrers.split(',') : [];\n\n\n    // Part IV : Runtime configuration - calculated data - only present in runtime\n    this.lastResolvedSize = undefined; // Initialized in 'slotRenderEnded' callback\n    this.lastResolvedWithBreakpoint = undefined; // Initialized in 'slotRenderEnded' callback\n    this.slot = undefined; // Holds a googletag.Slot object\n    // [https://developers.google.com/doubleclick-gpt/reference#googletag.Slot]\n    try {\n      if (!this.deferredSlot) {\n        this.slot = this.defineSlot();\n      }\n    }\n    catch (err) {\n      console.error(err); // eslint-disable-line no-console\n    }\n  }\n\n  /**\n   * Checks whether this adSlot is an 'Out-of-page' slot or not.\n   * An Out-of-page slot is a slot that is not embedded in the page 'normally'.\n   * @returns {boolean} true iff this adSlot is one of the predefined 'out-of-page' slots.\n   */\n  isOutOfPage() {\n    if (typeof this.type !== 'string') {\n      throw new Error('An adSlot cannot by typeless!', this);\n    }\n    if (this.isMobile() === true) {\n      return false;\n    }\n    switch (this.type) {\n      case adTypes.maavaron: return false;\n      case adTypes.popunder: return true;\n      case adTypes.talkback: return false;\n      case adTypes.regular: return false;\n      default: return false;\n    }\n  }\n\n  /**\n   * Checks whether this adSlot is a 'maavaron' slot or not.\n   * An Out-of-page slot is a slot that is not embedded in the page 'normally'.\n   * @returns {boolean} true iff this adSlot is one of the predefined 'out-of-page' slots.\n   */\n  isMaavaron() {\n    if (typeof this.type !== 'string') {\n      throw new Error('An adSlot cannot by typeless!', this);\n    }\n    if (this.isMobile() === true) {\n      return false;\n    }\n    switch (this.type) {\n      case adTypes.maavaron: return false;\n      default: return false;\n    }\n  }\n\n  isMobile() {\n    return (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i\n      .test(window.navigator.userAgent || ''));\n  }\n  /**\n   * Checks whether or not this adSlot has a non-empty whitelist, and if so, that the current\n   * referrer appears in the whitelist.\n   * Should return false iff there is a whitelist for the current adSlot, but the referrer is not\n   * mentioned in the whitelist.\n   * @returns {boolean} true iff the ad can be displayed.\n   */\n  isWhitelisted() {\n    let whitelisted = false;\n    if (this.whitelistReferrers.length !== 0) {\n      for (const referrer of this.whitelistReferrers) {\n        if (globalConfig.referrer.indexOf(referrer) > -1) {\n          whitelisted = true;\n          break;\n        }\n      }\n    }\n    else {\n      whitelisted = true;\n    }\n    return whitelisted;\n  }\n\n  /**\n   * Checks whether or not this adSlot has a non-empty blacklist, and if so, that the current\n   * referrer does not appear in the blacklist.\n   * Should return true iff there is a blacklist for the current adSlot, and the referrer is\n   * mentioned in the blacklist - to indicate that the adSlot is 'blocked'.\n   * @returns {boolean} true iff the ad cannot be displayed.\n   */\n  isBlacklisted() {\n    let blacklisted = false;\n    if (this.blacklistReferrers.length !== 0) {\n      for (const referrer of this.blacklistReferrers) {\n        if (globalConfig.referrer.indexOf(referrer) > -1) {\n          blacklisted = true;\n          break;\n        }\n      }\n    }\n    return blacklisted;\n  }\n\n\n  /**\n   * Shows the current adSlot.\n   * It assumes a markup is available for this slot (any tag with an id attribute = this.id)\n   */\n  show() {\n    if (!this.shown === true) {\n      this.shown = true; // Ensure show will be called once per adSlot\n      googletag.cmd.push(() => {\n        if (this.deferredSlot) {\n          this.slot = this.defineSlot();\n        }\n        // console.log('calling show for slot',this.id,' called @',window.performance.now());\n        document.getElementById(this.id).classList.remove(hiddenClass);\n        googletag.display(this.id);\n      });\n    }\n  }\n\n  /**\n   * Shows the current adSlot.\n   * It assumes a markup is available for this slot (any tag with an id attribute = this.id)\n   */\n  hide() {\n    googletag.cmd.push(() => {\n      document.getElementById(this.id).classList.add(hiddenClass);\n    });\n  }\n\n  /**\n   * Initializes page-level slot definition for the current slot\n   * @return {Slot} slot - the Google Slot that was defined from this AdSlot configuration\n   */\n  defineSlot() {\n    if (this.isMaavaron()) {\n      const maavaronSlot = this.defineMaavaron();\n      if (this.adManager.shouldSendRequestToDfp(this)) {\n        if (!this.shown) {\n          this.shown = true; // Ensure show will be called once\n          maavaronSlot.display();\n        }\n      }\n      return maavaronSlot;\n    }\n    const googletag = window.googletag;\n    const pubads = googletag.pubads();\n    const args = [];\n    const defineFn = this.isOutOfPage() ? googletag.defineOutOfPageSlot : googletag.defineSlot;\n    // 3 or 2 params according to the function that we want to activate.\n    args.push(this.getPath());\n    if (this.isOutOfPage() === false) {\n      if (this.fluid) {\n        args.push('fluid');\n      }\n      else {\n        args.push(this.adSizeMapping);\n      }\n    }\n    args.push(this.id);\n    let slot = defineFn.apply(defineFn, args);\n    if (slot) {\n      // Responsive size Mapping\n      if (this.responsive) {\n        let responsiveSlotSizeMapping = googletag.sizeMapping();\n        const breakpoints = globalConfig.breakpointsConfig.breakpoints;\n        const keys = Object.keys(this.responsiveAdSizeMapping);\n        for (const key of keys) { // ['xxs','xs',...]\n          responsiveSlotSizeMapping.addSize(\n            [breakpoints[key], 100], // 100 is a default height, since it is height agnostic\n            !arraysEqual(this.responsiveAdSizeMapping[key], [[0, 0]]) ? this.responsiveAdSizeMapping[key] : []);\n        }\n        responsiveSlotSizeMapping = responsiveSlotSizeMapping.build();\n        slot = slot.defineSizeMapping(responsiveSlotSizeMapping);\n      }\n      slot = slot.addService(pubads);\n      if (this.isOutOfPage() === false) {\n        slot.setCollapseEmptyDiv(true);\n      }\n    }\n    return slot;\n  }\n\n  /**\n   * Returns the current path calculated for the adSlot\n   * @returns {String} a formatted string that represent the path for the slot definition\n   */\n  getPath() {\n    /* eslint-disable no-shadow */\n    let path = globalConfig.path || [];\n    path = path.filter(path => path !== '.');\n    path = path.map(section => `${this.id}${this.department}${section}`).join('/');\n    // If a path exist, it will be preceded with a forward slash\n    path = path && this.config.department !== '_homepage' ? `/${path}` : '';\n    /* eslint-enable no-shadow */\n    const calculatedPath = `/${this.config.network}/${this.config.adUnitBase}/${this.id}/${this.id}${this.department}${path}`; // eslint-disable-line max-len\n    return calculatedPath.toLowerCase();\n  }\n\n  /* eslint-disable */\n  slotRendered(event) {\n    const id = event.slot.getAdUnitPath().split('/')[3]; // Convention: [0]/[1]network/[2]base/[3]id\n    const isEmpty = event.isEmpty; // Did the ad return as empty?\n    const resolvedSize = event.size; // What 'creative' size did the ad return with?\n    // Empty or onload callback should be called next?\n  }\n  /* eslint-enable */\n\n  /**\n   * Refresh this adSlot\n   */\n  refresh() {\n    googletag.cmd.push(() => {\n      googletag.pubads().refresh([this.slot]);\n    });\n  }\n\n  /**\n   * Shows 'Maavaron' type adSlot using Passback definition\n   * @return {Slot} slot - the Google Slot that was defined for Maavaron\n   */\n  defineMaavaron() {\n    if (!document.referrer.match('loc.haaretz')) {\n      const adUnitMaavaronPath = this.getPath();\n      const adUnitMaavaronSize = [\n        [2, 1],\n      ];\n      const slot = googletag.pubads().definePassback(adUnitMaavaronPath, adUnitMaavaronSize)\n        .setTargeting('UserType', [this.user.type])\n        .setTargeting('age', [this.user.age])\n        .setTargeting('urgdr', [this.user.gender])\n        .setTargeting('articleId', [globalConfig.articleId])\n        .setTargeting('stg', [globalConfig.environment]);\n      return slot;\n    }\n    return null;\n  }\n}\n","/* global googletag */\nimport User from '../objects/user';\nimport ConflictResolver from '../objects/conflictResolver';\nimport AdSlot from '../objects/adSlot';\nimport { getBreakpoint, getBreakpointName } from '../utils/breakpoints';\nimport { arraysEqual } from '../utils/arrays';\n\n// There are a total of 7 adTargets:\n// \"all\",\"nonPaying\",\"anonymous\",\"registered\",\"paying\",\"digitalOnly\" and \"digitalAndPrint\"\nexport const adPriorities = {\n  high: 'high',\n  normal: 'normal',\n  low: 'low',\n};\n\nexport const adTargets = {\n  all: 'all',\n  nonPaying: 'nonPaying',\n  anonymous: 'anonymous',\n  registered: 'registered',\n  paying: 'paying',\n  digitalOnly: 'digitalOnly',\n  digitalAndPrint: 'digitalAndPrint',\n};\n\n// There are a total of 3 userTypes: \"anonymous\", \"registered\" and \"payer\"\nexport const userTypes = {\n  anonymous: 'anonymous',\n  registered: 'registered',\n  payer: 'payer',\n};\n\nexport const adTypes = {\n  maavaron: '.maavaron',\n  popunder: '.popunder',\n  talkback: '.talkback',\n  regular: '',\n};\n\n\nexport default class AdManager {\n\n  constructor(config) {\n    this.config = Object.assign({}, config);\n    this.user = new User(config);\n    this.conflictResolver = new ConflictResolver(config.conflictManagementConfig);\n    /**\n     * Avoid race conditions by making sure to respect the usual timing of GPT.\n     * This DFP implementation uses Enable-Define-Display:\n     * Define page-level settings\n     * enableServices()\n     * Define slots\n     * Display slots\n     */\n    try {\n      googletag.cmd.push(() => {\n        this.initGoogleTargetingParams(); //  Define page-level settings\n        this.initGoogleGlobalSettings();  //  enableServices()\n        this.initSlotRenderedCallback();  //  Define callbacks\n      });\n      // Mouse special treatment to base path on mobile breakpoints\n      const currentBreakpointName = getBreakpointName(getBreakpoint());\n      if (this.config.adManagerConfig.adUnitBase.indexOf('mouse.co.il') > -1 &&\n        currentBreakpointName.indexOf('xs') > -1) {\n        this.config.adManagerConfig.adUnitBase = 'mouse.co.il.mobile_web';\n      }\n      // Holds adSlot objects as soon as possible.\n      googletag.cmd.push(() => {\n        this.adSlots = this.initAdSlots(config.adSlotConfig, adPriorities.high);\n      });\n      // Once DOM ready, add more adSlots.\n      document.addEventListener('DOMContentLoaded', () => {\n        googletag.cmd.push(() => {\n          this.adSlots = this.initAdSlots(config.adSlotConfig, adPriorities.high);\n          googletag.cmd.push(() => {\n            this.adSlots = this.initAdSlots(config.adSlotConfig, adPriorities.normal);\n          });\n        });\n      });\n      // Once window was loaded, add the rest of the adSlots.\n      window.addEventListener('load', () => {\n        googletag.cmd.push(() => {\n          this.adSlots = this.initAdSlots(config.adSlotConfig, adPriorities.low);\n        });\n      });\n    }\n    catch (err) {\n      console.error(err); // eslint-disable-line no-console\n    }\n  }\n\n  /**\n   * Shows all of the adSlots that can be displayed.\n   */\n  showAllSlots() {\n    for (const adSlotKey of this.adSlots.keys()) {\n      const adSlot = this.adSlots.get(adSlotKey);\n      if (adSlot.type !== adTypes.talkback && this.shouldSendRequestToDfp(adSlot)) {\n        adSlot.show();\n      }\n    }\n  }\n\n  /**\n   * Gets all adSlots that has a certain priority\n   * @param {adPriority} priority - the priority of the ad {high, normal, low}\n   * @return {Array<AdSlot>} adSlots - all of the defined adSlots that matches\n   * the given priority\n   */\n  getAdSlotsByPriority(priority) {\n    function priorityFilter(adSlot) {\n      return adSlot.priority === priority;\n    }\n    return Array.from(this.adSlots.values()).filter(priorityFilter);\n  }\n\n  showAllDeferredSlots() {\n    for (const deferredSlotId of this.conflictResolver.deferredSlots) {\n      if (this.adSlots.has(deferredSlotId)) {\n        if (!this.conflictResolver.isBlocked(deferredSlotId)) {\n          const deferredAdSlot = this.adSlots.get(deferredSlotId);\n          if (this.shouldSendRequestToDfp(deferredAdSlot)) {\n            deferredAdSlot.show();\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Refreshes all responsive adSlots\n   */\n  refreshAllSlots() {\n    const currentBreakpoint = getBreakpoint();\n    for (const adSlotKey of this.adSlots.keys()) {\n      const adSlot = this.adSlots.get(adSlotKey);\n      if (adSlot.responsive) {\n        if (adSlot.lastResolvedWithBreakpoint !== currentBreakpoint &&\n          this.shouldSendRequestToDfp(adSlot)) {\n          // console.log(`calling refresh for adSlot: ${adSlot.id}`);\n          adSlot.refresh();\n        }\n        else {\n          adSlot.hide();\n        }\n      }\n    }\n  }\n\n  /**\n   * Initializes adSlots based on the currently found slot markup (HTML page specific),\n   * and the predefined configuration for the slots.\n   * @param {Object} adSlotConfig - the AdSlots configuration object (see: globalConfig)\n   * @param {String} filteredPriority - filters out all adSlots that does not match\n   * a given adPriority. This is used to cherry pick the init process of ads.\n   * @returns {Map}\n   */\n  initAdSlots(adSlotConfig, filteredPriority) {\n    const adSlots = new Map(this.adSlots);\n    let adSlotPlaceholders = Array.from(document.getElementsByClassName('js-dfp-ad'));\n    adSlotPlaceholders = adSlotPlaceholders.filter(node => node.id); // only nodes with an id\n    const adSlotNodeSet = new Set();\n    adSlotPlaceholders = Array.prototype.filter.call(adSlotPlaceholders, node => {\n      if (adSlotNodeSet.has(node.id) === false) { // first occurrence of Node\n        adSlotNodeSet.add(node.id);\n        return true;\n      }\n      return false;\n    });\n    // adSlotPlaceholders = adSlotPlaceholders.sort((a,b) => a.offsetTop - b.offsetTop);\n    adSlotPlaceholders.forEach(adSlot => {\n      const adSlotPriority = adSlotConfig[adSlot.id] ?\n      adSlotConfig[adSlot.id].priority || adPriorities.normal : undefined;\n      if (adSlotConfig[adSlot.id] && adSlots.has(adSlot.id) === false &&\n        adSlotPriority === filteredPriority) {\n        // The markup has a matching configuration from adSlotConfig AND was not already defined\n        try {\n          // adSlotConfig is built from globalConfig, but can be overridden by markup\n          const computedAdSlotConfig = Object.assign({}, adSlotConfig[adSlot.id], {\n            id: adSlot.id,\n            target: adSlot.attributes['data-audtarget'] ?\n              adSlot.attributes['data-audtarget'].value : adTargets.all,\n            type: this.getAdType(adSlot.id),\n            responsive: adSlotConfig[adSlot.id].responsive,\n            fluid: adSlotConfig[adSlot.id].fluid || false,\n            user: this.user,\n            adManager: this,\n            htmlElement: adSlot,\n            department: this.config.department,\n            network: this.config.adManagerConfig.network,\n            adUnitBase: this.config.adManagerConfig.adUnitBase,\n            deferredSlot: this.conflictResolver.isBlocked(adSlot.id),\n            priority: adSlotPriority,\n          });\n          const adSlotInstance = new AdSlot(computedAdSlotConfig);\n          adSlots.set(adSlot.id, adSlotInstance);\n          if (adSlotInstance.type !== adTypes.talkback &&\n            adSlotInstance.priority === adPriorities.high &&\n            this.shouldSendRequestToDfp(adSlotInstance)) {\n            /*\n             console.log('calling show for high priority slot', adSlotInstance.id, ' called @',\n             window.performance.now());\n             */\n            adSlotInstance.show();\n          }\n        }\n        catch (err) {\n          console.error(err); // eslint-disable-line no-console\n        }\n      }\n    });\n    return adSlots;\n  }\n\n  isPriority(adSlotId) {\n    return (typeof adSlotId === 'string' &&\n    (adSlotId.indexOf('plazma') > 0 ||\n    adSlotId.indexOf('maavaron') > 0 ||\n    adSlotId.indexOf('popunder') > 0));\n  }\n\n  /**\n   * Returns the adType based on the adSlot name.\n   * @param {String} adSlotId - the adSlot's identifier.\n   * @returns {*} enumerated export 'adTypes'\n   */\n  getAdType(adSlotId) {\n    if (!adSlotId) {\n      throw new Error('Missing argument: a call to getAdType must have an adSlotId');\n    }\n    if (adSlotId.indexOf(adTypes.maavaron) > -1) return adTypes.maavaron;\n    if (adSlotId.indexOf(adTypes.popunder) > -1) return adTypes.popunder;\n    if (adSlotId.indexOf(adTypes.talkback) > -1) return adTypes.talkback;\n    return adTypes.regular;\n  }\n\n  /**\n   * @param {object} adSlot the AdSlot\n   * @returns {boolean|*}\n   */\n  shouldSendRequestToDfp(adSlot) {\n    // Conflict management check\n    return this.conflictResolver.isBlocked(adSlot.id) === false &&\n      // Valid Referrer check\n      adSlot.isWhitelisted() &&\n      // Not in referrer Blacklist\n      adSlot.isBlacklisted() === false &&\n      this.shouldDisplayAdAfterAdBlockRemoval(adSlot) &&\n      // Responsive: breakpoint contains ad?\n      this.doesBreakpointContainAd(adSlot) &&\n      // Targeting check (userType vs. slotTargeting)\n      this.doesUserTypeMatchBannerTargeting(adSlot) &&\n      // Impressions Manager check (limits number of impressions per slot)\n      this.user.impressionManager.reachedQuota(adSlot.id) === false;\n  }\n\n  shouldDisplayAdAfterAdBlockRemoval(adSlot) {\n    return !(this.config.adBlockRemoved === true &&\n    (adSlot.type === adTypes.maavaron ||\n    adSlot.type === adTypes.popunder));\n  }\n\n  /**\n   * Check whether or not an ad slot should appear for the current user type\n   * @param {String} adSlotOrTarget the adSlot to check or the target as a string\n   * @returns {boolean} true iff the slot should appear for the user type\n   */\n  doesUserTypeMatchBannerTargeting(adSlotOrTarget) {\n    const userType = this.user.type;\n    const adTarget = typeof adSlotOrTarget === 'string' ? adSlotOrTarget : adSlotOrTarget.target;\n\n    switch (adTarget) {\n      case adTargets.all : return true;\n      case adTargets.nonPaying :\n        return userType === userTypes.anonymous || userType === userTypes.registered;\n      case adTargets.anonymous : return userType === userTypes.anonymous;\n      case adTargets.registered : return userType === userTypes.registered;\n      case adTargets.paying : return userType === userTypes.payer;\n      case adTargets.digitalOnly : return userType === userTypes.payer;\n      case adTargets.digitalAndPrint : return userType === userTypes.payer;\n      default: return false;\n    }\n  }\n\n  /**\n   * Report to the AdManager that a breakpoint has been switched (passed from one break to\n   * another). Should there be a responsive slot with a\n   * @param {Breakpoint} breakpoint - the breakpoint that is currently being displayed\n   * @returns {Integer} affected - the number of adSlots affected by the change\n   */\n  switchedToBreakpoint(breakpoint) {\n    if (!breakpoint) {\n      throw new Error('Missing argument: a call to switchedToBreakpoint must have an breakpoint');\n    }\n    let count = 0;\n    for (const adSlotKey of this.adSlots.keys()) {\n      const adSlot = this.adSlots.get(adSlotKey);\n      if (adSlot.responsive === true && adSlot.lastResolvedWithBreakpoint) {\n        if (adSlot.lastResolvedWithBreakpoint !== breakpoint) {\n          adSlot.refresh();\n          count++;\n        }\n      }\n    }\n    return count;\n  }\n\n  /**\n   * Checks whether an adSlot is defined for a given breakpoint (Default: current breakpoint)\n   * @param {AdSlot} adSlot - the adSlot to check.\n   * @param {Breakpoint} [breakpoint=currentBreakpoint] - the breakpoint to check this ad in.\n   * @returns {boolean} true iff the adSlot is defined for the given breakpoint.\n   */\n  doesBreakpointContainAd(adSlot, breakpoint = getBreakpoint()) {\n    if (!adSlot) {\n      throw new Error('Missing argument: a call to doesBreakpointContainAd must have an adSlot');\n    }\n    let containsBreakpoint = true;\n    if (adSlot.responsive === true) {\n      const mapping = adSlot.responsiveAdSizeMapping[getBreakpointName(breakpoint)];\n      if (Array.isArray(mapping) === false) {\n        throw new Error(`Invalid argument: breakpoint:${breakpoint} doesn't exist!`, this);\n      }\n      containsBreakpoint = mapping.length > 0 && !arraysEqual(mapping, [[0, 0]]);\n    }\n    return containsBreakpoint;\n  }\n\n  /**\n   * Initializes the callback from the 'slotRenderEnded' event for each slot\n   */\n  initSlotRenderedCallback() {\n    if (window.googletag && window.googletag.apiReady) {\n      const pubads = window.googletag.pubads();\n      pubads.addEventListener('slotRenderEnded', event => {\n        const id = event.slot.getAdUnitPath().split('/')[3];\n        const isEmpty = event.isEmpty;\n        const resolvedSize = event.size;\n        // console.log('slotRenderEnded for slot',id,' called @',window.performance.now());\n        if (this.adSlots.has(id)) {\n          const adSlot = this.adSlots.get(id);\n          adSlot.lastResolvedSize = resolvedSize;\n          adSlot.lastResolvedWithBreakpoint = getBreakpoint();\n          if (isEmpty) {\n            adSlot.lastResolvedSize = ConflictResolver.EMPTY_SIZE;\n            adSlot.hide();\n            this.releaseSlotDependencies(adSlot);\n          }\n          else {\n            this.user.impressionManager.registerImpression(`${adSlot.id}${this.config.department}`);\n            this.user.impressionManager.registerImpression(`${adSlot.id}_all`);\n            this.releaseSlotDependencies(adSlot, adSlot.lastResolvedSize);\n          }\n        }\n        else {\n          /*\n           console.error(`Cannot find an adSlot with id: ${id} - Ad Unit path is\n           ${event.slot.getAdUnitPath()}`);\n           */\n        }\n      });\n    }\n    else {\n      throw new Error('googletag api was not ready when \\'initSlotRenderedCallback\\' was called!');\n    }\n  }\n\n  releaseSlotDependencies(adSlot) {\n    try {\n      const id = adSlot.id;\n      this.conflictResolver.updateResolvedSlot(id, adSlot.lastResolvedSize);\n      if (this.conflictResolver.isBlocking(id)) {\n        // Hide all blocked adSlots\n        for (const blockedSlot of this.conflictResolver.getBlockedSlotsIds(id)) {\n          if (this.conflictResolver.isBlocked(blockedSlot)) {\n            if (this.adSlots.has(blockedSlot)) {\n              this.adSlots.get(blockedSlot).hide();\n            }\n          }\n        }\n        // Show the non blocked\n        for (const deferredSlotKey of this.conflictResolver.deferredSlots.keys()) {\n          const deferredAdSlot = this.adSlots.get(deferredSlotKey);\n          if (deferredAdSlot && this.shouldSendRequestToDfp(deferredAdSlot)) {\n            this.conflictResolver.deferredSlots.delete(deferredSlotKey);\n            if (deferredAdSlot.deferredSlot) {\n              deferredAdSlot.defineSlot();\n              deferredAdSlot.deferredSlot = false;\n            }\n            deferredAdSlot.show();\n          }\n        }\n      }\n    }\n    catch (err) {\n      /* eslint-disable no-console*/\n      console.error(`Cannot updateSlotDependencies for adSlot: ${adSlot.id}`);\n      /* eslint-enable no-console*/\n    }\n  }\n\n  /**\n   * Initializes page-level targeting params.\n   */\n  initGoogleTargetingParams() {\n    if (window.googletag && window.googletag.apiReady) {\n      // Returns a reference to the pubads service.\n      const pubads = googletag.pubads();\n      // Environment targeting (dev, test, prod)\n      if (this.config.environment) {\n        pubads.setTargeting('stg', [this.config.environment]);\n      }\n\n      // User targeting\n      if (this.user.type) {\n        pubads.setTargeting('UserType', [this.user.type]);\n      }\n      if (this.user.age) {\n        pubads.setTargeting('age', [this.user.age]);\n      }\n      if (this.user.gender) {\n        pubads.setTargeting('urgdr', [this.user.gender]);\n      }\n\n      // Context targeting\n      if (this.config.articleId) {\n        pubads.setTargeting('articleId', [this.config.articleId]);\n      }\n      if (this.config.gStatCampaignNumber && this.config.gStatCampaignNumber !== -1) {\n        pubads.setTargeting('gstat_campaign_id', [this.config.gStatCampaignNumber]);\n      }\n      if (this.config.isWriterAlerts) {\n        pubads.setTargeting('WriterAlerts', ['true']);\n      }\n      // UTM targeting\n      /* eslint-disable no-underscore-dangle */\n      if (this.config.utm_.content) {\n        pubads.setTargeting('utm_content', [this.config.utm_.content]);\n      }\n      if (this.config.utm_.source) {\n        pubads.setTargeting('utm_source', [this.config.utm_.source]);\n      }\n      if (this.config.utm_.medium) {\n        pubads.setTargeting('utm_medium', [this.config.utm_.medium]);\n      }\n      if (this.config.utm_.campaign) {\n        pubads.setTargeting('utm_campaign', [this.config.utm_.campaign]);\n      }\n      /* eslint-enable no-underscore-dangle */\n      // AdBlock removal\n      if (this.config.adBlockRemoved) {\n        pubads.setTargeting('adblock_removed', [this.config.adBlockRemoved]);\n      }\n      // University targeting - triggered via cookie\n      if (this.config.wifiLocation) {\n        pubads.setTargeting('wifi', [this.config.wifiLocation]);\n      }\n\n      // Ads Centering\n      pubads.setCentering(true);\n    }\n    else {\n      throw new Error('googletag api was not ready when \\'initGoogleTargetingParams\\' was called!');\n    }\n  }\n\n  /**\n   * Initializes googletag services.\n   */\n  initGoogleGlobalSettings() {\n    if (window.googletag && window.googletag.apiReady) {\n      const googleGlobalSettings = this.config.googleGlobalSettings;\n      // Enable GET parameter overrides\n      if (window.location.search) {\n        const search = window.location.search;\n        if (search.indexOf('sraon') > 0) {\n          console.log('Single Request Mode: active'); // eslint-disable-line no-console\n          googleGlobalSettings.enableSingleRequest = true;\n        }\n        else if (search.indexOf('sraoff') > 0) {\n          console.log('Single Request Mode: disabled');// eslint-disable-line no-console\n          googleGlobalSettings.enableSingleRequest = false;\n        }\n        if (search.indexOf('asyncrenderingon') > 0) {\n          console.log('Async rendering mode: active'); // eslint-disable-line no-console\n          googleGlobalSettings.enableAsyncRendering = true;\n        }\n        else if (search.indexOf('asyncrenderingonoff') > 0) {\n          console.log('Sync rendering mode: active');// eslint-disable-line no-console\n          googleGlobalSettings.enableAsyncRendering = false;\n        }\n      }\n      // Google services activation\n      if (googleGlobalSettings.enableSingleRequest === true) {\n        googletag.pubads().enableSingleRequest();\n      }\n      if (googleGlobalSettings.enableAsyncRendering === true) {\n        googletag.pubads().enableAsyncRendering();\n      }\n      else {\n        googletag.pubads().enableSyncRendering();\n      }\n      // Enables all GPT services that have been defined for ad slots on the page.\n      googletag.enableServices();\n    }\n    else {\n      throw new Error('googletag api wasn\\'t ready when \\'initGoogleGlobalSettings\\' was called!');\n    }\n  }\n}\n","/* globals googletag */\nimport AdManager from '../src/objects/adManager';\nimport globalConfig from './globalConfig';\nimport { getBreakpoint, debounce } from '../src/utils/breakpoints';\n\nconst defaultConfig = globalConfig || {};\nconst resizeTimeout = 250;\n\nexport default class DFP {\n\n  constructor(config) {\n    this.config = Object.assign({}, defaultConfig, config);\n    this.wasInitialized = false;\n    this.initStarted = false;\n    this.breakpoint = getBreakpoint();\n    this.initWindowResizeListener();\n  }\n\n  /**\n   * This part of the object's construction is dependent on the call to 'init'\n   */\n  resumeInit() {\n    try {\n      this.adManager = this.adManager || new AdManager(this.config);\n    }\n    catch (err) {\n      console.error(err); // eslint-disable-line no-console\n    }\n  }\n\n  /**\n   * initializes the 'googletag' global namespace and add the\n   * google publish tags library to the page\n   * @returns {Promise} that resolves to true once the googletag api is ready to use\n   * (googletag.apiReady = true)\n   */\n  initGoogleTag() {\n    const dfpThis = this;\n    return new Promise((resolve, reject) => {\n      if (dfpThis.initStarted === true) {\n        googletag.cmd.push(() => {\n          dfpThis.wasInitialized = true;\n          resolve(dfpThis);\n        });\n      }\n      else {\n        dfpThis.initStarted = true;\n        // set up a place holder for the gpt code downloaded from google\n        window.googletag = window.googletag || {};\n\n        // this is a command queue used by GPT any methods added to it will be\n        // executed when GPT code is available, if GPT is already available they\n        // will be executed immediately\n        window.googletag.cmd = window.googletag.cmd || [];\n        // load google tag services JavaScript\n        (() => {\n          const tag = window.document.createElement('script');\n          tag.async = true;\n          tag.type = 'text/javascript';\n          // Supports both https and http\n          tag.setAttribute('src', '//www.googletagservices.com/tag/js/gpt.js');\n          const node = window.document.getElementsByTagName('script')[0];\n          tag.addEventListener('load', () => {\n            dfpThis.resumeInit();\n            googletag.cmd.push(() => {\n              dfpThis.wasInitialized = true;\n              resolve(this);\n            });\n          });\n          tag.addEventListener('error', (error) => {\n            dfpThis.wasInitialized = false;\n            reject(error);\n          });\n          node.parentNode.insertBefore(tag, node);\n        })();\n      }\n    });\n  }\n\n  /**\n   *  Returns true iff googletag was properly initialized on the page\n   * @returns {boolean}\n   */\n  isGoogleTagReady() {\n    if (this.wasInitialized === true || (window.googletag && window.googletag.apiReady)) {\n      this.wasInitialized = true;\n    }\n    return this.wasInitialized;\n  }\n\n  /**\n   * Initializes the window resize listener to support responsive ad refreshes\n   */\n  initWindowResizeListener() {\n    const dfpThis = this;\n    function onResize() {\n      const currentBreakpoint = getBreakpoint();\n      if (dfpThis.breakpoint !== currentBreakpoint) {\n        dfpThis.breakpoint = currentBreakpoint;\n        if (dfpThis.adManager) {\n          dfpThis.adManager.refreshAllSlots();\n        }\n        else {\n          throw new Error('initWindowResizeListener error - adManager instance is not available');\n        }\n      }\n    }\n    const debouncedFunction = debounce(onResize, resizeTimeout);\n    window.onresize = debouncedFunction;\n  }\n}\n","import DFP from './dfp';\nimport globalConfig from './globalConfig';\nimport { version as v } from './../package.json';\n// const pkg = require('./../package.json');\n\n// DFP version is based on the package.json\nDFP.version = v || 'VERSION';\n\n/*\n // Only for development mode\n if ( process.env.NODE_ENV !== 'production' ) {\n DFP.dev = '123';\n }\n */\n\nexport const config = globalConfig;\nexport const version = DFP.version;\nexport default DFP;\n"]}