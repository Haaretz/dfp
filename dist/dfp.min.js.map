{"version":3,"sources":["../src/utils/cookieUtils.js","../src/utils/time.js","../src/utils/breakpoints.js","../src/utils/arrays.js","../jspm_packages/npm/systemjs-plugin-babel@0.0.17/babel-helpers/classCallCheck.js","../jspm_packages/npm/systemjs-plugin-babel@0.0.17/babel-helpers/createClass.js","../jspm_packages/npm/systemjs-plugin-babel@0.0.17/babel-helpers/toConsumableArray.js","../src/globalConfig.js","../src/objects/impressionsManager.js","../src/objects/user.js","../src/objects/conflictResolver.js","../src/objects/adSlot.js","../src/objects/adManager.js","../src/dfp.js","../src/version.js","../src/index.js"],"names":["stringToMap","string","separator","undefined","_ref$separator","operator","_ref$operator","map","itemsArr","split","forEach","element","keyValue","length","decodeURIComponent","e","getCookieAsMap","document","cookie","tmsso","engsso","addHours","date","hours","SyntaxError","isNaN","parseInt","TypeError","result","Date","setHours","getHours","addDays","days","setDate","getDate","debounce","func","wait","arguments","immediate","timeout","context","this","args","later","apply","callNow","setTimeout","getBreakpoint","breakpoint","windowWidth","window","innerWidth","documentElement","clientWidth","body","breakpoints","xs","xxs","s","m","l","xl","xxl","getBreakpointName","resultBreakpoint","arraysEqual","a","b","Array","isArray","i","_classCallCheck","instance","Constructor","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","key","protoProps","staticProps","prototype","_toConsumableArray","arr","arr2","from","ssoKey","location","hostname","indexOf","dfpBaseConf","JSON","parse","getElementById","textContent","err","dfpConfig","Object","assign","referrer","isMobile","test","navigator","userAgent","isHomepage","pathname","environment","department","domain","regexMatch","exec","path","sectionArray","articleId","slice","filter","section","index","reduce","last","current","concat","site","env","port","dev","prod","articleIdMatch","pop","content","getUrlParam","source","medium","campaign","results","RegExp","search","adBlockRemoved","localStorage","getItem","ssoGroupKey","anonymousId","cookieName","cookieMap","isWriterAlerts","wifiLocation","toLowerCase","isValidForsmartPhone","validForAds","PageUrl","href","isSmartphoneapp","match","NotPayer","HtzPusr","gStatCampaignNumber","gstatCampaign","CampaignNumber","pageType","type","htmlclassList","querySelector","classList","proposalNumber","proposal","googleGlobalSettings","breakpointType","breakpoints1","breakpoints2","breakpoints3","breakpoints4","getTime","globalConfig","breakpointsConfig","keys","impressionManagerConfig","ImpressionsManager","now","config","impressions","retrieveImpressionsData","initImpressionMap","migrateImpressionsData","_this","hasOwnProperty","call","frequency","impressionsData","oldImpressionsArray","impression","adUnitImpression","name","data","tmp","slotId","join","id","exposed","expires","_this2","adSlotId","err1","debouncedSave","saveImpressionsToLocalStorageImpl","setItem","stringify","error","slot","_this3","shouldUpdateExpiryDate","initSlotFromConfig","updateExpiryDate","slotName","Error","frequencyMap","frequencyRegex","setMilliseconds","setSeconds","setMinutes","maxImpressions","saveImpressionsToLocalStorage","atQuota","userTypes","productTypes","User","userConfig","sso","getUserType","htz_type","getUserTypeByProduct","htz","tm_type","tm","hdc_type","hdc","impressionManager","ImpressionManager","age","getUserAge","gender","getUserGender","getUserSSO","userType","TmPusr","HdcPusr","payer","registered","anonymous","productType","userProducts","getHdcUserType","getHtzTmUserType","userHasProduct","trial","htz_tm","products","product","prodNum","usrae","urgdr","ConflictResolver","conflictManagementConfig","dependencyMap","initializeDependencyMap","deferredSlots","Set","queue","Map","conflictManagementJson","value","rules","item","onsize","avoid","set","resolvedSize","has","get","resolvedWith","isBlocked","_step","Symbol","iterator","_iteratorNormalCompletion","_iterator","next","done","adSlotKey","adSlot","_step2","_iteratorNormalCompletion2","_iterator2","adSlotRule","parentResolvedWith","add","find","sizeString","size","numberStr","return","_iteratorError2","_iteratorError","isBlocking","_step3","_iteratorNormalCompletion3","_iterator3","_iteratorError3","EMPTY_SIZE","hiddenClass","adSlotConfig","responsive","fluid","user","adManager","htmlElement","priority","deferredSlot","network","adUnitBase","adSizeMapping","responsiveAdSizeMapping","blacklistReferrers","whitelistReferrers","lastResolvedSize","lastResolvedWithBreakpoint","defineSlot","adTypes","maavaron","popunder","talkback","regular","whitelisted","blacklisted","shown","cmd","push","remove","display","isMaavaron","maavaronSlot","defineMaavaron","shouldSendRequestToDfp","googletag","pubads","defineFn","isOutOfPage","defineOutOfPageSlot","getPath","responsiveSlotSizeMapping","sizeMapping","addSize","build","defineSizeMapping","addService","setCollapseEmptyDiv","calculatedPath","event","getAdUnitPath","isEmpty","refresh","_this4","adUnitMaavaronPath","adUnitMaavaronSize","definePassback","setTargeting","adPriorities","adTargets","AdManager","conflictResolver","initGoogleTargetingParams","initGoogleGlobalSettings","initSlotRenderedCallback","currentBreakpointName","adManagerConfig","adSlots","initAdSlots","high","onDomLoaded","normal","log","onWindowLoaded","low","blockingAdSlotKey","delete","showAllDeferredSlots","readyState","addEventListener","show","priorityFilter","values","deferredSlotId","deferredAdSlot","currentBreakpoint","_step4","_iteratorNormalCompletion4","_iterator4","hide","_iteratorError4","_step5","_iteratorNormalCompletion5","_iterator5","_iteratorError5","adUnitName","adSlotPlaceholders","getElementsByClassName","node","adSlotNodeSet","adSlot$$1","adSlotPriority","filteredPriority","computedAdSlotConfig","attributes","all","getAdType","adSlotInstance","AdSlot","isWhitelisted","isBlacklisted","shouldDisplayAdAfterAdBlockRemoval","shouldDisplayAdMaavaronAfterPayWallBanner","doesBreakpointContainAd","haveValidCookieForSmartphoneapp","doesUserTypeMatchBannerTargeting","reachedQuota","shouldDisplay","paywallBanner","mc","nextslotLocation","includes","adSlotOrTarget","adTarget","nonPaying","paying","digitalOnly","digitalAndPrint","count","_step6","_iteratorNormalCompletion6","_iterator6","_iteratorError6","containsBreakpoint","mapping","apiReady","releaseSlotDependencies","registerImpression","updateResolvedSlot","_step7","getBlockedSlotsIds","_iteratorNormalCompletion7","_iterator7","blockedSlot","_iteratorError7","_step8","_iteratorNormalCompletion8","_iterator8","deferredSlotKey","_iteratorError8","utm_","tags","userId","anonymousIdKeyName","setCentering","enableSingleRequest","enableAsyncRendering","enableSyncRendering","enableServices","defaultConfig","resizeTimeout","DFP","wasInitialized","initStarted","initWindowResizeListener","dfpThis","Promise","resolve","reject","tag","createElement","async","setAttribute","getElementsByTagName","resumeInit","parentNode","insertBefore","onResize","refreshAllSlots","debouncedFunction","onresize","version","v"],"mappings":"yBAgBA,SAASA,GAAYC,uEACjBC,UAAAA,EAAAC,SAAAC,EAAY,IAA4BA,MAAvBC,SAAAA,EAAAF,SAAAG,EAAW,IAC9BA,EAAMC,KACAC,EAAWP,EAAOQ,MAAMP,YACrBQ,QAAQ,SAAAC,MACQ,gBAAZA,GAAsB,IACzBC,GAAWD,EAAQF,MAAMJ,MACP,IAApBO,EAASC,aAELD,EAAS,IAAME,mBAAmBF,EAAS,IAEjD,MAAOG,QAMNR,EAKT,QAAwBS,QAChBT,GAAMP,EAAYiB,SAASC,QAAUhB,UAAW,eAC7B,gBAAdK,GAAIY,UACTA,MAAQnB,EAAYO,EAAIY,OAASjB,UAAW,OAExB,gBAAfK,GAAIa,WACTA,OAASpB,EAAYO,EAAIa,QAAUlB,UAAW,OAE7CK,ECrCT,QAAgBc,GAASC,EAAMC,OACxBD,OACG,IAAIE,aAAY,4DAEnBD,OACG,IAAIC,aAAY,wDAEnB,IAAIC,MAAMC,SAASH,EAAO,UACvB,IAAII,WAAU,iEAEhBC,GAAS,GAAIC,MAAKP,YACjBQ,SAASF,EAAOG,WAAaL,SAASH,EAAO,KAC7CK,EAYT,QAAgBI,GAAQV,EAAMW,OACvBX,OACG,IAAIE,aAAY,2DAEnBS,OACG,IAAIT,aAAY,sDAEnB,IAAIC,MAAMC,SAASO,EAAM,UACtB,IAAIN,WAAU,+DAEhBC,GAAS,GAAIC,MAAKP,YACjBY,QAAQN,EAAOO,UAAYT,SAASO,EAAM,KAC1CL,EC/BT,QAAOQ,GAAAC,MAAwBC,GAAAC,UAAA1B,OAAA,GAAAV,SAAAoC,UAAA,GAAAA,UAAA,GAAO,IAAKC,EAAAD,UACzC,GAAIE,EAAA,aACG,eACCC,GAANC,KACMC,EAFoBL,UAGpBM,EAAQ,aACZ,KACAL,GAAgBH,EAAAS,MAAAJ,EAAAE,IAEZG,EAAUP,IAAhBC,eACAA,KACUO,WAAAH,EAAVP,GACAS,GAAaV,EAAAS,MAAAJ,EAAAE,IAQjB,QAAOK,QACDC,GAAA,OACEC,EAAcC,OAAAC,YACfpC,SAAAqC,gBADeC,aAEftC,SAAAuC,KAFLD,oBAGA,OACOJ,GAAcM,EAAnBC,KAAgDD,EAAbE,GAA8B,WAC5DR,GAAcM,EAAnBG,IAA+CH,EAAbC,EAA6B,WAC1DP,GAAcM,EAAnBI,IAA+CJ,EAAbG,CAA4B,WACzDT,GAAcM,EAAnBK,IAA+CL,EAAbI,CAA4B,WACzDV,GAAcM,EAAnBM,KAAgDN,EAAbK,CAA4B,WAC1DX,GAAcM,EAAnBO,MAAiDP,EAAbM,EAA6B,iBAC3CN,EAPxBO,UASAd,GASF,QAAOe,GAAAf,MACDgB,GAAA,OACEf,EAAcD,GAAcE,OAAlCC,mBACA,OACOF,GAAcM,EAAnBC,KAAmC,KAA0B,WACxDP,GAAcM,EAAnBG,IAAkC,IAAyB,WACtDT,GAAcM,EAAnBI,IAAkC,GAAwB,WACrDV,GAAcM,EAAnBK,IAAkC,GAAwB,WACrDX,GAAcM,EAAnBM,KAAmC,GAAwB,WACtDZ,GAAcM,EAAnBO,MAAoC,IAAyB,iBAN/D,YASAE,GC/DF,QAAgBC,GAAYC,EAAGC,OACxBD,IAAMC,EAAG,OAAO,MAChBC,MAAMC,QAAQH,KAAOE,MAAMC,QAAQF,GAAI,OAAO,KAC/CD,IAAMC,EAAG,OAAO,KAChBD,EAAEvD,SAAWwD,EAAExD,OAAQ,OAAO,MAC7B,GAAI2D,GAAI,EAAGA,EAAIJ,EAAEvD,SAAU2D,KAC1BF,MAAMC,QAAQH,EAAEI,KAAOF,MAAMC,QAAQF,EAAEG,SACpCL,EAAYC,EAAEI,GAAIH,EAAEG,IAAK,OAAO,MAElC,IAAIJ,EAAEI,KAAOH,EAAEG,UACX,SAGJ,ECnBT,GAAAC,GAAA,SAA0BC,EAAUC,QAC5BD,YAAoBC,SAClB,IAAIhD,WAAU,sCCFxBiD,EAAe,mBACJC,GAAiBC,EAAQC,OAC3B,GAAIP,GAAI,EAAGA,EAAIO,EAAMlE,OAAQ2D,IAAK,IACjCQ,GAAaD,EAAMP,KACZS,WAAaD,EAAWC,aAAc,IACtCC,cAAe,EACtB,SAAWF,KAAYA,EAAWG,UAAW,UAC1CC,eAAeN,EAAQE,EAAWK,IAAKL,UAI3C,UAAUL,EAAaW,EAAYC,SACpCD,IAAYT,EAAiBF,EAAYa,UAAWF,GACpDC,GAAaV,EAAiBF,EAAaY,GACxCZ,MCdXc,EAAA,SAA0BC,MACpBpB,MAAMC,QAAQmB,GAAM,KACjB,GAAIlB,GAAI,EAAGmB,EAAOrB,MAAMoB,EAAI7E,QAAS2D,EAAIkB,EAAI7E,OAAQ2D,MAAUA,GAAKkB,EAAIlB,EAE7E,OAAOmB,SAEArB,OAAMsB,KAAKF,IN6BTG,EAASzC,OAAO0C,SAASC,SAASC,QAAQ,gBAAiB,EAAK,SAAW,QOhCpFC,EAAA,MACJ,OACgB7C,OAAA8C,KAAAC,MAAkBlF,SAAAmF,eAAA,aAAhCC,aAEF,MAAAC,KACgBlD,OAAdmD,UAEF,GAAMA,GAAAC,OAAYC,WAChBC,kBACSzF,UAAAyF,SAAoBzF,SAApByF,SAAP,OAEFC,mFACUC,KACAxD,OAAAyD,UAAAC,WADR,QAOFC,oBACS,MAAA3D,OAAA0C,SAAAkB,UADQ,IAC4BrE,KAAAsE,gBAE7CC,oBACSvE,MAAAoE,WAAA,YAAP,eAMFI,aACQC,GAAa,kCAAAC,KAAuCjE,OAAA0C,SAA1DC,UACMnE,EAASwF,EAAaA,EAAb,GAA6BhE,OAAA0C,SAA5CC,eACAnE,OAcF0F,WACMC,GAAe5E,KAAA6E,WAAA,MAAkB7E,KAAA6E,UACnCpE,OAAA0C,SAAAkB,SAAAvG,MAAA,KAAAgH,MAAA,GAA6C,GAC7CrE,OAAA0C,SAAAkB,SAAAvG,MAAA,KAAAgH,MAFF,cAGeC,OAAoB,SAAAJ,SACnC,kBAAAA,GADmC,mBACPA,MACrB/G,IACA,SAAAoH,aAAAA,IADApH,IAEA,SAAAoH,EAAAC,EAAAlC,YAAyB+B,MAAA,EAAaG,EAAb,GAAAC,OACpB,SAAAC,EAAAC,SAAmBD,GAAAE,OAAnBD,WAMdE,WACMA,GAAA,aACA7E,QAAA0C,SAAAC,SAAAC,QAAA,kBAAoD,IACtD,UAEO5C,OAAA0C,SAAAC,SAAAC,QAAA,kBAAoD,IAC3D,YAEO5C,OAAA0C,SAAAC,SAAAC,QAAA,gBAAkD,MACzD,SAEKiC,GAAP,cAOFhB,kBACQiB,QAAM,OAAA,OAAZ,SAKO,SAAA9E,OAAA0C,SAAAqC,KAAkCD,EAAlCE,IACJhF,OAAA0C,SAAAC,SAAAC,QAAA,sBAAwD,GACtD5C,OAAA0C,SAAAC,SAAAC,QAAA,yBAA2D,GAC3D5C,OAAA0C,SAAAC,SAAAC,QAAA,oBAAsD,GACtD5C,OAAA0C,SAAAC,SAAAC,QAAA,0BAA4D,EAAMkC,EAHrEtB,KAIGxD,OAAA0C,SAAAkB,SAAAhB,QAAA,6BAA+D,GAC7D5C,OAAA0C,SAAAkB,SAAAhB,QAAA,+BAAiE,GACjE5C,OAAA0C,SAAAkB,SAAAhB,QAAA,2BAA6D,EAC5DkC,EAHJG,KALJlI,WAcFqH,gBACQc,GAAiB,WAAAjB,KAAgBjE,OAAA0C,SAAvCkB,UACIQ,EAAJ,UACAc,OACcA,EADMC,OAGpBf,YAGAgB,iBACS7F,MAAA8F,YAAP,mBAEFC,gBACS/F,MAAA8F,YAAP,kBAEFE,gBACShG,MAAA8F,YAAP,kBAEFG,kBACSjG,MAAA8F,YAAP,sCAXEpD,MAcIwD,GAAUC,OAAA,IAAAzD,EAAA,gBAAAgC,KAAmCjE,OAAA0C,SAAnDiD,cACOF,IAAWA,EAAX,GAAwBA,EAAxB,GAAP1I,YAGJ6I,qBACMA,IAAJ,MAEMC,aAAAC,QAAJ,wBACE,GAGJ,MAAA5C,UAGA0C,OAEFG,qBACS/F,QAAA6F,aAAAC,QAAP,oBAEFE,kBACQC,GAAN,cACMC,EAANtI,IACIoI,EAAJ,SACIE,IAAaA,EAAjBD,OACgBC,EAAdD,IAEFD,MAEFG,wBACUzD,UAAAiD,OAAA/C,QAAA,sBAA+C,MAEzDwD,mBACMA,GAAA,OACEH,EAFW,UAGXC,EAANtI,QAEMsI,GAAaA,EAAjBD,KACE,YAAIC,EAAAD,GAAAI,kBACF,UAEF,eAAIH,EAAAD,GAAAI,kBACF,eAIN,MAAAnD,UAGAkD,OAEFE,2BACMC,IAAJ,EACMC,EAAUxG,OAAA0C,SAAhB+D,KACMC,EAAkBF,EAAAG,MAAxB,wBACMT,EAANtI,QAEE8I,IAEMR,IAAgBA,EAAAU,UAAsBV,EAA1CW,cACE,IAIN,MAAA3D,UAGAqD,OAEFO,0BACMC,GAAA,aAEclB,aAAAC,QAAA,iBACdhD,KAAAC,MAAW8C,aAAAC,QADG,kBAAhB/I,OAGF,MAAAmG,KAGEnG,aAEKgK,GAAgBA,EAAhBC,eAAPjK,WAEFkK,eACMC,GAAJ,UAEQC,GAAgBtJ,SAAAuJ,cAAA,QAAtBC,kBACA,OACO,iBAAA7D,KAAL2D,KACE,2BAEG,cAAA3D,KAAL2D,KACE,wBAEG,oBAAA3D,KAAL2D,KACE,gCARJ,IAcF,MAAAjE,KAGE,SAEFgE,OAEFI,qBACMC,GAAA,aAES1B,aAAAC,QAAA,gBACTD,aAAAC,QADS,gBAAX/I,OAGF,MAAAmG,KAGEnG,aAEFwK,mDAG8B,qBAAA,kBAIZ,SAAhB,YAAA3C,QAA0C,SAJd,qBAAA,gBAAA,iCAQpB,SAAN,YAAAA,QAAgC,SADT,iBAElB,SAAL,YAAAA,QAA+B,SAFR,gBAGnB,SAAJ,YAAAA,QAA8B,SAHP,gBAInB,SAAJ,YAAAA,QAA8B,SAJP,gBAKnB,SAAJ,YAAAA,QAA8B,SALP,iBAMlB,SAAL,YAAAA,QAA+B,SANR,kBAOjB,SAAN,YAAAA,QAAgC,SAdN,gCAAA,mEA1OF,8DA8Pb,kBA9Pa,2CAmQ5BvE,kBAEMA,GAAA,cACI8C,EAAAqE,qBAARC,oBACE,UAA4BlI,KAAdmI,YAAiC,WAC/C,UAA4BnI,KAAdoI,YAAiC,WAC/C,UAA4BpI,KAAdqI,YAAiC,WAC/C,UAA4BrI,KAAdsI,YAAiC,iBACxBtI,KALzBmI,mBAOArH,sBAGY,OAAA,MAAA,MAAA,OAAA,QAAA,SAdG,wBAwBH,OAAA,MAAA,OAAA,OAAA,QAAA,SAxBG,wBAkCH,OAAA,MAAA,MAAA,MAAA,QAAA,SAlCG,wBA4CH,OAAA,MAAA,OAAA,OAAA,QAAA,SA9Sc,wBAwTlBtD,WAAAA,cAxTkBA,mEA+T1B,6BADuB,gCAKvB,6BAnU0B,0EA0UZ,iCAAA,0BAAA,WAIJ,GAAD0B,OA9UiBqJ,uDAiVR,wBAAA,sBAAA,mBAjVQ,aAAdrF,GAAlBI,GLRMxC,EAAc0H,EAAAC,kBAApB3H,YMEa4H,eAAO,wBAAA,2BAAA,iCAAA,kBAAA,iBAAA,wBAAA,uBAAA,YAAA,eAAb,8BAqBLC,UACEC,QAAAC,KAAY,GAAD3J,OADwBqJ,eAEnCO,OAAcjF,OAAAC,UAAd6E,QACAI,YAAmB/I,KAAnBgJ,+BACAC,sFAIAjJ,KAAM+I,EAAc/I,KAApBkJ,gCAKAR,KAAAK,GAAAnL,IAA6B,SAAA8E,EAAAuC,YAC3BvC,GAAmBmB,OAAAC,UAAkBiF,EAAlBrG,GAAoCyG,EAAAL,OAAvDpG,IAEDyG,QAKI,GAALzG,KAAAqG,QACMK,eAAAC,KAAAN,EAAJrG,KACOqG,EAAArG,GAAiBgG,EAAtBY,kBAESP,GAAPrG,UAKNqG,0DAIA/I,KAAI+I,EAAA,OACAQ,EAAA,aAEgB9I,OAAA6F,aAAAC,QAA4BmC,EAA9CK,aAEF,MAAApF,KAEEnG,aAGc+F,KAAAC,MAAd+F,GAEF,MAAA5F,WAGQ6F,GAAAD,EAAsBzL,MAAA,KAAAiH,OAAkC,SAAA3G,SAAAA,OAE9DL,QAA4B,SAAA0L,UAElBC,GAAmBD,EAAA3L,MAAzB,OACM6L,EAAOD,EAAb,GACME,EAAOF,EAAb,GACMG,EAAMF,EAAA7L,MAAZ,KACIqE,EAAS0H,EAAbjE,KACIzD,IAAJ,OAAcA,MACZ,eAEI2H,GAASD,EAAAE,KAAf,KACMC,EAAAF,EAAA,IAAN3H,EACM8H,EAAUlL,SAAS6K,EAAA9L,MAAA,KAAT,GAAA,KAAhB,EACMoM,EAAUnL,SAAS6K,EAAA9L,MAAA,KAAT,GAAA,KAAoCqM,EAApDtB,MACAmB,QACAA,GAAgBtB,EAAhB0B,UAAAN,IACAE,GAAgBtB,EAAhBvG,QAAAA,IACA6H,GAAgBtB,EAAhBuB,SAAAA,IACAD,GAAgBtB,EAAhBwB,SAAAA,EAEF,MAAAG,aAKGtB,+DAOH/I,KAAAsK,eAAJ,kBAAiCtK,MAAPsK,mBACxBA,sBAGAA,cAAqB7K,EAASO,KAATuK,kCAAA,KAArB,QACAD,8FASAE,QAAqB9B,EAArBK,YAAuCxF,KAAAkH,UAAezK,KAAtD+I,cAEF,MAAApF,WAGE+G,MAAA,gCAHU/G,sDAYZ3D,YAAA0I,KAAY1I,KAAZ8I,QAAAlL,IAA6B,SAAA8E,EAAAuC,MACrBmF,GAAN1H,EACMiI,EAAOC,EAAA7B,YAAbqB,GACIS,GAAJ,QAEAF,GAEMC,EAAA9B,OAAAsB,GAAsB1B,EAAtBY,aAA0CqB,EAAKjC,EAAnDY,eAEE,IACAP,YAAAqB,GAA2B1B,EAA3BY,WAA6CsB,EAAA9B,OAAAsB,GAAsB1B,EAAnEY,YAEOsB,EAAA/B,IAAW8B,EAAKjC,EAApBwB,cAEH,KAIFY,mBAAAV,GAEFS,KACEE,iBAAAX,GAGHQ,6CAOcI,MACTnC,GAAM,GAAZ3J,UACMc,KAAA+I,YAAAiC,KAA8BhL,KAAA+I,YAAAiC,GAA2BtC,EAA/DY,gBACQ,IAAA2B,OAAA,0CAAAD,EAAA,wCAC0BhL,KAAA+I,YADhCiC,OAGIE,GAAelL,KAAA+I,YAAAiC,GAA2BtC,EAA3BY,WAAAlC,MAAiDsB,EAAtEyC,kBACAC,gBAAA,KACAC,WAAA,KACAC,WAAA,GACIJ,EAAA7H,QAAqBqF,EAArBpJ,OAAkC,KACpCH,SAAA,QAEF4J,YAAAiC,GAA2BtC,EAA3BwB,UAA4CgB,EAAA7H,QAAqBqF,EAArBpJ,OAAkC,EAC5ED,EAAAwJ,EAAaqC,EAD6B,IACVxM,EAAAmK,EAAcqC,EADL,KAA3C3C,eAIAQ,YAAAiC,GAA2BtC,EAA3B6C,gBAAkDxM,SAASmM,EAAT,GAAlD,SAEAnC,YAAAiC,GAA2BtC,EAA3BuB,SAAA,6CAOiBe,MACXL,GAAO3K,KAAA+I,YAAAiC,SACRtC,EAALY,WAAuBtJ,KAAA8I,OAAAkC,GAAsBtC,EAA7CY,aACKZ,EAALvG,QAAoBnC,KAAA8I,OAAAkC,GAAsBtC,EAA1CvG,UACKuG,EAALuB,SAAA,OACAlB,YAAAiC,GAAAL,OACAI,iBAAAC,8CAQiBZ,MACjBA,EAAc,IACNO,GAAO3K,KAAA+I,YAAbqB,MACAO,EAAU,IACFV,GAAUU,EAAKjC,EAArBuB,YACInL,MAAMC,SAAAkL,EAAN,QAAJ,EAA4C,MAC1ClB,YAAAqB,GAA2B1B,EAA3BuB,UAAA,WAEEuB,gCAEF,MAAA7H,WAGA,WAIN,6CAWMqH,GAAWhL,KAAA+I,YAAA,GAAAqB,EAA+B5B,EAA/BjE,YAAA,GAAA6F,EACD5B,EADCjE,WAAA6F,EAAjB,OAGMO,EAAO3K,KAAA+I,YAAbiC,GACIS,GAAJ,KACAd,EAAU,IACF9B,IAAO,GAAD3J,OAAZqJ,UAEM2B,EAAUlK,KAAA+I,YAAAiC,GAA2BtC,EAA3CwB,YACIA,EAAJrB,OACEkC,iBAAAC,OAEG,IACGO,GAAiBvL,KAAA+I,YAAAiC,GAA2BtC,EAAlD6C,eAEAA,OACYvL,KAAA+I,YAAAiC,GAA2BtC,EAA3BuB,UAAVsB,UAINE,iDAQM1C,GAAc/I,KAApB+I,gBACK,GAALrG,KAAAqG,QACMK,eAAAC,KAAAN,EAAJrG,IACMqG,EAAArG,GAAiBgG,EAArBuB,aACEvH,GAAiBgG,EAAjBuB,SAAA,QAINuB,yCC3QSE,SAAY,mBAAA,uBAAA,kBAAlB,SAOMC,OAAe,OAAA,QAAA,WAArB,6BAQL7C,UACE8C,QAAA9C,OAAcjF,OAAAC,UAAkBgF,EAAhC+C,eACMlF,GAANtI,SACA6E,OAAcsF,EAAdsD,IACKnF,EAAU3G,KAAfkD,eAEEA,OAAc,UAAAlD,KAAAkD,OAAA,SAAd,cAEFyE,KAAY3H,KAAA+L,YAAZpF,QACAqF,SAAgBhM,KAAAiM,qBAAAtF,EAAqCgF,EAArDO,UACAC,QAAenM,KAAAiM,qBAAAtF,EAAqCgF,EAApDS,SACAC,SAAgBrM,KAAAiM,qBAAAtF,EAAqCgF,EAArDW,UACAC,kBAAyB,GAAAC,GAAsB1D,EAA/CH,8BACA8D,IAAWzM,KAAA0M,WAAX/F,QACAgG,OAAc3M,KAAA4M,cAAdjG,QACAmF,IAAW9L,KAAA6M,WAAAlG,EAA2B3G,KAAtCkD,sDAGUyD,MACNmG,GAAA,gBACAnG,GAAaA,EAAU3G,KAA3BkD,QACcyD,EAAAW,SAAqBX,EAArBoG,QAAyCpG,EAA1CqG,QACTtB,EADSuB,MACSvB,EADpBwB,WAIWxB,EAAXyB,uDAMiBxG,EAAWyG,MAC1BN,GAAWpB,EAAfyB,aACIxG,GAAaA,EAAU3G,KAA3BkD,SACMyD,EAAJ0G,aAA4B,IACtBA,GAAelP,mBAAmBwI,EAAtC0G,gBACe9J,KAAAC,MAAf6J,KACID,IAAgBzB,EAApBW,IACatM,KAAAsN,eAAXD,GAGWrN,KAAAuN,iBAAAF,EAAXD,SAINN,0CAGaO,SAETrN,MAAAwN,eAAAH,EAAkC1B,EAAlCW,KAAJ,GACSZ,EAAPuB,MAGOjN,KAAAwN,eAAAH,EAAkC1B,EAAlCW,KAAJ,GACIZ,EAAP+B,MAEK/B,EAAPwB,oDAGeG,EAAcD,SAEzBpN,MAAAwN,eAAAH,EAAAD,GAAA,IACFpN,KAAAwN,eAAAH,EAAkC1B,EAAlC+B,QADF,GAEShC,EAAPuB,MAGOjN,KAAAwN,eAAAH,EAAAD,GAAA,IACPpN,KAAAwN,eAAAH,EAAkC1B,EAAlC+B,QADG,GAEIhC,EAAP+B,MAEK/B,EAAPwB,kDAGaG,EAAcD,EAAaK,YACjCE,SAAA5I,OACK,SAAA6I,SAAWA,GAAAC,UAAAT,GAAmCQ,EAAAH,QAA9CA,IADLvP,OAAP,qCAKSyI,MACL8F,GAAA,OACEqB,EAAQnH,EAAU3G,KAAVkD,SAA0ByD,EAAU3G,KAAVkD,QAAxC4K,YACAA,OACQ/O,SAAS4H,EAAU3G,KAAVkD,QAAT4K,MAAN,MACMrB,EAAA,EAAAA,EAANjP,QAEFiP,wCAGY9F,MACRgG,GAAA,OACEoB,EAAQpH,EAAU3G,KAAVkD,SAA0ByD,EAAU3G,KAAVkD,QAAxC6K,YACAA,OACWhP,SAAS4H,EAAU3G,KAAVkD,QAAT6K,MAAT,MACS,IAAApB,GAAA,IAAgBA,EAAhBA,EAATnP,QAEFmP,uCAGoBzJ,SACbyD,GAAPzD,YCxHE8K,EAAA,sBACJC,UACED,QAAAE,cAAqBlO,KAAAmO,wBAArBF,QACAG,cAAqB,GAArBC,wEAGArO,KAAMsO,EAAQ,GAAdC,mBACA7F,KAAA8F,GAAA5Q,IAAwC,SAAA8E,EAAA+L,MAClCC,GAAQF,EAAZ9L,SACAgM,SACU3J,OAAa,SAAA4J,SAAUA,GAAAC,QAAeD,EAAzBE,WAEvBC,IAAApM,MAAeA,QAAAgM,eAAf,OAMDvF,IACDmF,6CAGiBlE,EAAU2E,OAC3B3E,OACQ,IAAAa,OAAN,2DAEF8D,OACQ,IAAA9D,OAAN,0DAEEjL,MAAAkO,cAAAc,IAAJ5E,UACE8D,cAAAe,IAAA7E,GAAA8E,aAAAH,uCAKM3E,SACRpK,SAAAoK,OACQ,IAAAa,OAAN,iDAEEkE,IAJc,KAAA,KAAA,IAAA3R,kBAKlB4R,KAAwBpP,KAAAkO,cAAxBxF,OAAA2G,OAAAC,cAAAC,GAAAH,EAAAI,EAAAC,QAAAC,MAAAH,GAAA,EAAmD,IAAxCI,GAAAP,EACTX,MAAMmB,EAAS5P,KAAAkO,cAAAe,IADkCU,MAAA,KAAA,IAAAnS,kBAEjDqS,KAAyBD,EAAzBlB,MAAAW,OAAAC,cAAAQ,GAAAD,EAAAE,EAAAN,QAAAC,MAAAI,GAAA,EAAuC,IAA5BE,GAAAH,EACTpB,KACIuB,GAAAnB,QAAJzE,kBACQ6F,GAAqBL,EAA3BV,YAEAe,QACE,IACA7B,cAAA8B,IAAA9F,MAEEwE,OAAA9Q,MAAA,KAAAqS,KAAkC,SAAAC,MAC9BC,GAAAD,EAAOtS,MAAA,KAAAF,IAA0B,SAAA0S,SAAavR,UAAAuR,EAAb,YAChCnG,GAAA3I,YAAA6O,EAAPJ,SAGA7B,cAAA8B,IAAA9F,MACA,mBAjB2C,IAAAzG,8BAAA4M,2BAAAC,kBALjC,IAAA7M,8BAAA4M,2BAAAE,UA2BlBtB,wCAGS/E,OACTA,OACQ,IAAAa,OAAN,kDAEEyF,IAJe,KAAA,KAAA,IAAAlT,kBAKnBmT,KAAwB3Q,KAAAkO,cAAxBxF,OAAA2G,OAAAC,cAAAsB,GAAAD,EAAAE,EAAApB,QAAAC,MAAAkB,GAAA,EAAmD,IAAxCjB,GAAAgB,EACTlC,KAAIkB,KAAJvF,OACE,gBAPe,IAAAzG,8BAAA4M,2BAAAO,UAUnBJ,8CAQiBtG,MACbnL,GAAA,aACAe,MAAAkO,cAAAc,IAAJ5E,aACWnH,KAAAjD,KAAWkO,cAAAe,IAAA7E,GAAAsE,MAAA9Q,IAA2C,SAAAgS,SAAUA,GAAVf,UAE1D5P,4CAGMyC,MACTD,IAAJC,EAAa,OAAA,KACT,OAAAD,GAAJ,OAAkBC,EAAY,OAAA,KAC1BD,EAAAvD,SAAawD,EAAjBxD,OAA2B,OAAA,MACtB,GAAI2D,GAAT,EAAgBA,EAAIJ,EAApBvD,SAAA2D,KACMJ,EAAAI,KAASH,EAAbG,GAAmB,OAAA,SAErB,UAGJmM,GAAA+C,aCpGA,IAIMC,GAAcxI,EAAAlD,KAAAjC,QAAA,UAAqC,EAArC,cAApB,mCAIE4N,aACErB,QAAA9G,OAAcjF,OAAAC,UAAdmN,QAGAjH,GAAUhK,KAAA8I,OAAVkB,IACKhK,KAAA8I,OAALkB,QACQ,IAAAiB,OAAN,kCAEF9I,OAAcnC,KAAA8I,OAAd3G,YACAwF,KAAY3H,KAAA8I,OAAZnB,UACAuJ,WAAkBlR,KAAA8I,OAAlBoI,gBACAC,MAAanR,KAAA8I,OAAbqI,WACAC,KAAYpR,KAAA8I,OAAZsI,UACAC,UAAiBrR,KAAA8I,OAAjBuI,eACAC,YAAmBtR,KAAA8I,OAAnBwI,iBACAC,SAAgBvR,KAAA8I,OAAhByI,cACAC,aAAoBxR,KAAA8I,OAApB0I,kBAGAjN,WAAkBvE,KAAA8I,OAAlBvE,gBACAkN,QAAezR,KAAA8I,OAAf2I,aACAC,WAAkB1R,KAAA8I,OAAlB4I,gBAGAC,cAAqB3R,KAAA8I,OAArB6I,mBACAC,wBAA+B5R,KAAA8I,OAA/B8I,6BACAC,mBAA0B7R,KAAA8I,OAAA+I,mBACxB7R,KAAA8I,OAAA+I,mBAAA/T,MADwB,aAE1BgU,mBAA0B9R,KAAA8I,OAAAgJ,mBACxB9R,KAAA8I,OAAAgJ,mBAAAhU,MADwB,aAK1BiU,iBAjCwBvU,YAkCxBwU,2BAlCwBxU,YAmCxBmN,KAnCwBnN,WAsCjBwC,KAALwR,oBACE7G,KAAY3K,KAAZiS,cAGJ,MAAAtO,WACE+G,MADU/G,uDAWZ,gBAAW3D,MAAP2H,UACI,IAAAsD,OAAA,gCAANjL,SAEEA,KAAAgE,cAAJ,SACE,SAEMhE,KAAR2H,UACOuK,GAALC,gBAAuB,MAClBD,GAALE,gBAAuB,MAClBF,GAALG,gBAAuB,MAClBH,GAALI,eAAsB,iBAJxB,2CAeA,gBAAWtS,MAAP2H,UACI,IAAAsD,OAAA,gCAANjL,SAEEA,KAAAgE,cAAJ,SACE,SAEMhE,KAAR2H,UACOuK,GAALC,gBAAuB,iBADzB,6GAOQlO,KACAxD,OAAAyD,UAAAC,WADR,+CAWIoO,IAAJ,KACA,IAAIvS,KAAA8R,mBAAA5T,OAAsC,QAAA,KAAA,IAAAV,kBACxC4R,KAAuBpP,KAAvB8R,mBAAAzC,OAAAC,cAAAC,GAAAH,EAAAI,EAAAC,QAAAC,MAAAH,GAAA,EAAgD,IAArCxL,GAAAqL,EACTX,SAAIjG,EAAAzE,SAAAV,QAAAU,IAA0C,EAAI,IAChD,sBAHoC,IAAAJ,8BAAA4M,2BAAAE,aASxC,QAEF8B,8CAWIC,IAAJ,KACA,IAAIxS,KAAA6R,mBAAA3T,OAAsC,QAAA,KAAA,IAAAV,kBACxCqS,KAAuB7P,KAAvB6R,mBAAAxC,OAAAC,cAAAQ,GAAAD,EAAAE,EAAAN,QAAAC,MAAAI,GAAA,EAAgD,IAArC/L,GAAA8L,EACTpB,SAAIjG,EAAAzE,SAAAV,QAAAU,IAA0C,EAAI,IAChD,sBAHoC,IAAAJ,8BAAA4M,2BAAAC,WAQ1CgC,wCASAxS,MAAKA,KAADyS,QAAJ,SACEA,OADwB,YAExBC,IAAAC,KAAmB,WACbxJ,EAAJqI,iBACE7G,KAAYxB,EAAZ8I,uBAGFxO,eAAwB0F,EAAxBa,IAAAlC,UAAA8K,OAAA5B,aACA6B,QAAkB1J,EAAlBa,4CAUJhK,eAAA0S,IAAAC,KAAmB,oBACjBlP,eAAwB0G,EAAxBH,IAAAlC,UAAAoI,IAAAc,6CASEhR,KAAJ8S,aAAuB,IACfC,GAAe/S,KAArBgT,uBACIhT,MAAAqR,UAAA4B,uBAAJjT,QACOA,KAALyS,aACEA,OADe,IAEfI,YAGJE,KAEIG,GAAYzS,OAAlByS,UACMC,EAASD,EAAfC,SACMlT,KACAmT,EAAWpT,KAAAqT,cAAqBH,EAArBI,oBAAqDJ,EAAtEjB,aAEAU,KAAU3S,KAAVuT,WACIvT,KAAAqT,iBAAJ,IACMrT,KAAJmR,QACEwB,KAAA,WAGAA,KAAU3S,KAAV2R,kBAGJgB,KAAU3S,KAAVgK,OACIW,GAAOyI,EAAAjT,MAAAiT,EAAXnT,MACA0K,EAAU,IAEJ3K,KAAJkR,WAAqB,IACfsC,GAA4BN,EAAhCO,cACM3S,EAAc0H,EAAAC,kBAApB3H,YACM4H,EAAO7E,OAAA6E,KAAY1I,KAHN4R,4BAAA,KAAA,IAAApU,kBAInBmT,KAAAjI,EAAA2G,OAAAC,cAAAsB,GAAAD,EAAAE,EAAApB,QAAAC,MAAAkB,GAAA,EAAwB,IAAblO,GAAAiO,EAAelC,QACxBiF,SACG5S,EAAD4B,GADF,KAEGlB,EAAYxB,KAAA4R,wBAAZlP,KAAgD,EAAjD,QACE1C,KAAA4R,wBADFlP,iBAPe,IAAAiB,8BAAA4M,2BAAAO,MAUS0C,EAA5BG,UACOhJ,EAAAiJ,kBAAPJ,KAEK7I,EAAAkJ,WAAPV,GACInT,KAAAqT,iBAAJ,KACES,qBAAA,SAGJnJ,2CAQA3K,KACI2E,EAAO6D,EAAA7D,aACJI,OAAY,SAAAJ,SAAA,MAAQA,QACpB/G,IAAS,SAAAoH,YAAc4F,EAAdZ,GAAwBY,EAAxBrG,WAAAS,IAAT+E,KAAP,OAEOpF,GAAA,cAAQ3E,KAAA8I,OAAAvE,WAAR,IAAAI,EAAP,MAEMoP,GAAA,IAAqB/T,KAAA8I,OAArB2I,QAAA,IAA4CzR,KAAA8I,OAA5C4I,WAAA,IAAsE1R,KAAtEgK,GAAA,IAAiFhK,KAAjFgK,GAA2FhK,KAA3FuE,WAREI,QASDoP,GAAPjN,sDAKWkN,EAAArJ,KAAAsJ,gBAAAnW,MAAA,KADO,GAEFkW,EAFEE,QAGGF,EAHH3D,6CAYlBrQ,eAAA0S,IAAAC,KAAmB,qBACjBQ,SAAAgB,SAA4BC,EAA5BzJ,sDASGrM,SAAAyF,SAAAqD,MAAL,eAA6C,IACrCiN,GAAqBrU,KAA3BuT,UACMe,IACJ,EADF,IAGM3J,EAAOuI,UAAAC,SAAAoB,eAAAF,EAAAC,GAAAE,aAAA,YACgBxU,KAAAoR,KADhBzJ,OAAA6M,aAAA,OAEWxU,KAAAoR,KAFX3E,MAAA+H,aAAA,SAGaxU,KAAAoR,KAHbzE,SAAA6H,aAAA,aAIiBhM,EAJjB3D,YAAA2P,aAAA,OAKWhM,EALxBlE,oBAMAqG,SAEF,eC5QS8J,QAAe,cAAA,aAArB,OAMMC,OAAY,gBAAA,sBAAA,uBAAA,oBAAA,qBAAA,8BAAlB,mBAWMhJ,aAAY,uBAAA,mBAAlB,SAMMwG,YAAU,qBAAA,qBAAA,oBAAhB,4BAULpJ,SAAoB9I,YAClB2U,QAAA7L,OAAcjF,OAAAC,UAAdgF,QACAsI,KAAY,GAAAxF,GAAZ9C,QACA8L,iBAAwB,GAAA5G,GAAqBlF,EAA7CmF,wCAUEyE,IAAAC,KAAmB,aAAMkC,8BAAAC,6BAAAC,gCAMnBC,GAAwB1T,EAA9BhB,IACIN,MAAA8I,OAAAmM,gBAAAvD,WAAArO,QAAA,gBAAgE,GAClE2R,EAAA3R,QAAA,OAAsC,SACtCyF,OAAAmM,gBAAAvD,WAAA,oCAGFgB,IAAAC,KAAmB,aACjBuC,QAAe/L,EAAAgM,YAAiBrM,EAAjBmI,aAAsCwD,EAArDW,WAGIC,GAAc,yBAEhB3C,IAAAC,KAAmB,aACjBuC,QAAe/L,EAAAgM,YAAiBrM,EAAjBmI,aAAsCwD,EAArDW,gBACA1C,IAAAC,KAAmB,aACjBuC,QAAe/L,EAAAgM,YAAiBrM,EAAjBmI,aAAsCwD,EAArDa,YAIN,MAAA3R,WACE4R,IADU5R,KAKR6R,EAAiB,qBACrB9C,IAAAC,KAAmB,aACjBuC,QAAe/L,EAAAgM,YAAiBrM,EAAjBmI,aAAsCwD,EAArDgB,YADuB,KAAA,IAAAjY,kBAGvB4R,KAAgCjG,EAAAyL,iBAAA1G,cAAhCxF,OAAA2G,OAAAC,cAAAC,GAAAH,EAAAI,EAAAC,QAAAC,MAAAH,GAAA,EAA4E,IAAjEmG,GAAAtG,EACTX,KAAKtF,GAAA+L,QAAAlG,IAAL0G,MACEd,iBAAA1G,cAAAyH,OAAAD,gBALmB,IAAA/R,8BAAA4M,2BAAAE,MAQvBmF,iCAGItX,SAARuX,gBACE,mBACEC,iBAAA,mBAAAT,UACAS,iBAAA,OAAAN,aAEF,yBAEEM,iBAAA,OAAAN,0BAON,MAAA7R,WACE+G,MADU/G,4DAQC,KAAA,IAAAnG,kBACbqS,KAAwB7P,KAAAkV,QAAxBxM,OAAA2G,OAAAC,cAAAQ,GAAAD,EAAAE,EAAAN,QAAAC,MAAAI,GAAA,EAA6C,IAAlCH,GAAAE,EACTpB,MAAMmB,EAAS5P,KAAAkV,QAAAjG,IAAfU,EACIC,GAAAjI,OAAgBuK,EAAhBG,UAAoCrS,KAAAiT,uBAAxCrD,MACEmG,oBAJS,IAAApS,8BAAA4M,2BAAAC,6DAgBbwF,GAAApG,SACSA,GAAA2B,WAAPA,QAEK5P,OAAAsB,KAAWjD,KAAAkV,QAAXe,UAAAlR,OAAPiR,yDAGqB,KAAA,IAAAxY,kBACrBmT,KAA6B3Q,KAAA4U,iBAA7BxG,cAAAiB,OAAAC,cAAAsB,GAAAD,EAAAE,EAAApB,QAAAC,MAAAkB,GAAA,EAAkE,IAAvDsF,GAAAvF,EACTlC,SAAIzO,KAAAkV,QAAAlG,IAAJkH,KACOlW,KAAA4U,iBAAAzF,UAAL+G,GAAsD,IAC9CC,GAAiBnW,KAAAkV,QAAAjG,IAAvBiH,EACIlW,MAAAiT,uBAAJkD,MACEJ,qBANa,IAAApS,8BAAA4M,2BAAAO,kDAiBfsF,GADU9V,OAAA,KAAA,IAAA9C,kBAEhB6Y,KAAwBrW,KAAAkV,QAAxBxM,OAAA2G,OAAAC,cAAAgH,GAAAD,EAAAE,EAAA9G,QAAAC,MAAA4G,GAAA,EAA6C,IAAlC3G,GAAA0G,EACT5H,MAAMmB,EAAS5P,KAAAkV,QAAAjG,IAAfU,EACIC,GAAAsB,YAAqBtB,EAAAjI,OAAgBuK,EAAzCC,WACMvC,EAAAoC,6BAAAoE,GACFpW,KAAAiT,uBADFrD,KAGEuE,YAGAqC,qBAXU,IAAA7S,8BAAA4M,2BAAAkG,4DAoBM,KAAA,IAAAjZ,kBACtBkZ,KAAwB1W,KAAAkV,QAAxBxM,OAAA2G,OAAAC,cAAAqH,GAAAD,EAAAE,EAAAnH,QAAAC,MAAAiH,GAAA,EAA6C,IAAlChH,GAAA+G,EACTjI,MAAMmB,EAAS5P,KAAAkV,QAAAjG,IAAfU,EACI3P,MAAAiT,uBAAJrD,KAEEuE,YAGAqC,oBARkB,IAAA7S,8BAAA4M,2BAAAsG,+CAkBhBjH,GAAS5P,KAAAkV,QAAAjG,IAAf6H,EACI9W,MAAAiT,uBAAJrD,KAEEuE,YAGAqC,sDAcFxW,KAAMkV,EAAU,GAAA3G,KAAQvO,KAAxBkV,SACI6B,EAAqBpV,MAAAsB,KAAW3E,SAAA0Y,uBAApC,kBACqBjS,OAA0B,SAAAkS,SAAQA,GAARjN,QACzCkN,GAAgB,GAAtB7I,oBACqBxL,UAAAkC,OAAAsE,KAAA0N,EAAgD,SAAAE,SAC/DC,GAAAlI,IAAkBiI,EAAlBjN,OAAJ,MACEkG,IAAkB+G,EAAlBjN,KACA,OAKJjM,QAA2B,SAAAoZ,MACnBC,GAAiBnG,EAAarB,EAAb5F,IACvBiH,EAAarB,EAAb5F,IAAAuH,UAAoCkD,EADba,OAAvB9X,UAEIyT,EAAarB,EAAb5F,KAA2BkL,EAAAlG,IAAYY,EAAZ5F,OAA3B,GACFoN,IADFC,SAKUC,GAAAzT,OAAuBC,UAAkBmN,EAAarB,EAA/B5F,QACvB4F,EADkE5F,UAE9D4F,EAAA2H,WAAA,kBACN3H,EAAA2H,WAAA,kBADM9I,MACsCiG,EAHwB8C,SAIhErN,EAAAsN,UAAe7H,EAJiD5F,eAK1DiH,EAAarB,EAAb5F,IAL0DkH,iBAM/DD,EAAarB,EAAb5F,IAAAmH,QAN+D,OAOhEhH,EAPgEiH,eAAAjH,cAAAyF,aAU1DzF,EAAArB,OAV0DvE,mBAW7D4F,EAAArB,OAAAmM,gBAX6DxD,mBAY1DtH,EAAArB,OAAAmM,gBAZ0DvD,wBAaxDvH,EAAAyK,iBAAAzF,UAAgCS,EAbwB5F,aAAxEoN,IAgBMM,EAAiB,GAAAC,GAAvBL,KACAxI,IAAYc,EAAZ5F,GAAA0N,GACIA,EAAA/P,OAAwBuK,EAAxBG,UACFqF,EAAAnG,WAA4BkD,EAD1BW,MAEFjL,EAAA8I,uBAFFyE,MAOE3B,OAGJ,MAAApS,WACE+G,MADU/G,MAKhBuR,qCAGS9K,SACD,gBAAAA,KACPA,EAAA/G,QAAA,UAAA,GACD+G,EAAA/G,QAAA,YADC,GAED+G,EAAA/G,QAAA,YAHA,4CAYA+G,OACQ,IAAAa,OAAN,qEAEEb,GAAA/G,QAAiB6O,EAAjBC,WAAqC,EAAWD,EAAPC,SACzC/H,EAAA/G,QAAiB6O,EAAjBE,WAAqC,EAAWF,EAAPE,SACzChI,EAAA/G,QAAiB6O,EAAjBG,WAAqC,EAAWH,EAAPG,SACtCH,EAAPI,uDAOqB1C,SAEd5P,MAAA4U,iBAAAzF,UAAgCS,EAAhC5F,OAAA,KAAA4N,mBAILC,mBAJK,GAKL7X,KAAA8X,mCALKlI,SAOLmI,0CAPKnI,SASLoI,wBATKpI,SAAAqI,wCAaLC,iCAbKtI,SAeLwB,KAAA7E,kBAAA4L,aAAyCvI,EAAzC5F,OAfF,wEAmBShK,KAAA8I,OAAAzC,kBAAA,IACRuJ,EAAAjI,OAAgBuK,EAAhBC,UACDvC,EAAAjI,OAAgBuK,EAFhBE,mFAMIgG,IAAJ,KACI,YAAApY,KAAA8I,OAAAxD,MAAkCsK,EAAAjI,OAAgBuK,EAAtDC,gBAEUkG,GAAgB9U,KAAAC,MAAW/C,OAAA6F,aAAAC,QAAjC,aACgB8R,GAAoBA,EAAAC,IAAoBD,EAAAC,IAArB,IAChBD,EAAAE,mBACAF,EAAAE,iBAAAC,SAFnB,OAIF,MAAA7U,WAEE+G,MAAA,4DAIJ0N,mEAUOpY,MAAA8I,OAAP/B,8EAQ+B0R,MACzB3L,GAAW9M,KAAAoR,KAAjBzJ,KACM+Q,EAAW,gBAAAD,GAAAA,EAAsDA,EAAvEtW,cAEAuW,OACOhE,GAAL8C,WAAqB,MAChB9C,GAALiE,gBACS7L,KAAapB,EAAbyB,WAAoCL,IAAapB,EAAxDwB,eACGwH,GAALvH,gBAAkCL,KAAapB,EAApByB,cACtBuH,GAALxH,iBAAmCJ,KAAapB,EAApBwB,eACvBwH,GAALkE,aAA+B9L,KAAapB,EAApBuB,UACnByH,GAALmE,kBAAoC/L,KAAapB,EAApBuB,UACxByH,GAALoE,sBAAwChM,KAAapB,EAApBuB,qBARnC,uDAoBA1M,OACQ,IAAA0K,OAAN,+EAEE8N,GAJ2B,KAAA,KAAA,IAAAvb,kBAK/Bwb,KAAwBhZ,KAAAkV,QAAxBxM,OAAA2G,OAAAC,cAAA2J,GAAAD,EAAAE,EAAAzJ,QAAAC,MAAAuJ,GAAA,EAA6C,IAAlCtJ,GAAAqJ,EACTvK,MAAMmB,EAAS5P,KAAAkV,QAAAjG,IAAfU,EACIC,GAAAsB,cAAA,GAA8BtB,EAAlCoC,4BACMpC,EAAAoC,6BAAJzR,MACE4T,4BATyB,IAAAxQ,8BAAA4M,2BAAA4I,UAc/BJ,yDAS8BxY,GAAAX,UAAA1B,OAAA,GAAAV,SAAAoC,UAAA,GAAAA,UAAA,GAAaU,QAC3CsP,OACQ,IAAA3E,OAAN,8EAEEmO,IAAJ,KACIxJ,EAAAsB,cAAJ,EAAgC,IACxBmI,GAAUzJ,EAAAgC,wBAA+BtQ,EAA/Cf,OACIoB,MAAAC,QAAAyX,MAAJ,OACQ,IAAApO,OAAA,gCAAA1K,EAAA,kBAANP,QAEmBqZ,EAAAnb,OAAA,IAAuBsD,EAAA6X,IAAsB,EAAlE,WAEFD,4DAOApZ,SAAIS,OAAAyS,YAAoBzS,OAAAyS,UAAxBoG,cA+BQ,IAAArO,OAAN,8EA9BMkI,GAAS1S,OAAAyS,UAAfC,WACA2C,iBAAA,kBAA2C,SAAA9B,MACnChK,GAAKgK,EAAArJ,KAAAsJ,gBAAAnW,MAAA,KAAX,GACMoW,EAAUF,EAAhBE,QACMnF,EAAeiF,EAArB3D,QAEIzF,EAAAsK,QAAAlG,IAAJhF,GAA0B,IAClB4F,GAAShF,EAAAsK,QAAAjG,IAAfjF,KACA+H,iBAAAhD,IACAiD,2BAAA1R,IACA4T,KACEnC,iBAA0B/D,EAA1B+C,aACAyF,SACA+C,wBAAA3J,MAGA2J,wBAAA3J,EAAqCA,EAArCmC,oBAEFX,KAAA7E,kBAAAiN,mBAAA,GAAkD5J,EAAlD5F,GAA8DY,EAAA9B,OAA9DvE,cACA6M,KAAA7E,kBAAAiN,mBAAkD5J,EAAlD5F,GACD,2DAciB4F,UAEd5F,GAAK4F,EAAX5F,WACA4K,iBAAA6E,mBAAAzP,EAA6C4F,EAA7CmC,kBACI/R,KAAA4U,iBAAAlE,WAAJ1G,GAA0C,QAAA,KAAA,IAAAxM,kBAExCkc,KAA0B1Z,KAAA4U,iBAAA+E,mBAA1B3P,GAAAqF,OAAAC,cAAAsK,GAAAF,EAAAG,EAAApK,QAAAC,MAAAkK,GAAA,EAAwE,IAA7DE,GAAAJ,EACTjL,KAAIzO,MAAA4U,iBAAAzF,UAAJ2K,IACM9Z,KAAAkV,QAAAlG,IAAJ8K,SACE5E,QAAAjG,IAAA6K,GAAAtD,oBALkC,IAAA7S,8BAAA4M,2BAAAwJ,WAAA,KAAA,IAAAvc,kBAUxCwc,KAA8Bha,KAAA4U,iBAAAxG,cAA9B1F,OAAA2G,OAAAC,cAAA2K,GAAAD,EAAAE,EAAAzK,QAAAC,MAAAuK,GAAA,EAA0E,IAA/DE,GAAAH,EACTvL,MAAM0H,EAAiBnW,KAAAkV,QAAAjG,IAAvBkL,EACIhE,IAAkBnW,KAAAiT,uBAAtBkD,UACEvB,iBAAAxG,cAAAuH,OAAAwE,GACIhE,EAAJ3E,iBACES,eACAT,cAAA,KAEFuE,qBAlBoC,IAAApS,8BAAA4M,2BAAA6J,MAuB5C,MAAAzW,WAEE+G,MAAA,6CAA2DkF,EAA3D5F,6DASEvJ,OAAAyS,YAAoBzS,OAAAyS,UAAxBoG,cAkFQ,IAAArO,OAAN,+EAhFMkI,GAASD,UAAfC,YAEInT,KAAA8I,OAAJxE,eACEkQ,aAAA,OAA4BxU,KAAA8I,OAA5BxE,cAIEtE,KAAAoR,KAAJzJ,QACE6M,aAAA,YAAiCxU,KAAAoR,KAAjCzJ,OAEE3H,KAAAoR,KAAJpF,YACEwI,aAAA,iBAAsCxU,KAAAoR,KAAtCpF,WAEEhM,KAAAoR,KAAJjF,WACEqI,aAAA,gBAAqCxU,KAAAoR,KAArCjF,UAEEnM,KAAAoR,KAAJ/E,YACEmI,aAAA,iBAAsCxU,KAAAoR,KAAtC/E,WAEErM,KAAAoR,KAAJ3E,OACE+H,aAAA,OAA4BxU,KAAAoR,KAA5B3E,MAEEzM,KAAAoR,KAAJzE,UACE6H,aAAA,SAA8BxU,KAAAoR,KAA9BzE,SAIE3M,KAAA8I,OAAJjE,aACE2P,aAAA,aAAkCxU,KAAA8I,OAAlCjE,YAEE7E,KAAA8I,OAAAvB,qBAAmCvH,KAAA8I,OAAAvB,uBAAoC,KACzEiN,aAAA,qBAA0CxU,KAAA8I,OAA1CvB,sBAEEvH,KAAA8I,OAAJf,kBACEyM,aAAA,gBAAqCxU,KAAA8I,OAArCf,iBAEE/H,KAAA8I,OAAJpB,YACE8M,aAAA,YAAiCxU,KAAA8I,OAAjCpB,WAEE1H,KAAA8I,OAAJlC,kBACE4N,aAAA,gBAAA,SAIExU,KAAA8I,OAAAuR,KAAJxU,WACE2O,aAAA,eAAoCxU,KAAA8I,OAAAuR,KAApCxU,UAEE7F,KAAA8I,OAAAuR,KAAJtU,UACEyO,aAAA,cAAmCxU,KAAA8I,OAAAuR,KAAnCtU,SAEE/F,KAAA8I,OAAAuR,KAAJrU,UACEwO,aAAA,cAAmCxU,KAAA8I,OAAAuR,KAAnCrU,SAEEhG,KAAA8I,OAAAuR,KAAJpU,YACEuO,aAAA,gBAAqCxU,KAAA8I,OAAAuR,KAArCpU,WAIEjG,KAAA8I,OAAJzC,kBACEmO,aAAA,mBAAwCxU,KAAA8I,OAAxCzC,iBAGErG,KAAA8I,OAAJjC,gBACE2N,aAAA,QAA6BxU,KAAA8I,OAA7BjC,eAEE7G,KAAA8I,OAAAwR,MAAoB3Y,MAAAC,QAAc5B,KAAA8I,OAAtCwR,SACE9F,aAAA,UAAAnP,OAAAvC,EAAgC9C,KAAA8I,OAAhCwR,QAGEta,KAAAoR,KAAAtF,KAAiB9L,KAAAoR,KAAAtF,IAAjByO,QAAyCva,KAAA8I,OAA7CtC,eACEgO,aAAoBxU,KAAA8I,OAApBtC,YAA6CxG,KAAAoR,KAAAtF,IAA7CyO,QAEEva,KAAA8I,OAAJrC,YAA6B,IACrB+T,GAAN,mBACAhG,aAAAgG,EAAwCxa,KAAA8I,OAAxCrC,eAGFgU,cAAA,0DAWEha,OAAAyS,YAAoBzS,OAAAyS,UAAxBoG,cAoCQ,IAAArO,OAAN,6EAnCMhD,GAAuBjI,KAAA8I,OAA7Bb,wBAEIxH,OAAA0C,SAAJiD,OAA4B,IACpBA,GAAS3F,OAAA0C,SAAfiD,MACIA,GAAA/C,QAAA,SAAJ,WACEkS,IAD+B,iCAE/BmF,qBAAA,GAEOtU,EAAA/C,QAAA,UAAJ,YACHkS,IADqC,mCAErCmF,qBAAA,GAEEtU,EAAA/C,QAAA,oBAAJ,WACEkS,IAD0C,kCAE1CoF,sBAAA,GAEOvU,EAAA/C,QAAA,uBAAJ,YACHkS,IADkD,iCAElDoF,sBAAA,GAIA1S,EAAAyS,uBAAJ,aACEvH,SAAAuH,sBAEEzS,EAAA0S,wBAAJ,YACExH,SAAAwH,iCAGAxH,SAAAyH,gCAGFC,0BCpmBAC,EAAgBtS,MAChBuS,EAAN,IAEqBC,EAAAA,sBAEnBlS,UACEkS,QAAAlS,OAAcjF,OAAAC,UAAAgX,EAAdhS,QACAmS,gBAAA,OACAC,aAAA,OACA3a,WAAAD,SACA6a;2CAQE9J,UAAiBrR,KAAAqR,WAAkB,GAAAsD,GAAc3U,KAAjD8I,QAEF,MAAAnF,WACE+G,MADU/G,kDAYZ3D,KAAMob,EAANpb,eACOqb,SAAY,SAAAC,EAAAC,GACbH,EAAAF,eAAJ,YACExI,IAAAC,KAAmB,aACjBsI,gBAAA,IACAG,QAIFF,aAAA,SAEAhI,UAAmBzS,OAAAyS,qBAKnBA,UAAAR,IAAuBjS,OAAAyS,UAAAR,sBAGf8I,GAAM/a,OAAAnC,SAAAmd,cAAZ,YACAC,OAAA,IACA/T,KAAA,oBAEAgU,aAAA,MAAA,gDACM1E,GAAOxW,OAAAnC,SAAAsd,qBAAA,UAAb,KACA9F,iBAAA,OAA6B,aAC3B+F,uBACAnJ,IAAAC,KAAmB,aACjBsI,gBAAA,IAED9R,SAEH2M,iBAAA,QAA8B,SAAApL,KAC5BuQ,gBAAA,IACAvQ,OAEFoR,WAAAC,aAAAP,EAAAvE,2DAWFjX,KAAAib,kBAAA,GAAiCxa,OAAAyS,WAAoBzS,OAAAyS,UAAzDoG,iBACE2B,gBAAA,GAEKjb,KAAPib,0EAQAe,QACQ5F,GAAN9V,OACI8a,EAAA7a,aAAJ6V,EAA8C,MAC5C7V,WAAA6V,GACIgF,EAAJ/J,eAIQ,IAAApG,OAAN,0EAHAoG,UAAA4K,sBANAb,GAANpb,KAaMkc,EAAoBzc,EAAAuc,EAA1BjB,UACAoB,SAAAD,WC3GSE,EAAU,OCIvBpB,GAAIoB,QAAUC,GAAK,SASnB,IAAavT,GAASN,EACT4T,EAAUpB,EAAIoB","file":"dfp.min.js","sourcesContent":["/**\n * Htz-cookie-util\n * @module htzCookieUtil\n * @author Elia Grady elia.grady@haaretz.co.il\n * @license MIT\n */\n\n/**\n * Translates Key-Value string into a convenient map.\n * @param {String} string String in format of \"key<operator>value<separator>.....\"\n * @param {object} options object for overriding defaults:\n * options.separator is a String or regExp that separates between each key value pairs\n * (default is ';'). options.operator is a String or regExp that separates between each key\n * and value within a pair (default is '=').\n * @returns {object} a map object, with key-value mapping according to the passed configuration.\n */\nfunction stringToMap(string,\n  { separator = ';', operator = '=' } = {}) {\n  const map = {};\n  const itemsArr = string.split(separator);\n  itemsArr.forEach(element => {\n    if (typeof element === 'string') {\n      const keyValue = element.split(operator);\n      if (keyValue.length === 2) {\n        try {\n          map[keyValue[0]] = decodeURIComponent(keyValue[1]);\n        }\n        catch (e) {\n          // Do nothing, malformed URI\n        }\n      }\n    }\n  });\n  return map;\n}\nexport const ssoKey = window.location.hostname.indexOf('haaretz.com') > -1 ? 'engsso' : 'tmsso';\n\n// Translates Cookie string into a convenient map.\nexport default function getCookieAsMap() {\n  const map = stringToMap(document.cookie, { separator: /;\\s?/ });\n  if (typeof map.tmsso === 'string') {\n    map.tmsso = stringToMap(map.tmsso, { separator: ':' });\n  }\n  if (typeof map.engsso === 'string') {\n    map.engsso = stringToMap(map.engsso, { separator: ':' });\n  }\n  return map;\n}\n","/**\n * Helper function. Adds N hours to a given date object.\n * @param {Date} date - the date to derive from\n * @param {Number} hours - the amount of hours to add, in whole numbers\n * @throws {SyntaxError} Will throw if the 'date' param is not provided\n * @throws {SyntaxError} Will throw if the 'hours' param is not provided\n * @throws {TypeError} Will throw if the 'hours' param is not a valid integer\n * @returns {Date} date - the new date, derived from adding the given hours\n */\nexport function addHours(date, hours) {\n  if (!date) {\n    throw new SyntaxError('addHours called without a required \\'date\\' parameter!');\n  }\n  if (!hours) {\n    throw new SyntaxError('addHours called without a required \\'hours\\' parameter!');\n  }\n  else if (isNaN(parseInt(hours, 10))) {\n    throw new TypeError('addHours called with an invalid integer \\'hours\\' parameter!');\n  }\n  const result = new Date(date);\n  result.setHours(result.getHours() + parseInt(hours, 10));\n  return result;\n}\n\n/**\n * Helper function. Adds N days to a given date object.\n * @param {Date} date - the date to derive from\n * @param {Integer} days - the amount of days to add\n * @throws {SyntaxError} Will throw if the 'date' param is not provided\n * @throws {SyntaxError} Will throw if the 'days' param is not provided\n * @throws {TypeError} Will throw if the 'hours' param is not a valid integer\n * @returns {Date} date - the new date, derived from adding the given days\n */\nexport function addDays(date, days) {\n  if (!date) {\n    throw new SyntaxError('addDays called without a required \\'date\\' parameter!');\n  }\n  if (!days) {\n    throw new SyntaxError('addDays called without a required \\'days\\' parameter!');\n  }\n  else if (isNaN(parseInt(days, 10))) {\n    throw new TypeError('addDays called with an invalid integer \\'days\\' parameter!');\n  }\n  const result = new Date(date);\n  result.setDate(result.getDate() + parseInt(days, 10));\n  return result;\n}\n","import globalConfig from '../globalConfig';\n\nconst breakpoints = globalConfig.breakpointsConfig.breakpoints;\n\n/**\n * Returns a function, that, as long as it continues to be invoked, will not\n * be triggered. The function will be called after it stops being called for\n * N milliseconds. If `immediate` is passed, trigger the function on the\n * leading edge, instead of the trailing.\n * @param { function } func - the function to run\n * @param { number } wait - the timeout period to avoid running the function\n * @param { boolean } immediate - leading edge modifier\n * @returns {function } the debounced function\n */\nexport function debounce(func, wait = 100, immediate) {\n  let timeout;\n  return function debounced() {\n    const context = this;\n    const args = arguments;// eslint-disable-line prefer-rest-params\n    const later = () => {\n      timeout = null;\n      if (!immediate) func.apply(context, args);\n    };\n    const callNow = immediate && !timeout;\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n    if (callNow) func.apply(context, args);\n  };\n}\n\n/**\n * Returns the current breakpoint that is closest to the window's width\n * @returns {number} the break that the current width represents\n */\nexport function getBreakpoint() {\n  let breakpoint;\n  const windowWidth = window.innerWidth\n    || document.documentElement.clientWidth\n    || document.body.clientWidth;\n  switch (true) {\n    case windowWidth < breakpoints.xs: breakpoint = breakpoints.xxs; break;\n    case windowWidth < breakpoints.s: breakpoint = breakpoints.xs; break;\n    case windowWidth < breakpoints.m: breakpoint = breakpoints.s; break;\n    case windowWidth < breakpoints.l: breakpoint = breakpoints.m; break;\n    case windowWidth < breakpoints.xl: breakpoint = breakpoints.l; break;\n    case windowWidth < breakpoints.xxl: breakpoint = breakpoints.xl; break;\n    default: breakpoint = breakpoints.xxl;\n  }\n  return breakpoint;\n}\n/**\n * Returns the current breakpoint that is closest to the window's width\n * @param {number} breakpoint - the breakpoint label enumerator that the current width represents\n * (yield with a getBreakpoint() call or passed manually )\n * @returns {string} breakpoint - the breakpoint label that the current width represents,\n * as a string\n */\nexport function getBreakpointName(breakpoint) {\n  let resultBreakpoint;\n  const windowWidth = breakpoint || window.innerWidth;\n  switch (true) {\n    case windowWidth < breakpoints.xs: resultBreakpoint = 'xxs'; break;\n    case windowWidth < breakpoints.s: resultBreakpoint = 'xs'; break;\n    case windowWidth < breakpoints.m: resultBreakpoint = 's'; break;\n    case windowWidth < breakpoints.l: resultBreakpoint = 'm'; break;\n    case windowWidth < breakpoints.xl: resultBreakpoint = 'l'; break;\n    case windowWidth < breakpoints.xxl: resultBreakpoint = 'xl'; break;\n    default: resultBreakpoint = 'xxl';\n  }\n  return resultBreakpoint;\n}\n","/**\r\n * Checks whether two arrays are equal\r\n * @param {Array} a - the first array to check\r\n * @param {Array} b - the second array to check\r\n * @returns {Boolean} true iff both a and b are arrays, with equal values\r\n */\r\nexport function arraysEqual(a, b) {\r\n  if (!a || !b) return false;\r\n  if (!Array.isArray(a) || !Array.isArray(b)) return false;\r\n  if (a === b) return true;\r\n  if (a.length !== b.length) return false;\r\n  for (let i = 0; i < a.length; ++i) {\r\n    if (Array.isArray(a[i]) && Array.isArray(b[i])) {\r\n      if (!arraysEqual(a[i], b[i])) return false;\r\n    }\r\n    else if (a[i] !== b[i]) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\nexport default arraysEqual;\r\n","export default (function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n});","export default (function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n})();","export default (function (arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n});","/* global dfpConfig */\r\nimport getCookieAsMap, { ssoKey } from './utils/cookieUtils';\r\n// globalConfig for DFP\r\nlet dfpBaseConf;\r\ntry {\r\n  dfpBaseConf = window.JSON.parse(document.getElementById('dfpConfig').textContent);\r\n}\r\ncatch (err) {\r\n  dfpBaseConf = window.dfpConfig;\r\n}\r\nconst dfpConfig = Object.assign({\r\n  get referrer() {\r\n    return document.referrer ? document.referrer : '';\r\n  },\r\n  get isMobile() {\r\n    return (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i\r\n      .test(window.navigator.userAgent || ''));\r\n  },\r\n  /**\r\n   * Returns true iff the loaded page is the homepage (no inner path)\r\n   * @returns {boolean}\r\n   */\r\n  get isHomepage() {\r\n    return window.location.pathname === '/' || this.environment === 3; // 'prod'\r\n  },\r\n  get department() {\r\n    return this.isHomepage ? '_homepage' : '_section';\r\n  },\r\n  /**\r\n   * returns the domain the page was loaded to. i.e: 'haaretz.co.il', 'haaretz.com'\r\n   * @returns {string} the domain name from the windows's location hostname property\r\n   */\r\n  get domain() {\r\n    const regexMatch = /([\\d|\\w]+)(\\.co\\.il|\\.com)(.*)?/.exec(window.location.hostname);\r\n    const result = regexMatch ? regexMatch[0] : window.location.hostname;\r\n    return result;\r\n  },\r\n  /**\r\n   * Returns an array of concatenated paths, separated by a dot.\r\n   * For example, for the URL:\r\n   * http://www.haaretz.co.il/news/world/america/us-election-2016/LIVE-1.2869045\r\n   * the path is '/news/world/america/us-election-2016/LIVE-1.2869045'.\r\n   * This function takes the directories ['news', 'world', 'america', 'us-election-2016']\r\n   * and converts it to the following format:\r\n   * ['.news', '.news.world', '.news.world.america', '.news.world.america.us-election-2016']\r\n   * This denotes the path configuration for the given adSlot\r\n   * non articles (sections) will be given a '0' - no articleId value for targeting purposes)\r\n   * @returns {Array.<T>} an array of path names\r\n   */\r\n  get path() {\r\n    let sectionArray = this.articleId && this.articleId !== '0' ?\r\n      window.location.pathname.split('/').slice(1, -1) :\r\n      window.location.pathname.split('/').slice(1);\r\n    sectionArray = sectionArray.filter(path =>\r\n    path !== 'wwwMobileSite' && path !== 'whtzMobileSite');\r\n    return sectionArray\r\n      .map(section => `.${section}`)\r\n      .map((section, index, arr) => arr.slice(0, index + 1)\r\n        .reduce((last, current) => last.concat(current)));\r\n  },\r\n  /**\r\n   * Returns a string representation for the name of the site\r\n   * @return {*|string}\r\n   */\r\n  get site() {\r\n    let site;\r\n    if (window.location.hostname.indexOf('haaretz.co.il') > -1) {\r\n      site = 'haaretz';\r\n    }\r\n    else if (window.location.hostname.indexOf('themarker.com') > -1) {\r\n      site = 'themarker';\r\n    }\r\n    else if (window.location.hostname.indexOf('mouse.co.il') > -1) {\r\n      site = 'mouse';\r\n    }\r\n    return site || 'haaretz';\r\n  },\r\n  /**\r\n   * Returns the current environment targeting param, if such is defined.\r\n   * @returns {number} targeting param, 1 for local development, 2 for test servers and 3 for prod.\r\n   * May return undefined if no targeting is specified.\r\n   */\r\n  get environment() {\r\n    const env = {\r\n      dev: 1,\r\n      test: 2,\r\n      prod: 3,\r\n    };\r\n    return window.location.port === '8080' ? env.dev :\r\n      (window.location.hostname.indexOf('pre.haaretz.co.il') > -1\r\n      || window.location.hostname.indexOf('tmtest.themarker.com') > -1\r\n      || window.location.hostname.indexOf('pre.haaretz.com') > -1\r\n      || window.location.hostname.indexOf('prodmouse.mouse.co.il') > -1) ? env.test :\r\n        (window.location.pathname.indexOf('/cmlink/Haaretz.HomePage') > -1\r\n        || window.location.pathname.indexOf('/cmlink/TheMarker.HomePage') > -1\r\n        || window.location.pathname.indexOf('/cmlink/Mouse.HomePage') > -1)\r\n          ? env.prod : undefined;\r\n  },\r\n  /**\r\n   * Returns the articleIf if on an article page, or null otherwise\r\n   * @returns {string} an articleId string from the pathname, or 0 if not found\r\n   */\r\n  get articleId() {\r\n    const articleIdMatch = /\\d\\.\\d+/g.exec(window.location.pathname);\r\n    let articleId = '0';\r\n    if (articleIdMatch) {\r\n      articleId = articleIdMatch.pop(); // Converts [\"1.23145\"] to \"1.23145\"\r\n    }\r\n    return articleId;\r\n  },\r\n  utm_: {\r\n    get content() {\r\n      return this.getUrlParam('utm_content');\r\n    },\r\n    get source() {\r\n      return this.getUrlParam('utm_source');\r\n    },\r\n    get medium() {\r\n      return this.getUrlParam('utm_medium');\r\n    },\r\n    get campaign() {\r\n      return this.getUrlParam('utm_campaign');\r\n    },\r\n    getUrlParam(key) {\r\n      const results = RegExp(`(${key})(=)([^&\"]+)`).exec(window.location.search);\r\n      return results && results[3] ? results[3] : undefined;\r\n    },\r\n  },\r\n  get adBlockRemoved() {\r\n    let adBlockRemoved = false;\r\n    try {\r\n      if (localStorage.getItem('adblock_removed')) {\r\n        adBlockRemoved = true;\r\n      }\r\n    }\r\n    catch (err) {\r\n      // do nothing\r\n    }\r\n    return adBlockRemoved;\r\n  },\r\n  get ssoGroupKey() {\r\n    return window.localStorage.getItem('_SsoGroupKey');\r\n  },\r\n  get anonymousId() {\r\n    const cookieName = 'anonymousId';\r\n    const cookieMap = getCookieAsMap();\r\n    let anonymousId = '';\r\n    if (cookieMap && cookieMap[cookieName]) {\r\n      anonymousId = cookieMap[cookieName];\r\n    }\r\n    return anonymousId;\r\n  },\r\n  get isWriterAlerts() {\r\n    return (location.search.indexOf('writerAlerts=true') > -1);\r\n  },\r\n  get wifiLocation() {\r\n    let wifiLocation;\r\n    const cookieName = '_htzwif'; // eslint-disable-line no-underscore-dangle\r\n    const cookieMap = getCookieAsMap();\r\n    try {\r\n      if (cookieMap && cookieMap[cookieName]) {\r\n        if (cookieMap[cookieName].toLowerCase() === 'arcaffe') {\r\n          wifiLocation = 'ArCafe';\r\n        }\r\n        if (cookieMap[cookieName].toLowerCase() === 'university') {\r\n          wifiLocation = 'university';\r\n        }\r\n      }\r\n    }\r\n    catch (err) {\r\n      // do nothing\r\n    }\r\n    return wifiLocation;\r\n  },\r\n  get isValidForsmartPhone() {\r\n    let validForAds = true;\r\n    const PageUrl = window.location.href;\r\n    const isSmartphoneapp = PageUrl.match('haaretzsmartphoneapp');\r\n    const cookieMap = getCookieAsMap();\r\n    try {\r\n      if (isSmartphoneapp) {\r\n        // eslint-disable-line no-underscore-dangle\r\n        if (!cookieMap || !(cookieMap.NotPayer || cookieMap.HtzPusr)) {\r\n          validForAds = false;\r\n        }\r\n      }\r\n    }\r\n    catch (err) {\r\n      // do nothing\r\n    }\r\n    return validForAds;\r\n  },\r\n  get gStatCampaignNumber() {\r\n    let gstatCampaign;\r\n    try {\r\n      gstatCampaign = localStorage.getItem('GstatCampaign') ?\r\n        JSON.parse(localStorage.getItem('GstatCampaign')) : undefined;\r\n    }\r\n    catch (err) {\r\n      /* In case of thrown 'SecurityError' or 'QuotaExceededError',\r\n       the variable should be undefined */\r\n      gstatCampaign = undefined;\r\n    }\r\n    return gstatCampaign ? gstatCampaign.CampaignNumber : undefined;\r\n  },\r\n  get pageType() {\r\n    let type = '';\r\n    try {\r\n      const htmlclassList = document.querySelector('html').classList;\r\n      switch (true) {\r\n        case /mouse_location/.test(htmlclassList):\r\n          type = 'mouse_location';\r\n          break;\r\n        case /mouse_event/.test(htmlclassList):\r\n          type = 'mouse_event';\r\n          break;\r\n        case /contentType-story/.test(htmlclassList):\r\n          type = 'mouse_article';\r\n          break;\r\n        default:\r\n          type = '';\r\n      }\r\n    }\r\n    catch (err) {\r\n      /* In case of thrown 'SecurityError' or 'QuotaExceededError',\r\n       the variable should be undefined */\r\n      type = '';\r\n    }\r\n    return type;\r\n  },\r\n  get proposalNumber() {\r\n    let proposal;\r\n    try {\r\n      proposal = localStorage.getItem('proposaltype') ?\r\n        localStorage.getItem('proposaltype') : undefined;\r\n    }\r\n    catch (err) {\r\n      /* In case of thrown 'SecurityError' or 'QuotaExceededError',\r\n       the variable should be undefined */\r\n      proposal = undefined;\r\n    }\r\n    return proposal;\r\n  },\r\n  adSlotConfig: {\r\n    'haaretz.co.il.example.slot': {\r\n      id: 'slotId',\r\n      // path : \"/network/base/slotId/slotId_subsection\", Will be calculated from AdManager\r\n      responsive: true,\r\n      adSizeMapping: [['width1', 'height1'], ...['widthN', 'heightN']],\r\n      priority: 'normal',\r\n      fluid: false,\r\n      responsiveAdSizeMapping: {\r\n        xxs: [['width1', 'height1'], ...['widthN', 'heightN']],\r\n        xs: [['width1', 'height1'], ...['widthN', 'heightN']],\r\n        s: [['width1', 'height1'], ...['widthN', 'heightN']],\r\n        m: [['width1', 'height1'], ...['widthN', 'heightN']],\r\n        l: [['width1', 'height1'], ...['widthN', 'heightN']],\r\n        xl: [['width1', 'height1'], ...['widthN', 'heightN']],\r\n        xxl: [['width1', 'height1'], ...['widthN', 'heightN']],\r\n      },\r\n      blacklistReferrers: 'comma, delimited, blacklisted, referrer, list',\r\n      whitelistReferrers: 'comma, delimited, referrer, list',\r\n    },\r\n  },\r\n  adManagerConfig: {\r\n    network: '9401',\r\n    adUnitBase: 'haaretz.co.il_Web',\r\n  },\r\n  breakpointsConfig: {\r\n    get breakpoints() {\r\n      // Override in VM from backend to control this toggle.\r\n      let breakpoints;\r\n      switch (dfpConfig.googleGlobalSettings.breakpointType) {\r\n        case 'type1': breakpoints = this.breakpoints1; break;\r\n        case 'type2': breakpoints = this.breakpoints2; break;\r\n        case 'type3': breakpoints = this.breakpoints3; break;\r\n        case 'type4': breakpoints = this.breakpoints4; break;\r\n        default: breakpoints = this.breakpoints1;\r\n      }\r\n      return breakpoints;\r\n    },\r\n    // Type 1\r\n    breakpoints1: {\r\n      xxs: 600,\r\n      xs: 761,\r\n      s: 993,\r\n      m: 1009,\r\n      l: 1291,\r\n      xl: 1600,\r\n      xxl: 1900,\r\n    },\r\n    // Type 2\r\n    breakpoints2: {\r\n      xxs: 600,\r\n      xs: 1000,\r\n      s: 1150,\r\n      m: 1281,\r\n      l: 1600,\r\n      xl: 1920,\r\n      xxl: 1920,\r\n    },\r\n    // Type 3\r\n    breakpoints3: {\r\n      xxs: 100,\r\n      xs: 480,\r\n      s: 600,\r\n      m: 768,\r\n      l: 1024,\r\n      xl: 1280,\r\n      xxl: 1900,\r\n    },\r\n    // Type 4\r\n    breakpoints4: {\r\n      xxs: 600,\r\n      xs: 768,\r\n      s: 1024,\r\n      m: 1280,\r\n      l: 1900,\r\n      xl: 1900,\r\n      xxl: 1900,\r\n    },\r\n  },\r\n  userConfig: {\r\n    type: undefined,\r\n    age: undefined,\r\n    gender: undefined,\r\n  },\r\n  conflictManagementConfig: {\r\n    'blocking.ad.unit.name': [\r\n      {\r\n        onsize: '1280x200,970x250,3x3',\r\n        avoid: 'blocked.ad.unit.name',\r\n      },\r\n      {\r\n        onsize: '1280x200,970x250,3x3',\r\n        avoid: 'blocked.ad.unit.name',\r\n      },\r\n    ],\r\n  },\r\n  impressionManagerConfig: {\r\n    'ad.unit.name': {\r\n      target: 'all|section|homepage',\r\n      frequency: '$1/$2(day|hour)',\r\n      exposed: 0,\r\n      expires: (new Date()).getTime(),\r\n    },\r\n  },\r\n  googleGlobalSettings: {\r\n    enableSingleRequest: true,\r\n    enableAsyncRendering: true,\r\n    refreshIntervalTime: 1000,\r\n    breakpointType: 'type1',\r\n  },\r\n  sso: ssoKey,\r\n\r\n}, dfpBaseConf);\r\n\r\nexport default dfpConfig;\r\n","import globalConfig from '../globalConfig';\nimport { addHours, addDays } from '../utils/time';\nimport { debounce } from '../utils/breakpoints';\n\nexport const keys = {\n  impressions: 'impressions',\n  frequency: 'frequency',\n  /**\n   * [0] - full match\n   * [1] - impression count i.e: \"1\" | \"22\"\n   * [2] - impression expiry range quantifier  i.e: \"1\" | \"22\"\n   * [3] - impression expiry range unit i.e: \"day\" | \"hour\"\n   */\n  frequencyRegex: /(\\d+)\\/(\\d+)(day|hour)/,\n  expires: 'expires',\n  exposed: 'exposed',\n  target: 'target',\n  maxImpressions: 'maxImpressions',\n  hours: 'hour',\n  days: 'day',\n  adSlotId: 'id',\n};\n\nexport default class ImpressionsManager {\n\n  constructor(impressionManagerConfig) {\n    this.now = (new Date()).getTime(); // this date is used for comparisons only\n    this.config = Object.assign({}, impressionManagerConfig);\n    this.impressions = this.retrieveImpressionsData();\n    this.initImpressionMap();\n  }\n\n  retrieveImpressionsData() {\n    const impressions = this.migrateImpressionsData();\n    /*\n     Merge migrated data with new data\n     console.log('Migrated: ',impressions);\n     */\n    Object.keys(impressions).map((key, index) => {\n      impressions[key] = Object.assign({}, impressions[key], this.config[key]);\n      return this;\n    });\n    /*\n     console.log('Merged: ',impressions);\n     Filter out entries without frequency\n     */\n    for (const key in impressions) {\n      if ({}.hasOwnProperty.call(impressions, key)) {\n        if (!impressions[key][keys.frequency]) {\n          // console.log(`Removing ${key} - since it does not have a frequency`,impressions[key]);\n          delete impressions[key];\n        }\n      }\n    }\n    // console.log('Filtered: ',impressions);\n    return impressions;\n  }\n\n  migrateImpressionsData() {\n    let impressions;\n    let impressionsData;\n    try {\n      impressionsData = window.localStorage.getItem(keys.impressions);\n    }\n    catch (err) {\n      // In case of thrown 'SecurityError' or 'QuotaExceededError', the variable should be undefined\n      impressionsData = undefined;\n    }\n    try {\n      impressions = JSON.parse(impressionsData);\n    }\n    catch (err) {\n      // Here is where old impression data is converted to new format\n      impressions = {};\n      const oldImpressionsArray = impressionsData.split(';').filter(e => e);\n\n      oldImpressionsArray.forEach((impression) => {\n        try {\n          const adUnitImpression = impression.split(' = ');\n          const name = adUnitImpression[0];\n          const data = adUnitImpression[1];\n          const tmp = name.split('.');\n          let target = tmp.pop();\n          if (target && target === 'hp') {\n            target = 'homepage';\n          }\n          const slotId = tmp.join('.');\n          const id = `${slotId}_${target}`;\n          const exposed = parseInt(data.split('/')[0], 10) || 0;\n          const expires = parseInt(data.split('/')[1], 10) || this.now;\n          impressions[id] = {};\n          impressions[id][keys.adSlotId] = slotId;\n          impressions[id][keys.target] = target;\n          impressions[id][keys.exposed] = exposed;\n          impressions[id][keys.expires] = expires;\n        }\n        catch (err1) {\n          // console.log(`Failed converting impression: ${impression}`, err1);\n        }\n      });\n    }\n    return impressions || {};\n  }\n\n  /**\n   * Define the debounced version of the local storage save\n   */\n  saveImpressionsToLocalStorage() {\n    if (this.debouncedSave && typeof this.debouncedSave === 'function') {\n      this.debouncedSave();\n    }\n    else {\n      this.debouncedSave = debounce(this.saveImpressionsToLocalStorageImpl, 250, false);\n      this.debouncedSave();\n    }\n  }\n\n  /**\n   * Implementation of saving the impression map to localstorage\n   */\n  saveImpressionsToLocalStorageImpl() {\n    try {\n      localStorage.setItem(keys.impressions, JSON.stringify(this.impressions));\n    }\n    catch (err) {\n      /* In case of thrown 'SecurityError' or 'QuotaExceededError',\n       the operation should not break*/\n      console.error('localStorage isn\\'t available:', err); // eslint-disable-line no-console\n    }\n  }\n\n  /**\n   * Initializes the impression map based on the retrieved impressions and the global\n   * configuration.\n   */\n  initImpressionMap() {\n    Object.keys(this.config).map((key, index) => {\n      const adSlotId = key;\n      const slot = this.impressions[adSlotId];\n      let shouldUpdateExpiryDate = false;\n      // Case I: Existing slot (update)\n      if (slot) {\n        // Case I.I Existing slot, frequency has changed\n        if (this.config[adSlotId][keys.frequency] !== slot[keys.frequency]) {\n          // Updating the frequency will trigger a new expiry date\n          shouldUpdateExpiryDate = true;\n          this.impressions[adSlotId][keys.frequency] = this.config[adSlotId][keys.frequency];\n        } // Case I.II Existing slot, old expiry date\n        else if (this.now > slot[keys.expires]) {\n          // Old value that should trigger a new expiry date\n          shouldUpdateExpiryDate = true;\n        }\n      } // Case II: Non-existing slot (create new slot)\n      else {\n        this.initSlotFromConfig(adSlotId);\n      } // Finally, updates the expiry date (cases I.I and I.II)\n      if (shouldUpdateExpiryDate) {\n        this.updateExpiryDate(adSlotId);\n      }\n      return this;\n    });\n  }\n\n  /**\n   * Updates the expiry date of a slotName based on the configured slot frequency\n   * @param {String} slotName - the slotName to update.\n   */\n  updateExpiryDate(slotName) {\n    const now = new Date();\n    if (!(this.impressions[slotName] && this.impressions[slotName][keys.frequency])) {\n      throw new Error(`Unable to update expiry date for slot: ${slotName}\n      - this.impressions[slotName]:`, this.impressions[slotName]);\n    }\n    const frequencyMap = this.impressions[slotName][keys.frequency].match(keys.frequencyRegex);\n    now.setMilliseconds(0);\n    now.setSeconds(0);\n    now.setMinutes(0);\n    if (frequencyMap.indexOf(keys.days) > -1) {\n      now.setHours(0);\n    }\n    this.impressions[slotName][keys.expires] = (frequencyMap.indexOf(keys.days) > -1 ?\n      addDays(now, frequencyMap[2]) : addHours(now, frequencyMap[2])).getTime();\n\n    // Set max impressions:\n    this.impressions[slotName][keys.maxImpressions] = parseInt(frequencyMap[1], 10);\n    // Reset exposed\n    this.impressions[slotName][keys.exposed] = 0;\n  }\n\n  /**\n   * Initializes a non-existing slot from the passed global configuration for the slot\n   * @param {String} slotName - the name of the slot to create\n   */\n  initSlotFromConfig(slotName) {\n    const slot = this.impressions[slotName] || {};\n    slot[keys.frequency] = this.config[slotName][keys.frequency];\n    slot[keys.target] = this.config[slotName][keys.target];\n    slot[keys.exposed] = 0;\n    this.impressions[slotName] = slot;\n    this.updateExpiryDate(slotName);\n  }\n\n  /**\n   * Registers an impression for a given adSlot.\n   * @param {String} adSlotId - the adSlot id to register an impression for\n   * @returns {boolean} returns true iff the impression has been registered\n   */\n  registerImpression(adSlotId) {\n    if (adSlotId) {\n      const slot = this.impressions[adSlotId];\n      if (slot) {\n        const exposed = slot[keys.exposed];\n        if (isNaN(parseInt(exposed, 10)) === false) {\n          this.impressions[adSlotId][keys.exposed] += 1;\n          try {\n            this.saveImpressionsToLocalStorage();\n          }\n          catch (err) {\n            // console.log('Error saving ad impressions to localStorage!', err);\n          }\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Checks whether an adSlot has reached it's allocated impressions count.\n   * @param {String} adSlotId - the adSlot to check\n   * @returns {boolean} true iff there is a quota for the adSlot, and it has been reached\n   */\n  reachedQuota(adSlotId) {\n    // An adSlotId is suffixed with _homepage | _section if it's targeting is different\n    // between the two. If there is no difference, an _all suffix can be used.\n    const slotName = this.impressions[`${adSlotId}${globalConfig.department}`] ?\n      `${adSlotId}${globalConfig.department}` : `${adSlotId}_all`;\n\n    const slot = this.impressions[slotName];\n    let atQuota = false;\n    if (slot) {\n      const now = (new Date()).getTime();\n      // Second element of 2/4day matches '2'\n      const expires = this.impressions[slotName][keys.expires];\n      if (expires < now) {\n        this.updateExpiryDate(slotName);\n      }\n      else {\n        const maxImpressions = this.impressions[slotName][keys.maxImpressions];\n        // Not expired, did reach max impressions?\n        if (maxImpressions) {\n          atQuota = this.impressions[slotName][keys.exposed] >= maxImpressions;\n        }\n      }\n    }\n    return atQuota;\n  }\n\n\n  /**\n   * Clears the impression map from 'exposed' impressions\n   */\n  resetImpressions() {\n    const impressions = this.impressions;\n    for (const key in impressions) {\n      if ({}.hasOwnProperty.call(impressions, key)) {\n        if (impressions[key][keys.exposed]) {\n          impressions[key][keys.exposed] = 0;\n        }\n      }\n    }\n    this.saveImpressionsToLocalStorage();\n  }\n}\n","import getCookieAsMap from '../utils/cookieUtils';\r\nimport ImpressionManager from './impressionsManager';\r\nimport globalConfig from '../globalConfig';\r\n\r\nexport const userTypes = {\r\n  payer: 'payer',\r\n  registered: 'registered',\r\n  anonymous: 'anonymous',\r\n  trial: 'trial',\r\n};\r\n\r\nexport const productTypes = {\r\n  htz: 243,\r\n  tm: 273,\r\n  hdc: 239,\r\n  htz_tm: 274,\r\n};\r\n\r\nexport default class User {\r\n  constructor(config) {\r\n    this.config = Object.assign({}, config.userConfig);\r\n    const cookieMap = getCookieAsMap();\r\n    this.ssoKey = globalConfig.sso;\r\n    if (!cookieMap[this.ssoKey]) {\r\n      // Flips the ssoKey, since cookieMap.ssoKey cannot be used to retrieve data\r\n      this.ssoKey = this.ssoKey === 'tmsso' ? 'engsso' : 'tmsso';\r\n    }\r\n    this.type = this.getUserType(cookieMap);\r\n    this.htz_type = this.getUserTypeByProduct(cookieMap, productTypes.htz);\r\n    this.tm_type = this.getUserTypeByProduct(cookieMap, productTypes.tm);\r\n    this.hdc_type = this.getUserTypeByProduct(cookieMap, productTypes.hdc);\r\n    this.impressionManager = new ImpressionManager(config.impressionManagerConfig);\r\n    this.age = this.getUserAge(cookieMap);\r\n    this.gender = this.getUserGender(cookieMap);\r\n    this.sso = this.getUserSSO(cookieMap, this.ssoKey);\r\n  }\r\n\r\n  getUserType(cookieMap) {\r\n    let userType;\r\n    if (cookieMap && cookieMap[this.ssoKey]) {\r\n      userType = (cookieMap.HtzPusr || cookieMap.TmPusr || cookieMap.HdcPusr) ?\r\n        userTypes.payer : userTypes.registered;\r\n    }\r\n    else {\r\n      userType = userTypes.anonymous;\r\n    }\r\n    return userType;\r\n  }\r\n\r\n\r\n  getUserTypeByProduct(cookieMap, productType) {\r\n    let userType = userTypes.anonymous;\r\n    if (cookieMap && cookieMap[this.ssoKey]) {\r\n      if (cookieMap.userProducts) {\r\n        let userProducts = decodeURIComponent(cookieMap.userProducts);\r\n        userProducts = JSON.parse(userProducts);\r\n        if (productType === productTypes.hdc) {\r\n          userType = this.getHdcUserType(userProducts);\r\n        }\r\n        else {\r\n          userType = this.getHtzTmUserType(userProducts, productType);\r\n        }\r\n      }\r\n    }\r\n    return userType;\r\n  }\r\n\r\n  getHdcUserType(userProducts) {\r\n    // user has hdc paying product\r\n    if (this.userHasProduct(userProducts, productTypes.hdc, false)) {\r\n      return userTypes.payer;\r\n    }\r\n    // user has hdc trial product\r\n    else if (this.userHasProduct(userProducts, productTypes.hdc, true)) {\r\n      return userTypes.trial;\r\n    }\r\n    return userTypes.registered;\r\n  }\r\n\r\n  getHtzTmUserType(userProducts, productType) {\r\n    // user has htz/tm paying product\r\n    if (this.userHasProduct(userProducts, productType, false) ||\r\n      this.userHasProduct(userProducts, productTypes.htz_tm, false)) {\r\n      return userTypes.payer;\r\n    }\r\n    // user has htz/tm trial product\r\n    else if (this.userHasProduct(userProducts, productType, true) ||\r\n      this.userHasProduct(userProducts, productTypes.htz_tm, true)) {\r\n      return userTypes.trial;\r\n    }\r\n    return userTypes.registered;\r\n  }\r\n\r\n  userHasProduct(userProducts, productType, trial) {\r\n    return userProducts.products\r\n        .filter(product => product.prodNum === productType && product.trial === trial)\r\n        .length > 0;\r\n  }\r\n\r\n  getUserAge(cookieMap) {\r\n    let age;\r\n    const usrae = cookieMap[this.ssoKey] && cookieMap[this.ssoKey].usrae;\r\n    if (usrae) {\r\n      age = parseInt(cookieMap[this.ssoKey].usrae, 10);\r\n      age = age > 0 ? age : undefined;\r\n    }\r\n    return age;\r\n  }\r\n\r\n  getUserGender(cookieMap) {\r\n    let gender;\r\n    const urgdr = cookieMap[this.ssoKey] && cookieMap[this.ssoKey].urgdr;\r\n    if (urgdr) {\r\n      gender = parseInt(cookieMap[this.ssoKey].urgdr, 10);\r\n      gender = gender === 2 || gender === 1 ? gender : undefined;\r\n    }\r\n    return gender;\r\n  }\r\n\r\n  getUserSSO(cookieMap, ssoKey) {\r\n    return cookieMap[ssoKey];\r\n  }\r\n}\r\n","class ConflictResolver {\n  constructor(conflictManagementConfig) {\n    this.dependencyMap = this.initializeDependencyMap(conflictManagementConfig);\n    this.deferredSlots = new Set();\n  }\n  initializeDependencyMap(conflictManagementJson) {\n    const queue = new Map();\n    Object.keys(conflictManagementJson).map((key, value) => {\n      let rules = conflictManagementJson[key];\n      if (rules) {\n        rules = rules.filter((item) => item.onsize && item.avoid);\n      }\n      queue.set(key, {\n        id: key,\n        rules,\n        resolvedWith: null,\n      });\n      return this;\n    });\n    return queue;\n  }\n\n  updateResolvedSlot(adSlotId, resolvedSize) {\n    if (!adSlotId) {\n      throw new Error('updateResolvedSlot must be called with an adSlotId!');\n    }\n    if (!resolvedSize) {\n      throw new Error('updateResolvedSlot must be called with a resolved size!');\n    }\n    if (this.dependencyMap.has(adSlotId)) {\n      this.dependencyMap.get(adSlotId).resolvedWith = resolvedSize;\n    }\n  }\n\n\n  isBlocked(adSlotId) {\n    if (!adSlotId) {\n      throw new Error('isBlocked must be called with an adSlotId!');\n    }\n    let isBlocked = false;\n    for (const adSlotKey of this.dependencyMap.keys()) {\n      const adSlot = this.dependencyMap.get(adSlotKey);\n      for (const adSlotRule of adSlot.rules) {\n        // Found rule specific to our target\n        if (adSlotRule.avoid === adSlotId) {\n          const parentResolvedWith = adSlot.resolvedWith;\n          // Fail fast: parent is not resolved yet - unknown returned size.\n          if (!parentResolvedWith) {\n            isBlocked = true;\n            this.deferredSlots.add(adSlotId);\n          }\n          if (adSlotRule.onsize.split(',').find(sizeString => { // eslint-disable-line\n            const size = sizeString.split('x').map(numberStr => parseInt(numberStr, 10));\n            return this.arraysEqual(size, parentResolvedWith);\n          })) {\n            // Block found\n            this.deferredSlots.add(adSlotId);\n            isBlocked = true;\n          }\n        }\n      }\n    }\n    return isBlocked;\n  }\n\n  isBlocking(adSlotId) {\n    if (!adSlotId) {\n      throw new Error('isBlocking must be called with an adSlotId!');\n    }\n    let isBlocking = false;\n    for (const adSlotKey of this.dependencyMap.keys()) {\n      if (adSlotKey === adSlotId) {\n        isBlocking = true;\n      }\n    }\n    return isBlocking;\n  }\n\n  /**\n   * Gets an array of adSlot Ids for a given adSlotId, that are dependent on (blocked by)\n   * @param {String} adSlotId - the blocking slot id\n   * @return {Array} an array of blocked slot, that has a dependency on the given slot\n   */\n  getBlockedSlotsIds(adSlotId) {\n    let result;\n    if (this.dependencyMap.has(adSlotId)) {\n      result = Array.from(this.dependencyMap.get(adSlotId).rules.map(adSlot => adSlot.avoid));\n    }\n    return result || [];\n  }\n\n  arraysEqual(a, b) {\n    if (a === b) return true;\n    if (a === null || b === null) return false;\n    if (a.length !== b.length) return false;\n    for (let i = 0; i < a.length; ++i) {\n      if (a[i] !== b[i]) return false;\n    }\n    return true;\n  }\n}\nConflictResolver.EMPTY_SIZE = [];\nexport default ConflictResolver;\n","/* global googletag */\r\nimport { adTypes } from '../objects/adManager';\r\nimport globalConfig from '../globalConfig';\r\nimport { arraysEqual } from '../utils/arrays';\r\n\r\nconst hiddenClass = globalConfig.site.indexOf('mouse') > -1 ? 'u-is-hidden' : 'h-hidden';\r\n\r\nexport default class adSlot {\r\n\r\n  constructor(adSlotConfig) {\r\n    this.config = Object.assign({}, adSlotConfig);\r\n\r\n    // Part I : Markup configuration - passed from AdManager\r\n    this.id = this.config.id;\r\n    if (!this.config.id) {\r\n      throw new Error('an adSlot requires an id!');\r\n    }\r\n    this.target = this.config.target;\r\n    this.type = this.config.type;\r\n    this.responsive = this.config.responsive;\r\n    this.fluid = this.config.fluid;\r\n    this.user = this.config.user;\r\n    this.adManager = this.config.adManager;\r\n    this.htmlElement = this.config.htmlElement;\r\n    this.priority = this.config.priority;\r\n    this.deferredSlot = this.config.deferredSlot;\r\n\r\n    // Part II : Global, general ad configuration - passed from AdManager\r\n    this.department = this.config.department;\r\n    this.network = this.config.network;\r\n    this.adUnitBase = this.config.adUnitBase;\r\n\r\n    // Part III : ad specific configuration - passed from globalConfig.adSlotConfig\r\n    this.adSizeMapping = this.config.adSizeMapping;\r\n    this.responsiveAdSizeMapping = this.config.responsiveAdSizeMapping;\r\n    this.blacklistReferrers = this.config.blacklistReferrers ?\r\n      this.config.blacklistReferrers.split(',') : [];\r\n    this.whitelistReferrers = this.config.whitelistReferrers ?\r\n      this.config.whitelistReferrers.split(',') : [];\r\n\r\n\r\n    // Part IV : Runtime configuration - calculated data - only present in runtime\r\n    this.lastResolvedSize = undefined; // Initialized in 'slotRenderEnded' callback\r\n    this.lastResolvedWithBreakpoint = undefined; // Initialized in 'slotRenderEnded' callback\r\n    this.slot = undefined; // Holds a googletag.Slot object\r\n    // [https://developers.google.com/doubleclick-gpt/reference#googletag.Slot]\r\n    try {\r\n      if (!this.deferredSlot) {\r\n        this.slot = this.defineSlot();\r\n      }\r\n    }\r\n    catch (err) {\r\n      console.error(err); // eslint-disable-line no-console\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Checks whether this adSlot is an 'Out-of-page' slot or not.\r\n   * An Out-of-page slot is a slot that is not embedded in the page 'normally'.\r\n   * @returns {boolean} true iff this adSlot is one of the predefined 'out-of-page' slots.\r\n   */\r\n  isOutOfPage() {\r\n    if (typeof this.type !== 'string') {\r\n      throw new Error('An adSlot cannot by typeless!', this);\r\n    }\r\n    if (this.isMobile() === true) {\r\n      return false;\r\n    }\r\n    switch (this.type) {\r\n      case adTypes.maavaron: return false;\r\n      case adTypes.popunder: return true;\r\n      case adTypes.talkback: return false;\r\n      case adTypes.regular: return false;\r\n      default: return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Checks whether this adSlot is a 'maavaron' slot or not.\r\n   * An Out-of-page slot is a slot that is not embedded in the page 'normally'.\r\n   * @returns {boolean} true iff this adSlot is one of the predefined 'out-of-page' slots.\r\n   */\r\n  isMaavaron() {\r\n    if (typeof this.type !== 'string') {\r\n      throw new Error('An adSlot cannot by typeless!', this);\r\n    }\r\n    if (this.isMobile() === true) {\r\n      return false;\r\n    }\r\n    switch (this.type) {\r\n      case adTypes.maavaron: return false;\r\n      default: return false;\r\n    }\r\n  }\r\n\r\n  isMobile() {\r\n    return (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i\r\n      .test(window.navigator.userAgent || ''));\r\n  }\r\n  /**\r\n   * Checks whether or not this adSlot has a non-empty whitelist, and if so, that the current\r\n   * referrer appears in the whitelist.\r\n   * Should return false iff there is a whitelist for the current adSlot, but the referrer is not\r\n   * mentioned in the whitelist.\r\n   * @returns {boolean} true iff the ad can be displayed.\r\n   */\r\n  isWhitelisted() {\r\n    let whitelisted = false;\r\n    if (this.whitelistReferrers.length !== 0) {\r\n      for (const referrer of this.whitelistReferrers) {\r\n        if (globalConfig.referrer.indexOf(referrer) > -1) {\r\n          whitelisted = true;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    else {\r\n      whitelisted = true;\r\n    }\r\n    return whitelisted;\r\n  }\r\n\r\n  /**\r\n   * Checks whether or not this adSlot has a non-empty blacklist, and if so, that the current\r\n   * referrer does not appear in the blacklist.\r\n   * Should return true iff there is a blacklist for the current adSlot, and the referrer is\r\n   * mentioned in the blacklist - to indicate that the adSlot is 'blocked'.\r\n   * @returns {boolean} true iff the ad cannot be displayed.\r\n   */\r\n  isBlacklisted() {\r\n    let blacklisted = false;\r\n    if (this.blacklistReferrers.length !== 0) {\r\n      for (const referrer of this.blacklistReferrers) {\r\n        if (globalConfig.referrer.indexOf(referrer) > -1) {\r\n          blacklisted = true;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    return blacklisted;\r\n  }\r\n\r\n\r\n  /**\r\n   * Shows the current adSlot.\r\n   * It assumes a markup is available for this slot (any tag with an id attribute = this.id)\r\n   */\r\n  show() {\r\n    if (!this.shown === true) {\r\n      this.shown = true; // Ensure show will be called once per adSlot\r\n      googletag.cmd.push(() => {\r\n        if (this.deferredSlot) {\r\n          this.slot = this.defineSlot();\r\n        }\r\n        // console.log('calling show for slot',this.id,' called @',window.performance.now());\r\n        document.getElementById(this.id).classList.remove(hiddenClass);\r\n        googletag.display(this.id);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Shows the current adSlot.\r\n   * It assumes a markup is available for this slot (any tag with an id attribute = this.id)\r\n   */\r\n  hide() {\r\n    googletag.cmd.push(() => {\r\n      document.getElementById(this.id).classList.add(hiddenClass);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Initializes page-level slot definition for the current slot\r\n   * @return {Slot} slot - the Google Slot that was defined from this AdSlot configuration\r\n   */\r\n  defineSlot() {\r\n    if (this.isMaavaron()) {\r\n      const maavaronSlot = this.defineMaavaron();\r\n      if (this.adManager.shouldSendRequestToDfp(this)) {\r\n        if (!this.shown) {\r\n          this.shown = true; // Ensure show will be called once\r\n          maavaronSlot.display();\r\n        }\r\n      }\r\n      return maavaronSlot;\r\n    }\r\n    const googletag = window.googletag;\r\n    const pubads = googletag.pubads();\r\n    const args = [];\r\n    const defineFn = this.isOutOfPage() ? googletag.defineOutOfPageSlot : googletag.defineSlot;\r\n    // 3 or 2 params according to the function that we want to activate.\r\n    args.push(this.getPath());\r\n    if (this.isOutOfPage() === false) {\r\n      if (this.fluid) {\r\n        args.push('fluid');\r\n      }\r\n      else {\r\n        args.push(this.adSizeMapping);\r\n      }\r\n    }\r\n    args.push(this.id);\r\n    let slot = defineFn.apply(defineFn, args);\r\n    if (slot) {\r\n      // Responsive size Mapping\r\n      if (this.responsive) {\r\n        let responsiveSlotSizeMapping = googletag.sizeMapping();\r\n        const breakpoints = globalConfig.breakpointsConfig.breakpoints;\r\n        const keys = Object.keys(this.responsiveAdSizeMapping);\r\n        for (const key of keys) { // ['xxs','xs',...]\r\n          responsiveSlotSizeMapping.addSize(\r\n            [breakpoints[key], 100], // 100 is a default height, since it is height agnostic\r\n            !arraysEqual(this.responsiveAdSizeMapping[key], [[0, 0]]) ?\r\n              this.responsiveAdSizeMapping[key] : []);\r\n        }\r\n        responsiveSlotSizeMapping = responsiveSlotSizeMapping.build();\r\n        slot = slot.defineSizeMapping(responsiveSlotSizeMapping);\r\n      }\r\n      slot = slot.addService(pubads);\r\n      if (this.isOutOfPage() === false) {\r\n        slot.setCollapseEmptyDiv(true);\r\n      }\r\n    }\r\n    return slot;\r\n  }\r\n\r\n  /**\r\n   * Returns the current path calculated for the adSlot\r\n   * @returns {String} a formatted string that represent the path for the slot definition\r\n   */\r\n  getPath() {\r\n    /* eslint-disable no-shadow */\r\n    let path = globalConfig.path || [];\r\n    path = path.filter(path => path !== '.');\r\n    path = path.map(section => `${this.id}${this.department}${section}`).join('/');\r\n    // If a path exist, it will be preceded with a forward slash\r\n    path = path && this.config.department !== '_homepage' ? `/${path}` : '';\r\n    /* eslint-enable no-shadow */\r\n    const calculatedPath = `/${this.config.network}/${this.config.adUnitBase}/${this.id}/${this.id}${this.department}${path}`; // eslint-disable-line max-len\r\n    return calculatedPath.toLowerCase();\r\n  }\r\n\r\n  /* eslint-disable */\r\n  slotRendered(event) {\r\n    const id = event.slot.getAdUnitPath().split('/')[3]; // Convention: [0]/[1]network/[2]base/[3]id\r\n    const isEmpty = event.isEmpty; // Did the ad return as empty?\r\n    const resolvedSize = event.size; // What 'creative' size did the ad return with?\r\n    // Empty or onload callback should be called next?\r\n  }\r\n  /* eslint-enable */\r\n\r\n  /**\r\n   * Refresh this adSlot\r\n   */\r\n  refresh() {\r\n    googletag.cmd.push(() => {\r\n      googletag.pubads().refresh([this.slot]);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Shows 'Maavaron' type adSlot using Passback definition\r\n   * @return {Slot} slot - the Google Slot that was defined for Maavaron\r\n   */\r\n  defineMaavaron() {\r\n    if (!document.referrer.match('loc.haaretz')) {\r\n      const adUnitMaavaronPath = this.getPath();\r\n      const adUnitMaavaronSize = [\r\n        [2, 1],\r\n      ];\r\n      const slot = googletag.pubads().definePassback(adUnitMaavaronPath, adUnitMaavaronSize)\r\n        .setTargeting('UserType', [this.user.type])\r\n        .setTargeting('age', [this.user.age])\r\n        .setTargeting('urgdr', [this.user.gender])\r\n        .setTargeting('articleId', [globalConfig.articleId])\r\n        .setTargeting('stg', [globalConfig.environment]);\r\n      return slot;\r\n    }\r\n    return null;\r\n  }\r\n}\r\n","/* global googletag */\r\nimport User from '../objects/user';\r\nimport ConflictResolver from '../objects/conflictResolver';\r\nimport AdSlot from '../objects/adSlot';\r\nimport { getBreakpoint, getBreakpointName } from '../utils/breakpoints';\r\nimport { arraysEqual } from '../utils/arrays';\r\n\r\n// There are a total of 7 adTargets:\r\n// \"all\",\"nonPaying\",\"anonymous\",\"registered\",\"paying\",\"digitalOnly\" and \"digitalAndPrint\"\r\nexport const adPriorities = {\r\n  high: 'high',\r\n  normal: 'normal',\r\n  low: 'low',\r\n};\r\n\r\nexport const adTargets = {\r\n  all: 'all',\r\n  nonPaying: 'nonPaying',\r\n  anonymous: 'anonymous',\r\n  registered: 'registered',\r\n  paying: 'paying',\r\n  digitalOnly: 'digitalOnly',\r\n  digitalAndPrint: 'digitalAndPrint',\r\n};\r\n\r\n// There are a total of 3 userTypes: \"anonymous\", \"registered\" and \"payer\"\r\nexport const userTypes = {\r\n  anonymous: 'anonymous',\r\n  registered: 'registered',\r\n  payer: 'payer',\r\n};\r\n\r\nexport const adTypes = {\r\n  maavaron: '.maavaron',\r\n  popunder: '.popunder',\r\n  talkback: '.talkback',\r\n  regular: '',\r\n};\r\n\r\n\r\nexport default class AdManager {\r\n\r\n  constructor(config) {\r\n    this.config = Object.assign({}, config);\r\n    this.user = new User(config);\r\n    this.conflictResolver = new ConflictResolver(config.conflictManagementConfig);\r\n    /**\r\n     * Avoid race conditions by making sure to respect the usual timing of GPT.\r\n     * This DFP implementation uses Enable-Define-Display:\r\n     * Define page-level settings\r\n     * enableServices()\r\n     * Define slots\r\n     * Display slots\r\n     */\r\n    try {\r\n      googletag.cmd.push(() => {\r\n        this.initGoogleTargetingParams(); //  Define page-level settings\r\n        this.initGoogleGlobalSettings();  //  enableServices()\r\n        this.initSlotRenderedCallback();  //  Define callbacks\r\n      });\r\n      // Mouse special treatment to base path on mobile breakpoints\r\n      const currentBreakpointName = getBreakpointName(getBreakpoint());\r\n      if (this.config.adManagerConfig.adUnitBase.indexOf('mouse.co.il') > -1 &&\r\n        currentBreakpointName.indexOf('xs') > -1) {\r\n        this.config.adManagerConfig.adUnitBase = 'mouse.co.il.mobile_web';\r\n      }\r\n      // Holds adSlot objects as soon as possible.\r\n      googletag.cmd.push(() => {\r\n        this.adSlots = this.initAdSlots(config.adSlotConfig, adPriorities.high);\r\n      });\r\n      // Once DOM ready, add more adSlots.\r\n      const onDomLoaded = () => { // eslint-disable-line no-inner-declarations\r\n        try {\r\n          googletag.cmd.push(() => {\r\n            this.adSlots = this.initAdSlots(config.adSlotConfig, adPriorities.high);\r\n            googletag.cmd.push(() => {\r\n              this.adSlots = this.initAdSlots(config.adSlotConfig, adPriorities.normal);\r\n            });\r\n          });\r\n        }\r\n        catch (err) {\r\n          console.log(err); // eslint-disable-line no-console\r\n        }\r\n      };\r\n      // Once window was loaded, add the rest of the adSlots.\r\n      const onWindowLoaded = () => { // eslint-disable-line no-inner-declarations\r\n        googletag.cmd.push(() => {\r\n          this.adSlots = this.initAdSlots(config.adSlotConfig, adPriorities.low);\r\n          // Clean blocking adSlots that are not defined on this page\r\n          for (const blockingAdSlotKey of this.conflictResolver.dependencyMap.keys()) {\r\n            if (!this.adSlots.has(blockingAdSlotKey)) {\r\n              this.conflictResolver.dependencyMap.delete(blockingAdSlotKey);\r\n            }\r\n          }\r\n          this.showAllDeferredSlots();\r\n        });\r\n      };\r\n      switch (document.readyState) {\r\n        case 'loading':\r\n          document.addEventListener('DOMContentLoaded', onDomLoaded);\r\n          window.addEventListener('load', onWindowLoaded);\r\n          break;\r\n        case 'interactive':\r\n          onDomLoaded();\r\n          window.addEventListener('load', onWindowLoaded);\r\n          break;\r\n        default: // 'complete' - no need for event listeners.\r\n          onDomLoaded();\r\n          onWindowLoaded();\r\n      }\r\n    }\r\n    catch (err) {\r\n      console.error(err); // eslint-disable-line no-console\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Shows all of the adSlots that can be displayed.\r\n   */\r\n  showAllSlots() {\r\n    for (const adSlotKey of this.adSlots.keys()) {\r\n      const adSlot = this.adSlots.get(adSlotKey);\r\n      if (adSlot.type !== adTypes.talkback && this.shouldSendRequestToDfp(adSlot)) {\r\n        adSlot.show();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets all adSlots that has a certain priority\r\n   * @param {adPriority} priority - the priority of the ad {high, normal, low}\r\n   * @return {Array<AdSlot>} adSlots - all of the defined adSlots that matches\r\n   * the given priority\r\n   */\r\n  getAdSlotsByPriority(priority) {\r\n    function priorityFilter(adSlot) {\r\n      return adSlot.priority === priority;\r\n    }\r\n    return Array.from(this.adSlots.values()).filter(priorityFilter);\r\n  }\r\n\r\n  showAllDeferredSlots() {\r\n    for (const deferredSlotId of this.conflictResolver.deferredSlots) {\r\n      if (this.adSlots.has(deferredSlotId)) {\r\n        if (!this.conflictResolver.isBlocked(deferredSlotId)) {\r\n          const deferredAdSlot = this.adSlots.get(deferredSlotId);\r\n          if (this.shouldSendRequestToDfp(deferredAdSlot)) {\r\n            deferredAdSlot.show();\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Refreshes all responsive adSlots\r\n   */\r\n  refreshAllSlots() {\r\n    const currentBreakpoint = getBreakpoint();\r\n    for (const adSlotKey of this.adSlots.keys()) {\r\n      const adSlot = this.adSlots.get(adSlotKey);\r\n      if (adSlot.responsive && adSlot.type !== adTypes.maavaron) {\r\n        if (adSlot.lastResolvedWithBreakpoint !== currentBreakpoint &&\r\n          this.shouldSendRequestToDfp(adSlot)) {\r\n          // console.log(`calling refresh for adSlot: ${adSlot.id}`);\r\n          adSlot.refresh();\r\n        }\r\n        else {\r\n          adSlot.hide();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Refreshes all adSlots\r\n   */\r\n  refreshAllSlotsInPage() {\r\n    for (const adSlotKey of this.adSlots.keys()) {\r\n      const adSlot = this.adSlots.get(adSlotKey);\r\n      if (this.shouldSendRequestToDfp(adSlot)) {\r\n        // console.log(`calling refresh for adSlot: ${adSlot.id}`);\r\n        adSlot.refresh();\r\n      }\r\n      else {\r\n        adSlot.hide();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Refreshes adSlot\r\n   */\r\n\r\n  refreshSlot(adUnitName) {\r\n    const adSlot = this.adSlots.get(adUnitName);\r\n    if (this.shouldSendRequestToDfp(adSlot)) {\r\n      // console.log(`calling refresh for adSlot: ${adSlot.id}`);\r\n      adSlot.refresh();\r\n    }\r\n    else {\r\n      adSlot.hide();\r\n    }\r\n  }\r\n\r\n\r\n      /**\r\n   * Initializes adSlots based on the currently found slot markup (HTML page specific),\r\n   * and the predefined configuration for the slots.\r\n   * @param {Object} adSlotConfig - the AdSlots configuration object (see: globalConfig)\r\n   * @param {String} filteredPriority - filters out all adSlots that does not match\r\n   * a given adPriority. This is used to cherry pick the init process of ads.\r\n   * @returns {Map}\r\n   */\r\n  initAdSlots(adSlotConfig, filteredPriority) {\r\n    const adSlots = new Map(this.adSlots);\r\n    let adSlotPlaceholders = Array.from(document.getElementsByClassName('js-dfp-ad'));\r\n    adSlotPlaceholders = adSlotPlaceholders.filter(node => node.id); // only nodes with an id\r\n    const adSlotNodeSet = new Set();\r\n    adSlotPlaceholders = Array.prototype.filter.call(adSlotPlaceholders, node => {\r\n      if (adSlotNodeSet.has(node.id) === false) { // first occurrence of Node\r\n        adSlotNodeSet.add(node.id);\r\n        return true;\r\n      }\r\n      return false;\r\n    });\r\n    // adSlotPlaceholders = adSlotPlaceholders.sort((a, b) => a.offsetTop - b.offsetTop);\r\n    adSlotPlaceholders.forEach(adSlot => {\r\n      const adSlotPriority = adSlotConfig[adSlot.id] ?\r\n      adSlotConfig[adSlot.id].priority || adPriorities.normal : undefined;\r\n      if (adSlotConfig[adSlot.id] && adSlots.has(adSlot.id) === false &&\r\n        adSlotPriority === filteredPriority) {\r\n        // The markup has a matching configuration from adSlotConfig AND was not already defined\r\n        try {\r\n          // adSlotConfig is built from globalConfig, but can be overridden by markup\r\n          const computedAdSlotConfig = Object.assign({}, adSlotConfig[adSlot.id], {\r\n            id: adSlot.id,\r\n            target: adSlot.attributes['data-audtarget'] ?\r\n              adSlot.attributes['data-audtarget'].value : adTargets.all,\r\n            type: this.getAdType(adSlot.id),\r\n            responsive: adSlotConfig[adSlot.id].responsive,\r\n            fluid: adSlotConfig[adSlot.id].fluid || false,\r\n            user: this.user,\r\n            adManager: this,\r\n            htmlElement: adSlot,\r\n            department: this.config.department,\r\n            network: this.config.adManagerConfig.network,\r\n            adUnitBase: this.config.adManagerConfig.adUnitBase,\r\n            deferredSlot: this.conflictResolver.isBlocked(adSlot.id),\r\n            priority: adSlotPriority,\r\n          });\r\n          const adSlotInstance = new AdSlot(computedAdSlotConfig);\r\n          adSlots.set(adSlot.id, adSlotInstance);\r\n          if (adSlotInstance.type !== adTypes.talkback &&\r\n            adSlotInstance.priority === adPriorities.high &&\r\n            this.shouldSendRequestToDfp(adSlotInstance)) {\r\n            /*\r\n             console.log('calling show for high priority slot', adSlotInstance.id, ' called @',\r\n             window.performance.now());\r\n             */\r\n            adSlotInstance.show();\r\n          }\r\n        }\r\n        catch (err) {\r\n          console.error(err); // eslint-disable-line no-console\r\n        }\r\n      }\r\n    });\r\n    return adSlots;\r\n  }\r\n\r\n  isPriority(adSlotId) {\r\n    return (typeof adSlotId === 'string' &&\r\n    (adSlotId.indexOf('plazma') > 0 ||\r\n    adSlotId.indexOf('maavaron') > 0 ||\r\n    adSlotId.indexOf('popunder') > 0));\r\n  }\r\n\r\n  /**\r\n   * Returns the adType based on the adSlot name.\r\n   * @param {String} adSlotId - the adSlot's identifier.\r\n   * @returns {*} enumerated export 'adTypes'\r\n   */\r\n  getAdType(adSlotId) {\r\n    if (!adSlotId) {\r\n      throw new Error('Missing argument: a call to getAdType must have an adSlotId');\r\n    }\r\n    if (adSlotId.indexOf(adTypes.maavaron) > -1) return adTypes.maavaron;\r\n    if (adSlotId.indexOf(adTypes.popunder) > -1) return adTypes.popunder;\r\n    if (adSlotId.indexOf(adTypes.talkback) > -1) return adTypes.talkback;\r\n    return adTypes.regular;\r\n  }\r\n\r\n  /**\r\n   * @param {object} adSlot the AdSlot\r\n   * @returns {boolean|*}\r\n   */\r\n  shouldSendRequestToDfp(adSlot) {\r\n    // Conflict management check\r\n    return this.conflictResolver.isBlocked(adSlot.id) === false &&\r\n      // Valid Referrer check\r\n      adSlot.isWhitelisted() &&\r\n      // Not in referrer Blacklist\r\n      adSlot.isBlacklisted() === false &&\r\n      this.shouldDisplayAdAfterAdBlockRemoval(adSlot) &&\r\n      //  if a paywall pop-up is shown And the number is 12 or more - SHOW MAAVRON\r\n      this.shouldDisplayAdMaavaronAfterPayWallBanner(adSlot) &&\r\n      // Responsive: breakpoint contains ad?\r\n      this.doesBreakpointContainAd(adSlot) &&\r\n      // check in case of Smartphoneapp\r\n      this.haveValidCookieForSmartphoneapp() &&\r\n      // Targeting check (userType vs. slotTargeting)\r\n      this.doesUserTypeMatchBannerTargeting(adSlot) &&\r\n      // Impressions Manager check (limits number of impressions per slot)\r\n      this.user.impressionManager.reachedQuota(adSlot.id) === false;\r\n  }\r\n\r\n  shouldDisplayAdAfterAdBlockRemoval(adSlot) {\r\n    return !(this.config.adBlockRemoved === true &&\r\n    (adSlot.type === adTypes.maavaron ||\r\n    adSlot.type === adTypes.popunder));\r\n  }\r\n\r\n  shouldDisplayAdMaavaronAfterPayWallBanner(adSlot) {\r\n    let shouldDisplay = true;\r\n    if (this.config.site === 'haaretz' && adSlot.type === adTypes.maavaron) {\r\n      try {\r\n        const paywallBanner = JSON.parse(window.localStorage.getItem('_cobj'));\r\n        shouldDisplay = !paywallBanner || ((paywallBanner.mc && paywallBanner.mc >= 12) ||\r\n                          (paywallBanner.nextslotLocation &&\r\n                          !paywallBanner.nextslotLocation.includes('pop')));\r\n      }\r\n      catch (err) {\r\n        /* eslint-disable no-console*/\r\n        console.error('ERROR ON shouldDisplayAdMaavaronAfterPayWallBanner');\r\n        /* eslint-enable no-console*/\r\n      }\r\n    }\r\n    return shouldDisplay;\r\n  }\r\n\r\n  /**\r\n   * Check whether or not an ad slot should appear for the current user type\r\n   * @param {String} adSlotOrTarget the adSlot to check or the target as a string\r\n   * @returns {boolean} true iff the slot should appear for the user type\r\n   */\r\n\r\n  haveValidCookieForSmartphoneapp() {\r\n    return this.config.isValidForsmartPhone;\r\n  }\r\n\r\n  /**\r\n   * Check whether or not an ad slot should appear for the current user type\r\n   * @param {String} adSlotOrTarget the adSlot to check or the target as a string\r\n   * @returns {boolean} true iff the slot should appear for the user type\r\n   */\r\n  doesUserTypeMatchBannerTargeting(adSlotOrTarget) {\r\n    const userType = this.user.type;\r\n    const adTarget = typeof adSlotOrTarget === 'string' ? adSlotOrTarget : adSlotOrTarget.target;\r\n\r\n    switch (adTarget) {\r\n      case adTargets.all : return true;\r\n      case adTargets.nonPaying :\r\n        return userType === userTypes.anonymous || userType === userTypes.registered;\r\n      case adTargets.anonymous : return userType === userTypes.anonymous;\r\n      case adTargets.registered : return userType === userTypes.registered;\r\n      case adTargets.paying : return userType === userTypes.payer;\r\n      case adTargets.digitalOnly : return userType === userTypes.payer;\r\n      case adTargets.digitalAndPrint : return userType === userTypes.payer;\r\n      default: return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Report to the AdManager that a breakpoint has been switched (passed from one break to\r\n   * another). Should there be a responsive slot with a\r\n   * @param {Breakpoint} breakpoint - the breakpoint that is currently being displayed\r\n   * @returns {Integer} affected - the number of adSlots affected by the change\r\n   */\r\n  switchedToBreakpoint(breakpoint) {\r\n    if (!breakpoint) {\r\n      throw new Error('Missing argument: a call to switchedToBreakpoint must have an breakpoint');\r\n    }\r\n    let count = 0;\r\n    for (const adSlotKey of this.adSlots.keys()) {\r\n      const adSlot = this.adSlots.get(adSlotKey);\r\n      if (adSlot.responsive === true && adSlot.lastResolvedWithBreakpoint) {\r\n        if (adSlot.lastResolvedWithBreakpoint !== breakpoint) {\r\n          adSlot.refresh();\r\n          count++;\r\n        }\r\n      }\r\n    }\r\n    return count;\r\n  }\r\n\r\n  /**\r\n   * Checks whether an adSlot is defined for a given breakpoint (Default: current breakpoint)\r\n   * @param {AdSlot} adSlot - the adSlot to check.\r\n   * @param {Breakpoint} [breakpoint=currentBreakpoint] - the breakpoint to check this ad in.\r\n   * @returns {boolean} true iff the adSlot is defined for the given breakpoint.\r\n   */\r\n  doesBreakpointContainAd(adSlot, breakpoint = getBreakpoint()) {\r\n    if (!adSlot) {\r\n      throw new Error('Missing argument: a call to doesBreakpointContainAd must have an adSlot');\r\n    }\r\n    let containsBreakpoint = true;\r\n    if (adSlot.responsive === true) {\r\n      const mapping = adSlot.responsiveAdSizeMapping[getBreakpointName(breakpoint)];\r\n      if (Array.isArray(mapping) === false) {\r\n        throw new Error(`Invalid argument: breakpoint:${breakpoint} doesn't exist!`, this);\r\n      }\r\n      containsBreakpoint = mapping.length > 0 && !arraysEqual(mapping, [[0, 0]]);\r\n    }\r\n    return containsBreakpoint;\r\n  }\r\n\r\n  /**\r\n   * Initializes the callback from the 'slotRenderEnded' event for each slot\r\n   */\r\n  initSlotRenderedCallback() {\r\n    if (window.googletag && window.googletag.apiReady) {\r\n      const pubads = window.googletag.pubads();\r\n      pubads.addEventListener('slotRenderEnded', event => {\r\n        const id = event.slot.getAdUnitPath().split('/')[3];\r\n        const isEmpty = event.isEmpty;\r\n        const resolvedSize = event.size;\r\n        // console.log('slotRenderEnded for slot',id,' called @',window.performance.now());\r\n        if (this.adSlots.has(id)) {\r\n          const adSlot = this.adSlots.get(id);\r\n          adSlot.lastResolvedSize = resolvedSize;\r\n          adSlot.lastResolvedWithBreakpoint = getBreakpoint();\r\n          if (isEmpty) {\r\n            adSlot.lastResolvedSize = ConflictResolver.EMPTY_SIZE;\r\n            adSlot.hide();\r\n            this.releaseSlotDependencies(adSlot);\r\n          }\r\n          else {\r\n            this.releaseSlotDependencies(adSlot, adSlot.lastResolvedSize);\r\n          }\r\n          this.user.impressionManager.registerImpression(`${adSlot.id}${this.config.department}`);\r\n          this.user.impressionManager.registerImpression(`${adSlot.id}_all`);\r\n        }\r\n        else {\r\n          /*\r\n           console.error(`Cannot find an adSlot with id: ${id} - Ad Unit path is\r\n           ${event.slot.getAdUnitPath()}`);\r\n           */\r\n        }\r\n      });\r\n    }\r\n    else {\r\n      throw new Error('googletag api was not ready when \\'initSlotRenderedCallback\\' was called!');\r\n    }\r\n  }\r\n\r\n  releaseSlotDependencies(adSlot) {\r\n    try {\r\n      const id = adSlot.id;\r\n      this.conflictResolver.updateResolvedSlot(id, adSlot.lastResolvedSize);\r\n      if (this.conflictResolver.isBlocking(id)) {\r\n        // Hide all blocked adSlots\r\n        for (const blockedSlot of this.conflictResolver.getBlockedSlotsIds(id)) {\r\n          if (this.conflictResolver.isBlocked(blockedSlot)) {\r\n            if (this.adSlots.has(blockedSlot)) {\r\n              this.adSlots.get(blockedSlot).hide();\r\n            }\r\n          }\r\n        }\r\n        // Show the non blocked\r\n        for (const deferredSlotKey of this.conflictResolver.deferredSlots.keys()) {\r\n          const deferredAdSlot = this.adSlots.get(deferredSlotKey);\r\n          if (deferredAdSlot && this.shouldSendRequestToDfp(deferredAdSlot)) {\r\n            this.conflictResolver.deferredSlots.delete(deferredSlotKey);\r\n            if (deferredAdSlot.deferredSlot) {\r\n              deferredAdSlot.defineSlot();\r\n              deferredAdSlot.deferredSlot = false;\r\n            }\r\n            deferredAdSlot.show();\r\n          }\r\n        }\r\n      }\r\n    }\r\n    catch (err) {\r\n      /* eslint-disable no-console*/\r\n      console.error(`Cannot updateSlotDependencies for adSlot: ${adSlot.id}`);\r\n      /* eslint-enable no-console*/\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initializes page-level targeting params.\r\n   */\r\n  initGoogleTargetingParams() {\r\n    if (window.googletag && window.googletag.apiReady) {\r\n      // Returns a reference to the pubads service.\r\n      const pubads = googletag.pubads();\r\n      // Environment targeting (dev, test, prod)\r\n      if (this.config.environment) {\r\n        pubads.setTargeting('stg', [this.config.environment]);\r\n      }\r\n\r\n      // User targeting\r\n      if (this.user.type) {\r\n        pubads.setTargeting('UserType', [this.user.type]);\r\n      }\r\n      if (this.user.htz_type) {\r\n        pubads.setTargeting('htz_user_type', [this.user.htz_type]);\r\n      }\r\n      if (this.user.tm_type) {\r\n        pubads.setTargeting('tm_user_type', [this.user.tm_type]);\r\n      }\r\n      if (this.user.hdc_type) {\r\n        pubads.setTargeting('hdc_user_type', [this.user.hdc_type]);\r\n      }\r\n      if (this.user.age) {\r\n        pubads.setTargeting('age', [this.user.age]);\r\n      }\r\n      if (this.user.gender) {\r\n        pubads.setTargeting('urgdr', [this.user.gender]);\r\n      }\r\n\r\n      // Context targeting\r\n      if (this.config.articleId) {\r\n        pubads.setTargeting('articleId', [this.config.articleId]);\r\n      }\r\n      if (this.config.gStatCampaignNumber && this.config.gStatCampaignNumber !== -1) {\r\n        pubads.setTargeting('gstat_campaign_id', [this.config.gStatCampaignNumber]);\r\n      }\r\n      if (this.config.proposalNumber) {\r\n        pubads.setTargeting('proposaltype', [this.config.proposalNumber]);\r\n      }\r\n      if (this.config.pageType) {\r\n        pubads.setTargeting('pageType', [this.config.pageType]);\r\n      }\r\n      if (this.config.isWriterAlerts) {\r\n        pubads.setTargeting('WriterAlerts', ['true']);\r\n      }\r\n      // UTM targeting\r\n      /* eslint-disable no-underscore-dangle */\r\n      if (this.config.utm_.content) {\r\n        pubads.setTargeting('utm_content', [this.config.utm_.content]);\r\n      }\r\n      if (this.config.utm_.source) {\r\n        pubads.setTargeting('utm_source', [this.config.utm_.source]);\r\n      }\r\n      if (this.config.utm_.medium) {\r\n        pubads.setTargeting('utm_medium', [this.config.utm_.medium]);\r\n      }\r\n      if (this.config.utm_.campaign) {\r\n        pubads.setTargeting('utm_campaign', [this.config.utm_.campaign]);\r\n      }\r\n      /* eslint-enable no-underscore-dangle */\r\n      // AdBlock removal\r\n      if (this.config.adBlockRemoved) {\r\n        pubads.setTargeting('adblock_removed', [this.config.adBlockRemoved]);\r\n      }\r\n      // University targeting - triggered via cookie\r\n      if (this.config.wifiLocation) {\r\n        pubads.setTargeting('wifi', [this.config.wifiLocation]);\r\n      }\r\n      if (this.config.tags && Array.isArray(this.config.tags)) {\r\n        pubads.setTargeting('tags', [...this.config.tags]);\r\n      }\r\n\r\n      if (this.user.sso && this.user.sso.userId && this.config.ssoGroupKey) {\r\n        pubads.setTargeting(this.config.ssoGroupKey, this.user.sso.userId);\r\n      }\r\n      if (this.config.anonymousId) {\r\n        const anonymousIdKeyName = 'anonymousIdKey';\r\n        pubads.setTargeting(anonymousIdKeyName, this.config.anonymousId);\r\n      }\r\n      // Ads Centering\r\n      pubads.setCentering(true);\r\n    }\r\n    else {\r\n      throw new Error('googletag api was not ready when \\'initGoogleTargetingParams\\' was called!');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initializes googletag services.\r\n   */\r\n  initGoogleGlobalSettings() {\r\n    if (window.googletag && window.googletag.apiReady) {\r\n      const googleGlobalSettings = this.config.googleGlobalSettings;\r\n      // Enable GET parameter overrides\r\n      if (window.location.search) {\r\n        const search = window.location.search;\r\n        if (search.indexOf('sraon') > 0) {\r\n          console.log('Single Request Mode: active'); // eslint-disable-line no-console\r\n          googleGlobalSettings.enableSingleRequest = true;\r\n        }\r\n        else if (search.indexOf('sraoff') > 0) {\r\n          console.log('Single Request Mode: disabled');// eslint-disable-line no-console\r\n          googleGlobalSettings.enableSingleRequest = false;\r\n        }\r\n        if (search.indexOf('asyncrenderingon') > 0) {\r\n          console.log('Async rendering mode: active'); // eslint-disable-line no-console\r\n          googleGlobalSettings.enableAsyncRendering = true;\r\n        }\r\n        else if (search.indexOf('asyncrenderingonoff') > 0) {\r\n          console.log('Sync rendering mode: active');// eslint-disable-line no-console\r\n          googleGlobalSettings.enableAsyncRendering = false;\r\n        }\r\n      }\r\n      // Google services activation\r\n      if (googleGlobalSettings.enableSingleRequest === true) {\r\n        googletag.pubads().enableSingleRequest();\r\n      }\r\n      if (googleGlobalSettings.enableAsyncRendering === true) {\r\n        googletag.pubads().enableAsyncRendering();\r\n      }\r\n      else {\r\n        googletag.pubads().enableSyncRendering();\r\n      }\r\n      // Enables all GPT services that have been defined for ad slots on the page.\r\n      googletag.enableServices();\r\n    }\r\n    else {\r\n      throw new Error('googletag api wasn\\'t ready when \\'initGoogleGlobalSettings\\' was called!');\r\n    }\r\n  }\r\n}\r\n","/* globals googletag */\nimport AdManager from '../src/objects/adManager';\nimport globalConfig from './globalConfig';\nimport { getBreakpoint, debounce } from '../src/utils/breakpoints';\n\nconst defaultConfig = globalConfig || {};\nconst resizeTimeout = 250;\n\nexport default class DFP {\n\n  constructor(config) {\n    this.config = Object.assign({}, defaultConfig, config);\n    this.wasInitialized = false;\n    this.initStarted = false;\n    this.breakpoint = getBreakpoint();\n    this.initWindowResizeListener();\n  }\n\n  /**\n   * This part of the object's construction is dependent on the call to 'init'\n   */\n  resumeInit() {\n    try {\n      this.adManager = this.adManager || new AdManager(this.config);\n    }\n    catch (err) {\n      console.error(err); // eslint-disable-line no-console\n    }\n  }\n\n  /**\n   * initializes the 'googletag' global namespace and add the\n   * google publish tags library to the page\n   * @returns {Promise} that resolves to true once the googletag api is ready to use\n   * (googletag.apiReady = true)\n   */\n  initGoogleTag() {\n    const dfpThis = this;\n    return new Promise((resolve, reject) => {\n      if (dfpThis.initStarted === true) {\n        googletag.cmd.push(() => {\n          dfpThis.wasInitialized = true;\n          resolve(dfpThis);\n        });\n      }\n      else {\n        dfpThis.initStarted = true;\n        // set up a place holder for the gpt code downloaded from google\n        window.googletag = window.googletag || {};\n\n        // this is a command queue used by GPT any methods added to it will be\n        // executed when GPT code is available, if GPT is already available they\n        // will be executed immediately\n        window.googletag.cmd = window.googletag.cmd || [];\n        // load google tag services JavaScript\n        (() => {\n          const tag = window.document.createElement('script');\n          tag.async = true;\n          tag.type = 'text/javascript';\n          // Supports both https and http\n          tag.setAttribute('src', '//www.googletagservices.com/tag/js/gpt.js');\n          const node = window.document.getElementsByTagName('script')[0];\n          tag.addEventListener('load', () => {\n            dfpThis.resumeInit();\n            googletag.cmd.push(() => {\n              dfpThis.wasInitialized = true;\n              resolve(this);\n            });\n          });\n          tag.addEventListener('error', (error) => {\n            dfpThis.wasInitialized = false;\n            reject(error);\n          });\n          node.parentNode.insertBefore(tag, node);\n        })();\n      }\n    });\n  }\n\n  /**\n   *  Returns true iff googletag was properly initialized on the page\n   * @returns {boolean}\n   */\n  isGoogleTagReady() {\n    if (this.wasInitialized === true || (window.googletag && window.googletag.apiReady)) {\n      this.wasInitialized = true;\n    }\n    return this.wasInitialized;\n  }\n\n  /**\n   * Initializes the window resize listener to support responsive ad refreshes\n   */\n  initWindowResizeListener() {\n    const dfpThis = this;\n    function onResize() {\n      const currentBreakpoint = getBreakpoint();\n      if (dfpThis.breakpoint !== currentBreakpoint) {\n        dfpThis.breakpoint = currentBreakpoint;\n        if (dfpThis.adManager) {\n          dfpThis.adManager.refreshAllSlots();\n        }\n        else {\n          throw new Error('initWindowResizeListener error - adManager instance is not available');\n        }\n      }\n    }\n    const debouncedFunction = debounce(onResize, resizeTimeout);\n    window.onresize = debouncedFunction;\n  }\n}\n","// generated by genversion\nexport const version = '2.4.5';\n","import DFP from './dfp';\nimport globalConfig from './globalConfig';\nimport { version as v } from './version';\n\n// DFP version is based on the package.json\nDFP.version = v || 'VERSION';\n\n/*\n // Only for development mode\n if ( process.env.NODE_ENV !== 'production' ) {\n DFP.dev = '123';\n }\n */\n\nexport const config = globalConfig;\nexport const version = DFP.version;\nexport default DFP;\n"]}