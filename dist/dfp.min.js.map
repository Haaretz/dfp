{"version":3,"sources":["../src/utils/cookieUtils.js","../src/utils/time.js","../src/utils/breakpoints.js","../src/utils/arrays.js","../jspm_packages/npm/systemjs-plugin-babel@0.0.17/babel-helpers/classCallCheck.js","../jspm_packages/npm/systemjs-plugin-babel@0.0.17/babel-helpers/createClass.js","../src/globalConfig.js","../src/objects/impressionsManager.js","../src/objects/user.js","../src/objects/conflictResolver.js","../src/objects/adSlot.js","../src/objects/adManager.js","../src/dfp.js","../src/index.js"],"names":["stringToMap","string","separator","undefined","_ref$separator","operator","_ref$operator","map","itemsArr","split","forEach","element","keyValue","length","decodeURIComponent","e","getCookieAsMap","document","cookie","tmsso","engsso","addHours","date","hours","SyntaxError","isNaN","parseInt","TypeError","result","Date","setHours","getHours","addDays","days","setDate","getDate","debounce","func","wait","arguments","immediate","timeout","context","this","args","later","apply","callNow","setTimeout","getBreakpoint","breakpoint","windowWidth","window","innerWidth","documentElement","clientWidth","body","breakpoints","xs","xxs","s","m","l","xl","xxl","getBreakpointName","resultBreakpoint","arraysEqual$1","a","b","Array","isArray","i","version","_","instance","Constructor","defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","key","protoProps","staticProps","prototype","ssoKey","location","hostname","indexOf","dfpBaseConf","JSON","parse","getElementById","textContent","err","dfpConfig","Object","assign","referrer","isMobile","test","navigator","userAgent","isHomepage","pathname","environment","department","domain","regexMatch","exec","path","sectionArray","articleId","slice","filter","section","index","arr","reduce","last","current","concat","site","env","port","dev","prod","articleIdMatch","pop","content","getUrlParam","source","medium","campaign","results","RegExp","search","adBlockRemoved","localStorage","getItem","isWriterAlerts","wifiLocation","cookieMap","_htzwif","gStatCampaignNumber","gstatCampaign","CampaignNumber","googleGlobalSettings","breakpointType","breakpoints1","breakpoints2","breakpoints3","breakpoints4","getTime","breakpointsConfig","keys","ImpressionsManager","impressionManagerConfig","now","config","impressions","retrieveImpressionsData","initImpressionMap","migrateImpressionsData","_this","hasOwnProperty","call","frequency","impressionsData","oldImpressionsArray","impression","adUnitImpression","name","data","tmp","slotId","join","id","exposed","expires","_this2","adSlotId","err1","debouncedSave","saveImpressionsToLocalStorageImpl","setItem","stringify","error","slot","_this3","shouldUpdateExpiryDate","initSlotFromConfig","updateExpiryDate","slotName","Error","frequencyMap","match","frequencyRegex","setMilliseconds","setSeconds","setMinutes","maxImpressions","saveImpressionsToLocalStorage","atQuota","userTypes$1","User","userConfig","sso","type","getUserType","impressionManager","age","getUserAge","gender","getUserGender","userType","payerProp","payer","registered","anonymous","usrae","urgdr","ConflictResolver","conflictManagementConfig","dependencyMap","initializeDependencyMap","deferredSlots","Set","conflictManagementJson","queue","Map","value","rules","item","onsize","avoid","set","resolvedSize","has","get","resolvedWith","isBlocked","_step","Symbol","iterator","_iteratorNormalCompletion","_iterator","next","done","adSlotKey","adSlot","_step2","_iteratorNormalCompletion2","_iterator2","adSlotRule","parentResolvedWith","add","find","sizeString","size","numberStr","arraysEqual","isBlocking","_step3","_iteratorNormalCompletion3","_iterator3","from","EMPTY_SIZE","hiddenClass","adSlotConfig","responsive","fluid","user","adManager","htmlElement","priority","deferredSlot","network","adUnitBase","adSizeMapping","responsiveAdSizeMapping","blacklistReferrers","whitelistReferrers","lastResolvedSize","lastResolvedWithBreakpoint","defineSlot","adTypes","maavaron","popunder","talkback","regular","whitelisted","blacklisted","shown","cmd","push","classList","remove","display","isMaavaron","maavaronSlot","defineMaavaron","shouldSendRequestToDfp","googletag","pubads","defineFn","isOutOfPage","defineOutOfPageSlot","getPath","responsiveSlotSizeMapping","sizeMapping","addSize","build","defineSizeMapping","addService","setCollapseEmptyDiv","calculatedPath","toLowerCase","event","getAdUnitPath","isEmpty","refresh","_this4","adUnitMaavaronPath","adUnitMaavaronSize","definePassback","setTargeting","adPriorities","adTargets","userTypes$$1","AdManager","conflictResolver","initGoogleTargetingParams","initGoogleGlobalSettings","initSlotRenderedCallback","currentBreakpointName","adManagerConfig","adSlots","initAdSlots","high","onDomLoaded","normal","log","onWindowLoaded","low","readyState","addEventListener","adSlot$$1","show","priorityFilter","values","deferredSlotId","deferredAdSlot","currentBreakpoint","hide","_step4","_iteratorNormalCompletion4","_iterator4","adUnitName","filteredPriority","adSlotPlaceholders","getElementsByClassName","node","adSlotNodeSet","adSlotPriority","computedAdSlotConfig","attributes","all","getAdType","adSlotInstance","isWhitelisted","isBlacklisted","shouldDisplayAdAfterAdBlockRemoval","doesBreakpointContainAd","doesUserTypeMatchBannerTargeting","reachedQuota","adSlotOrTarget","adTarget","nonPaying","paying","digitalOnly","digitalAndPrint","count","_step5","_iteratorNormalCompletion5","_iterator5","containsBreakpoint","mapping","apiReady","releaseSlotDependencies","registerImpression","updateResolvedSlot","_step6","getBlockedSlotsIds","_iteratorNormalCompletion6","_iterator6","blockedSlot","_step7","_iteratorNormalCompletion7","_iterator7","deferredSlotKey","delete","utm_","setCentering","enableSingleRequest","enableAsyncRendering","enableSyncRendering","enableServices","defaultConfig","resizeTimeout","DFP$1","wasInitialized","initStarted","initWindowResizeListener","dfpThis","Promise","resolve","reject","tag","createElement","async","setAttribute","getElementsByTagName","resumeInit","parentNode","insertBefore","onResize","refreshAllSlots","debouncedFunction","onresize","version$1"],"mappings":"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","file":"dfp.min.js","sourcesContent":["/**\r\n * Htz-cookie-util\r\n * @module htzCookieUtil\r\n * @author Elia Grady elia.grady@haaretz.co.il\r\n * @license MIT\r\n */\r\n\r\n/**\r\n * Translates Key-Value string into a convenient map.\r\n * @param {String} string String in format of \"key<operator>value<separator>.....\"\r\n * @param {object} options object for overriding defaults:\r\n * options.separator is a String or regExp that separates between each key value pairs\r\n * (default is ';'). options.operator is a String or regExp that separates between each key\r\n * and value within a pair (default is '=').\r\n * @returns {object} a map object, with key-value mapping according to the passed configuration.\r\n */\r\nfunction stringToMap(string,\r\n  { separator = ';', operator = '=' } = {}) {\r\n  const map = {};\r\n  const itemsArr = string.split(separator);\r\n  itemsArr.forEach(element => {\r\n    if (typeof element === 'string') {\r\n      const keyValue = element.split(operator);\r\n      if (keyValue.length === 2) {\r\n        try {\r\n          map[keyValue[0]] = decodeURIComponent(keyValue[1]);\r\n        }\r\n        catch (e) {\r\n          // Do nothing, malformed URI\r\n        }\r\n      }\r\n    }\r\n  });\r\n  return map;\r\n}\r\nexport const ssoKey = window.location.hostname.indexOf('haaretz.com') > -1 ? 'engsso' : 'tmsso';\r\n\r\n// Translates Cookie string into a convenient map.\r\nexport default function getCookieAsMap() {\r\n  const map = stringToMap(document.cookie, { separator: /;\\s?/ });\r\n  if (typeof map.tmsso === 'string') {\r\n    map.tmsso = stringToMap(map.tmsso, { separator: ':' });\r\n  }\r\n  if (typeof map.engsso === 'string') {\r\n    map.engsso = stringToMap(map.engsso, { separator: ':' });\r\n  }\r\n  return map;\r\n}\r\n","/**\r\n * Helper function. Adds N hours to a given date object.\r\n * @param {Date} date - the date to derive from\r\n * @param {Number} hours - the amount of hours to add, in whole numbers\r\n * @throws {SyntaxError} Will throw if the 'date' param is not provided\r\n * @throws {SyntaxError} Will throw if the 'hours' param is not provided\r\n * @throws {TypeError} Will throw if the 'hours' param is not a valid integer\r\n * @returns {Date} date - the new date, derived from adding the given hours\r\n */\r\nexport function addHours(date, hours) {\r\n  if (!date) {\r\n    throw new SyntaxError('addHours called without a required \\'date\\' parameter!');\r\n  }\r\n  if (!hours) {\r\n    throw new SyntaxError('addHours called without a required \\'hours\\' parameter!');\r\n  }\r\n  else if (isNaN(parseInt(hours, 10))) {\r\n    throw new TypeError('addHours called with an invalid integer \\'hours\\' parameter!');\r\n  }\r\n  const result = new Date(date);\r\n  result.setHours(result.getHours() + parseInt(hours, 10));\r\n  return result;\r\n}\r\n\r\n/**\r\n * Helper function. Adds N days to a given date object.\r\n * @param {Date} date - the date to derive from\r\n * @param {Integer} days - the amount of days to add\r\n * @throws {SyntaxError} Will throw if the 'date' param is not provided\r\n * @throws {SyntaxError} Will throw if the 'days' param is not provided\r\n * @throws {TypeError} Will throw if the 'hours' param is not a valid integer\r\n * @returns {Date} date - the new date, derived from adding the given days\r\n */\r\nexport function addDays(date, days) {\r\n  if (!date) {\r\n    throw new SyntaxError('addDays called without a required \\'date\\' parameter!');\r\n  }\r\n  if (!days) {\r\n    throw new SyntaxError('addDays called without a required \\'days\\' parameter!');\r\n  }\r\n  else if (isNaN(parseInt(days, 10))) {\r\n    throw new TypeError('addDays called with an invalid integer \\'days\\' parameter!');\r\n  }\r\n  const result = new Date(date);\r\n  result.setDate(result.getDate() + parseInt(days, 10));\r\n  return result;\r\n}\r\n","import globalConfig from '../globalConfig';\r\n\r\nconst breakpoints = globalConfig.breakpointsConfig.breakpoints;\r\n\r\n/**\r\n * Returns a function, that, as long as it continues to be invoked, will not\r\n * be triggered. The function will be called after it stops being called for\r\n * N milliseconds. If `immediate` is passed, trigger the function on the\r\n * leading edge, instead of the trailing.\r\n * @param { function } func - the function to run\r\n * @param { number } wait - the timeout period to avoid running the function\r\n * @param { boolean } immediate - leading edge modifier\r\n * @returns {function } the debounced function\r\n */\r\nexport function debounce(func, wait = 100, immediate) {\r\n  let timeout;\r\n  return function debounced() {\r\n    const context = this;\r\n    const args = arguments;// eslint-disable-line prefer-rest-params\r\n    const later = () => {\r\n      timeout = null;\r\n      if (!immediate) func.apply(context, args);\r\n    };\r\n    const callNow = immediate && !timeout;\r\n    clearTimeout(timeout);\r\n    timeout = setTimeout(later, wait);\r\n    if (callNow) func.apply(context, args);\r\n  };\r\n}\r\n\r\n/**\r\n * Returns the current breakpoint that is closest to the window's width\r\n * @returns {number} the break that the current width represents\r\n */\r\nexport function getBreakpoint() {\r\n  let breakpoint;\r\n  const windowWidth = window.innerWidth\r\n    || document.documentElement.clientWidth\r\n    || document.body.clientWidth;\r\n  switch (true) {\r\n    case windowWidth < breakpoints.xs: breakpoint = breakpoints.xxs; break;\r\n    case windowWidth < breakpoints.s: breakpoint = breakpoints.xs; break;\r\n    case windowWidth < breakpoints.m: breakpoint = breakpoints.s; break;\r\n    case windowWidth < breakpoints.l: breakpoint = breakpoints.m; break;\r\n    case windowWidth < breakpoints.xl: breakpoint = breakpoints.l; break;\r\n    case windowWidth < breakpoints.xxl: breakpoint = breakpoints.xl; break;\r\n    default: breakpoint = breakpoints.xxl;\r\n  }\r\n  return breakpoint;\r\n}\r\n/**\r\n * Returns the current breakpoint that is closest to the window's width\r\n * @param {number} breakpoint - the breakpoint label enumerator that the current width represents\r\n * (yield with a getBreakpoint() call or passed manually )\r\n * @returns {string} breakpoint - the breakpoint label that the current width represents,\r\n * as a string\r\n */\r\nexport function getBreakpointName(breakpoint) {\r\n  let resultBreakpoint;\r\n  const windowWidth = breakpoint || window.innerWidth;\r\n  switch (true) {\r\n    case windowWidth < breakpoints.xs: resultBreakpoint = 'xxs'; break;\r\n    case windowWidth < breakpoints.s: resultBreakpoint = 'xs'; break;\r\n    case windowWidth < breakpoints.m: resultBreakpoint = 's'; break;\r\n    case windowWidth < breakpoints.l: resultBreakpoint = 'm'; break;\r\n    case windowWidth < breakpoints.xl: resultBreakpoint = 'l'; break;\r\n    case windowWidth < breakpoints.xxl: resultBreakpoint = 'xl'; break;\r\n    default: resultBreakpoint = 'xxl';\r\n  }\r\n  return resultBreakpoint;\r\n}\r\n","/**\n * Checks whether two arrays are equal\n * @param {Array} a - the first array to check\n * @param {Array} b - the second array to check\n * @returns {Boolean} true iff both a and b are arrays, with equal values\n */\nexport function arraysEqual(a, b) {\n  if (!a || !b) return false;\n  if (!Array.isArray(a) || !Array.isArray(b)) return false;\n  if (a === b) return true;\n  if (a.length !== b.length) return false;\n  for (let i = 0; i < a.length; ++i) {\n    if (Array.isArray(a[i]) && Array.isArray(b[i])) {\n      if (!arraysEqual(a[i], b[i])) return false;\n    }\n    else if (a[i] !== b[i]) {\n      return false;\n    }\n  }\n  return true;\n}\nexport default arraysEqual;\n","export default (function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n});","export default (function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n})();","/* global dfpConfig */\r\nimport getCookieAsMap, { ssoKey } from './utils/cookieUtils';\r\n// globalConfig for DFP\r\nlet dfpBaseConf;\r\ntry {\r\n  dfpBaseConf = window.JSON.parse(document.getElementById('dfpConfig').textContent);\r\n}\r\ncatch (err) {\r\n  dfpBaseConf = window.dfpConfig;\r\n}\r\nconst dfpConfig = Object.assign({\r\n  get referrer() {\r\n    return document.referrer ? document.referrer : '';\r\n  },\r\n  get isMobile() {\r\n    return (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i\r\n      .test(window.navigator.userAgent || ''));\r\n  },\r\n  /**\r\n   * Returns true iff the loaded page is the homepage (no inner path)\r\n   * @returns {boolean}\r\n   */\r\n  get isHomepage() {\r\n    return window.location.pathname === '/' || this.environment === 3; // 'prod'\r\n  },\r\n  get department() {\r\n    return this.isHomepage ? '_homepage' : '_section';\r\n  },\r\n  /**\r\n   * returns the domain the page was loaded to. i.e: 'haaretz.co.il', 'haaretz.com'\r\n   * @returns {string} the domain name from the windows's location hostname property\r\n   */\r\n  get domain() {\r\n    const regexMatch = /([\\d|\\w]+)(\\.co\\.il|\\.com)(.*)?/.exec(window.location.hostname);\r\n    const result = regexMatch ? regexMatch[0] : window.location.hostname;\r\n    return result;\r\n  },\r\n  /**\r\n   * Returns an array of concatenated paths, separated by a dot.\r\n   * For example, for the URL:\r\n   * http://www.haaretz.co.il/news/world/america/us-election-2016/LIVE-1.2869045\r\n   * the path is '/news/world/america/us-election-2016/LIVE-1.2869045'.\r\n   * This function takes the directories ['news', 'world', 'america', 'us-election-2016']\r\n   * and converts it to the following format:\r\n   * ['.news', '.news.world', '.news.world.america', '.news.world.america.us-election-2016']\r\n   * This denotes the path configuration for the given adSlot\r\n   * non articles (sections) will be given a '0' - no articleId value for targeting purposes)\r\n   * @returns {Array.<T>} an array of path names\r\n   */\r\n  get path() {\r\n    let sectionArray = this.articleId && this.articleId !== '0' ?\r\n      window.location.pathname.split('/').slice(1, -1) :\r\n      window.location.pathname.split('/').slice(1);\r\n    sectionArray = sectionArray.filter(path =>\r\n    path !== 'wwwMobileSite' && path !== 'whtzMobileSite');\r\n    return sectionArray\r\n      .map(section => `.${section}`)\r\n      .map((section, index, arr) => arr.slice(0, index + 1)\r\n        .reduce((last, current) => last.concat(current)));\r\n  },\r\n  /**\r\n   * Returns a string representation for the name of the site\r\n   * @return {*|string}\r\n   */\r\n  get site() {\r\n    let site;\r\n    if (window.location.hostname.indexOf('haaretz.co.il') > -1) {\r\n      site = 'haaretz';\r\n    }\r\n    else if (window.location.hostname.indexOf('themarker.com') > -1) {\r\n      site = 'themarker';\r\n    }\r\n    else if (window.location.hostname.indexOf('mouse.co.il') > -1) {\r\n      site = 'mouse';\r\n    }\r\n    return site || 'haaretz';\r\n  },\r\n  /**\r\n   * Returns the current environment targeting param, if such is defined.\r\n   * @returns {number} targeting param, 1 for local development, 2 for test servers and 3 for prod.\r\n   * May return undefined if no targeting is specified.\r\n   */\r\n  get environment() {\r\n    const env = {\r\n      dev: 1,\r\n      test: 2,\r\n      prod: 3,\r\n    };\r\n    return window.location.port === '8080' ? env.dev :\r\n      (window.location.hostname.indexOf('pre.haaretz.co.il') > -1\r\n      || window.location.hostname.indexOf('tmtest.themarker.com') > -1\r\n      || window.location.hostname.indexOf('prodmouse.mouse.co.il') > -1) ? env.test :\r\n        (window.location.pathname.indexOf('/cmlink/Haaretz.HomePage') > -1\r\n        || window.location.pathname.indexOf('/cmlink/TheMarker.HomePage') > -1\r\n        || window.location.pathname.indexOf('/cmlink/Mouse.HomePage') > -1)\r\n          ? env.prod : undefined;\r\n  },\r\n  /**\r\n   * Returns the articleIf if on an article page, or null otherwise\r\n   * @returns {string} an articleId string from the pathname, or 0 if not found\r\n   */\r\n  get articleId() {\r\n    const articleIdMatch = /\\d\\.\\d+/g.exec(window.location.pathname);\r\n    let articleId = '0';\r\n    if (articleIdMatch) {\r\n      articleId = articleIdMatch.pop(); // Converts [\"1.23145\"] to \"1.23145\"\r\n    }\r\n    return articleId;\r\n  },\r\n  utm_: {\r\n    get content() {\r\n      return this.getUrlParam('utm_content');\r\n    },\r\n    get source() {\r\n      return this.getUrlParam('utm_source');\r\n    },\r\n    get medium() {\r\n      return this.getUrlParam('utm_medium');\r\n    },\r\n    get campaign() {\r\n      return this.getUrlParam('utm_campaign');\r\n    },\r\n    getUrlParam(key) {\r\n      const results = RegExp(`(${key})(=)([^&\"]+)`).exec(window.location.search);\r\n      return results && results[3] ? results[3] : undefined;\r\n    },\r\n  },\r\n  get adBlockRemoved() {\r\n    let adBlockRemoved = false;\r\n    try {\r\n      if (localStorage.getItem('adblock_removed')) {\r\n        adBlockRemoved = true;\r\n      }\r\n    }\r\n    catch (err) {\r\n      // do nothing\r\n    }\r\n    return adBlockRemoved;\r\n  },\r\n  get isWriterAlerts() {\r\n    return (location.search.indexOf('writerAlerts=true') > -1);\r\n  },\r\n  get wifiLocation() {\r\n    let wifiLocation = '';\r\n    const cookieMap = getCookieAsMap();\r\n    try {\r\n      if (cookieMap && cookieMap._htzwif) { // eslint-disable-line no-underscore-dangle\r\n        wifiLocation = (cookieMap._htzwif === 'arcaffe') // eslint-disable-line no-underscore-dangle\r\n          ? 'ArCafe' : 'university';\r\n      }\r\n    }\r\n    catch (err) {\r\n      // do nothing\r\n    }\r\n    return wifiLocation;\r\n  },\r\n  get gStatCampaignNumber() {\r\n    let gstatCampaign;\r\n    try {\r\n      gstatCampaign = localStorage.getItem('GstatCampaign') ?\r\n        JSON.parse(localStorage.getItem('GstatCampaign')) : undefined;\r\n    }\r\n    catch (err) {\r\n      /* In case of thrown 'SecurityError' or 'QuotaExceededError',\r\n       the variable should be undefined */\r\n      gstatCampaign = undefined;\r\n    }\r\n    return gstatCampaign ? gstatCampaign.CampaignNumber : undefined;\r\n  },\r\n  adSlotConfig: {\r\n    'haaretz.co.il.example.slot': {\r\n      id: 'slotId',\r\n      // path : \"/network/base/slotId/slotId_subsection\", Will be calculated from AdManager\r\n      responsive: true,\r\n      adSizeMapping: [['width1', 'height1'], ...['widthN', 'heightN']],\r\n      priority: 'normal',\r\n      fluid: false,\r\n      responsiveAdSizeMapping: {\r\n        xxs: [['width1', 'height1'], ...['widthN', 'heightN']],\r\n        xs: [['width1', 'height1'], ...['widthN', 'heightN']],\r\n        s: [['width1', 'height1'], ...['widthN', 'heightN']],\r\n        m: [['width1', 'height1'], ...['widthN', 'heightN']],\r\n        l: [['width1', 'height1'], ...['widthN', 'heightN']],\r\n        xl: [['width1', 'height1'], ...['widthN', 'heightN']],\r\n        xxl: [['width1', 'height1'], ...['widthN', 'heightN']],\r\n      },\r\n      blacklistReferrers: 'comma, delimited, blacklisted, referrer, list',\r\n      whitelistReferrers: 'comma, delimited, referrer, list',\r\n    },\r\n  },\r\n  adManagerConfig: {\r\n    network: '9401',\r\n    adUnitBase: 'haaretz.co.il_Web',\r\n  },\r\n  breakpointsConfig: {\r\n    get breakpoints() {\r\n      // Override in VM from backend to control this toggle.\r\n      let breakpoints;\r\n      switch (dfpConfig.googleGlobalSettings.breakpointType) {\r\n        case 'type1': breakpoints = this.breakpoints1; break;\r\n        case 'type2': breakpoints = this.breakpoints2; break;\r\n        case 'type3': breakpoints = this.breakpoints3; break;\r\n        case 'type4': breakpoints = this.breakpoints4; break;\r\n        default: breakpoints = this.breakpoints1;\r\n      }\r\n      return breakpoints;\r\n    },\r\n    // Type 1\r\n    breakpoints1: {\r\n      xxs: 600,\r\n      xs: 761,\r\n      s: 993,\r\n      m: 1009,\r\n      l: 1291,\r\n      xl: 1600,\r\n      xxl: 1900,\r\n    },\r\n    // Type 2\r\n    breakpoints2: {\r\n      xxs: 600,\r\n      xs: 1000,\r\n      s: 1150,\r\n      m: 1281,\r\n      l: 1600,\r\n      xl: 1920,\r\n      xxl: 1920,\r\n    },\r\n    // Type 3\r\n    breakpoints3: {\r\n      xxs: 100,\r\n      xs: 480,\r\n      s: 600,\r\n      m: 768,\r\n      l: 1024,\r\n      xl: 1280,\r\n      xxl: 1900,\r\n    },\r\n    // Type 4\r\n    breakpoints4: {\r\n      xxs: 600,\r\n      xs: 768,\r\n      s: 1024,\r\n      m: 1280,\r\n      l: 1900,\r\n      xl: 1900,\r\n      xxl: 1900,\r\n    },\r\n  },\r\n  userConfig: {\r\n    type: undefined,\r\n    age: undefined,\r\n    gender: undefined,\r\n  },\r\n  conflictManagementConfig: {\r\n    'blocking.ad.unit.name': [\r\n      {\r\n        onsize: '1280x200,970x250,3x3',\r\n        avoid: 'blocked.ad.unit.name',\r\n      },\r\n      {\r\n        onsize: '1280x200,970x250,3x3',\r\n        avoid: 'blocked.ad.unit.name',\r\n      },\r\n    ],\r\n  },\r\n  impressionManagerConfig: {\r\n    'ad.unit.name': {\r\n      target: 'all|section|homepage',\r\n      frequency: '$1/$2(day|hour)',\r\n      exposed: 0,\r\n      expires: (new Date()).getTime(),\r\n    },\r\n  },\r\n  googleGlobalSettings: {\r\n    enableSingleRequest: true,\r\n    enableAsyncRendering: true,\r\n    refreshIntervalTime: 1000,\r\n    breakpointType: 'type1',\r\n  },\r\n  sso: ssoKey,\r\n\r\n}, dfpBaseConf);\r\n\r\nexport default dfpConfig;\r\n","import globalConfig from '../globalConfig';\r\nimport { addHours, addDays } from '../utils/time';\r\nimport { debounce } from '../utils/breakpoints';\r\n\r\nexport const keys = {\r\n  impressions: 'impressions',\r\n  frequency: 'frequency',\r\n  /**\r\n   * [0] - full match\r\n   * [1] - impression count i.e: \"1\" | \"22\"\r\n   * [2] - impression expiry range quantifier  i.e: \"1\" | \"22\"\r\n   * [3] - impression expiry range unit i.e: \"day\" | \"hour\"\r\n   */\r\n  frequencyRegex: /(\\d+)\\/(\\d+)(day|hour)/,\r\n  expires: 'expires',\r\n  exposed: 'exposed',\r\n  target: 'target',\r\n  maxImpressions: 'maxImpressions',\r\n  hours: 'hour',\r\n  days: 'day',\r\n  adSlotId: 'id',\r\n};\r\n\r\nexport default class ImpressionsManager {\r\n\r\n  constructor(impressionManagerConfig) {\r\n    this.now = (new Date()).getTime(); // this date is used for comparisons only\r\n    this.config = Object.assign({}, impressionManagerConfig);\r\n    this.impressions = this.retrieveImpressionsData();\r\n    this.initImpressionMap();\r\n  }\r\n\r\n  retrieveImpressionsData() {\r\n    const impressions = this.migrateImpressionsData();\r\n    /*\r\n     Merge migrated data with new data\r\n     console.log('Migrated: ',impressions);\r\n     */\r\n    Object.keys(impressions).map((key, index) => {\r\n      impressions[key] = Object.assign({}, impressions[key], this.config[key]);\r\n      return this;\r\n    });\r\n    /*\r\n     console.log('Merged: ',impressions);\r\n     Filter out entries without frequency\r\n     */\r\n    for (const key in impressions) {\r\n      if ({}.hasOwnProperty.call(impressions, key)) {\r\n        if (!impressions[key][keys.frequency]) {\r\n          // console.log(`Removing ${key} - since it does not have a frequency`,impressions[key]);\r\n          delete impressions[key];\r\n        }\r\n      }\r\n    }\r\n    // console.log('Filtered: ',impressions);\r\n    return impressions;\r\n  }\r\n\r\n  migrateImpressionsData() {\r\n    let impressions;\r\n    let impressionsData;\r\n    try {\r\n      impressionsData = window.localStorage.getItem(keys.impressions);\r\n    }\r\n    catch (err) {\r\n      // In case of thrown 'SecurityError' or 'QuotaExceededError', the variable should be undefined\r\n      impressionsData = undefined;\r\n    }\r\n    try {\r\n      impressions = JSON.parse(impressionsData);\r\n    }\r\n    catch (err) {\r\n      // Here is where old impression data is converted to new format\r\n      impressions = {};\r\n      const oldImpressionsArray = impressionsData.split(';').filter(e => e);\r\n\r\n      oldImpressionsArray.forEach((impression) => {\r\n        try {\r\n          const adUnitImpression = impression.split(' = ');\r\n          const name = adUnitImpression[0];\r\n          const data = adUnitImpression[1];\r\n          const tmp = name.split('.');\r\n          let target = tmp.pop();\r\n          if (target && target === 'hp') {\r\n            target = 'homepage';\r\n          }\r\n          const slotId = tmp.join('.');\r\n          const id = `${slotId}_${target}`;\r\n          const exposed = parseInt(data.split('/')[0], 10) || 0;\r\n          const expires = parseInt(data.split('/')[1], 10) || this.now;\r\n          impressions[id] = {};\r\n          impressions[id][keys.adSlotId] = slotId;\r\n          impressions[id][keys.target] = target;\r\n          impressions[id][keys.exposed] = exposed;\r\n          impressions[id][keys.expires] = expires;\r\n        }\r\n        catch (err1) {\r\n          // console.log(`Failed converting impression: ${impression}`, err1);\r\n        }\r\n      });\r\n    }\r\n    return impressions || {};\r\n  }\r\n\r\n  /**\r\n   * Define the debounced version of the local storage save\r\n   */\r\n  saveImpressionsToLocalStorage() {\r\n    if (this.debouncedSave && typeof this.debouncedSave === 'function') {\r\n      this.debouncedSave();\r\n    }\r\n    else {\r\n      this.debouncedSave = debounce(this.saveImpressionsToLocalStorageImpl, 250, false);\r\n      this.debouncedSave();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Implementation of saving the impression map to localstorage\r\n   */\r\n  saveImpressionsToLocalStorageImpl() {\r\n    try {\r\n      localStorage.setItem(keys.impressions, JSON.stringify(this.impressions));\r\n    }\r\n    catch (err) {\r\n      /* In case of thrown 'SecurityError' or 'QuotaExceededError',\r\n       the operation should not break*/\r\n      console.error('localStorage isn\\'t available:', err); // eslint-disable-line no-console\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initializes the impression map based on the retrieved impressions and the global\r\n   * configuration.\r\n   */\r\n  initImpressionMap() {\r\n    Object.keys(this.config).map((key, index) => {\r\n      const adSlotId = key;\r\n      const slot = this.impressions[adSlotId];\r\n      let shouldUpdateExpiryDate = false;\r\n      // Case I: Existing slot (update)\r\n      if (slot) {\r\n        // Case I.I Existing slot, frequency has changed\r\n        if (this.config[adSlotId][keys.frequency] !== slot[keys.frequency]) {\r\n          // Updating the frequency will trigger a new expiry date\r\n          shouldUpdateExpiryDate = true;\r\n          this.impressions[adSlotId][keys.frequency] = this.config[adSlotId][keys.frequency];\r\n        } // Case I.II Existing slot, old expiry date\r\n        else if (this.now > slot[keys.expires]) {\r\n          // Old value that should trigger a new expiry date\r\n          shouldUpdateExpiryDate = true;\r\n        }\r\n      } // Case II: Non-existing slot (create new slot)\r\n      else {\r\n        this.initSlotFromConfig(adSlotId);\r\n      } // Finally, updates the expiry date (cases I.I and I.II)\r\n      if (shouldUpdateExpiryDate) {\r\n        this.updateExpiryDate(adSlotId);\r\n      }\r\n      return this;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Updates the expiry date of a slotName based on the configured slot frequency\r\n   * @param {String} slotName - the slotName to update.\r\n   */\r\n  updateExpiryDate(slotName) {\r\n    const now = new Date();\r\n    if (!(this.impressions[slotName] && this.impressions[slotName][keys.frequency])) {\r\n      throw new Error(`Unable to update expiry date for slot: ${slotName}\r\n      - this.impressions[slotName]:`, this.impressions[slotName]);\r\n    }\r\n    const frequencyMap = this.impressions[slotName][keys.frequency].match(keys.frequencyRegex);\r\n    now.setMilliseconds(0);\r\n    now.setSeconds(0);\r\n    now.setMinutes(0);\r\n    if (frequencyMap.indexOf(keys.days) > -1) {\r\n      now.setHours(0);\r\n    }\r\n    this.impressions[slotName][keys.expires] = (frequencyMap.indexOf(keys.days) > -1 ?\r\n      addDays(now, frequencyMap[2]) : addHours(now, frequencyMap[2])).getTime();\r\n\r\n    // Set max impressions:\r\n    this.impressions[slotName][keys.maxImpressions] = parseInt(frequencyMap[1], 10);\r\n    // Reset exposed\r\n    this.impressions[slotName][keys.exposed] = 0;\r\n  }\r\n\r\n  /**\r\n   * Initializes a non-existing slot from the passed global configuration for the slot\r\n   * @param {String} slotName - the name of the slot to create\r\n   */\r\n  initSlotFromConfig(slotName) {\r\n    const slot = this.impressions[slotName] || {};\r\n    slot[keys.frequency] = this.config[slotName][keys.frequency];\r\n    slot[keys.target] = this.config[slotName][keys.target];\r\n    slot[keys.exposed] = 0;\r\n    this.impressions[slotName] = slot;\r\n    this.updateExpiryDate(slotName);\r\n  }\r\n\r\n  /**\r\n   * Registers an impression for a given adSlot.\r\n   * @param {String} adSlotId - the adSlot id to register an impression for\r\n   * @returns {boolean} returns true iff the impression has been registered\r\n   */\r\n  registerImpression(adSlotId) {\r\n    if (adSlotId) {\r\n      const slot = this.impressions[adSlotId];\r\n      if (slot) {\r\n        const exposed = slot[keys.exposed];\r\n        if (isNaN(parseInt(exposed, 10)) === false) {\r\n          this.impressions[adSlotId][keys.exposed] += 1;\r\n          try {\r\n            this.saveImpressionsToLocalStorage();\r\n          }\r\n          catch (err) {\r\n            // console.log('Error saving ad impressions to localStorage!', err);\r\n          }\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Checks whether an adSlot has reached it's allocated impressions count.\r\n   * @param {String} adSlotId - the adSlot to check\r\n   * @returns {boolean} true iff there is a quota for the adSlot, and it has been reached\r\n   */\r\n  reachedQuota(adSlotId) {\r\n    // An adSlotId is suffixed with _homepage | _section if it's targeting is different\r\n    // between the two. If there is no difference, an _all suffix can be used.\r\n    const slotName = this.impressions[`${adSlotId}${globalConfig.department}`] ?\r\n      `${adSlotId}${globalConfig.department}` : `${adSlotId}_all`;\r\n\r\n    const slot = this.impressions[slotName];\r\n    let atQuota = false;\r\n    if (slot) {\r\n      const now = (new Date()).getTime();\r\n      // Second element of 2/4day matches '2'\r\n      const expires = this.impressions[slotName][keys.expires];\r\n      if (expires < now) {\r\n        this.updateExpiryDate(slotName);\r\n      }\r\n      else {\r\n        const maxImpressions = this.impressions[slotName][keys.maxImpressions];\r\n        // Not expired, did reach max impressions?\r\n        if (maxImpressions) {\r\n          atQuota = this.impressions[slotName][keys.exposed] >= maxImpressions;\r\n        }\r\n      }\r\n    }\r\n    return atQuota;\r\n  }\r\n\r\n\r\n  /**\r\n   * Clears the impression map from 'exposed' impressions\r\n   */\r\n  resetImpressions() {\r\n    const impressions = this.impressions;\r\n    for (const key in impressions) {\r\n      if ({}.hasOwnProperty.call(impressions, key)) {\r\n        if (impressions[key][keys.exposed]) {\r\n          impressions[key][keys.exposed] = 0;\r\n        }\r\n      }\r\n    }\r\n    this.saveImpressionsToLocalStorage();\r\n  }\r\n}\r\n","import getCookieAsMap from '../utils/cookieUtils';\r\nimport ImpressionManager from './impressionsManager';\r\nimport globalConfig from '../globalConfig';\r\n\r\nexport const userTypes = {\r\n  payer: 'payer',\r\n  registered: 'registered',\r\n  anonymous: 'anonymous',\r\n};\r\n\r\nexport default class User {\r\n  constructor(config) {\r\n    this.config = Object.assign({}, config.userConfig);\r\n    const cookieMap = getCookieAsMap();\r\n    this.ssoKey = globalConfig.sso;\r\n    if (!cookieMap[this.ssoKey]) {\r\n      // Flips the ssoKey, since cookieMap.ssoKey cannot be used to retrieve data\r\n      this.ssoKey = this.ssoKey === 'tmsso' ? 'engsso' : 'tmsso';\r\n    }\r\n    this.type = this.getUserType(cookieMap);\r\n    this.impressionManager = new ImpressionManager(config.impressionManagerConfig);\r\n    this.age = this.getUserAge(cookieMap);\r\n    this.gender = this.getUserGender(cookieMap);\r\n  }\r\n\r\n  getUserType(cookieMap) {\r\n    let userType;\r\n    if (cookieMap && cookieMap[this.ssoKey]) {\r\n      const payerProp = window.location.hostname.indexOf('haaretz.com') > -1 ?\r\n        'HdcPusr' : 'HtzPusr';\r\n      userType = cookieMap[payerProp] ? userTypes.payer : userTypes.registered;\r\n    }\r\n    else {\r\n      userType = userTypes.anonymous;\r\n    }\r\n    return userType;\r\n  }\r\n\r\n  getUserAge(cookieMap) {\r\n    let age;\r\n    const usrae = cookieMap[this.ssoKey] && cookieMap[this.ssoKey].usrae;\r\n    if (usrae) {\r\n      age = parseInt(cookieMap[this.ssoKey].usrae, 10);\r\n      age = age > 0 ? age : undefined;\r\n    }\r\n    return age;\r\n  }\r\n\r\n  getUserGender(cookieMap) {\r\n    let gender;\r\n    const urgdr = cookieMap[this.ssoKey] && cookieMap[this.ssoKey].urgdr;\r\n    if (urgdr) {\r\n      gender = parseInt(cookieMap[this.ssoKey].urgdr, 10);\r\n      gender = gender === 2 || gender === 1 ? gender : undefined;\r\n    }\r\n    return gender;\r\n  }\r\n}\r\n","class ConflictResolver {\r\n  constructor(conflictManagementConfig) {\r\n    this.dependencyMap = this.initializeDependencyMap(conflictManagementConfig);\r\n    this.deferredSlots = new Set();\r\n  }\r\n  initializeDependencyMap(conflictManagementJson) {\r\n    const queue = new Map();\r\n    Object.keys(conflictManagementJson).map((key, value) => {\r\n      let rules = conflictManagementJson[key];\r\n      if (rules) {\r\n        rules = rules.filter((item) => item.onsize && item.avoid);\r\n      }\r\n      queue.set(key, {\r\n        id: key,\r\n        rules,\r\n        resolvedWith: null,\r\n      });\r\n      return this;\r\n    });\r\n    return queue;\r\n  }\r\n\r\n  updateResolvedSlot(adSlotId, resolvedSize) {\r\n    if (!adSlotId) {\r\n      throw new Error('updateResolvedSlot must be called with an adSlotId!');\r\n    }\r\n    if (!resolvedSize) {\r\n      throw new Error('updateResolvedSlot must be called with a resolved size!');\r\n    }\r\n    if (this.dependencyMap.has(adSlotId)) {\r\n      this.dependencyMap.get(adSlotId).resolvedWith = resolvedSize;\r\n    }\r\n  }\r\n\r\n\r\n  isBlocked(adSlotId) {\r\n    if (!adSlotId) {\r\n      throw new Error('isBlocked must be called with an adSlotId!');\r\n    }\r\n    let isBlocked = false;\r\n    for (const adSlotKey of this.dependencyMap.keys()) {\r\n      const adSlot = this.dependencyMap.get(adSlotKey);\r\n      for (const adSlotRule of adSlot.rules) {\r\n        // Found rule specific to our target\r\n        if (adSlotRule.avoid === adSlotId) {\r\n          const parentResolvedWith = adSlot.resolvedWith;\r\n          // Fail fast: parent is not resolved yet - unknown returned size.\r\n          if (!parentResolvedWith) {\r\n            isBlocked = true;\r\n            this.deferredSlots.add(adSlotId);\r\n          }\r\n          if (adSlotRule.onsize.split(',').find(sizeString => { // eslint-disable-line\r\n            const size = sizeString.split('x').map(numberStr => parseInt(numberStr, 10));\r\n            return this.arraysEqual(size, parentResolvedWith);\r\n          })) {\r\n            // Block found\r\n            this.deferredSlots.add(adSlotId);\r\n            isBlocked = true;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return isBlocked;\r\n  }\r\n\r\n  isBlocking(adSlotId) {\r\n    if (!adSlotId) {\r\n      throw new Error('isBlocking must be called with an adSlotId!');\r\n    }\r\n    let isBlocking = false;\r\n    for (const adSlotKey of this.dependencyMap.keys()) {\r\n      if (adSlotKey === adSlotId) {\r\n        isBlocking = true;\r\n      }\r\n    }\r\n    return isBlocking;\r\n  }\r\n\r\n  /**\r\n   * Gets an array of adSlot Ids for a given adSlotId, that are dependent on (blocked by)\r\n   * @param {String} adSlotId - the blocking slot id\r\n   * @return {Array} an array of blocked slot, that has a dependency on the given slot\r\n   */\r\n  getBlockedSlotsIds(adSlotId) {\r\n    let result;\r\n    if (this.dependencyMap.has(adSlotId)) {\r\n      result = Array.from(this.dependencyMap.get(adSlotId).rules.map(adSlot => adSlot.avoid));\r\n    }\r\n    return result || [];\r\n  }\r\n\r\n  arraysEqual(a, b) {\r\n    if (a === b) return true;\r\n    if (a === null || b === null) return false;\r\n    if (a.length !== b.length) return false;\r\n    for (let i = 0; i < a.length; ++i) {\r\n      if (a[i] !== b[i]) return false;\r\n    }\r\n    return true;\r\n  }\r\n}\r\nConflictResolver.EMPTY_SIZE = [];\r\nexport default ConflictResolver;\r\n","/* global googletag */\r\nimport { adTypes } from '../objects/adManager';\r\nimport globalConfig from '../globalConfig';\r\nimport { arraysEqual } from '../utils/arrays';\r\n\r\nconst hiddenClass = globalConfig.site.indexOf('mouse') > -1 ? 'u-is-hidden' : 'h-hidden';\r\n\r\nexport default class adSlot {\r\n\r\n  constructor(adSlotConfig) {\r\n    this.config = Object.assign({}, adSlotConfig);\r\n\r\n    // Part I : Markup configuration - passed from AdManager\r\n    this.id = this.config.id;\r\n    if (!this.config.id) {\r\n      throw new Error('an adSlot requires an id!');\r\n    }\r\n    this.target = this.config.target;\r\n    this.type = this.config.type;\r\n    this.responsive = this.config.responsive;\r\n    this.fluid = this.config.fluid;\r\n    this.user = this.config.user;\r\n    this.adManager = this.config.adManager;\r\n    this.htmlElement = this.config.htmlElement;\r\n    this.priority = this.config.priority;\r\n    this.deferredSlot = this.config.deferredSlot;\r\n\r\n    // Part II : Global, general ad configuration - passed from AdManager\r\n    this.department = this.config.department;\r\n    this.network = this.config.network;\r\n    this.adUnitBase = this.config.adUnitBase;\r\n\r\n    // Part III : ad specific configuration - passed from globalConfig.adSlotConfig\r\n    this.adSizeMapping = this.config.adSizeMapping;\r\n    this.responsiveAdSizeMapping = this.config.responsiveAdSizeMapping;\r\n    this.blacklistReferrers = this.config.blacklistReferrers ?\r\n      this.config.blacklistReferrers.split(',') : [];\r\n    this.whitelistReferrers = this.config.whitelistReferrers ?\r\n      this.config.whitelistReferrers.split(',') : [];\r\n\r\n\r\n    // Part IV : Runtime configuration - calculated data - only present in runtime\r\n    this.lastResolvedSize = undefined; // Initialized in 'slotRenderEnded' callback\r\n    this.lastResolvedWithBreakpoint = undefined; // Initialized in 'slotRenderEnded' callback\r\n    this.slot = undefined; // Holds a googletag.Slot object\r\n    // [https://developers.google.com/doubleclick-gpt/reference#googletag.Slot]\r\n    try {\r\n      if (!this.deferredSlot) {\r\n        this.slot = this.defineSlot();\r\n      }\r\n    }\r\n    catch (err) {\r\n      console.error(err); // eslint-disable-line no-console\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Checks whether this adSlot is an 'Out-of-page' slot or not.\r\n   * An Out-of-page slot is a slot that is not embedded in the page 'normally'.\r\n   * @returns {boolean} true iff this adSlot is one of the predefined 'out-of-page' slots.\r\n   */\r\n  isOutOfPage() {\r\n    if (typeof this.type !== 'string') {\r\n      throw new Error('An adSlot cannot by typeless!', this);\r\n    }\r\n    if (this.isMobile() === true) {\r\n      return false;\r\n    }\r\n    switch (this.type) {\r\n      case adTypes.maavaron: return false;\r\n      case adTypes.popunder: return true;\r\n      case adTypes.talkback: return false;\r\n      case adTypes.regular: return false;\r\n      default: return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Checks whether this adSlot is a 'maavaron' slot or not.\r\n   * An Out-of-page slot is a slot that is not embedded in the page 'normally'.\r\n   * @returns {boolean} true iff this adSlot is one of the predefined 'out-of-page' slots.\r\n   */\r\n  isMaavaron() {\r\n    if (typeof this.type !== 'string') {\r\n      throw new Error('An adSlot cannot by typeless!', this);\r\n    }\r\n    if (this.isMobile() === true) {\r\n      return false;\r\n    }\r\n    switch (this.type) {\r\n      case adTypes.maavaron: return false;\r\n      default: return false;\r\n    }\r\n  }\r\n\r\n  isMobile() {\r\n    return (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i\r\n      .test(window.navigator.userAgent || ''));\r\n  }\r\n  /**\r\n   * Checks whether or not this adSlot has a non-empty whitelist, and if so, that the current\r\n   * referrer appears in the whitelist.\r\n   * Should return false iff there is a whitelist for the current adSlot, but the referrer is not\r\n   * mentioned in the whitelist.\r\n   * @returns {boolean} true iff the ad can be displayed.\r\n   */\r\n  isWhitelisted() {\r\n    let whitelisted = false;\r\n    if (this.whitelistReferrers.length !== 0) {\r\n      for (const referrer of this.whitelistReferrers) {\r\n        if (globalConfig.referrer.indexOf(referrer) > -1) {\r\n          whitelisted = true;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    else {\r\n      whitelisted = true;\r\n    }\r\n    return whitelisted;\r\n  }\r\n\r\n  /**\r\n   * Checks whether or not this adSlot has a non-empty blacklist, and if so, that the current\r\n   * referrer does not appear in the blacklist.\r\n   * Should return true iff there is a blacklist for the current adSlot, and the referrer is\r\n   * mentioned in the blacklist - to indicate that the adSlot is 'blocked'.\r\n   * @returns {boolean} true iff the ad cannot be displayed.\r\n   */\r\n  isBlacklisted() {\r\n    let blacklisted = false;\r\n    if (this.blacklistReferrers.length !== 0) {\r\n      for (const referrer of this.blacklistReferrers) {\r\n        if (globalConfig.referrer.indexOf(referrer) > -1) {\r\n          blacklisted = true;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    return blacklisted;\r\n  }\r\n\r\n\r\n  /**\r\n   * Shows the current adSlot.\r\n   * It assumes a markup is available for this slot (any tag with an id attribute = this.id)\r\n   */\r\n  show() {\r\n    if (!this.shown === true) {\r\n      this.shown = true; // Ensure show will be called once per adSlot\r\n      googletag.cmd.push(() => {\r\n        if (this.deferredSlot) {\r\n          this.slot = this.defineSlot();\r\n        }\r\n        // console.log('calling show for slot',this.id,' called @',window.performance.now());\r\n        document.getElementById(this.id).classList.remove(hiddenClass);\r\n        googletag.display(this.id);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Shows the current adSlot.\r\n   * It assumes a markup is available for this slot (any tag with an id attribute = this.id)\r\n   */\r\n  hide() {\r\n    googletag.cmd.push(() => {\r\n      document.getElementById(this.id).classList.add(hiddenClass);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Initializes page-level slot definition for the current slot\r\n   * @return {Slot} slot - the Google Slot that was defined from this AdSlot configuration\r\n   */\r\n  defineSlot() {\r\n    if (this.isMaavaron()) {\r\n      const maavaronSlot = this.defineMaavaron();\r\n      if (this.adManager.shouldSendRequestToDfp(this)) {\r\n        if (!this.shown) {\r\n          this.shown = true; // Ensure show will be called once\r\n          maavaronSlot.display();\r\n        }\r\n      }\r\n      return maavaronSlot;\r\n    }\r\n    const googletag = window.googletag;\r\n    const pubads = googletag.pubads();\r\n    const args = [];\r\n    const defineFn = this.isOutOfPage() ? googletag.defineOutOfPageSlot : googletag.defineSlot;\r\n    // 3 or 2 params according to the function that we want to activate.\r\n    args.push(this.getPath());\r\n    if (this.isOutOfPage() === false) {\r\n      if (this.fluid) {\r\n        args.push('fluid');\r\n      }\r\n      else {\r\n        args.push(this.adSizeMapping);\r\n      }\r\n    }\r\n    args.push(this.id);\r\n    let slot = defineFn.apply(defineFn, args);\r\n    if (slot) {\r\n      // Responsive size Mapping\r\n      if (this.responsive) {\r\n        let responsiveSlotSizeMapping = googletag.sizeMapping();\r\n        const breakpoints = globalConfig.breakpointsConfig.breakpoints;\r\n        const keys = Object.keys(this.responsiveAdSizeMapping);\r\n        for (const key of keys) { // ['xxs','xs',...]\r\n          responsiveSlotSizeMapping.addSize(\r\n            [breakpoints[key], 100], // 100 is a default height, since it is height agnostic\r\n            !arraysEqual(this.responsiveAdSizeMapping[key], [[0, 0]]) ?\r\n              this.responsiveAdSizeMapping[key] : []);\r\n        }\r\n        responsiveSlotSizeMapping = responsiveSlotSizeMapping.build();\r\n        slot = slot.defineSizeMapping(responsiveSlotSizeMapping);\r\n      }\r\n      slot = slot.addService(pubads);\r\n      if (this.isOutOfPage() === false) {\r\n        slot.setCollapseEmptyDiv(true);\r\n      }\r\n    }\r\n    return slot;\r\n  }\r\n\r\n  /**\r\n   * Returns the current path calculated for the adSlot\r\n   * @returns {String} a formatted string that represent the path for the slot definition\r\n   */\r\n  getPath() {\r\n    /* eslint-disable no-shadow */\r\n    let path = globalConfig.path || [];\r\n    path = path.filter(path => path !== '.');\r\n    path = path.map(section => `${this.id}${this.department}${section}`).join('/');\r\n    // If a path exist, it will be preceded with a forward slash\r\n    path = path && this.config.department !== '_homepage' ? `/${path}` : '';\r\n    /* eslint-enable no-shadow */\r\n    const calculatedPath = `/${this.config.network}/${this.config.adUnitBase}/${this.id}/${this.id}${this.department}${path}`; // eslint-disable-line max-len\r\n    return calculatedPath.toLowerCase();\r\n  }\r\n\r\n  /* eslint-disable */\r\n  slotRendered(event) {\r\n    const id = event.slot.getAdUnitPath().split('/')[3]; // Convention: [0]/[1]network/[2]base/[3]id\r\n    const isEmpty = event.isEmpty; // Did the ad return as empty?\r\n    const resolvedSize = event.size; // What 'creative' size did the ad return with?\r\n    // Empty or onload callback should be called next?\r\n  }\r\n  /* eslint-enable */\r\n\r\n  /**\r\n   * Refresh this adSlot\r\n   */\r\n  refresh() {\r\n    googletag.cmd.push(() => {\r\n      googletag.pubads().refresh([this.slot]);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Shows 'Maavaron' type adSlot using Passback definition\r\n   * @return {Slot} slot - the Google Slot that was defined for Maavaron\r\n   */\r\n  defineMaavaron() {\r\n    if (!document.referrer.match('loc.haaretz')) {\r\n      const adUnitMaavaronPath = this.getPath();\r\n      const adUnitMaavaronSize = [\r\n        [2, 1],\r\n      ];\r\n      const slot = googletag.pubads().definePassback(adUnitMaavaronPath, adUnitMaavaronSize)\r\n        .setTargeting('UserType', [this.user.type])\r\n        .setTargeting('age', [this.user.age])\r\n        .setTargeting('urgdr', [this.user.gender])\r\n        .setTargeting('articleId', [globalConfig.articleId])\r\n        .setTargeting('stg', [globalConfig.environment]);\r\n      return slot;\r\n    }\r\n    return null;\r\n  }\r\n}\r\n","/* global googletag */\nimport User from '../objects/user';\nimport ConflictResolver from '../objects/conflictResolver';\nimport AdSlot from '../objects/adSlot';\nimport { getBreakpoint, getBreakpointName } from '../utils/breakpoints';\nimport { arraysEqual } from '../utils/arrays';\n\n// There are a total of 7 adTargets:\n// \"all\",\"nonPaying\",\"anonymous\",\"registered\",\"paying\",\"digitalOnly\" and \"digitalAndPrint\"\nexport const adPriorities = {\n  high: 'high',\n  normal: 'normal',\n  low: 'low',\n};\n\nexport const adTargets = {\n  all: 'all',\n  nonPaying: 'nonPaying',\n  anonymous: 'anonymous',\n  registered: 'registered',\n  paying: 'paying',\n  digitalOnly: 'digitalOnly',\n  digitalAndPrint: 'digitalAndPrint',\n};\n\n// There are a total of 3 userTypes: \"anonymous\", \"registered\" and \"payer\"\nexport const userTypes = {\n  anonymous: 'anonymous',\n  registered: 'registered',\n  payer: 'payer',\n};\n\nexport const adTypes = {\n  maavaron: '.maavaron',\n  popunder: '.popunder',\n  talkback: '.talkback',\n  regular: '',\n};\n\n\nexport default class AdManager {\n\n  constructor(config) {\n    this.config = Object.assign({}, config);\n    this.user = new User(config);\n    this.conflictResolver = new ConflictResolver(config.conflictManagementConfig);\n    /**\n     * Avoid race conditions by making sure to respect the usual timing of GPT.\n     * This DFP implementation uses Enable-Define-Display:\n     * Define page-level settings\n     * enableServices()\n     * Define slots\n     * Display slots\n     */\n    try {\n      googletag.cmd.push(() => {\n        this.initGoogleTargetingParams(); //  Define page-level settings\n        this.initGoogleGlobalSettings();  //  enableServices()\n        this.initSlotRenderedCallback();  //  Define callbacks\n      });\n      // Mouse special treatment to base path on mobile breakpoints\n      const currentBreakpointName = getBreakpointName(getBreakpoint());\n      if (this.config.adManagerConfig.adUnitBase.indexOf('mouse.co.il') > -1 &&\n        currentBreakpointName.indexOf('xs') > -1) {\n        this.config.adManagerConfig.adUnitBase = 'mouse.co.il.mobile_web';\n      }\n      // Holds adSlot objects as soon as possible.\n      googletag.cmd.push(() => {\n        this.adSlots = this.initAdSlots(config.adSlotConfig, adPriorities.high);\n      });\n      // Once DOM ready, add more adSlots.\n      const onDomLoaded = () => { // eslint-disable-line no-inner-declarations\n        try {\n          googletag.cmd.push(() => {\n            this.adSlots = this.initAdSlots(config.adSlotConfig, adPriorities.high);\n            googletag.cmd.push(() => {\n              this.adSlots = this.initAdSlots(config.adSlotConfig, adPriorities.normal);\n            });\n          });\n        }\n        catch (err) {\n          console.log(err); // eslint-disable-line no-console\n        }\n      };\n      // Once window was loaded, add the rest of the adSlots.\n      const onWindowLoaded = () => { // eslint-disable-line no-inner-declarations\n        googletag.cmd.push(() => {\n          this.adSlots = this.initAdSlots(config.adSlotConfig, adPriorities.low);\n        });\n      };\n      switch (document.readyState) {\n        case 'loading':\n          document.addEventListener('DOMContentLoaded', onDomLoaded);\n          window.addEventListener('load', onWindowLoaded);\n          break;\n        case 'interactive':\n          onDomLoaded();\n          window.addEventListener('load', onWindowLoaded);\n          break;\n        default: // 'complete' - no need for event listeners.\n          onDomLoaded();\n          onWindowLoaded();\n      }\n    }\n    catch (err) {\n      console.error(err); // eslint-disable-line no-console\n    }\n  }\n\n  /**\n   * Shows all of the adSlots that can be displayed.\n   */\n  showAllSlots() {\n    for (const adSlotKey of this.adSlots.keys()) {\n      const adSlot = this.adSlots.get(adSlotKey);\n      if (adSlot.type !== adTypes.talkback && this.shouldSendRequestToDfp(adSlot)) {\n        adSlot.show();\n      }\n    }\n  }\n\n  /**\n   * Gets all adSlots that has a certain priority\n   * @param {adPriority} priority - the priority of the ad {high, normal, low}\n   * @return {Array<AdSlot>} adSlots - all of the defined adSlots that matches\n   * the given priority\n   */\n  getAdSlotsByPriority(priority) {\n    function priorityFilter(adSlot) {\n      return adSlot.priority === priority;\n    }\n    return Array.from(this.adSlots.values()).filter(priorityFilter);\n  }\n\n  showAllDeferredSlots() {\n    for (const deferredSlotId of this.conflictResolver.deferredSlots) {\n      if (this.adSlots.has(deferredSlotId)) {\n        if (!this.conflictResolver.isBlocked(deferredSlotId)) {\n          const deferredAdSlot = this.adSlots.get(deferredSlotId);\n          if (this.shouldSendRequestToDfp(deferredAdSlot)) {\n            deferredAdSlot.show();\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Refreshes all responsive adSlots\n   */\n  refreshAllSlots() {\n    const currentBreakpoint = getBreakpoint();\n    for (const adSlotKey of this.adSlots.keys()) {\n      const adSlot = this.adSlots.get(adSlotKey);\n      if (adSlot.responsive && adSlot.type !== adTypes.maavaron) {\n        if (adSlot.lastResolvedWithBreakpoint !== currentBreakpoint &&\n          this.shouldSendRequestToDfp(adSlot)) {\n          // console.log(`calling refresh for adSlot: ${adSlot.id}`);\n          adSlot.refresh();\n        }\n        else {\n          adSlot.hide();\n        }\n      }\n    }\n  }\n\n  /**\n   * Refreshes all adSlots\n   */\n  refreshAllSlotsInPage() {\n    for (const adSlotKey of this.adSlots.keys()) {\n      const adSlot = this.adSlots.get(adSlotKey);\n      if (this.shouldSendRequestToDfp(adSlot)) {\n        // console.log(`calling refresh for adSlot: ${adSlot.id}`);\n        adSlot.refresh();\n      }\n      else {\n        adSlot.hide();\n      }\n    }\n  }\n\n  /**\n   * Refreshes adSlot\n   */\n\n  refreshSlot(adUnitName) {\n    const adSlot = this.adSlots.get(adUnitName);\n    if (this.shouldSendRequestToDfp(adSlot)) {\n      // console.log(`calling refresh for adSlot: ${adSlot.id}`);\n      adSlot.refresh();\n    }\n    else {\n      adSlot.hide();\n    }\n  }\n\n\n      /**\n   * Initializes adSlots based on the currently found slot markup (HTML page specific),\n   * and the predefined configuration for the slots.\n   * @param {Object} adSlotConfig - the AdSlots configuration object (see: globalConfig)\n   * @param {String} filteredPriority - filters out all adSlots that does not match\n   * a given adPriority. This is used to cherry pick the init process of ads.\n   * @returns {Map}\n   */\n  initAdSlots(adSlotConfig, filteredPriority) {\n    const adSlots = new Map(this.adSlots);\n    let adSlotPlaceholders = Array.from(document.getElementsByClassName('js-dfp-ad'));\n    adSlotPlaceholders = adSlotPlaceholders.filter(node => node.id); // only nodes with an id\n    const adSlotNodeSet = new Set();\n    adSlotPlaceholders = Array.prototype.filter.call(adSlotPlaceholders, node => {\n      if (adSlotNodeSet.has(node.id) === false) { // first occurrence of Node\n        adSlotNodeSet.add(node.id);\n        return true;\n      }\n      return false;\n    });\n    // adSlotPlaceholders = adSlotPlaceholders.sort((a, b) => a.offsetTop - b.offsetTop);\n    adSlotPlaceholders.forEach(adSlot => {\n      const adSlotPriority = adSlotConfig[adSlot.id] ?\n      adSlotConfig[adSlot.id].priority || adPriorities.normal : undefined;\n      if (adSlotConfig[adSlot.id] && adSlots.has(adSlot.id) === false &&\n        adSlotPriority === filteredPriority) {\n        // The markup has a matching configuration from adSlotConfig AND was not already defined\n        try {\n          // adSlotConfig is built from globalConfig, but can be overridden by markup\n          const computedAdSlotConfig = Object.assign({}, adSlotConfig[adSlot.id], {\n            id: adSlot.id,\n            target: adSlot.attributes['data-audtarget'] ?\n              adSlot.attributes['data-audtarget'].value : adTargets.all,\n            type: this.getAdType(adSlot.id),\n            responsive: adSlotConfig[adSlot.id].responsive,\n            fluid: adSlotConfig[adSlot.id].fluid || false,\n            user: this.user,\n            adManager: this,\n            htmlElement: adSlot,\n            department: this.config.department,\n            network: this.config.adManagerConfig.network,\n            adUnitBase: this.config.adManagerConfig.adUnitBase,\n            deferredSlot: this.conflictResolver.isBlocked(adSlot.id),\n            priority: adSlotPriority,\n          });\n          const adSlotInstance = new AdSlot(computedAdSlotConfig);\n          adSlots.set(adSlot.id, adSlotInstance);\n          if (adSlotInstance.type !== adTypes.talkback &&\n            adSlotInstance.priority === adPriorities.high &&\n            this.shouldSendRequestToDfp(adSlotInstance)) {\n            /*\n             console.log('calling show for high priority slot', adSlotInstance.id, ' called @',\n             window.performance.now());\n             */\n            adSlotInstance.show();\n          }\n        }\n        catch (err) {\n          console.error(err); // eslint-disable-line no-console\n        }\n      }\n    });\n    return adSlots;\n  }\n\n  isPriority(adSlotId) {\n    return (typeof adSlotId === 'string' &&\n    (adSlotId.indexOf('plazma') > 0 ||\n    adSlotId.indexOf('maavaron') > 0 ||\n    adSlotId.indexOf('popunder') > 0));\n  }\n\n  /**\n   * Returns the adType based on the adSlot name.\n   * @param {String} adSlotId - the adSlot's identifier.\n   * @returns {*} enumerated export 'adTypes'\n   */\n  getAdType(adSlotId) {\n    if (!adSlotId) {\n      throw new Error('Missing argument: a call to getAdType must have an adSlotId');\n    }\n    if (adSlotId.indexOf(adTypes.maavaron) > -1) return adTypes.maavaron;\n    if (adSlotId.indexOf(adTypes.popunder) > -1) return adTypes.popunder;\n    if (adSlotId.indexOf(adTypes.talkback) > -1) return adTypes.talkback;\n    return adTypes.regular;\n  }\n\n  /**\n   * @param {object} adSlot the AdSlot\n   * @returns {boolean|*}\n   */\n  shouldSendRequestToDfp(adSlot) {\n    // Conflict management check\n    return this.conflictResolver.isBlocked(adSlot.id) === false &&\n      // Valid Referrer check\n      adSlot.isWhitelisted() &&\n      // Not in referrer Blacklist\n      adSlot.isBlacklisted() === false &&\n      this.shouldDisplayAdAfterAdBlockRemoval(adSlot) &&\n      // Responsive: breakpoint contains ad?\n      this.doesBreakpointContainAd(adSlot) &&\n      // Targeting check (userType vs. slotTargeting)\n      this.doesUserTypeMatchBannerTargeting(adSlot) &&\n      // Impressions Manager check (limits number of impressions per slot)\n      this.user.impressionManager.reachedQuota(adSlot.id) === false;\n  }\n\n  shouldDisplayAdAfterAdBlockRemoval(adSlot) {\n    return !(this.config.adBlockRemoved === true &&\n    (adSlot.type === adTypes.maavaron ||\n    adSlot.type === adTypes.popunder));\n  }\n\n  /**\n   * Check whether or not an ad slot should appear for the current user type\n   * @param {String} adSlotOrTarget the adSlot to check or the target as a string\n   * @returns {boolean} true iff the slot should appear for the user type\n   */\n  doesUserTypeMatchBannerTargeting(adSlotOrTarget) {\n    const userType = this.user.type;\n    const adTarget = typeof adSlotOrTarget === 'string' ? adSlotOrTarget : adSlotOrTarget.target;\n\n    switch (adTarget) {\n      case adTargets.all : return true;\n      case adTargets.nonPaying :\n        return userType === userTypes.anonymous || userType === userTypes.registered;\n      case adTargets.anonymous : return userType === userTypes.anonymous;\n      case adTargets.registered : return userType === userTypes.registered;\n      case adTargets.paying : return userType === userTypes.payer;\n      case adTargets.digitalOnly : return userType === userTypes.payer;\n      case adTargets.digitalAndPrint : return userType === userTypes.payer;\n      default: return false;\n    }\n  }\n\n  /**\n   * Report to the AdManager that a breakpoint has been switched (passed from one break to\n   * another). Should there be a responsive slot with a\n   * @param {Breakpoint} breakpoint - the breakpoint that is currently being displayed\n   * @returns {Integer} affected - the number of adSlots affected by the change\n   */\n  switchedToBreakpoint(breakpoint) {\n    if (!breakpoint) {\n      throw new Error('Missing argument: a call to switchedToBreakpoint must have an breakpoint');\n    }\n    let count = 0;\n    for (const adSlotKey of this.adSlots.keys()) {\n      const adSlot = this.adSlots.get(adSlotKey);\n      if (adSlot.responsive === true && adSlot.lastResolvedWithBreakpoint) {\n        if (adSlot.lastResolvedWithBreakpoint !== breakpoint) {\n          adSlot.refresh();\n          count++;\n        }\n      }\n    }\n    return count;\n  }\n\n  /**\n   * Checks whether an adSlot is defined for a given breakpoint (Default: current breakpoint)\n   * @param {AdSlot} adSlot - the adSlot to check.\n   * @param {Breakpoint} [breakpoint=currentBreakpoint] - the breakpoint to check this ad in.\n   * @returns {boolean} true iff the adSlot is defined for the given breakpoint.\n   */\n  doesBreakpointContainAd(adSlot, breakpoint = getBreakpoint()) {\n    if (!adSlot) {\n      throw new Error('Missing argument: a call to doesBreakpointContainAd must have an adSlot');\n    }\n    let containsBreakpoint = true;\n    if (adSlot.responsive === true) {\n      const mapping = adSlot.responsiveAdSizeMapping[getBreakpointName(breakpoint)];\n      if (Array.isArray(mapping) === false) {\n        throw new Error(`Invalid argument: breakpoint:${breakpoint} doesn't exist!`, this);\n      }\n      containsBreakpoint = mapping.length > 0 && !arraysEqual(mapping, [[0, 0]]);\n    }\n    return containsBreakpoint;\n  }\n\n  /**\n   * Initializes the callback from the 'slotRenderEnded' event for each slot\n   */\n  initSlotRenderedCallback() {\n    if (window.googletag && window.googletag.apiReady) {\n      const pubads = window.googletag.pubads();\n      pubads.addEventListener('slotRenderEnded', event => {\n        const id = event.slot.getAdUnitPath().split('/')[3];\n        const isEmpty = event.isEmpty;\n        const resolvedSize = event.size;\n        // console.log('slotRenderEnded for slot',id,' called @',window.performance.now());\n        if (this.adSlots.has(id)) {\n          const adSlot = this.adSlots.get(id);\n          adSlot.lastResolvedSize = resolvedSize;\n          adSlot.lastResolvedWithBreakpoint = getBreakpoint();\n          if (isEmpty) {\n            adSlot.lastResolvedSize = ConflictResolver.EMPTY_SIZE;\n            adSlot.hide();\n            this.releaseSlotDependencies(adSlot);\n          }\n          else {\n            this.user.impressionManager.registerImpression(`${adSlot.id}${this.config.department}`);\n            this.user.impressionManager.registerImpression(`${adSlot.id}_all`);\n            this.releaseSlotDependencies(adSlot, adSlot.lastResolvedSize);\n          }\n        }\n        else {\n          /*\n           console.error(`Cannot find an adSlot with id: ${id} - Ad Unit path is\n           ${event.slot.getAdUnitPath()}`);\n           */\n        }\n      });\n    }\n    else {\n      throw new Error('googletag api was not ready when \\'initSlotRenderedCallback\\' was called!');\n    }\n  }\n\n  releaseSlotDependencies(adSlot) {\n    try {\n      const id = adSlot.id;\n      this.conflictResolver.updateResolvedSlot(id, adSlot.lastResolvedSize);\n      if (this.conflictResolver.isBlocking(id)) {\n        // Hide all blocked adSlots\n        for (const blockedSlot of this.conflictResolver.getBlockedSlotsIds(id)) {\n          if (this.conflictResolver.isBlocked(blockedSlot)) {\n            if (this.adSlots.has(blockedSlot)) {\n              this.adSlots.get(blockedSlot).hide();\n            }\n          }\n        }\n        // Show the non blocked\n        for (const deferredSlotKey of this.conflictResolver.deferredSlots.keys()) {\n          const deferredAdSlot = this.adSlots.get(deferredSlotKey);\n          if (deferredAdSlot && this.shouldSendRequestToDfp(deferredAdSlot)) {\n            this.conflictResolver.deferredSlots.delete(deferredSlotKey);\n            if (deferredAdSlot.deferredSlot) {\n              deferredAdSlot.defineSlot();\n              deferredAdSlot.deferredSlot = false;\n            }\n            deferredAdSlot.show();\n          }\n        }\n      }\n    }\n    catch (err) {\n      /* eslint-disable no-console*/\n      console.error(`Cannot updateSlotDependencies for adSlot: ${adSlot.id}`);\n      /* eslint-enable no-console*/\n    }\n  }\n\n  /**\n   * Initializes page-level targeting params.\n   */\n  initGoogleTargetingParams() {\n    if (window.googletag && window.googletag.apiReady) {\n      // Returns a reference to the pubads service.\n      const pubads = googletag.pubads();\n      // Environment targeting (dev, test, prod)\n      if (this.config.environment) {\n        pubads.setTargeting('stg', [this.config.environment]);\n      }\n\n      // User targeting\n      if (this.user.type) {\n        pubads.setTargeting('UserType', [this.user.type]);\n      }\n      if (this.user.age) {\n        pubads.setTargeting('age', [this.user.age]);\n      }\n      if (this.user.gender) {\n        pubads.setTargeting('urgdr', [this.user.gender]);\n      }\n\n      // Context targeting\n      if (this.config.articleId) {\n        pubads.setTargeting('articleId', [this.config.articleId]);\n      }\n      if (this.config.gStatCampaignNumber && this.config.gStatCampaignNumber !== -1) {\n        pubads.setTargeting('gstat_campaign_id', [this.config.gStatCampaignNumber]);\n      }\n      if (this.config.isWriterAlerts) {\n        pubads.setTargeting('WriterAlerts', ['true']);\n      }\n      // UTM targeting\n      /* eslint-disable no-underscore-dangle */\n      if (this.config.utm_.content) {\n        pubads.setTargeting('utm_content', [this.config.utm_.content]);\n      }\n      if (this.config.utm_.source) {\n        pubads.setTargeting('utm_source', [this.config.utm_.source]);\n      }\n      if (this.config.utm_.medium) {\n        pubads.setTargeting('utm_medium', [this.config.utm_.medium]);\n      }\n      if (this.config.utm_.campaign) {\n        pubads.setTargeting('utm_campaign', [this.config.utm_.campaign]);\n      }\n      /* eslint-enable no-underscore-dangle */\n      // AdBlock removal\n      if (this.config.adBlockRemoved) {\n        pubads.setTargeting('adblock_removed', [this.config.adBlockRemoved]);\n      }\n      // University targeting - triggered via cookie\n      if (this.config.wifiLocation) {\n        pubads.setTargeting('wifi', [this.config.wifiLocation]);\n      }\n\n      // Ads Centering\n      pubads.setCentering(true);\n    }\n    else {\n      throw new Error('googletag api was not ready when \\'initGoogleTargetingParams\\' was called!');\n    }\n  }\n\n  /**\n   * Initializes googletag services.\n   */\n  initGoogleGlobalSettings() {\n    if (window.googletag && window.googletag.apiReady) {\n      const googleGlobalSettings = this.config.googleGlobalSettings;\n      // Enable GET parameter overrides\n      if (window.location.search) {\n        const search = window.location.search;\n        if (search.indexOf('sraon') > 0) {\n          console.log('Single Request Mode: active'); // eslint-disable-line no-console\n          googleGlobalSettings.enableSingleRequest = true;\n        }\n        else if (search.indexOf('sraoff') > 0) {\n          console.log('Single Request Mode: disabled');// eslint-disable-line no-console\n          googleGlobalSettings.enableSingleRequest = false;\n        }\n        if (search.indexOf('asyncrenderingon') > 0) {\n          console.log('Async rendering mode: active'); // eslint-disable-line no-console\n          googleGlobalSettings.enableAsyncRendering = true;\n        }\n        else if (search.indexOf('asyncrenderingonoff') > 0) {\n          console.log('Sync rendering mode: active');// eslint-disable-line no-console\n          googleGlobalSettings.enableAsyncRendering = false;\n        }\n      }\n      // Google services activation\n      if (googleGlobalSettings.enableSingleRequest === true) {\n        googletag.pubads().enableSingleRequest();\n      }\n      if (googleGlobalSettings.enableAsyncRendering === true) {\n        googletag.pubads().enableAsyncRendering();\n      }\n      else {\n        googletag.pubads().enableSyncRendering();\n      }\n      // Enables all GPT services that have been defined for ad slots on the page.\n      googletag.enableServices();\n    }\n    else {\n      throw new Error('googletag api wasn\\'t ready when \\'initGoogleGlobalSettings\\' was called!');\n    }\n  }\n}\n","/* globals googletag */\r\nimport AdManager from '../src/objects/adManager';\r\nimport globalConfig from './globalConfig';\r\nimport { getBreakpoint, debounce } from '../src/utils/breakpoints';\r\n\r\nconst defaultConfig = globalConfig || {};\r\nconst resizeTimeout = 250;\r\n\r\nexport default class DFP {\r\n\r\n  constructor(config) {\r\n    this.config = Object.assign({}, defaultConfig, config);\r\n    this.wasInitialized = false;\r\n    this.initStarted = false;\r\n    this.breakpoint = getBreakpoint();\r\n    this.initWindowResizeListener();\r\n  }\r\n\r\n  /**\r\n   * This part of the object's construction is dependent on the call to 'init'\r\n   */\r\n  resumeInit() {\r\n    try {\r\n      this.adManager = this.adManager || new AdManager(this.config);\r\n    }\r\n    catch (err) {\r\n      console.error(err); // eslint-disable-line no-console\r\n    }\r\n  }\r\n\r\n  /**\r\n   * initializes the 'googletag' global namespace and add the\r\n   * google publish tags library to the page\r\n   * @returns {Promise} that resolves to true once the googletag api is ready to use\r\n   * (googletag.apiReady = true)\r\n   */\r\n  initGoogleTag() {\r\n    const dfpThis = this;\r\n    return new Promise((resolve, reject) => {\r\n      if (dfpThis.initStarted === true) {\r\n        googletag.cmd.push(() => {\r\n          dfpThis.wasInitialized = true;\r\n          resolve(dfpThis);\r\n        });\r\n      }\r\n      else {\r\n        dfpThis.initStarted = true;\r\n        // set up a place holder for the gpt code downloaded from google\r\n        window.googletag = window.googletag || {};\r\n\r\n        // this is a command queue used by GPT any methods added to it will be\r\n        // executed when GPT code is available, if GPT is already available they\r\n        // will be executed immediately\r\n        window.googletag.cmd = window.googletag.cmd || [];\r\n        // load google tag services JavaScript\r\n        (() => {\r\n          const tag = window.document.createElement('script');\r\n          tag.async = true;\r\n          tag.type = 'text/javascript';\r\n          // Supports both https and http\r\n          tag.setAttribute('src', '//www.googletagservices.com/tag/js/gpt.js');\r\n          const node = window.document.getElementsByTagName('script')[0];\r\n          tag.addEventListener('load', () => {\r\n            dfpThis.resumeInit();\r\n            googletag.cmd.push(() => {\r\n              dfpThis.wasInitialized = true;\r\n              resolve(this);\r\n            });\r\n          });\r\n          tag.addEventListener('error', (error) => {\r\n            dfpThis.wasInitialized = false;\r\n            reject(error);\r\n          });\r\n          node.parentNode.insertBefore(tag, node);\r\n        })();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   *  Returns true iff googletag was properly initialized on the page\r\n   * @returns {boolean}\r\n   */\r\n  isGoogleTagReady() {\r\n    if (this.wasInitialized === true || (window.googletag && window.googletag.apiReady)) {\r\n      this.wasInitialized = true;\r\n    }\r\n    return this.wasInitialized;\r\n  }\r\n\r\n  /**\r\n   * Initializes the window resize listener to support responsive ad refreshes\r\n   */\r\n  initWindowResizeListener() {\r\n    const dfpThis = this;\r\n    function onResize() {\r\n      const currentBreakpoint = getBreakpoint();\r\n      if (dfpThis.breakpoint !== currentBreakpoint) {\r\n        dfpThis.breakpoint = currentBreakpoint;\r\n        if (dfpThis.adManager) {\r\n          dfpThis.adManager.refreshAllSlots();\r\n        }\r\n        else {\r\n          throw new Error('initWindowResizeListener error - adManager instance is not available');\r\n        }\r\n      }\r\n    }\r\n    const debouncedFunction = debounce(onResize, resizeTimeout);\r\n    window.onresize = debouncedFunction;\r\n  }\r\n}\r\n","import DFP from './dfp';\r\nimport globalConfig from './globalConfig';\r\nimport { version as v } from './../package.json';\r\n// const pkg = require('./../package.json');\r\n\r\n// DFP version is based on the package.json\r\nDFP.version = v || 'VERSION';\r\n\r\n/*\r\n // Only for development mode\r\n if ( process.env.NODE_ENV !== 'production' ) {\r\n DFP.dev = '123';\r\n }\r\n */\r\n\r\nexport const config = globalConfig;\r\nexport const version = DFP.version;\r\nexport default DFP;\r\n"]}