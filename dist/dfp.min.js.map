{"version":3,"sources":["../src/utils/cookieUtils.js","../src/utils/time.js","../src/utils/breakpoints.js","../src/utils/arrays.js","../jspm_packages/npm/systemjs-plugin-babel@0.0.17/babel-helpers/classCallCheck.js","../jspm_packages/npm/systemjs-plugin-babel@0.0.17/babel-helpers/createClass.js","../jspm_packages/npm/systemjs-plugin-babel@0.0.17/babel-helpers/toConsumableArray.js","../src/globalConfig.js","../src/objects/impressionsManager.js","../src/objects/user.js","../src/objects/conflictResolver.js","../src/objects/adSlot.js","../src/objects/adManager.js","../src/dfp.js","../src/index.js"],"names":["stringToMap","string","separator","undefined","_ref$separator","operator","_ref$operator","map","itemsArr","split","forEach","element","keyValue","length","decodeURIComponent","e","getCookieAsMap","document","cookie","tmsso","engsso","addHours","date","hours","SyntaxError","isNaN","parseInt","TypeError","result","Date","setHours","getHours","addDays","days","setDate","getDate","debounce","func","wait","arguments","immediate","timeout","context","this","args","later","apply","callNow","setTimeout","getBreakpoint","breakpoint","windowWidth","window","innerWidth","documentElement","clientWidth","body","breakpoints","xs","xxs","s","m","l","xl","xxl","getBreakpointName","resultBreakpoint","arraysEqual$1","a","b","Array","isArray","i","version","_","instance","Constructor","defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","key","protoProps","staticProps","prototype","arr","arr2","from","ssoKey","location","hostname","indexOf","dfpBaseConf","JSON","parse","getElementById","textContent","err","dfpConfig","Object","assign","referrer","isMobile","test","navigator","userAgent","isHomepage","pathname","environment","department","domain","regexMatch","exec","path","sectionArray","articleId","slice","filter","section","index","reduce","last","current","concat","site","env","port","dev","prod","articleIdMatch","pop","content","getUrlParam","source","medium","campaign","results","RegExp","search","adBlockRemoved","localStorage","getItem","isWriterAlerts","wifiLocation","cookieMap","_htzwif","gStatCampaignNumber","gstatCampaign","CampaignNumber","googleGlobalSettings","breakpointType","breakpoints1","breakpoints2","breakpoints3","breakpoints4","getTime","breakpointsConfig","keys","impressionManagerConfig","ImpressionsManager","now","config","impressions","retrieveImpressionsData","initImpressionMap","migrateImpressionsData","_this","hasOwnProperty","call","frequency","impressionsData","oldImpressionsArray","impression","adUnitImpression","name","data","tmp","slotId","join","id","exposed","expires","_this2","adSlotId","err1","debouncedSave","saveImpressionsToLocalStorageImpl","setItem","stringify","error","slot","_this3","shouldUpdateExpiryDate","initSlotFromConfig","updateExpiryDate","slotName","Error","frequencyMap","match","frequencyRegex","setMilliseconds","setSeconds","setMinutes","maxImpressions","saveImpressionsToLocalStorage","atQuota","userTypes$1","User","userConfig","sso","type","getUserType","impressionManager","age","getUserAge","gender","getUserGender","userType","payerProp","payer","registered","anonymous","usrae","urgdr","ConflictResolver","conflictManagementConfig","dependencyMap","initializeDependencyMap","deferredSlots","Set","queue","Map","conflictManagementJson","value","rules","item","onsize","avoid","set","resolvedSize","has","get","resolvedWith","isBlocked","_step","Symbol","iterator","_iteratorNormalCompletion","_iterator","next","done","adSlotKey","adSlot","_step2","_iteratorNormalCompletion2","_iterator2","adSlotRule","parentResolvedWith","add","find","sizeString","size","numberStr","arraysEqual","return","_iteratorError2","_iteratorError","isBlocking","_step3","_iteratorNormalCompletion3","_iterator3","_iteratorError3","EMPTY_SIZE","hiddenClass","adSlotConfig","responsive","fluid","user","adManager","htmlElement","priority","deferredSlot","network","adUnitBase","adSizeMapping","responsiveAdSizeMapping","blacklistReferrers","whitelistReferrers","lastResolvedSize","lastResolvedWithBreakpoint","defineSlot","adTypes","maavaron","popunder","talkback","regular","whitelisted","blacklisted","shown","cmd","push","classList","remove","display","isMaavaron","maavaronSlot","defineMaavaron","shouldSendRequestToDfp","googletag","pubads","defineFn","isOutOfPage","defineOutOfPageSlot","getPath","responsiveSlotSizeMapping","sizeMapping","addSize","build","defineSizeMapping","addService","setCollapseEmptyDiv","calculatedPath","toLowerCase","event","getAdUnitPath","isEmpty","refresh","_this4","adUnitMaavaronPath","adUnitMaavaronSize","definePassback","setTargeting","adPriorities","adTargets","userTypes$$1","AdManager","conflictResolver","initGoogleTargetingParams","initGoogleGlobalSettings","initSlotRenderedCallback","currentBreakpointName","adManagerConfig","adSlots","initAdSlots","high","onDomLoaded","normal","log","onWindowLoaded","low","readyState","addEventListener","adSlot$$1","show","priorityFilter","values","deferredSlotId","deferredAdSlot","currentBreakpoint","hide","_step4","_iteratorNormalCompletion4","_iterator4","_iteratorError4","adUnitName","filteredPriority","adSlotPlaceholders","getElementsByClassName","node","adSlotNodeSet","adSlotPriority","computedAdSlotConfig","attributes","all","getAdType","adSlotInstance","isWhitelisted","isBlacklisted","shouldDisplayAdAfterAdBlockRemoval","doesBreakpointContainAd","doesUserTypeMatchBannerTargeting","reachedQuota","adSlotOrTarget","adTarget","nonPaying","paying","digitalOnly","digitalAndPrint","count","_step5","_iteratorNormalCompletion5","_iterator5","_iteratorError5","containsBreakpoint","mapping","apiReady","releaseSlotDependencies","registerImpression","updateResolvedSlot","_step6","getBlockedSlotsIds","_iteratorNormalCompletion6","_iterator6","blockedSlot","_iteratorError6","_step7","_iteratorNormalCompletion7","_iterator7","deferredSlotKey","delete","_iteratorError7","utm_","tags","_toConsumableArray","setCentering","enableSingleRequest","enableAsyncRendering","enableSyncRendering","enableServices","defaultConfig","resizeTimeout","DFP$1","DFP","wasInitialized","initStarted","initWindowResizeListener","dfpThis","Promise","resolve","reject","tag","createElement","async","setAttribute","getElementsByTagName","resumeInit","parentNode","insertBefore","onResize","refreshAllSlots","debouncedFunction","onresize","version$1"],"mappings":"ipSAgBA,SAASA,GAAYC,uEACjBC,UAAAA,EAAAC,SAAAC,EAAY,IAA4BA,MAAvBC,SAAAA,EAAAF,SAAAG,EAAW,IAC9BA,EAAMC,KACAC,EAAWP,EAAOQ,MAAMP,YACrBQ,QAAQ,SAAAC,MACQ,gBAAZA,GAAsB,IACzBC,GAAWD,EAAQF,MAAMJ,MACP,IAApBO,EAASC,aAELD,EAAS,IAAME,mBAAmBF,EAAS,IAEjD,MAAOG,QAMNR,EAKT,QAAwBS,QAChBT,GAAMP,EAAYiB,SAASC,QAAUhB,UAAW,eAC7B,gBAAdK,GAAIY,UACTA,MAAQnB,EAAYO,EAAIY,OAASjB,UAAW,OAExB,gBAAfK,GAAIa,WACTA,OAASpB,EAAYO,EAAIa,QAAUlB,UAAW,OAE7CK,ECrCT,QAAgBc,GAASC,EAAMC,OACxBD,OACG,IAAIE,aAAY,4DAEnBD,OACG,IAAIC,aAAY,wDAEnB,IAAIC,MAAMC,SAASH,EAAO,UACvB,IAAII,WAAU,iEAEhBC,GAAS,GAAIC,MAAKP,YACjBQ,SAASF,EAAOG,WAAaL,SAASH,EAAO,KAC7CK,EAYT,QAAgBI,GAAQV,EAAMW,OACvBX,OACG,IAAIE,aAAY,2DAEnBS,OACG,IAAIT,aAAY,sDAEnB,IAAIC,MAAMC,SAASO,EAAM,UACtB,IAAIN,WAAU,+DAEhBC,GAAS,GAAIC,MAAKP,YACjBY,QAAQN,EAAOO,UAAYT,SAASO,EAAM,KAC1CL,EC/BT,QAAOQ,GAAAC,MAAwBC,GAAAC,UAAA1B,OAAA,GAAAV,SAAAoC,UAAA,GAAAA,UAAA,GAAO,IAAKC,EAAAD,UACzC,GAAIE,EAAA,aACG,eACCC,GAANC,KACMC,EAFoBL,UAGpBM,EAAQ,aACZ,KACAL,GAAgBH,EAAAS,MAAAJ,EAAAE,IAEZG,EAAUP,IAAhBC,eACAA,KACUO,WAAAH,EAAVP,GACAS,GAAaV,EAAAS,MAAAJ,EAAAE,IAQjB,QAAOK,QACDC,GAAA,OACEC,EAAcC,OAAAC,YACfpC,SAAAqC,gBADeC,aAEftC,SAAAuC,KAFLD,oBAGA,OACOJ,GAAcM,EAAnBC,KAAgDD,EAAbE,GAA8B,WAC5DR,GAAcM,EAAnBG,IAA+CH,EAAbC,EAA6B,WAC1DP,GAAcM,EAAnBI,IAA+CJ,EAAbG,CAA4B,WACzDT,GAAcM,EAAnBK,IAA+CL,EAAbI,CAA4B,WACzDV,GAAcM,EAAnBM,KAAgDN,EAAbK,CAA4B,WAC1DX,GAAcM,EAAnBO,MAAiDP,EAAbM,EAA6B,iBAC3CN,EAPxBO,UASAd,GASF,QAAOe,GAAAf,MACDgB,GAAA,OACEf,EAAcD,GAAcE,OAAlCC,mBACA,OACOF,GAAcM,EAAnBC,KAAmC,KAA0B,WACxDP,GAAcM,EAAnBG,IAAkC,IAAyB,WACtDT,GAAcM,EAAnBI,IAAkC,GAAwB,WACrDV,GAAcM,EAAnBK,IAAkC,GAAwB,WACrDX,GAAcM,EAAnBM,KAAmC,GAAwB,WACtDZ,GAAcM,EAAnBO,MAAoC,IAAyB,iBAN/D,YASAE,GC/DF,QAAgBC,GAAYC,EAAGC,OACxBD,IAAMC,EAAG,OAAO,MAChBC,MAAMC,QAAQH,KAAOE,MAAMC,QAAQF,GAAI,OAAO,KAC/CD,IAAMC,EAAG,OAAO,KAChBD,EAAEvD,SAAWwD,EAAExD,OAAQ,OAAO,MAC7B,GAAI2D,GAAI,EAAGA,EAAIJ,EAAEvD,SAAU2D,KAC1BF,MAAMC,QAAQH,EAAEI,KAAOF,MAAMC,QAAQF,EAAEG,SACpCL,EAAYC,EAAEI,GAAIH,EAAEG,IAAK,OAAO,MAElC,IAAIJ,EAAEI,KAAOH,EAAEG,UACX,SAGJ,oFCnBTC,EAAAC,EAAAD,+BAAgB,SAAAE,EAAAC,QACRD,YAANC,SACQ,IAAAjD,WAAN,wCCFY,mBACdkD,GAAAC,EAAAC,OACO,GAAIP,GAAT,EAAgBA,EAAIO,EAApBlE,OAAA2D,IAAuC,IACjCQ,GAAaD,EAAjBP,KACAS,WAAwBD,EAAAC,aAAxB,IACAC,cAAA,EACI,SAAJF,KAA2BA,EAAAG,UAAA,UAC3BC,eAAAN,EAA8BE,EAA9BK,IAAAL,UAIG,UAAAJ,EAAAU,EAAAC,SACLD,IAAgBT,EAAiBD,EAAjBY,UAAAF,GAChBC,GAAiBV,EAAAD,EAAAW,GACjBX,QCdY,SAAAa,MACVnB,MAAAC,QAAJkB,GAAwB,KACjB,GAAIjB,GAAJ,EAAWkB,EAAOpB,MAAMmB,EAA7B5E,QAA0C2D,EAAIiB,EAA9C5E,OAAA2D,MAA+DA,GAAUiB,EAAVjB,EAE/D,OAAAkB,SAEOpB,OAAAqB,KAAPF,IN6BSG,EAASxC,OAAOyC,SAASC,SAASC,QAAQ,gBAAiB,EAAK,SAAW,QOhCpFC,EAAA,MACJ,OACgB5C,OAAA6C,KAAAC,MAAkBjF,SAAAkF,eAAA,aAAhCC,aAEF,MAAAC,KACgBjD,OAAdkD,UAEIA,EAAAC,OAAYC,WAChBC,kBACSxF,UAAAwF,SAAoBxF,SAApBwF,SAAP,OAEFC,mFACUC,KACAvD,OAAAwD,UAAAC,WADR,QAOFC,oBACS,MAAA1D,OAAAyC,SAAAkB,UADQ,IAC4BpE,KAAAqE,gBAE7CC,oBACStE,MAAAmE,WAAA,YAAP,eAMFI,aACQC,GAAa,kCAAAC,KAAuChE,OAAAyC,SAA1DC,UACMlE,EAASuF,EAAaA,EAAb,GAA6B/D,OAAAyC,SAA5CC,eACAlE,OAcFyF,WACMC,GAAe3E,KAAA4E,WAAA,MAAkB5E,KAAA4E,UACnCnE,OAAAyC,SAAAkB,SAAAtG,MAAA,KAAA+G,MAAA,GAA6C,GAC7CpE,OAAAyC,SAAAkB,SAAAtG,MAAA,KAAA+G,MAFF,cAGeC,OAAoB,SAAAJ,SACnC,kBAAAA,GADmC,mBACPA,MACrB9G,IACA,SAAAmH,aAAAA,IADAnH,IAEA,SAAAmH,EAAAC,EAAAlC,YAAyB+B,MAAA,EAAaG,EAAb,GAAAC,OACpB,SAAAC,EAAAC,SAAmBD,GAAAE,OAAnBD,WAMdE,WACMA,GAAA,aACA5E,QAAAyC,SAAAC,SAAAC,QAAA,kBAAoD,IACtD,UAEO3C,OAAAyC,SAAAC,SAAAC,QAAA,kBAAoD,IAC3D,YAEO3C,OAAAyC,SAAAC,SAAAC,QAAA,gBAAkD,MACzD,SAEKiC,GAAP,cAOFhB,kBACQiB,QAAM,OAAA,OAAZ,SAKO,SAAA7E,OAAAyC,SAAAqC,KAAkCD,EAAlCE,IACJ/E,OAAAyC,SAAAC,SAAAC,QAAA,sBAAwD,GACtD3C,OAAAyC,SAAAC,SAAAC,QAAA,yBAA2D,GAC3D3C,OAAAyC,SAAAC,SAAAC,QAAA,0BAA4D,EAAMkC,EAFrEtB,KAGGvD,OAAAyC,SAAAkB,SAAAhB,QAAA,6BAA+D,GAC7D3C,OAAAyC,SAAAkB,SAAAhB,QAAA,+BAAiE,GACjE3C,OAAAyC,SAAAkB,SAAAhB,QAAA,2BAA6D,EAC5DkC,EAHJG,KAJJjI,WAaFoH,gBACQc,GAAiB,WAAAjB,KAAgBhE,OAAAyC,SAAvCkB,UACIQ,EAAJ,UACAc,OACcA,EADMC,OAGpBf,YAGAgB,iBACS5F,MAAA6F,YAAP,mBAEFC,gBACS9F,MAAA6F,YAAP,kBAEFE,gBACS/F,MAAA6F,YAAP,kBAEFG,kBACShG,MAAA6F,YAAP,sCAXEnD,MAcIuD,GAAUC,OAAA,IAAAxD,EAAA,gBAAA+B,KAAmChE,OAAAyC,SAAnDiD,cACOF,IAAWA,EAAX,GAAwBA,EAAxB,GAAPzI,YAGJ4I,qBACMA,IAAJ,MAEMC,aAAAC,QAAJ,wBACE,GAGJ,MAAA5C,UAGA0C,OAEFG,wBACUrD,UAAAiD,OAAA/C,QAAA,sBAA+C,MAEzDoD,mBACMA,GAAJ,GACMC,EAANpI,QAEMoI,GAAaA,EAAjBC,YACiB,cAACA,QAAA,SAAhB,cAIJ,MAAAhD,UAGA8C,OAEFG,0BACMC,GAAA,aAEcP,aAAAC,QAAA,iBACdhD,KAAAC,MAAW8C,aAAAC,QADG,kBAAhB9I,OAGF,MAAAkG,KAGElG,aAEKoJ,GAAgBA,EAAhBC,eAAPrJ,uDAG8B,qBAAA,kBAIZ,SAAhB,YAAA4H,QAA0C,SAJd,qBAAA,gBAAA,iCAQpB,SAAN,YAAAA,QAAgC,SADT,iBAElB,SAAL,YAAAA,QAA+B,SAFR,gBAGnB,SAAJ,YAAAA,QAA8B,SAHP,gBAInB,SAAJ,YAAAA,QAA8B,SAJP,gBAKnB,SAAJ,YAAAA,QAA8B,SALP,iBAMlB,SAAL,YAAAA,QAA+B,SANR,kBAOjB,SAAN,YAAAA,QAAgC,SAdN,gCAAA,mEAhKF,8DAoLb,kBApLa,2CAyL5BtE,kBAEMA,GAAA,cACI6C,EAAAmD,qBAARC,oBACE,UAA4B/G,KAAdgH,YAAiC,WAC/C,UAA4BhH,KAAdiH,YAAiC,WAC/C,UAA4BjH,KAAdkH,YAAiC,WAC/C,UAA4BlH,KAAdmH,YAAiC,iBACxBnH,KALzBgH,mBAOAlG,sBAGY,OAAA,MAAA,MAAA,OAAA,QAAA,SAdG,wBAwBH,OAAA,MAAA,OAAA,OAAA,QAAA,SAxBG,wBAkCH,OAAA,MAAA,MAAA,MAAA,QAAA,SAlCG,wBA4CH,OAAA,MAAA,OAAA,OAAA,QAAA,SApOc,wBA8OlBtD,WAAAA,cA9OkBA,mEAqP1B,6BADuB,gCAKvB,6BAzP0B,0EAgQZ,iCAAA,0BAAA,WAIJ,GAAD0B,OApQiBkI,uDAuQR,wBAAA,sBAAA,mBAvQQ,aAAdnE,GAAlBI,GLRMvC,EAAc6C,EAAA0D,kBAApBvG,YMEawG,eAAO,wBAAA,2BAAA,iCAAA,kBAAA,iBAAA,wBAAA,uBAAA,YAAA,eAAb,8BAqBLC,UACEC,QAAAC,KAAY,GAADvI,OADwBkI,eAEnCM,OAAc9D,OAAAC,UAAd0D,QACAI,YAAmB3H,KAAnB4H,+BACAC,sFAIA7H,KAAM2H,EAAc3H,KAApB8H,gCAKAR,KAAAK,GAAA/J,IAA6B,SAAA8E,EAAAsC,YAC3BtC,GAAmBkB,OAAAC,UAAkB8D,EAAlBjF,GAAoCqF,EAAAL,OAAvDhF,IAEDqF,QAKI,GAALrF,KAAAiF,QACMK,eAAAC,KAAAN,EAAJjF,KACOiF,EAAAjF,GAAiB4E,EAAtBY,kBAESP,GAAPjF,UAKNiF,0DAIA3H,KAAI2H,EAAA,OACAQ,EAAA,aAEgB1H,OAAA4F,aAAAC,QAA4BgB,EAA9CK,aAEF,MAAAjE,KAEElG,aAGc8F,KAAAC,MAAd4E,GAEF,MAAAzE,WAGQ0E,GAAAD,EAAsBrK,MAAA,KAAAgH,OAAkC,SAAA1G,SAAAA,OAE9DL,QAA4B,SAAAsK,UAElBC,GAAmBD,EAAAvK,MAAzB,OACMyK,EAAOD,EAAb,GACME,EAAOF,EAAb,GACMG,EAAMF,EAAAzK,MAAZ,KACIqE,EAASsG,EAAb9C,KACIxD,IAAJ,OAAcA,MACZ,eAEIuG,GAASD,EAAAE,KAAf,KACMC,EAAAF,EAAA,IAANvG,EACM0G,EAAU9J,SAASyJ,EAAA1K,MAAA,KAAT,GAAA,KAAhB,EACMgL,EAAU/J,SAASyJ,EAAA1K,MAAA,KAAT,GAAA,KAAoCiL,EAApDtB,MACAmB,QACAA,GAAgBtB,EAAhB0B,UAAAN,IACAE,GAAgBtB,EAAhBnF,QAAAA,IACAyG,GAAgBtB,EAAhBuB,SAAAA,IACAD,GAAgBtB,EAAhBwB,SAAAA,EAEF,MAAAG,aAKGtB,+DAOH3H,KAAAkJ,eAAJ,kBAAiClJ,MAAPkJ,mBACxBA,sBAGAA,cAAqBzJ,EAASO,KAATmJ,kCAAA,KAArB,QACAD,8FASAE,QAAqB9B,EAArBK,YAAuCrE,KAAA+F,UAAerJ,KAAtD2H,cAEF,MAAAjE,WAGE4F,MAAA,gCAHU5F,sDAYZ1D,YAAAsH,KAAYtH,KAAZ0H,QAAA9J,IAA6B,SAAA8E,EAAAsC,MACrBgE,GAANtG,EACM6G,EAAOC,EAAA7B,YAAbqB,GACIS,GAAJ,QAEAF,GAEMC,EAAA9B,OAAAsB,GAAsB1B,EAAtBY,aAA0CqB,EAAKjC,EAAnDY,eAEE,IACAP,YAAAqB,GAA2B1B,EAA3BY,WAA6CsB,EAAA9B,OAAAsB,GAAsB1B,EAAnEY,YAEOsB,EAAA/B,IAAW8B,EAAKjC,EAApBwB,cAEH,KAIFY,mBAAAV,GAEFS,KACEE,iBAAAX,GAGHQ,6CAOcI,MACTnC,GAAM,GAAZvI,UACMc,KAAA2H,YAAAiC,KAA8B5J,KAAA2H,YAAAiC,GAA2BtC,EAA/DY,gBACQ,IAAA2B,OAAA,0CAAAD,EAAA,wCAC0B5J,KAAA2H,YADhCiC,OAGIE,GAAe9J,KAAA2H,YAAAiC,GAA2BtC,EAA3BY,WAAA6B,MAAiDzC,EAAtE0C,kBACAC,gBAAA,KACAC,WAAA,KACAC,WAAA,GACIL,EAAA1G,QAAqBkE,EAArBhI,OAAkC,KACpCH,SAAA,QAEFwI,YAAAiC,GAA2BtC,EAA3BwB,UAA4CgB,EAAA1G,QAAqBkE,EAArBhI,OAAkC,EAC5ED,EAAAoI,EAAaqC,EAD6B,IACVpL,EAAA+I,EAAcqC,EADL,KAA3C1C,eAIAO,YAAAiC,GAA2BtC,EAA3B8C,gBAAkDrL,SAAS+K,EAAT,GAAlD,SAEAnC,YAAAiC,GAA2BtC,EAA3BuB,SAAA,6CAOiBe,MACXL,GAAOvJ,KAAA2H,YAAAiC,SACRtC,EAALY,WAAuBlI,KAAA0H,OAAAkC,GAAsBtC,EAA7CY,aACKZ,EAALnF,QAAoBnC,KAAA0H,OAAAkC,GAAsBtC,EAA1CnF,UACKmF,EAALuB,SAAA,OACAlB,YAAAiC,GAAAL,OACAI,iBAAAC,8CAQiBZ,MACjBA,EAAc,IACNO,GAAOvJ,KAAA2H,YAAbqB,MACAO,EAAU,IACFV,GAAUU,EAAKjC,EAArBuB,YACI/J,MAAMC,SAAA8J,EAAN,QAAJ,EAA4C,MAC1ClB,YAAAqB,GAA2B1B,EAA3BuB,UAAA,WAEEwB,gCAEF,MAAA3G,WAGA,WAIN,6CAWMkG,GAAW5J,KAAA2H,YAAA,GAAAqB,EAA+BrF,EAA/BW,YAAA,GAAA0E,EACDrF,EADCW,WAAA0E,EAAjB,OAGMO,EAAOvJ,KAAA2H,YAAbiC,GACIU,GAAJ,KACAf,EAAU,IACF9B,IAAO,GAADvI,OAAZkI,UAEM0B,EAAU9I,KAAA2H,YAAAiC,GAA2BtC,EAA3CwB,YACIA,EAAJrB,OACEkC,iBAAAC,OAEG,IACGQ,GAAiBpK,KAAA2H,YAAAiC,GAA2BtC,EAAlD8C,eAEAA,OACYpK,KAAA2H,YAAAiC,GAA2BtC,EAA3BuB,UAAVuB,UAINE,iDAQM3C,GAAc3H,KAApB2H,gBACK,GAALjF,KAAAiF,QACMK,eAAAC,KAAAN,EAAJjF,IACMiF,EAAAjF,GAAiB4E,EAArBuB,aACEnG,GAAiB4E,EAAjBuB,SAAA,QAINwB,yCC3QSE,SAAY,mBAAA,uBAAlB,aAMcC,EAAA,sBACnB9C,UACE8C,QAAA9C,OAAc9D,OAAAC,UAAkB6D,EAAhC+C,eACMhE,GAANpI,SACA4E,OAAcU,EAAd+G,IACKjE,EAAUzG,KAAfiD,eAEEA,OAAc,UAAAjD,KAAAiD,OAAA,SAAd,cAEF0H,KAAY3K,KAAA4K,YAAZnE,QACAoE,kBAAyB,GAAArD,GAAsBE,EAA/CH,8BACAuD,IAAW9K,KAAA+K,WAAXtE,QACAuE,OAAchL,KAAAiL,cAAdxE,iDAGUA,MACNyE,GAAA,UACAzE,GAAaA,EAAUzG,KAA3BiD,QAAyC,IACjCkI,GAAY1K,OAAAyC,SAAAC,SAAAC,QAAA,gBAAkD,EAAlD,UAAlB,YAEWqD,EAAA0E,GAAuBZ,EAAvBa,MAAyCb,EAApDc,kBAGWd,EAAXe,gBAEFJ,4CAIIJ,GAAA,OACES,EAAQ9E,EAAUzG,KAAViD,SAA0BwD,EAAUzG,KAAViD,QAAxCsI,YACAA,OACQxM,SAAS0H,EAAUzG,KAAViD,QAATsI,MAAN,MACMT,EAAA,EAAAA,EAANtN,QAEFsN,wCAGYrE,MACRuE,GAAA,OACEQ,EAAQ/E,EAAUzG,KAAViD,SAA0BwD,EAAUzG,KAAViD,QAAxCuI,YACAA,OACWzM,SAAS0H,EAAUzG,KAAViD,QAATuI,MAAT,MACS,IAAAR,GAAA,IAAgBA,EAAhBA,EAATxN,QAEFwN,WCvDES,EAAA,sBACJC,UACED,QAAAE,cAAqB3L,KAAA4L,wBAArBF,QACAG,cAAqB,GAArBC,wEAGA9L,KAAM+L,EAAQ,GAAdC,mBACA1E,KAAA2E,GAAArO,IAAwC,SAAA8E,EAAAwJ,MAClCC,GAAQF,EAAZvJ,SACAyJ,SACUrH,OAAa,SAAAsH,SAAUA,GAAAC,QAAeD,EAAzBE,WAEvBC,IAAA7J,MAAeA,QAAAyJ,eAAf,OAMDpE,IACDgE,6CAGiB/C,EAAUwD,OAC3BxD,OACQ,IAAAa,OAAN,2DAEF2C,OACQ,IAAA3C,OAAN,0DAEE7J,MAAA2L,cAAAc,IAAJzD,UACE2C,cAAAe,IAAA1D,GAAA2D,aAAAH,uCAKMxD,SACRhJ,SAAAgJ,OACQ,IAAAa,OAAN,iDAEE+C,IAJc,KAAA,KAAA,IAAApP,kBAKlBqP,KAAwB7M,KAAA2L,cAAxBrE,OAAAwF,OAAAC,cAAAC,GAAAH,EAAAI,EAAAC,QAAAC,MAAAH,GAAA,EAAmD,IAAxCI,GAAAP,EACTX,MAAMmB,EAASrN,KAAA2L,cAAAe,IADkCU,MAAA,KAAA,IAAA5P,kBAEjD8P,KAAyBD,EAAzBlB,MAAAW,OAAAC,cAAAQ,GAAAD,EAAAE,EAAAN,QAAAC,MAAAI,GAAA,EAAuC,IAA5BE,GAAAH,EACTpB,KACIuB,GAAAnB,QAAJtD,kBACQ0E,GAAqBL,EAA3BV,YAEAe,QACE,IACA7B,cAAA8B,IAAA3E,MAEEqD,OAAAvO,MAAA,KAAA8P,KAAkC,SAAAC,MAC9BC,GAAAD,EAAO/P,MAAA,KAAAF,IAA0B,SAAAmQ,SAAahP,UAAAgP,EAAb,YAChChF,GAAAiF,YAAAF,EAAPJ,SAGA7B,cAAA8B,IAAA3E,MACA,mBAjB2C,IAAAtF,8BAAAuK,2BAAAC,kBALjC,IAAAxK,8BAAAuK,2BAAAE,UA2BlBvB,wCAGS5D,OACTA,OACQ,IAAAa,OAAN,kDAEEuE,IAJe,KAAA,KAAA,IAAA5Q,kBAKnB6Q,KAAwBrO,KAAA2L,cAAxBrE,OAAAwF,OAAAC,cAAAuB,GAAAD,EAAAE,EAAArB,QAAAC,MAAAmB,GAAA,EAAmD,IAAxClB,GAAAiB,EACTnC,KAAIkB,KAAJpE,OACE,gBAPe,IAAAtF,8BAAAuK,2BAAAO,UAUnBJ,8CAQiBpF,MACb/J,GAAA,aACAe,MAAA2L,cAAAc,IAAJzD,aACWhG,KAAAhD,KAAW2L,cAAAe,IAAA1D,GAAAmD,MAAAvO,IAA2C,SAAAyP,SAAUA,GAAVf,UAE1DrN,4CAGMyC,MACTD,IAAJC,EAAa,OAAA,KACT,OAAAD,GAAJ,OAAkBC,EAAY,OAAA,KAC1BD,EAAAvD,SAAawD,EAAjBxD,OAA2B,OAAA,MACtB,GAAI2D,GAAT,EAAgBA,EAAIJ,EAApBvD,SAAA2D,KACMJ,EAAAI,KAASH,EAAbG,GAAmB,OAAA,SAErB,WAGJ4J,EAAAgD,cChGMC,EAAc/K,EAAA0B,KAAAjC,QAAA,UAAqC,EAArC,cAApB,mCAIEuL,aACEtB,QAAA3F,OAAc9D,OAAAC,UAAd8K,QAGA/F,GAAU5I,KAAA0H,OAAVkB,IACK5I,KAAA0H,OAALkB,QACQ,IAAAiB,OAAN,kCAEF1H,OAAcnC,KAAA0H,OAAdvF,YACAwI,KAAY3K,KAAA0H,OAAZiD,UACAiE,WAAkB5O,KAAA0H,OAAlBkH,gBACAC,MAAa7O,KAAA0H,OAAbmH,WACAC,KAAY9O,KAAA0H,OAAZoH,UACAC,UAAiB/O,KAAA0H,OAAjBqH,eACAC,YAAmBhP,KAAA0H,OAAnBsH,iBACAC,SAAgBjP,KAAA0H,OAAhBuH,cACAC,aAAoBlP,KAAA0H,OAApBwH,kBAGA5K,WAAkBtE,KAAA0H,OAAlBpD,gBACA6K,QAAenP,KAAA0H,OAAfyH,aACAC,WAAkBpP,KAAA0H,OAAlB0H,gBAGAC,cAAqBrP,KAAA0H,OAArB2H,mBACAC,wBAA+BtP,KAAA0H,OAA/B4H,6BACAC,mBAA0BvP,KAAA0H,OAAA6H,mBACxBvP,KAAA0H,OAAA6H,mBAAAzR,MADwB,aAE1B0R,mBAA0BxP,KAAA0H,OAAA8H,mBACxBxP,KAAA0H,OAAA8H,mBAAA1R,MADwB,aAK1B2R,iBAjCwBjS,YAkCxBkS,2BAlCwBlS,YAmCxB+L,KAnCwB/L,WAsCjBwC,KAALkP,oBACE3F,KAAYvJ,KAAZ2P,cAGJ,MAAAjM,WACE4F,MADU5F,uDAWZ,gBAAW1D,MAAP2K,UACI,IAAAd,OAAA,gCAAN7J,SAEEA,KAAA+D,cAAJ,SACE,SAEM/D,KAAR2K,UACOiF,GAALC,gBAAuB,MAClBD,GAALE,gBAAuB,MAClBF,GAALG,gBAAuB,MAClBH,GAALI,eAAsB,iBAJxB,2CAeA,gBAAWhQ,MAAP2K,UACI,IAAAd,OAAA,gCAAN7J,SAEEA,KAAA+D,cAAJ,SACE,SAEM/D,KAAR2K,UACOiF,GAALC,gBAAuB,iBADzB,6GAOQ7L,KACAvD,OAAAwD,UAAAC,WADR,+CAWI+L,IAAJ,KACA,IAAIjQ,KAAAwP,mBAAAtR,OAAsC,QAAA,KAAA,IAAAV,kBACxCqP,KAAuB7M,KAAvBwP,mBAAA1C,OAAAC,cAAAC,GAAAH,EAAAI,EAAAC,QAAAC,MAAAH,GAAA,EAAgD,IAArClJ,GAAA+I,EACTX,SAAIvI,EAAAG,SAAAV,QAAAU,IAA0C,EAAI,IAChD,sBAHoC,IAAAJ,8BAAAuK,2BAAAE,aASxC,QAEF8B,8CAWIC,IAAJ,KACA,IAAIlQ,KAAAuP,mBAAArR,OAAsC,QAAA,KAAA,IAAAV,kBACxC8P,KAAuBtN,KAAvBuP,mBAAAzC,OAAAC,cAAAQ,GAAAD,EAAAE,EAAAN,QAAAC,MAAAI,GAAA,EAAgD,IAArCzJ,GAAAwJ,EACTpB,SAAIvI,EAAAG,SAAAV,QAAAU,IAA0C,EAAI,IAChD,sBAHoC,IAAAJ,8BAAAuK,2BAAAC,WAQ1CgC,wCASAlQ,MAAKA,KAADmQ,QAAJ,SACEA,OADwB,YAExBC,IAAAC,KAAmB,WACbtI,EAAJmH,iBACE3F,KAAYxB,EAAZ4H,uBAGFnM,eAAwBuE,EAAxBa,IAAA0H,UAAAC,OAAA7B,aACA8B,QAAkBzI,EAAlBa,4CAUJ5I,eAAAoQ,IAAAC,KAAmB,oBACjB7M,eAAwBuF,EAAxBH,IAAA0H,UAAA3C,IAAAe,6CASE1O,KAAJyQ,aAAuB,IACfC,GAAe1Q,KAArB2Q,uBACI3Q,MAAA+O,UAAA6B,uBAAJ5Q,QACOA,KAALmQ,aACEA,OADe,IAEfK,YAGJE,KAEIG,GAAYpQ,OAAlBoQ,UACMC,EAASD,EAAfC,SACM7Q,KACA8Q,EAAW/Q,KAAAgR,cAAqBH,EAArBI,oBAAqDJ,EAAtElB,aAEAU,KAAUrQ,KAAVkR,WACIlR,KAAAgR,iBAAJ,IACMhR,KAAJ6O,QACEwB,KAAA,WAGAA,KAAUrQ,KAAVqP,kBAGJgB,KAAUrQ,KAAV4I,OACIW,GAAOwH,EAAA5Q,MAAA4Q,EAAX9Q,MACAsJ,EAAU,IAEJvJ,KAAJ4O,WAAqB,IACfuC,GAA4BN,EAAhCO,cACMtQ,EAAc6C,EAAA0D,kBAApBvG,YACMwG,EAAO1D,OAAA0D,KAAYtH,KAHNsP,4BAAA,KAAA,IAAA9R,kBAInB6Q,KAAA/G,EAAAwF,OAAAC,cAAAuB,GAAAD,EAAAE,EAAArB,QAAAC,MAAAmB,GAAA,EAAwB,IAAb5L,GAAA2L,EAAenC,QACxBmF,SACGvQ,EAAD4B,GADF,KAEGlB,EAAYxB,KAAAsP,wBAAZ5M,KAAgD,EAAjD,QACE1C,KAAAsP,wBADF5M,iBAPe,IAAAgB,8BAAAuK,2BAAAO,MAUS2C,EAA5BG,UACO/H,EAAAgI,kBAAPJ,KAEK5H,EAAAiI,WAAPV,GACI9Q,KAAAgR,iBAAJ,KACES,qBAAA,SAGJlI,2CAQAvJ,KACI0E,EAAOf,EAAAe,aACJI,OAAY,SAAAJ,SAAA,MAAQA,QACpB9G,IAAS,SAAAmH,YAAcyE,EAAdZ,GAAwBY,EAAxBlF,WAAAS,IAAT4D,KAAP,OAEOjE,GAAA,cAAQ1E,KAAA0H,OAAApD,WAAR,IAAAI,EAAP,MAEMgN,GAAA,IAAqB1R,KAAA0H,OAArByH,QAAA,IAA4CnP,KAAA0H,OAA5C0H,WAAA,IAAsEpP,KAAtE4I,GAAA,IAAiF5I,KAAjF4I,GAA2F5I,KAA3FsE,WAREI,QASDgN,GAAPC,sDAKWC,EAAArI,KAAAsI,gBAAA/T,MAAA,KADO,GAEF8T,EAFEE,QAGGF,EAHH9D,6CAYlB9N,eAAAoQ,IAAAC,KAAmB,qBACjBS,SAAAiB,SAA4BC,EAA5BzI,sDASGjL,SAAAwF,SAAAiG,MAAL,eAA6C,IACrCkI,GAAqBjS,KAA3BkR,UACMgB,IACJ,EADF,IAGM3I,EAAOsH,UAAAC,SAAAqB,eAAAF,EAAAC,GAAAE,aAAA,YACgBpS,KAAA8O,KADhBnE,OAAAyH,aAAA,OAEWpS,KAAA8O,KAFXhE,MAAAsH,aAAA,SAGapS,KAAA8O,KAHb9D,SAAAoH,aAAA,aAIiBzO,EAJjBiB,YAAAwN,aAAA,OAKWzO,EALxBU,oBAMAkF,SAEF,eC5QS8I,QAAe,cAAA,aAArB,OAMMC,OAAY,gBAAA,sBAAA,uBAAA,oBAAA,qBAAA,8BAAlB,mBAWMC,aAAY,uBAAA,mBAAlB,SAMM3C,YAAU,qBAAA,qBAAA,oBAAhB,4BAULlI,SAAoB1H,YAClBwS,QAAA9K,OAAc9D,OAAAC,UAAd6D,QACAoH,KAAY,GAAAtE,GAAZ9C,QACA+K,iBAAwB,GAAAhH,GAAqB/D,EAA7CgE,wCAUE0E,IAAAC,KAAmB,aAAMqC,8BAAAC,6BAAAC,gCAMnBC,GAAwBvR,EAA9BhB,IACIN,MAAA0H,OAAAoL,gBAAA1D,WAAAhM,QAAA,gBAAgE,GAClEyP,EAAAzP,QAAA,OAAsC,SACtCsE,OAAAoL,gBAAA1D,WAAA,oCAGFgB,IAAAC,KAAmB,aACjB0C,QAAehL,EAAAiL,YAAiBtL,EAAjBiH,aAAsC0D,EAArDY,WAGIC,GAAc,yBAEhB9C,IAAAC,KAAmB,aACjB0C,QAAehL,EAAAiL,YAAiBtL,EAAjBiH,aAAsC0D,EAArDY,gBACA7C,IAAAC,KAAmB,aACjB0C,QAAehL,EAAAiL,YAAiBtL,EAAjBiH,aAAsC0D,EAArDc,YAIN,MAAAzP,WACE0P,IADU1P,KAKR2P,EAAiB,qBACrBjD,IAAAC,KAAmB,aACjB0C,QAAehL,EAAAiL,YAAiBtL,EAAjBiH,aAAsC0D,EAArDiB,eAGIhV,SAARiV,gBACE,mBACEC,iBAAA,mBAAAN,UACAM,iBAAA,OAAAH,aAEF,yBAEEG,iBAAA,OAAAH,0BAON,MAAA3P,WACE4F,MADU5F,4DAQC,KAAA,IAAAlG,kBACbqP,KAAwB7M,KAAA+S,QAAxBzL,OAAAwF,OAAAC,cAAAC,GAAAH,EAAAI,EAAAC,QAAAC,MAAAH,GAAA,EAA6C,IAAlCI,GAAAP,EACTX,MAAMuH,EAASzT,KAAA+S,QAAArG,IAAfU,EACIqG,GAAA9I,OAAgBiF,EAAhBG,UAAoC/P,KAAA4Q,uBAAxC6C,MACEC,oBAJS,IAAAhQ,8BAAAuK,2BAAAE,kDAeMc,WACnB0E,GAAAF,SACSA,GAAAxE,WAAPA,QAEKtN,OAAAqB,KAAWhD,KAAA+S,QAAXa,UAAA9O,OAAP6O,yDAGqB,KAAA,IAAAnW,kBACrB8P,KAA6BtN,KAAAyS,iBAA7B5G,cAAAiB,OAAAC,cAAAQ,GAAAD,EAAAE,EAAAN,QAAAC,MAAAI,GAAA,EAAkE,IAAvDsG,GAAAvG,EACTpB,SAAIlM,KAAA+S,QAAAtG,IAAJoH,KACO7T,KAAAyS,iBAAA7F,UAALiH,GAAsD,IAC9CC,GAAiB9T,KAAA+S,QAAArG,IAAvBmH,EACI7T,MAAA4Q,uBAAJkD,MACEJ,qBANa,IAAAhQ,8BAAAuK,2BAAAC,kDAiBf6F,GADUzT,OAAA,KAAA,IAAA9C,kBAEhB6Q,KAAwBrO,KAAA+S,QAAxBzL,OAAAwF,OAAAC,cAAAuB,GAAAD,EAAAE,EAAArB,QAAAC,MAAAmB,GAAA,EAA6C,IAAlClB,GAAAiB,EACTnC,MAAMuH,EAASzT,KAAA+S,QAAArG,IAAfU,EACIqG,GAAA7E,YAAqB6E,EAAA9I,OAAgBiF,EAAzCC,WACM4D,EAAA/D,6BAAAqE,GACF/T,KAAA4Q,uBADF6C,KAGE1B,YAGAiC,qBAXU,IAAAtQ,8BAAAuK,2BAAAO,4DAoBM,KAAA,IAAAhR,kBACtByW,KAAwBjU,KAAA+S,QAAxBzL,OAAAwF,OAAAC,cAAAmH,GAAAD,EAAAE,EAAAjH,QAAAC,MAAA+G,GAAA,EAA6C,IAAlC9G,GAAA6G,EACT/H,MAAMuH,EAASzT,KAAA+S,QAAArG,IAAfU,EACIpN,MAAA4Q,uBAAJ6C,KAEE1B,YAGAiC,oBARkB,IAAAtQ,8BAAAuK,2BAAAmG,yCAiBZC,MACJZ,GAASzT,KAAA+S,QAAArG,IAAf2H,EACIrU,MAAA4Q,uBAAJ6C,KAEE1B,YAGAiC,2CAaQrF,EAAA2F,SACVtU,KAAM+S,EAAU,GAAA/G,KAAQhM,KAAxB+S,SACIwB,EAAqB5S,MAAAqB,KAAW1E,SAAAkW,uBAApC,kBACqB1P,OAA0B,SAAA2P,SAAQA,GAAR7L,QACzC8L,GAAgB,GAAtB5I,oBACqBjJ,UAAAiC,OAAAmD,KAAAsM,EAAgD,SAAAE,SAC/DC,GAAAjI,IAAkBgI,EAAlB7L,OAAJ,MACE+E,IAAkB8G,EAAlB7L,KACA,OAKJ7K,QAA2B,SAAA0V,MACnBkB,GAAiBhG,EAAa8E,EAAb7K,IACvB+F,EAAa8E,EAAb7K,IAAAqG,UAAoCoD,EADbc,OAAvB3V,UAEImR,EAAa8E,EAAb7K,KAA2BmK,EAAAtG,IAAYgH,EAAZ7K,OAA3B,GACF+L,IADFL,SAKUM,GAAAhR,OAAuBC,UAAkB8K,EAAa8E,EAA/B7K,QACvB6K,EADkE7K,UAE9D6K,EAAAoB,WAAA,kBACNpB,EAAAoB,WAAA,kBADM3I,MACsCoG,EAHwBwC,SAIhE/L,EAAAgM,UAAetB,EAJiD7K,eAK1D+F,EAAa8E,EAAb7K,IAL0DgG,iBAM/DD,EAAa8E,EAAb7K,IAAAiG,QAN+D,OAOhE9F,EAPgE+F,eAAA/F,cAAA0K,aAU1D1K,EAAArB,OAV0DpD,mBAW7DyE,EAAArB,OAAAoL,gBAX6D3D,mBAY1DpG,EAAArB,OAAAoL,gBAZ0D1D,wBAaxDrG,EAAA0J,iBAAA7F,UAAgC6G,EAbwB7K,aAAxE+L,IAgBMK,EAAiB,GAAA3H,GAAvBuH,KACArI,IAAYkH,EAAZ7K,GAAAoM,GACIA,EAAArK,OAAwBiF,EAAxBG,UACFiF,EAAA/F,WAA4BoD,EAD1BY,MAEFlK,EAAA6H,uBAFFoE,MAOEtB,OAGJ,MAAAhQ,WACE4F,MADU5F,MAKhBqP,8CAIQ,gBAAA/J,KACPA,EAAA5F,QAAA,UAAA,GACD4F,EAAA5F,QAAA,YADC,GAED4F,EAAA5F,QAAA,YAHA;0CAYA4F,OACQ,IAAAa,OAAN,qEAEEb,GAAA5F,QAAiBwM,EAAjBC,WAAqC,EAAWD,EAAPC,SACzC7G,EAAA5F,QAAiBwM,EAAjBE,WAAqC,EAAWF,EAAPE,SACzC9G,EAAA5F,QAAiBwM,EAAjBG,WAAqC,EAAWH,EAAPG,SACtCH,EAAPI,gEASOhQ,MAAAyS,iBAAA7F,UAAgC6G,EAAhC7K,OAAA,KAAAqM,mBAILC,mBAJK,GAKLlV,KAAAmV,mCALK1B,SAOL2B,wBAPK3B,SASL4B,iCATK5B,SAWL3E,KAAAjE,kBAAAyK,aAAyC7B,EAAzC7K,OAXF,wEAeS5I,KAAA0H,OAAAtB,kBAAA,IACRqN,EAAA9I,OAAgBiF,EAAhBC,UACD4D,EAAA9I,OAAgBiF,EAFhBE,oEAU+ByF,MACzBrK,GAAWlL,KAAA8O,KAAjBnE,KACM6K,EAAW,gBAAAD,GAAAA,EAAsDA,EAAvEpT,cAEAqT,OACOlD,GAALwC,WAAqB,MAChBxC,GAALmD,gBACSvK,KAAaqH,EAAbjH,WAAoCJ,IAAaqH,EAAxDlH,eACGiH,GAALhH,gBAAkCJ,KAAaqH,EAApBjH,cACtBgH,GAALjH,iBAAmCH,KAAaqH,EAApBlH,eACvBiH,GAALoD,aAA+BxK,KAAaqH,EAApBnH,UACnBkH,GAALqD,kBAAoCzK,KAAaqH,EAApBnH,UACxBkH,GAALsD,sBAAwC1K,KAAaqH,EAApBnH,qBARnC,gDAmBmB7K,OACnBA,OACQ,IAAAsJ,OAAN,+EAEEgM,GAJ2B,KAAA,KAAA,IAAArY,kBAK/BsY,KAAwB9V,KAAA+S,QAAxBzL,OAAAwF,OAAAC,cAAAgJ,GAAAD,EAAAE,EAAA9I,QAAAC,MAAA4I,GAAA,EAA6C,IAAlC3I,GAAA0I,EACT5J,MAAMuH,EAASzT,KAAA+S,QAAArG,IAAfU,EACIqG,GAAA7E,cAAA,GAA8B6E,EAAlC/D,4BACM+D,EAAA/D,6BAAJnP,MACEwR,4BATyB,IAAArO,8BAAAuK,2BAAAgI,UAc/BJ,mDASsBpC,MAAQlT,GAAAX,UAAA1B,OAAA,GAAAV,SAAAoC,UAAA,GAAAA,UAAA,GAAaU,QAC3CmT,OACQ,IAAA5J,OAAN,8EAEEqM,IAAJ,KACIzC,EAAA7E,cAAJ,EAAgC,IACxBuH,GAAU1C,EAAAnE,wBAA+BhO,EAA/Cf,OACIoB,MAAAC,QAAAuU,MAAJ,OACQ,IAAAtM,OAAA,gCAAAtJ,EAAA,kBAANP,QAEmBmW,EAAAjY,OAAA,IAAuBsD,EAAA2U,IAAsB,EAAlE,WAEFD,4DAOAlW,SAAIS,OAAAoQ,YAAoBpQ,OAAAoQ,UAAxBuF,cA+BQ,IAAAvM,OAAN,8EA9BMiH,GAASrQ,OAAAoQ,UAAfC,WACA0C,iBAAA,kBAA2C,SAAA5B,MACnChJ,GAAKgJ,EAAArI,KAAAsI,gBAAA/T,MAAA,KAAX,GACMgU,EAAUF,EAAhBE,QACMtF,EAAeoF,EAArB9D,QAEItE,EAAAuJ,QAAAtG,IAAJ7D,GAA0B,IAClB6K,GAASjK,EAAAuJ,QAAArG,IAAf9D,KACA6G,iBAAAjD,IACAkD,2BAAApP,IACAwR,KACErC,iBAA0BhE,EAA1BgD,aACAuF,SACAqC,wBAAA5C,OAGA3E,KAAAjE,kBAAAyL,mBAAA,GAAkD7C,EAAlD7K,GAA8DY,EAAA9B,OAA9DpD,cACAwK,KAAAjE,kBAAAyL,mBAAkD7C,EAAlD7K,GACA,UAAAyN,wBAAA5C,EAAqCA,EAArChE,gFAkBA7G,GAAK6K,EAAX7K,WACA6J,iBAAA8D,mBAAA3N,EAA6C6K,EAA7ChE,kBACIzP,KAAAyS,iBAAArE,WAAJxF,GAA0C,QAAA,KAAA,IAAApL,kBAExCgZ,KAA0BxW,KAAAyS,iBAAAgE,mBAA1B7N,GAAAkE,OAAAC,cAAA2J,GAAAF,EAAAG,EAAAzJ,QAAAC,MAAAuJ,GAAA,EAAwE,IAA7DE,GAAAJ,EACTtK,KAAIlM,MAAAyS,iBAAA7F,UAAJgK,IACM5W,KAAA+S,QAAAtG,IAAJmK,SACE7D,QAAArG,IAAAkK,GAAA5C,oBALkC,IAAAtQ,8BAAAuK,2BAAA4I,WAAA,KAAA,IAAArZ,kBAUxCsZ,KAA8B9W,KAAAyS,iBAAA5G,cAA9BvE,OAAAwF,OAAAC,cAAAgK,GAAAD,EAAAE,EAAA9J,QAAAC,MAAA4J,GAAA,EAA0E,IAA/DE,GAAAH,EACT5K,MAAM4H,EAAiB9T,KAAA+S,QAAArG,IAAvBuK,EACInD,IAAkB9T,KAAA4Q,uBAAtBkD,UACErB,iBAAA5G,cAAAqL,OAAAD,GACInD,EAAJ5E,iBACES,eACAT,cAAA,KAEFwE,qBAlBoC,IAAAhQ,8BAAAuK,2BAAAkJ,MAuB5C,MAAAzT,WAEE4F,MAAA,6CAA2DmK,EAA3D7K,6DASEnI,OAAAoQ,YAAoBpQ,OAAAoQ,UAAxBuF,cA4DQ,IAAAvM,OAAN,+EA1DMiH,GAASD,UAAfC,QAEI9Q,MAAA0H,OAAJrD,eACE+N,aAAA,OAA4BpS,KAAA0H,OAA5BrD,cAIErE,KAAA8O,KAAJnE,QACEyH,aAAA,YAAiCpS,KAAA8O,KAAjCnE,OAEE3K,KAAA8O,KAAJhE,OACEsH,aAAA,OAA4BpS,KAAA8O,KAA5BhE,MAEE9K,KAAA8O,KAAJ9D,UACEoH,aAAA,SAA8BpS,KAAA8O,KAA9B9D,SAIEhL,KAAA0H,OAAJ9C,aACEwN,aAAA,aAAkCpS,KAAA0H,OAAlC9C,YAEE5E,KAAA0H,OAAAf,qBAAmC3G,KAAA0H,OAAAf,uBAAoC,KACzEyL,aAAA,qBAA0CpS,KAAA0H,OAA1Cf,sBAEE3G,KAAA0H,OAAJnB,kBACE6L,aAAA,gBAAA,SAIEpS,KAAA0H,OAAA0P,KAAJxR,WACEwM,aAAA,eAAoCpS,KAAA0H,OAAA0P,KAApCxR,UAEE5F,KAAA0H,OAAA0P,KAAJtR,UACEsM,aAAA,cAAmCpS,KAAA0H,OAAA0P,KAAnCtR,SAEE9F,KAAA0H,OAAA0P,KAAJrR,UACEqM,aAAA,cAAmCpS,KAAA0H,OAAA0P,KAAnCrR,SAEE/F,KAAA0H,OAAA0P,KAAJpR,YACEoM,aAAA,gBAAqCpS,KAAA0H,OAAA0P,KAArCpR,WAIEhG,KAAA0H,OAAJtB,kBACEgM,aAAA,mBAAwCpS,KAAA0H,OAAxCtB,iBAGEpG,KAAA0H,OAAJlB,gBACE4L,aAAA,QAA6BpS,KAAA0H,OAA7BlB,eAEExG,KAAA0H,OAAA2P,MAAoB1V,MAAAC,QAAc5B,KAAA0H,OAAtC2P,SACEjF,aAAA,UAAAhN,OAAAkS,EAAgCtX,KAAA0H,OAAhC2P,UAIFE,cAAA,0DAWE9W,OAAAoQ,YAAoBpQ,OAAAoQ,UAAxBuF,cAoCQ,IAAAvM,OAAN,6EAnCM/C,GAAuB9G,KAAA0H,OAA7BZ,wBAEIrG,OAAAyC,SAAJiD,OAA4B,IACpBA,GAAS1F,OAAAyC,SAAfiD,MACIA,GAAA/C,QAAA,SAAJ,WACEgQ,IAD+B,iCAE/BoE,qBAAA,GAEOrR,EAAA/C,QAAA,UAAJ,YACHgQ,IADqC,mCAErCoE,qBAAA,GAEErR,EAAA/C,QAAA,oBAAJ,WACEgQ,IAD0C,kCAE1CqE,sBAAA,GAEOtR,EAAA/C,QAAA,uBAAJ,YACHgQ,IADkD,iCAElDqE,sBAAA,GAIA3Q,EAAA0Q,uBAAJ,aACE1G,SAAA0G,sBAEE1Q,EAAA2Q,wBAAJ,YACE3G,SAAA2G,iCAGA3G,SAAA4G,gCAGFC,0BCviBAC,EAAgBjU,MAChBkU,EAAN,IAEqBC,EAAA,sBAEnBpQ,UACEqQ,QAAArQ,OAAc9D,OAAAC,UAAA+T,EAAdlQ,QACAsQ,gBAAA,OACAC,aAAA,OACA1X,WAAAD,SACA4X,mFAQEnJ,UAAiB/O,KAAA+O,WAAkB,GAAAyD,GAAcxS,KAAjD0H,QAEF,MAAAhE,WACE4F,MADU5F,kDAYZ1D,KAAMmY,EAANnY,eACOoY,SAAY,SAAAC,EAAAC,GACbH,EAAAF,eAAJ,YACE7H,IAAAC,KAAmB,aACjB2H,gBAAA,IACAG,QAIFF,aAAA,SAEApH,UAAmBpQ,OAAAoQ,qBAKnBA,UAAAT,IAAuB3P,OAAAoQ,UAAAT,sBAGfmI,GAAM9X,OAAAnC,SAAAka,cAAZ,YACAC,OAAA,IACA9N,KAAA,oBAEA+N,aAAA,MAAA,gDACMjE,GAAOhU,OAAAnC,SAAAqa,qBAAA,UAAb,KACAnF,iBAAA,OAA6B,aAC3BoF,uBACAxI,IAAAC,KAAmB,aACjB2H,gBAAA,IAEDjQ,SAEHyL,iBAAA,QAA8B,SAAAlK,KAC5B0O,gBAAA,IACA1O,OAEFuP,WAAAC,aAAAP,EAAA9D,2DAWFzU,KAAAgY,kBAAA,GAAiCvX,OAAAoQ,WAAoBpQ,OAAAoQ,UAAzDuF,iBACE4B,gBAAA,GAEKhY,KAAPgY,0EAQAe,QACQhF,GAANzT,OACI6X,EAAA5X,aAAJwT,EAA8C,MAC5CxT,WAAAwT,GACIoE,EAAJpJ,eAIQ,IAAAlF,OAAN,0EAHAkF,UAAAiK,sBANAb,GAANnY,KAaMiZ,EAAoBxZ,EAAAsZ,EAA1BlB,UACAqB,SAAAD,WCtGJnB,EAAIhW,QAAUA,GAAK,qBASN4F,EAAS/D,eACTwV,EAAUrB,EAAIhW","file":"dfp.min.js","sourcesContent":["/**\n * Htz-cookie-util\n * @module htzCookieUtil\n * @author Elia Grady elia.grady@haaretz.co.il\n * @license MIT\n */\n\n/**\n * Translates Key-Value string into a convenient map.\n * @param {String} string String in format of \"key<operator>value<separator>.....\"\n * @param {object} options object for overriding defaults:\n * options.separator is a String or regExp that separates between each key value pairs\n * (default is ';'). options.operator is a String or regExp that separates between each key\n * and value within a pair (default is '=').\n * @returns {object} a map object, with key-value mapping according to the passed configuration.\n */\nfunction stringToMap(string,\n  { separator = ';', operator = '=' } = {}) {\n  const map = {};\n  const itemsArr = string.split(separator);\n  itemsArr.forEach(element => {\n    if (typeof element === 'string') {\n      const keyValue = element.split(operator);\n      if (keyValue.length === 2) {\n        try {\n          map[keyValue[0]] = decodeURIComponent(keyValue[1]);\n        }\n        catch (e) {\n          // Do nothing, malformed URI\n        }\n      }\n    }\n  });\n  return map;\n}\nexport const ssoKey = window.location.hostname.indexOf('haaretz.com') > -1 ? 'engsso' : 'tmsso';\n\n// Translates Cookie string into a convenient map.\nexport default function getCookieAsMap() {\n  const map = stringToMap(document.cookie, { separator: /;\\s?/ });\n  if (typeof map.tmsso === 'string') {\n    map.tmsso = stringToMap(map.tmsso, { separator: ':' });\n  }\n  if (typeof map.engsso === 'string') {\n    map.engsso = stringToMap(map.engsso, { separator: ':' });\n  }\n  return map;\n}\n","/**\n * Helper function. Adds N hours to a given date object.\n * @param {Date} date - the date to derive from\n * @param {Number} hours - the amount of hours to add, in whole numbers\n * @throws {SyntaxError} Will throw if the 'date' param is not provided\n * @throws {SyntaxError} Will throw if the 'hours' param is not provided\n * @throws {TypeError} Will throw if the 'hours' param is not a valid integer\n * @returns {Date} date - the new date, derived from adding the given hours\n */\nexport function addHours(date, hours) {\n  if (!date) {\n    throw new SyntaxError('addHours called without a required \\'date\\' parameter!');\n  }\n  if (!hours) {\n    throw new SyntaxError('addHours called without a required \\'hours\\' parameter!');\n  }\n  else if (isNaN(parseInt(hours, 10))) {\n    throw new TypeError('addHours called with an invalid integer \\'hours\\' parameter!');\n  }\n  const result = new Date(date);\n  result.setHours(result.getHours() + parseInt(hours, 10));\n  return result;\n}\n\n/**\n * Helper function. Adds N days to a given date object.\n * @param {Date} date - the date to derive from\n * @param {Integer} days - the amount of days to add\n * @throws {SyntaxError} Will throw if the 'date' param is not provided\n * @throws {SyntaxError} Will throw if the 'days' param is not provided\n * @throws {TypeError} Will throw if the 'hours' param is not a valid integer\n * @returns {Date} date - the new date, derived from adding the given days\n */\nexport function addDays(date, days) {\n  if (!date) {\n    throw new SyntaxError('addDays called without a required \\'date\\' parameter!');\n  }\n  if (!days) {\n    throw new SyntaxError('addDays called without a required \\'days\\' parameter!');\n  }\n  else if (isNaN(parseInt(days, 10))) {\n    throw new TypeError('addDays called with an invalid integer \\'days\\' parameter!');\n  }\n  const result = new Date(date);\n  result.setDate(result.getDate() + parseInt(days, 10));\n  return result;\n}\n","import globalConfig from '../globalConfig';\n\nconst breakpoints = globalConfig.breakpointsConfig.breakpoints;\n\n/**\n * Returns a function, that, as long as it continues to be invoked, will not\n * be triggered. The function will be called after it stops being called for\n * N milliseconds. If `immediate` is passed, trigger the function on the\n * leading edge, instead of the trailing.\n * @param { function } func - the function to run\n * @param { number } wait - the timeout period to avoid running the function\n * @param { boolean } immediate - leading edge modifier\n * @returns {function } the debounced function\n */\nexport function debounce(func, wait = 100, immediate) {\n  let timeout;\n  return function debounced() {\n    const context = this;\n    const args = arguments;// eslint-disable-line prefer-rest-params\n    const later = () => {\n      timeout = null;\n      if (!immediate) func.apply(context, args);\n    };\n    const callNow = immediate && !timeout;\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n    if (callNow) func.apply(context, args);\n  };\n}\n\n/**\n * Returns the current breakpoint that is closest to the window's width\n * @returns {number} the break that the current width represents\n */\nexport function getBreakpoint() {\n  let breakpoint;\n  const windowWidth = window.innerWidth\n    || document.documentElement.clientWidth\n    || document.body.clientWidth;\n  switch (true) {\n    case windowWidth < breakpoints.xs: breakpoint = breakpoints.xxs; break;\n    case windowWidth < breakpoints.s: breakpoint = breakpoints.xs; break;\n    case windowWidth < breakpoints.m: breakpoint = breakpoints.s; break;\n    case windowWidth < breakpoints.l: breakpoint = breakpoints.m; break;\n    case windowWidth < breakpoints.xl: breakpoint = breakpoints.l; break;\n    case windowWidth < breakpoints.xxl: breakpoint = breakpoints.xl; break;\n    default: breakpoint = breakpoints.xxl;\n  }\n  return breakpoint;\n}\n/**\n * Returns the current breakpoint that is closest to the window's width\n * @param {number} breakpoint - the breakpoint label enumerator that the current width represents\n * (yield with a getBreakpoint() call or passed manually )\n * @returns {string} breakpoint - the breakpoint label that the current width represents,\n * as a string\n */\nexport function getBreakpointName(breakpoint) {\n  let resultBreakpoint;\n  const windowWidth = breakpoint || window.innerWidth;\n  switch (true) {\n    case windowWidth < breakpoints.xs: resultBreakpoint = 'xxs'; break;\n    case windowWidth < breakpoints.s: resultBreakpoint = 'xs'; break;\n    case windowWidth < breakpoints.m: resultBreakpoint = 's'; break;\n    case windowWidth < breakpoints.l: resultBreakpoint = 'm'; break;\n    case windowWidth < breakpoints.xl: resultBreakpoint = 'l'; break;\n    case windowWidth < breakpoints.xxl: resultBreakpoint = 'xl'; break;\n    default: resultBreakpoint = 'xxl';\n  }\n  return resultBreakpoint;\n}\n","/**\r\n * Checks whether two arrays are equal\r\n * @param {Array} a - the first array to check\r\n * @param {Array} b - the second array to check\r\n * @returns {Boolean} true iff both a and b are arrays, with equal values\r\n */\r\nexport function arraysEqual(a, b) {\r\n  if (!a || !b) return false;\r\n  if (!Array.isArray(a) || !Array.isArray(b)) return false;\r\n  if (a === b) return true;\r\n  if (a.length !== b.length) return false;\r\n  for (let i = 0; i < a.length; ++i) {\r\n    if (Array.isArray(a[i]) && Array.isArray(b[i])) {\r\n      if (!arraysEqual(a[i], b[i])) return false;\r\n    }\r\n    else if (a[i] !== b[i]) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\nexport default arraysEqual;\r\n","export default (function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n});","export default (function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n})();","export default (function (arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n});","/* global dfpConfig */\r\nimport getCookieAsMap, { ssoKey } from './utils/cookieUtils';\r\n// globalConfig for DFP\r\nlet dfpBaseConf;\r\ntry {\r\n  dfpBaseConf = window.JSON.parse(document.getElementById('dfpConfig').textContent);\r\n}\r\ncatch (err) {\r\n  dfpBaseConf = window.dfpConfig;\r\n}\r\nconst dfpConfig = Object.assign({\r\n  get referrer() {\r\n    return document.referrer ? document.referrer : '';\r\n  },\r\n  get isMobile() {\r\n    return (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i\r\n      .test(window.navigator.userAgent || ''));\r\n  },\r\n  /**\r\n   * Returns true iff the loaded page is the homepage (no inner path)\r\n   * @returns {boolean}\r\n   */\r\n  get isHomepage() {\r\n    return window.location.pathname === '/' || this.environment === 3; // 'prod'\r\n  },\r\n  get department() {\r\n    return this.isHomepage ? '_homepage' : '_section';\r\n  },\r\n  /**\r\n   * returns the domain the page was loaded to. i.e: 'haaretz.co.il', 'haaretz.com'\r\n   * @returns {string} the domain name from the windows's location hostname property\r\n   */\r\n  get domain() {\r\n    const regexMatch = /([\\d|\\w]+)(\\.co\\.il|\\.com)(.*)?/.exec(window.location.hostname);\r\n    const result = regexMatch ? regexMatch[0] : window.location.hostname;\r\n    return result;\r\n  },\r\n  /**\r\n   * Returns an array of concatenated paths, separated by a dot.\r\n   * For example, for the URL:\r\n   * http://www.haaretz.co.il/news/world/america/us-election-2016/LIVE-1.2869045\r\n   * the path is '/news/world/america/us-election-2016/LIVE-1.2869045'.\r\n   * This function takes the directories ['news', 'world', 'america', 'us-election-2016']\r\n   * and converts it to the following format:\r\n   * ['.news', '.news.world', '.news.world.america', '.news.world.america.us-election-2016']\r\n   * This denotes the path configuration for the given adSlot\r\n   * non articles (sections) will be given a '0' - no articleId value for targeting purposes)\r\n   * @returns {Array.<T>} an array of path names\r\n   */\r\n  get path() {\r\n    let sectionArray = this.articleId && this.articleId !== '0' ?\r\n      window.location.pathname.split('/').slice(1, -1) :\r\n      window.location.pathname.split('/').slice(1);\r\n    sectionArray = sectionArray.filter(path =>\r\n    path !== 'wwwMobileSite' && path !== 'whtzMobileSite');\r\n    return sectionArray\r\n      .map(section => `.${section}`)\r\n      .map((section, index, arr) => arr.slice(0, index + 1)\r\n        .reduce((last, current) => last.concat(current)));\r\n  },\r\n  /**\r\n   * Returns a string representation for the name of the site\r\n   * @return {*|string}\r\n   */\r\n  get site() {\r\n    let site;\r\n    if (window.location.hostname.indexOf('haaretz.co.il') > -1) {\r\n      site = 'haaretz';\r\n    }\r\n    else if (window.location.hostname.indexOf('themarker.com') > -1) {\r\n      site = 'themarker';\r\n    }\r\n    else if (window.location.hostname.indexOf('mouse.co.il') > -1) {\r\n      site = 'mouse';\r\n    }\r\n    return site || 'haaretz';\r\n  },\r\n  /**\r\n   * Returns the current environment targeting param, if such is defined.\r\n   * @returns {number} targeting param, 1 for local development, 2 for test servers and 3 for prod.\r\n   * May return undefined if no targeting is specified.\r\n   */\r\n  get environment() {\r\n    const env = {\r\n      dev: 1,\r\n      test: 2,\r\n      prod: 3,\r\n    };\r\n    return window.location.port === '8080' ? env.dev :\r\n      (window.location.hostname.indexOf('pre.haaretz.co.il') > -1\r\n      || window.location.hostname.indexOf('tmtest.themarker.com') > -1\r\n      || window.location.hostname.indexOf('prodmouse.mouse.co.il') > -1) ? env.test :\r\n        (window.location.pathname.indexOf('/cmlink/Haaretz.HomePage') > -1\r\n        || window.location.pathname.indexOf('/cmlink/TheMarker.HomePage') > -1\r\n        || window.location.pathname.indexOf('/cmlink/Mouse.HomePage') > -1)\r\n          ? env.prod : undefined;\r\n  },\r\n  /**\r\n   * Returns the articleIf if on an article page, or null otherwise\r\n   * @returns {string} an articleId string from the pathname, or 0 if not found\r\n   */\r\n  get articleId() {\r\n    const articleIdMatch = /\\d\\.\\d+/g.exec(window.location.pathname);\r\n    let articleId = '0';\r\n    if (articleIdMatch) {\r\n      articleId = articleIdMatch.pop(); // Converts [\"1.23145\"] to \"1.23145\"\r\n    }\r\n    return articleId;\r\n  },\r\n  utm_: {\r\n    get content() {\r\n      return this.getUrlParam('utm_content');\r\n    },\r\n    get source() {\r\n      return this.getUrlParam('utm_source');\r\n    },\r\n    get medium() {\r\n      return this.getUrlParam('utm_medium');\r\n    },\r\n    get campaign() {\r\n      return this.getUrlParam('utm_campaign');\r\n    },\r\n    getUrlParam(key) {\r\n      const results = RegExp(`(${key})(=)([^&\"]+)`).exec(window.location.search);\r\n      return results && results[3] ? results[3] : undefined;\r\n    },\r\n  },\r\n  get adBlockRemoved() {\r\n    let adBlockRemoved = false;\r\n    try {\r\n      if (localStorage.getItem('adblock_removed')) {\r\n        adBlockRemoved = true;\r\n      }\r\n    }\r\n    catch (err) {\r\n      // do nothing\r\n    }\r\n    return adBlockRemoved;\r\n  },\r\n  get isWriterAlerts() {\r\n    return (location.search.indexOf('writerAlerts=true') > -1);\r\n  },\r\n  get wifiLocation() {\r\n    let wifiLocation = '';\r\n    const cookieMap = getCookieAsMap();\r\n    try {\r\n      if (cookieMap && cookieMap._htzwif) { // eslint-disable-line no-underscore-dangle\r\n        wifiLocation = (cookieMap._htzwif === 'arcaffe') // eslint-disable-line no-underscore-dangle\r\n          ? 'ArCafe' : 'university';\r\n      }\r\n    }\r\n    catch (err) {\r\n      // do nothing\r\n    }\r\n    return wifiLocation;\r\n  },\r\n  get gStatCampaignNumber() {\r\n    let gstatCampaign;\r\n    try {\r\n      gstatCampaign = localStorage.getItem('GstatCampaign') ?\r\n        JSON.parse(localStorage.getItem('GstatCampaign')) : undefined;\r\n    }\r\n    catch (err) {\r\n      /* In case of thrown 'SecurityError' or 'QuotaExceededError',\r\n       the variable should be undefined */\r\n      gstatCampaign = undefined;\r\n    }\r\n    return gstatCampaign ? gstatCampaign.CampaignNumber : undefined;\r\n  },\r\n  adSlotConfig: {\r\n    'haaretz.co.il.example.slot': {\r\n      id: 'slotId',\r\n      // path : \"/network/base/slotId/slotId_subsection\", Will be calculated from AdManager\r\n      responsive: true,\r\n      adSizeMapping: [['width1', 'height1'], ...['widthN', 'heightN']],\r\n      priority: 'normal',\r\n      fluid: false,\r\n      responsiveAdSizeMapping: {\r\n        xxs: [['width1', 'height1'], ...['widthN', 'heightN']],\r\n        xs: [['width1', 'height1'], ...['widthN', 'heightN']],\r\n        s: [['width1', 'height1'], ...['widthN', 'heightN']],\r\n        m: [['width1', 'height1'], ...['widthN', 'heightN']],\r\n        l: [['width1', 'height1'], ...['widthN', 'heightN']],\r\n        xl: [['width1', 'height1'], ...['widthN', 'heightN']],\r\n        xxl: [['width1', 'height1'], ...['widthN', 'heightN']],\r\n      },\r\n      blacklistReferrers: 'comma, delimited, blacklisted, referrer, list',\r\n      whitelistReferrers: 'comma, delimited, referrer, list',\r\n    },\r\n  },\r\n  adManagerConfig: {\r\n    network: '9401',\r\n    adUnitBase: 'haaretz.co.il_Web',\r\n  },\r\n  breakpointsConfig: {\r\n    get breakpoints() {\r\n      // Override in VM from backend to control this toggle.\r\n      let breakpoints;\r\n      switch (dfpConfig.googleGlobalSettings.breakpointType) {\r\n        case 'type1': breakpoints = this.breakpoints1; break;\r\n        case 'type2': breakpoints = this.breakpoints2; break;\r\n        case 'type3': breakpoints = this.breakpoints3; break;\r\n        case 'type4': breakpoints = this.breakpoints4; break;\r\n        default: breakpoints = this.breakpoints1;\r\n      }\r\n      return breakpoints;\r\n    },\r\n    // Type 1\r\n    breakpoints1: {\r\n      xxs: 600,\r\n      xs: 761,\r\n      s: 993,\r\n      m: 1009,\r\n      l: 1291,\r\n      xl: 1600,\r\n      xxl: 1900,\r\n    },\r\n    // Type 2\r\n    breakpoints2: {\r\n      xxs: 600,\r\n      xs: 1000,\r\n      s: 1150,\r\n      m: 1281,\r\n      l: 1600,\r\n      xl: 1920,\r\n      xxl: 1920,\r\n    },\r\n    // Type 3\r\n    breakpoints3: {\r\n      xxs: 100,\r\n      xs: 480,\r\n      s: 600,\r\n      m: 768,\r\n      l: 1024,\r\n      xl: 1280,\r\n      xxl: 1900,\r\n    },\r\n    // Type 4\r\n    breakpoints4: {\r\n      xxs: 600,\r\n      xs: 768,\r\n      s: 1024,\r\n      m: 1280,\r\n      l: 1900,\r\n      xl: 1900,\r\n      xxl: 1900,\r\n    },\r\n  },\r\n  userConfig: {\r\n    type: undefined,\r\n    age: undefined,\r\n    gender: undefined,\r\n  },\r\n  conflictManagementConfig: {\r\n    'blocking.ad.unit.name': [\r\n      {\r\n        onsize: '1280x200,970x250,3x3',\r\n        avoid: 'blocked.ad.unit.name',\r\n      },\r\n      {\r\n        onsize: '1280x200,970x250,3x3',\r\n        avoid: 'blocked.ad.unit.name',\r\n      },\r\n    ],\r\n  },\r\n  impressionManagerConfig: {\r\n    'ad.unit.name': {\r\n      target: 'all|section|homepage',\r\n      frequency: '$1/$2(day|hour)',\r\n      exposed: 0,\r\n      expires: (new Date()).getTime(),\r\n    },\r\n  },\r\n  googleGlobalSettings: {\r\n    enableSingleRequest: true,\r\n    enableAsyncRendering: true,\r\n    refreshIntervalTime: 1000,\r\n    breakpointType: 'type1',\r\n  },\r\n  sso: ssoKey,\r\n\r\n}, dfpBaseConf);\r\n\r\nexport default dfpConfig;\r\n","import globalConfig from '../globalConfig';\nimport { addHours, addDays } from '../utils/time';\nimport { debounce } from '../utils/breakpoints';\n\nexport const keys = {\n  impressions: 'impressions',\n  frequency: 'frequency',\n  /**\n   * [0] - full match\n   * [1] - impression count i.e: \"1\" | \"22\"\n   * [2] - impression expiry range quantifier  i.e: \"1\" | \"22\"\n   * [3] - impression expiry range unit i.e: \"day\" | \"hour\"\n   */\n  frequencyRegex: /(\\d+)\\/(\\d+)(day|hour)/,\n  expires: 'expires',\n  exposed: 'exposed',\n  target: 'target',\n  maxImpressions: 'maxImpressions',\n  hours: 'hour',\n  days: 'day',\n  adSlotId: 'id',\n};\n\nexport default class ImpressionsManager {\n\n  constructor(impressionManagerConfig) {\n    this.now = (new Date()).getTime(); // this date is used for comparisons only\n    this.config = Object.assign({}, impressionManagerConfig);\n    this.impressions = this.retrieveImpressionsData();\n    this.initImpressionMap();\n  }\n\n  retrieveImpressionsData() {\n    const impressions = this.migrateImpressionsData();\n    /*\n     Merge migrated data with new data\n     console.log('Migrated: ',impressions);\n     */\n    Object.keys(impressions).map((key, index) => {\n      impressions[key] = Object.assign({}, impressions[key], this.config[key]);\n      return this;\n    });\n    /*\n     console.log('Merged: ',impressions);\n     Filter out entries without frequency\n     */\n    for (const key in impressions) {\n      if ({}.hasOwnProperty.call(impressions, key)) {\n        if (!impressions[key][keys.frequency]) {\n          // console.log(`Removing ${key} - since it does not have a frequency`,impressions[key]);\n          delete impressions[key];\n        }\n      }\n    }\n    // console.log('Filtered: ',impressions);\n    return impressions;\n  }\n\n  migrateImpressionsData() {\n    let impressions;\n    let impressionsData;\n    try {\n      impressionsData = window.localStorage.getItem(keys.impressions);\n    }\n    catch (err) {\n      // In case of thrown 'SecurityError' or 'QuotaExceededError', the variable should be undefined\n      impressionsData = undefined;\n    }\n    try {\n      impressions = JSON.parse(impressionsData);\n    }\n    catch (err) {\n      // Here is where old impression data is converted to new format\n      impressions = {};\n      const oldImpressionsArray = impressionsData.split(';').filter(e => e);\n\n      oldImpressionsArray.forEach((impression) => {\n        try {\n          const adUnitImpression = impression.split(' = ');\n          const name = adUnitImpression[0];\n          const data = adUnitImpression[1];\n          const tmp = name.split('.');\n          let target = tmp.pop();\n          if (target && target === 'hp') {\n            target = 'homepage';\n          }\n          const slotId = tmp.join('.');\n          const id = `${slotId}_${target}`;\n          const exposed = parseInt(data.split('/')[0], 10) || 0;\n          const expires = parseInt(data.split('/')[1], 10) || this.now;\n          impressions[id] = {};\n          impressions[id][keys.adSlotId] = slotId;\n          impressions[id][keys.target] = target;\n          impressions[id][keys.exposed] = exposed;\n          impressions[id][keys.expires] = expires;\n        }\n        catch (err1) {\n          // console.log(`Failed converting impression: ${impression}`, err1);\n        }\n      });\n    }\n    return impressions || {};\n  }\n\n  /**\n   * Define the debounced version of the local storage save\n   */\n  saveImpressionsToLocalStorage() {\n    if (this.debouncedSave && typeof this.debouncedSave === 'function') {\n      this.debouncedSave();\n    }\n    else {\n      this.debouncedSave = debounce(this.saveImpressionsToLocalStorageImpl, 250, false);\n      this.debouncedSave();\n    }\n  }\n\n  /**\n   * Implementation of saving the impression map to localstorage\n   */\n  saveImpressionsToLocalStorageImpl() {\n    try {\n      localStorage.setItem(keys.impressions, JSON.stringify(this.impressions));\n    }\n    catch (err) {\n      /* In case of thrown 'SecurityError' or 'QuotaExceededError',\n       the operation should not break*/\n      console.error('localStorage isn\\'t available:', err); // eslint-disable-line no-console\n    }\n  }\n\n  /**\n   * Initializes the impression map based on the retrieved impressions and the global\n   * configuration.\n   */\n  initImpressionMap() {\n    Object.keys(this.config).map((key, index) => {\n      const adSlotId = key;\n      const slot = this.impressions[adSlotId];\n      let shouldUpdateExpiryDate = false;\n      // Case I: Existing slot (update)\n      if (slot) {\n        // Case I.I Existing slot, frequency has changed\n        if (this.config[adSlotId][keys.frequency] !== slot[keys.frequency]) {\n          // Updating the frequency will trigger a new expiry date\n          shouldUpdateExpiryDate = true;\n          this.impressions[adSlotId][keys.frequency] = this.config[adSlotId][keys.frequency];\n        } // Case I.II Existing slot, old expiry date\n        else if (this.now > slot[keys.expires]) {\n          // Old value that should trigger a new expiry date\n          shouldUpdateExpiryDate = true;\n        }\n      } // Case II: Non-existing slot (create new slot)\n      else {\n        this.initSlotFromConfig(adSlotId);\n      } // Finally, updates the expiry date (cases I.I and I.II)\n      if (shouldUpdateExpiryDate) {\n        this.updateExpiryDate(adSlotId);\n      }\n      return this;\n    });\n  }\n\n  /**\n   * Updates the expiry date of a slotName based on the configured slot frequency\n   * @param {String} slotName - the slotName to update.\n   */\n  updateExpiryDate(slotName) {\n    const now = new Date();\n    if (!(this.impressions[slotName] && this.impressions[slotName][keys.frequency])) {\n      throw new Error(`Unable to update expiry date for slot: ${slotName}\n      - this.impressions[slotName]:`, this.impressions[slotName]);\n    }\n    const frequencyMap = this.impressions[slotName][keys.frequency].match(keys.frequencyRegex);\n    now.setMilliseconds(0);\n    now.setSeconds(0);\n    now.setMinutes(0);\n    if (frequencyMap.indexOf(keys.days) > -1) {\n      now.setHours(0);\n    }\n    this.impressions[slotName][keys.expires] = (frequencyMap.indexOf(keys.days) > -1 ?\n      addDays(now, frequencyMap[2]) : addHours(now, frequencyMap[2])).getTime();\n\n    // Set max impressions:\n    this.impressions[slotName][keys.maxImpressions] = parseInt(frequencyMap[1], 10);\n    // Reset exposed\n    this.impressions[slotName][keys.exposed] = 0;\n  }\n\n  /**\n   * Initializes a non-existing slot from the passed global configuration for the slot\n   * @param {String} slotName - the name of the slot to create\n   */\n  initSlotFromConfig(slotName) {\n    const slot = this.impressions[slotName] || {};\n    slot[keys.frequency] = this.config[slotName][keys.frequency];\n    slot[keys.target] = this.config[slotName][keys.target];\n    slot[keys.exposed] = 0;\n    this.impressions[slotName] = slot;\n    this.updateExpiryDate(slotName);\n  }\n\n  /**\n   * Registers an impression for a given adSlot.\n   * @param {String} adSlotId - the adSlot id to register an impression for\n   * @returns {boolean} returns true iff the impression has been registered\n   */\n  registerImpression(adSlotId) {\n    if (adSlotId) {\n      const slot = this.impressions[adSlotId];\n      if (slot) {\n        const exposed = slot[keys.exposed];\n        if (isNaN(parseInt(exposed, 10)) === false) {\n          this.impressions[adSlotId][keys.exposed] += 1;\n          try {\n            this.saveImpressionsToLocalStorage();\n          }\n          catch (err) {\n            // console.log('Error saving ad impressions to localStorage!', err);\n          }\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Checks whether an adSlot has reached it's allocated impressions count.\n   * @param {String} adSlotId - the adSlot to check\n   * @returns {boolean} true iff there is a quota for the adSlot, and it has been reached\n   */\n  reachedQuota(adSlotId) {\n    // An adSlotId is suffixed with _homepage | _section if it's targeting is different\n    // between the two. If there is no difference, an _all suffix can be used.\n    const slotName = this.impressions[`${adSlotId}${globalConfig.department}`] ?\n      `${adSlotId}${globalConfig.department}` : `${adSlotId}_all`;\n\n    const slot = this.impressions[slotName];\n    let atQuota = false;\n    if (slot) {\n      const now = (new Date()).getTime();\n      // Second element of 2/4day matches '2'\n      const expires = this.impressions[slotName][keys.expires];\n      if (expires < now) {\n        this.updateExpiryDate(slotName);\n      }\n      else {\n        const maxImpressions = this.impressions[slotName][keys.maxImpressions];\n        // Not expired, did reach max impressions?\n        if (maxImpressions) {\n          atQuota = this.impressions[slotName][keys.exposed] >= maxImpressions;\n        }\n      }\n    }\n    return atQuota;\n  }\n\n\n  /**\n   * Clears the impression map from 'exposed' impressions\n   */\n  resetImpressions() {\n    const impressions = this.impressions;\n    for (const key in impressions) {\n      if ({}.hasOwnProperty.call(impressions, key)) {\n        if (impressions[key][keys.exposed]) {\n          impressions[key][keys.exposed] = 0;\n        }\n      }\n    }\n    this.saveImpressionsToLocalStorage();\n  }\n}\n","import getCookieAsMap from '../utils/cookieUtils';\nimport ImpressionManager from './impressionsManager';\nimport globalConfig from '../globalConfig';\n\nexport const userTypes = {\n  payer: 'payer',\n  registered: 'registered',\n  anonymous: 'anonymous',\n};\n\nexport default class User {\n  constructor(config) {\n    this.config = Object.assign({}, config.userConfig);\n    const cookieMap = getCookieAsMap();\n    this.ssoKey = globalConfig.sso;\n    if (!cookieMap[this.ssoKey]) {\n      // Flips the ssoKey, since cookieMap.ssoKey cannot be used to retrieve data\n      this.ssoKey = this.ssoKey === 'tmsso' ? 'engsso' : 'tmsso';\n    }\n    this.type = this.getUserType(cookieMap);\n    this.impressionManager = new ImpressionManager(config.impressionManagerConfig);\n    this.age = this.getUserAge(cookieMap);\n    this.gender = this.getUserGender(cookieMap);\n  }\n\n  getUserType(cookieMap) {\n    let userType;\n    if (cookieMap && cookieMap[this.ssoKey]) {\n      const payerProp = window.location.hostname.indexOf('haaretz.com') > -1 ?\n        'HdcPusr' : 'HtzPusr';\n      userType = cookieMap[payerProp] ? userTypes.payer : userTypes.registered;\n    }\n    else {\n      userType = userTypes.anonymous;\n    }\n    return userType;\n  }\n\n  getUserAge(cookieMap) {\n    let age;\n    const usrae = cookieMap[this.ssoKey] && cookieMap[this.ssoKey].usrae;\n    if (usrae) {\n      age = parseInt(cookieMap[this.ssoKey].usrae, 10);\n      age = age > 0 ? age : undefined;\n    }\n    return age;\n  }\n\n  getUserGender(cookieMap) {\n    let gender;\n    const urgdr = cookieMap[this.ssoKey] && cookieMap[this.ssoKey].urgdr;\n    if (urgdr) {\n      gender = parseInt(cookieMap[this.ssoKey].urgdr, 10);\n      gender = gender === 2 || gender === 1 ? gender : undefined;\n    }\n    return gender;\n  }\n}\n","class ConflictResolver {\n  constructor(conflictManagementConfig) {\n    this.dependencyMap = this.initializeDependencyMap(conflictManagementConfig);\n    this.deferredSlots = new Set();\n  }\n  initializeDependencyMap(conflictManagementJson) {\n    const queue = new Map();\n    Object.keys(conflictManagementJson).map((key, value) => {\n      let rules = conflictManagementJson[key];\n      if (rules) {\n        rules = rules.filter((item) => item.onsize && item.avoid);\n      }\n      queue.set(key, {\n        id: key,\n        rules,\n        resolvedWith: null,\n      });\n      return this;\n    });\n    return queue;\n  }\n\n  updateResolvedSlot(adSlotId, resolvedSize) {\n    if (!adSlotId) {\n      throw new Error('updateResolvedSlot must be called with an adSlotId!');\n    }\n    if (!resolvedSize) {\n      throw new Error('updateResolvedSlot must be called with a resolved size!');\n    }\n    if (this.dependencyMap.has(adSlotId)) {\n      this.dependencyMap.get(adSlotId).resolvedWith = resolvedSize;\n    }\n  }\n\n\n  isBlocked(adSlotId) {\n    if (!adSlotId) {\n      throw new Error('isBlocked must be called with an adSlotId!');\n    }\n    let isBlocked = false;\n    for (const adSlotKey of this.dependencyMap.keys()) {\n      const adSlot = this.dependencyMap.get(adSlotKey);\n      for (const adSlotRule of adSlot.rules) {\n        // Found rule specific to our target\n        if (adSlotRule.avoid === adSlotId) {\n          const parentResolvedWith = adSlot.resolvedWith;\n          // Fail fast: parent is not resolved yet - unknown returned size.\n          if (!parentResolvedWith) {\n            isBlocked = true;\n            this.deferredSlots.add(adSlotId);\n          }\n          if (adSlotRule.onsize.split(',').find(sizeString => { // eslint-disable-line\n            const size = sizeString.split('x').map(numberStr => parseInt(numberStr, 10));\n            return this.arraysEqual(size, parentResolvedWith);\n          })) {\n            // Block found\n            this.deferredSlots.add(adSlotId);\n            isBlocked = true;\n          }\n        }\n      }\n    }\n    return isBlocked;\n  }\n\n  isBlocking(adSlotId) {\n    if (!adSlotId) {\n      throw new Error('isBlocking must be called with an adSlotId!');\n    }\n    let isBlocking = false;\n    for (const adSlotKey of this.dependencyMap.keys()) {\n      if (adSlotKey === adSlotId) {\n        isBlocking = true;\n      }\n    }\n    return isBlocking;\n  }\n\n  /**\n   * Gets an array of adSlot Ids for a given adSlotId, that are dependent on (blocked by)\n   * @param {String} adSlotId - the blocking slot id\n   * @return {Array} an array of blocked slot, that has a dependency on the given slot\n   */\n  getBlockedSlotsIds(adSlotId) {\n    let result;\n    if (this.dependencyMap.has(adSlotId)) {\n      result = Array.from(this.dependencyMap.get(adSlotId).rules.map(adSlot => adSlot.avoid));\n    }\n    return result || [];\n  }\n\n  arraysEqual(a, b) {\n    if (a === b) return true;\n    if (a === null || b === null) return false;\n    if (a.length !== b.length) return false;\n    for (let i = 0; i < a.length; ++i) {\n      if (a[i] !== b[i]) return false;\n    }\n    return true;\n  }\n}\nConflictResolver.EMPTY_SIZE = [];\nexport default ConflictResolver;\n","/* global googletag */\r\nimport { adTypes } from '../objects/adManager';\r\nimport globalConfig from '../globalConfig';\r\nimport { arraysEqual } from '../utils/arrays';\r\n\r\nconst hiddenClass = globalConfig.site.indexOf('mouse') > -1 ? 'u-is-hidden' : 'h-hidden';\r\n\r\nexport default class adSlot {\r\n\r\n  constructor(adSlotConfig) {\r\n    this.config = Object.assign({}, adSlotConfig);\r\n\r\n    // Part I : Markup configuration - passed from AdManager\r\n    this.id = this.config.id;\r\n    if (!this.config.id) {\r\n      throw new Error('an adSlot requires an id!');\r\n    }\r\n    this.target = this.config.target;\r\n    this.type = this.config.type;\r\n    this.responsive = this.config.responsive;\r\n    this.fluid = this.config.fluid;\r\n    this.user = this.config.user;\r\n    this.adManager = this.config.adManager;\r\n    this.htmlElement = this.config.htmlElement;\r\n    this.priority = this.config.priority;\r\n    this.deferredSlot = this.config.deferredSlot;\r\n\r\n    // Part II : Global, general ad configuration - passed from AdManager\r\n    this.department = this.config.department;\r\n    this.network = this.config.network;\r\n    this.adUnitBase = this.config.adUnitBase;\r\n\r\n    // Part III : ad specific configuration - passed from globalConfig.adSlotConfig\r\n    this.adSizeMapping = this.config.adSizeMapping;\r\n    this.responsiveAdSizeMapping = this.config.responsiveAdSizeMapping;\r\n    this.blacklistReferrers = this.config.blacklistReferrers ?\r\n      this.config.blacklistReferrers.split(',') : [];\r\n    this.whitelistReferrers = this.config.whitelistReferrers ?\r\n      this.config.whitelistReferrers.split(',') : [];\r\n\r\n\r\n    // Part IV : Runtime configuration - calculated data - only present in runtime\r\n    this.lastResolvedSize = undefined; // Initialized in 'slotRenderEnded' callback\r\n    this.lastResolvedWithBreakpoint = undefined; // Initialized in 'slotRenderEnded' callback\r\n    this.slot = undefined; // Holds a googletag.Slot object\r\n    // [https://developers.google.com/doubleclick-gpt/reference#googletag.Slot]\r\n    try {\r\n      if (!this.deferredSlot) {\r\n        this.slot = this.defineSlot();\r\n      }\r\n    }\r\n    catch (err) {\r\n      console.error(err); // eslint-disable-line no-console\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Checks whether this adSlot is an 'Out-of-page' slot or not.\r\n   * An Out-of-page slot is a slot that is not embedded in the page 'normally'.\r\n   * @returns {boolean} true iff this adSlot is one of the predefined 'out-of-page' slots.\r\n   */\r\n  isOutOfPage() {\r\n    if (typeof this.type !== 'string') {\r\n      throw new Error('An adSlot cannot by typeless!', this);\r\n    }\r\n    if (this.isMobile() === true) {\r\n      return false;\r\n    }\r\n    switch (this.type) {\r\n      case adTypes.maavaron: return false;\r\n      case adTypes.popunder: return true;\r\n      case adTypes.talkback: return false;\r\n      case adTypes.regular: return false;\r\n      default: return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Checks whether this adSlot is a 'maavaron' slot or not.\r\n   * An Out-of-page slot is a slot that is not embedded in the page 'normally'.\r\n   * @returns {boolean} true iff this adSlot is one of the predefined 'out-of-page' slots.\r\n   */\r\n  isMaavaron() {\r\n    if (typeof this.type !== 'string') {\r\n      throw new Error('An adSlot cannot by typeless!', this);\r\n    }\r\n    if (this.isMobile() === true) {\r\n      return false;\r\n    }\r\n    switch (this.type) {\r\n      case adTypes.maavaron: return false;\r\n      default: return false;\r\n    }\r\n  }\r\n\r\n  isMobile() {\r\n    return (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i\r\n      .test(window.navigator.userAgent || ''));\r\n  }\r\n  /**\r\n   * Checks whether or not this adSlot has a non-empty whitelist, and if so, that the current\r\n   * referrer appears in the whitelist.\r\n   * Should return false iff there is a whitelist for the current adSlot, but the referrer is not\r\n   * mentioned in the whitelist.\r\n   * @returns {boolean} true iff the ad can be displayed.\r\n   */\r\n  isWhitelisted() {\r\n    let whitelisted = false;\r\n    if (this.whitelistReferrers.length !== 0) {\r\n      for (const referrer of this.whitelistReferrers) {\r\n        if (globalConfig.referrer.indexOf(referrer) > -1) {\r\n          whitelisted = true;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    else {\r\n      whitelisted = true;\r\n    }\r\n    return whitelisted;\r\n  }\r\n\r\n  /**\r\n   * Checks whether or not this adSlot has a non-empty blacklist, and if so, that the current\r\n   * referrer does not appear in the blacklist.\r\n   * Should return true iff there is a blacklist for the current adSlot, and the referrer is\r\n   * mentioned in the blacklist - to indicate that the adSlot is 'blocked'.\r\n   * @returns {boolean} true iff the ad cannot be displayed.\r\n   */\r\n  isBlacklisted() {\r\n    let blacklisted = false;\r\n    if (this.blacklistReferrers.length !== 0) {\r\n      for (const referrer of this.blacklistReferrers) {\r\n        if (globalConfig.referrer.indexOf(referrer) > -1) {\r\n          blacklisted = true;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    return blacklisted;\r\n  }\r\n\r\n\r\n  /**\r\n   * Shows the current adSlot.\r\n   * It assumes a markup is available for this slot (any tag with an id attribute = this.id)\r\n   */\r\n  show() {\r\n    if (!this.shown === true) {\r\n      this.shown = true; // Ensure show will be called once per adSlot\r\n      googletag.cmd.push(() => {\r\n        if (this.deferredSlot) {\r\n          this.slot = this.defineSlot();\r\n        }\r\n        // console.log('calling show for slot',this.id,' called @',window.performance.now());\r\n        document.getElementById(this.id).classList.remove(hiddenClass);\r\n        googletag.display(this.id);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Shows the current adSlot.\r\n   * It assumes a markup is available for this slot (any tag with an id attribute = this.id)\r\n   */\r\n  hide() {\r\n    googletag.cmd.push(() => {\r\n      document.getElementById(this.id).classList.add(hiddenClass);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Initializes page-level slot definition for the current slot\r\n   * @return {Slot} slot - the Google Slot that was defined from this AdSlot configuration\r\n   */\r\n  defineSlot() {\r\n    if (this.isMaavaron()) {\r\n      const maavaronSlot = this.defineMaavaron();\r\n      if (this.adManager.shouldSendRequestToDfp(this)) {\r\n        if (!this.shown) {\r\n          this.shown = true; // Ensure show will be called once\r\n          maavaronSlot.display();\r\n        }\r\n      }\r\n      return maavaronSlot;\r\n    }\r\n    const googletag = window.googletag;\r\n    const pubads = googletag.pubads();\r\n    const args = [];\r\n    const defineFn = this.isOutOfPage() ? googletag.defineOutOfPageSlot : googletag.defineSlot;\r\n    // 3 or 2 params according to the function that we want to activate.\r\n    args.push(this.getPath());\r\n    if (this.isOutOfPage() === false) {\r\n      if (this.fluid) {\r\n        args.push('fluid');\r\n      }\r\n      else {\r\n        args.push(this.adSizeMapping);\r\n      }\r\n    }\r\n    args.push(this.id);\r\n    let slot = defineFn.apply(defineFn, args);\r\n    if (slot) {\r\n      // Responsive size Mapping\r\n      if (this.responsive) {\r\n        let responsiveSlotSizeMapping = googletag.sizeMapping();\r\n        const breakpoints = globalConfig.breakpointsConfig.breakpoints;\r\n        const keys = Object.keys(this.responsiveAdSizeMapping);\r\n        for (const key of keys) { // ['xxs','xs',...]\r\n          responsiveSlotSizeMapping.addSize(\r\n            [breakpoints[key], 100], // 100 is a default height, since it is height agnostic\r\n            !arraysEqual(this.responsiveAdSizeMapping[key], [[0, 0]]) ?\r\n              this.responsiveAdSizeMapping[key] : []);\r\n        }\r\n        responsiveSlotSizeMapping = responsiveSlotSizeMapping.build();\r\n        slot = slot.defineSizeMapping(responsiveSlotSizeMapping);\r\n      }\r\n      slot = slot.addService(pubads);\r\n      if (this.isOutOfPage() === false) {\r\n        slot.setCollapseEmptyDiv(true);\r\n      }\r\n    }\r\n    return slot;\r\n  }\r\n\r\n  /**\r\n   * Returns the current path calculated for the adSlot\r\n   * @returns {String} a formatted string that represent the path for the slot definition\r\n   */\r\n  getPath() {\r\n    /* eslint-disable no-shadow */\r\n    let path = globalConfig.path || [];\r\n    path = path.filter(path => path !== '.');\r\n    path = path.map(section => `${this.id}${this.department}${section}`).join('/');\r\n    // If a path exist, it will be preceded with a forward slash\r\n    path = path && this.config.department !== '_homepage' ? `/${path}` : '';\r\n    /* eslint-enable no-shadow */\r\n    const calculatedPath = `/${this.config.network}/${this.config.adUnitBase}/${this.id}/${this.id}${this.department}${path}`; // eslint-disable-line max-len\r\n    return calculatedPath.toLowerCase();\r\n  }\r\n\r\n  /* eslint-disable */\r\n  slotRendered(event) {\r\n    const id = event.slot.getAdUnitPath().split('/')[3]; // Convention: [0]/[1]network/[2]base/[3]id\r\n    const isEmpty = event.isEmpty; // Did the ad return as empty?\r\n    const resolvedSize = event.size; // What 'creative' size did the ad return with?\r\n    // Empty or onload callback should be called next?\r\n  }\r\n  /* eslint-enable */\r\n\r\n  /**\r\n   * Refresh this adSlot\r\n   */\r\n  refresh() {\r\n    googletag.cmd.push(() => {\r\n      googletag.pubads().refresh([this.slot]);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Shows 'Maavaron' type adSlot using Passback definition\r\n   * @return {Slot} slot - the Google Slot that was defined for Maavaron\r\n   */\r\n  defineMaavaron() {\r\n    if (!document.referrer.match('loc.haaretz')) {\r\n      const adUnitMaavaronPath = this.getPath();\r\n      const adUnitMaavaronSize = [\r\n        [2, 1],\r\n      ];\r\n      const slot = googletag.pubads().definePassback(adUnitMaavaronPath, adUnitMaavaronSize)\r\n        .setTargeting('UserType', [this.user.type])\r\n        .setTargeting('age', [this.user.age])\r\n        .setTargeting('urgdr', [this.user.gender])\r\n        .setTargeting('articleId', [globalConfig.articleId])\r\n        .setTargeting('stg', [globalConfig.environment]);\r\n      return slot;\r\n    }\r\n    return null;\r\n  }\r\n}\r\n","/* global googletag */\nimport User from '../objects/user';\nimport ConflictResolver from '../objects/conflictResolver';\nimport AdSlot from '../objects/adSlot';\nimport { getBreakpoint, getBreakpointName } from '../utils/breakpoints';\nimport { arraysEqual } from '../utils/arrays';\n\n// There are a total of 7 adTargets:\n// \"all\",\"nonPaying\",\"anonymous\",\"registered\",\"paying\",\"digitalOnly\" and \"digitalAndPrint\"\nexport const adPriorities = {\n  high: 'high',\n  normal: 'normal',\n  low: 'low',\n};\n\nexport const adTargets = {\n  all: 'all',\n  nonPaying: 'nonPaying',\n  anonymous: 'anonymous',\n  registered: 'registered',\n  paying: 'paying',\n  digitalOnly: 'digitalOnly',\n  digitalAndPrint: 'digitalAndPrint',\n};\n\n// There are a total of 3 userTypes: \"anonymous\", \"registered\" and \"payer\"\nexport const userTypes = {\n  anonymous: 'anonymous',\n  registered: 'registered',\n  payer: 'payer',\n};\n\nexport const adTypes = {\n  maavaron: '.maavaron',\n  popunder: '.popunder',\n  talkback: '.talkback',\n  regular: '',\n};\n\n\nexport default class AdManager {\n\n  constructor(config) {\n    this.config = Object.assign({}, config);\n    this.user = new User(config);\n    this.conflictResolver = new ConflictResolver(config.conflictManagementConfig);\n    /**\n     * Avoid race conditions by making sure to respect the usual timing of GPT.\n     * This DFP implementation uses Enable-Define-Display:\n     * Define page-level settings\n     * enableServices()\n     * Define slots\n     * Display slots\n     */\n    try {\n      googletag.cmd.push(() => {\n        this.initGoogleTargetingParams(); //  Define page-level settings\n        this.initGoogleGlobalSettings();  //  enableServices()\n        this.initSlotRenderedCallback();  //  Define callbacks\n      });\n      // Mouse special treatment to base path on mobile breakpoints\n      const currentBreakpointName = getBreakpointName(getBreakpoint());\n      if (this.config.adManagerConfig.adUnitBase.indexOf('mouse.co.il') > -1 &&\n        currentBreakpointName.indexOf('xs') > -1) {\n        this.config.adManagerConfig.adUnitBase = 'mouse.co.il.mobile_web';\n      }\n      // Holds adSlot objects as soon as possible.\n      googletag.cmd.push(() => {\n        this.adSlots = this.initAdSlots(config.adSlotConfig, adPriorities.high);\n      });\n      // Once DOM ready, add more adSlots.\n      const onDomLoaded = () => { // eslint-disable-line no-inner-declarations\n        try {\n          googletag.cmd.push(() => {\n            this.adSlots = this.initAdSlots(config.adSlotConfig, adPriorities.high);\n            googletag.cmd.push(() => {\n              this.adSlots = this.initAdSlots(config.adSlotConfig, adPriorities.normal);\n            });\n          });\n        }\n        catch (err) {\n          console.log(err); // eslint-disable-line no-console\n        }\n      };\n      // Once window was loaded, add the rest of the adSlots.\n      const onWindowLoaded = () => { // eslint-disable-line no-inner-declarations\n        googletag.cmd.push(() => {\n          this.adSlots = this.initAdSlots(config.adSlotConfig, adPriorities.low);\n        });\n      };\n      switch (document.readyState) {\n        case 'loading':\n          document.addEventListener('DOMContentLoaded', onDomLoaded);\n          window.addEventListener('load', onWindowLoaded);\n          break;\n        case 'interactive':\n          onDomLoaded();\n          window.addEventListener('load', onWindowLoaded);\n          break;\n        default: // 'complete' - no need for event listeners.\n          onDomLoaded();\n          onWindowLoaded();\n      }\n    }\n    catch (err) {\n      console.error(err); // eslint-disable-line no-console\n    }\n  }\n\n  /**\n   * Shows all of the adSlots that can be displayed.\n   */\n  showAllSlots() {\n    for (const adSlotKey of this.adSlots.keys()) {\n      const adSlot = this.adSlots.get(adSlotKey);\n      if (adSlot.type !== adTypes.talkback && this.shouldSendRequestToDfp(adSlot)) {\n        adSlot.show();\n      }\n    }\n  }\n\n  /**\n   * Gets all adSlots that has a certain priority\n   * @param {adPriority} priority - the priority of the ad {high, normal, low}\n   * @return {Array<AdSlot>} adSlots - all of the defined adSlots that matches\n   * the given priority\n   */\n  getAdSlotsByPriority(priority) {\n    function priorityFilter(adSlot) {\n      return adSlot.priority === priority;\n    }\n    return Array.from(this.adSlots.values()).filter(priorityFilter);\n  }\n\n  showAllDeferredSlots() {\n    for (const deferredSlotId of this.conflictResolver.deferredSlots) {\n      if (this.adSlots.has(deferredSlotId)) {\n        if (!this.conflictResolver.isBlocked(deferredSlotId)) {\n          const deferredAdSlot = this.adSlots.get(deferredSlotId);\n          if (this.shouldSendRequestToDfp(deferredAdSlot)) {\n            deferredAdSlot.show();\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Refreshes all responsive adSlots\n   */\n  refreshAllSlots() {\n    const currentBreakpoint = getBreakpoint();\n    for (const adSlotKey of this.adSlots.keys()) {\n      const adSlot = this.adSlots.get(adSlotKey);\n      if (adSlot.responsive && adSlot.type !== adTypes.maavaron) {\n        if (adSlot.lastResolvedWithBreakpoint !== currentBreakpoint &&\n          this.shouldSendRequestToDfp(adSlot)) {\n          // console.log(`calling refresh for adSlot: ${adSlot.id}`);\n          adSlot.refresh();\n        }\n        else {\n          adSlot.hide();\n        }\n      }\n    }\n  }\n\n  /**\n   * Refreshes all adSlots\n   */\n  refreshAllSlotsInPage() {\n    for (const adSlotKey of this.adSlots.keys()) {\n      const adSlot = this.adSlots.get(adSlotKey);\n      if (this.shouldSendRequestToDfp(adSlot)) {\n        // console.log(`calling refresh for adSlot: ${adSlot.id}`);\n        adSlot.refresh();\n      }\n      else {\n        adSlot.hide();\n      }\n    }\n  }\n\n  /**\n   * Refreshes adSlot\n   */\n\n  refreshSlot(adUnitName) {\n    const adSlot = this.adSlots.get(adUnitName);\n    if (this.shouldSendRequestToDfp(adSlot)) {\n      // console.log(`calling refresh for adSlot: ${adSlot.id}`);\n      adSlot.refresh();\n    }\n    else {\n      adSlot.hide();\n    }\n  }\n\n\n      /**\n   * Initializes adSlots based on the currently found slot markup (HTML page specific),\n   * and the predefined configuration for the slots.\n   * @param {Object} adSlotConfig - the AdSlots configuration object (see: globalConfig)\n   * @param {String} filteredPriority - filters out all adSlots that does not match\n   * a given adPriority. This is used to cherry pick the init process of ads.\n   * @returns {Map}\n   */\n  initAdSlots(adSlotConfig, filteredPriority) {\n    const adSlots = new Map(this.adSlots);\n    let adSlotPlaceholders = Array.from(document.getElementsByClassName('js-dfp-ad'));\n    adSlotPlaceholders = adSlotPlaceholders.filter(node => node.id); // only nodes with an id\n    const adSlotNodeSet = new Set();\n    adSlotPlaceholders = Array.prototype.filter.call(adSlotPlaceholders, node => {\n      if (adSlotNodeSet.has(node.id) === false) { // first occurrence of Node\n        adSlotNodeSet.add(node.id);\n        return true;\n      }\n      return false;\n    });\n    // adSlotPlaceholders = adSlotPlaceholders.sort((a, b) => a.offsetTop - b.offsetTop);\n    adSlotPlaceholders.forEach(adSlot => {\n      const adSlotPriority = adSlotConfig[adSlot.id] ?\n      adSlotConfig[adSlot.id].priority || adPriorities.normal : undefined;\n      if (adSlotConfig[adSlot.id] && adSlots.has(adSlot.id) === false &&\n        adSlotPriority === filteredPriority) {\n        // The markup has a matching configuration from adSlotConfig AND was not already defined\n        try {\n          // adSlotConfig is built from globalConfig, but can be overridden by markup\n          const computedAdSlotConfig = Object.assign({}, adSlotConfig[adSlot.id], {\n            id: adSlot.id,\n            target: adSlot.attributes['data-audtarget'] ?\n              adSlot.attributes['data-audtarget'].value : adTargets.all,\n            type: this.getAdType(adSlot.id),\n            responsive: adSlotConfig[adSlot.id].responsive,\n            fluid: adSlotConfig[adSlot.id].fluid || false,\n            user: this.user,\n            adManager: this,\n            htmlElement: adSlot,\n            department: this.config.department,\n            network: this.config.adManagerConfig.network,\n            adUnitBase: this.config.adManagerConfig.adUnitBase,\n            deferredSlot: this.conflictResolver.isBlocked(adSlot.id),\n            priority: adSlotPriority,\n          });\n          const adSlotInstance = new AdSlot(computedAdSlotConfig);\n          adSlots.set(adSlot.id, adSlotInstance);\n          if (adSlotInstance.type !== adTypes.talkback &&\n            adSlotInstance.priority === adPriorities.high &&\n            this.shouldSendRequestToDfp(adSlotInstance)) {\n            /*\n             console.log('calling show for high priority slot', adSlotInstance.id, ' called @',\n             window.performance.now());\n             */\n            adSlotInstance.show();\n          }\n        }\n        catch (err) {\n          console.error(err); // eslint-disable-line no-console\n        }\n      }\n    });\n    return adSlots;\n  }\n\n  isPriority(adSlotId) {\n    return (typeof adSlotId === 'string' &&\n    (adSlotId.indexOf('plazma') > 0 ||\n    adSlotId.indexOf('maavaron') > 0 ||\n    adSlotId.indexOf('popunder') > 0));\n  }\n\n  /**\n   * Returns the adType based on the adSlot name.\n   * @param {String} adSlotId - the adSlot's identifier.\n   * @returns {*} enumerated export 'adTypes'\n   */\n  getAdType(adSlotId) {\n    if (!adSlotId) {\n      throw new Error('Missing argument: a call to getAdType must have an adSlotId');\n    }\n    if (adSlotId.indexOf(adTypes.maavaron) > -1) return adTypes.maavaron;\n    if (adSlotId.indexOf(adTypes.popunder) > -1) return adTypes.popunder;\n    if (adSlotId.indexOf(adTypes.talkback) > -1) return adTypes.talkback;\n    return adTypes.regular;\n  }\n\n  /**\n   * @param {object} adSlot the AdSlot\n   * @returns {boolean|*}\n   */\n  shouldSendRequestToDfp(adSlot) {\n    // Conflict management check\n    return this.conflictResolver.isBlocked(adSlot.id) === false &&\n      // Valid Referrer check\n      adSlot.isWhitelisted() &&\n      // Not in referrer Blacklist\n      adSlot.isBlacklisted() === false &&\n      this.shouldDisplayAdAfterAdBlockRemoval(adSlot) &&\n      // Responsive: breakpoint contains ad?\n      this.doesBreakpointContainAd(adSlot) &&\n      // Targeting check (userType vs. slotTargeting)\n      this.doesUserTypeMatchBannerTargeting(adSlot) &&\n      // Impressions Manager check (limits number of impressions per slot)\n      this.user.impressionManager.reachedQuota(adSlot.id) === false;\n  }\n\n  shouldDisplayAdAfterAdBlockRemoval(adSlot) {\n    return !(this.config.adBlockRemoved === true &&\n    (adSlot.type === adTypes.maavaron ||\n    adSlot.type === adTypes.popunder));\n  }\n\n  /**\n   * Check whether or not an ad slot should appear for the current user type\n   * @param {String} adSlotOrTarget the adSlot to check or the target as a string\n   * @returns {boolean} true iff the slot should appear for the user type\n   */\n  doesUserTypeMatchBannerTargeting(adSlotOrTarget) {\n    const userType = this.user.type;\n    const adTarget = typeof adSlotOrTarget === 'string' ? adSlotOrTarget : adSlotOrTarget.target;\n\n    switch (adTarget) {\n      case adTargets.all : return true;\n      case adTargets.nonPaying :\n        return userType === userTypes.anonymous || userType === userTypes.registered;\n      case adTargets.anonymous : return userType === userTypes.anonymous;\n      case adTargets.registered : return userType === userTypes.registered;\n      case adTargets.paying : return userType === userTypes.payer;\n      case adTargets.digitalOnly : return userType === userTypes.payer;\n      case adTargets.digitalAndPrint : return userType === userTypes.payer;\n      default: return false;\n    }\n  }\n\n  /**\n   * Report to the AdManager that a breakpoint has been switched (passed from one break to\n   * another). Should there be a responsive slot with a\n   * @param {Breakpoint} breakpoint - the breakpoint that is currently being displayed\n   * @returns {Integer} affected - the number of adSlots affected by the change\n   */\n  switchedToBreakpoint(breakpoint) {\n    if (!breakpoint) {\n      throw new Error('Missing argument: a call to switchedToBreakpoint must have an breakpoint');\n    }\n    let count = 0;\n    for (const adSlotKey of this.adSlots.keys()) {\n      const adSlot = this.adSlots.get(adSlotKey);\n      if (adSlot.responsive === true && adSlot.lastResolvedWithBreakpoint) {\n        if (adSlot.lastResolvedWithBreakpoint !== breakpoint) {\n          adSlot.refresh();\n          count++;\n        }\n      }\n    }\n    return count;\n  }\n\n  /**\n   * Checks whether an adSlot is defined for a given breakpoint (Default: current breakpoint)\n   * @param {AdSlot} adSlot - the adSlot to check.\n   * @param {Breakpoint} [breakpoint=currentBreakpoint] - the breakpoint to check this ad in.\n   * @returns {boolean} true iff the adSlot is defined for the given breakpoint.\n   */\n  doesBreakpointContainAd(adSlot, breakpoint = getBreakpoint()) {\n    if (!adSlot) {\n      throw new Error('Missing argument: a call to doesBreakpointContainAd must have an adSlot');\n    }\n    let containsBreakpoint = true;\n    if (adSlot.responsive === true) {\n      const mapping = adSlot.responsiveAdSizeMapping[getBreakpointName(breakpoint)];\n      if (Array.isArray(mapping) === false) {\n        throw new Error(`Invalid argument: breakpoint:${breakpoint} doesn't exist!`, this);\n      }\n      containsBreakpoint = mapping.length > 0 && !arraysEqual(mapping, [[0, 0]]);\n    }\n    return containsBreakpoint;\n  }\n\n  /**\n   * Initializes the callback from the 'slotRenderEnded' event for each slot\n   */\n  initSlotRenderedCallback() {\n    if (window.googletag && window.googletag.apiReady) {\n      const pubads = window.googletag.pubads();\n      pubads.addEventListener('slotRenderEnded', event => {\n        const id = event.slot.getAdUnitPath().split('/')[3];\n        const isEmpty = event.isEmpty;\n        const resolvedSize = event.size;\n        // console.log('slotRenderEnded for slot',id,' called @',window.performance.now());\n        if (this.adSlots.has(id)) {\n          const adSlot = this.adSlots.get(id);\n          adSlot.lastResolvedSize = resolvedSize;\n          adSlot.lastResolvedWithBreakpoint = getBreakpoint();\n          if (isEmpty) {\n            adSlot.lastResolvedSize = ConflictResolver.EMPTY_SIZE;\n            adSlot.hide();\n            this.releaseSlotDependencies(adSlot);\n          }\n          else {\n            this.user.impressionManager.registerImpression(`${adSlot.id}${this.config.department}`);\n            this.user.impressionManager.registerImpression(`${adSlot.id}_all`);\n            this.releaseSlotDependencies(adSlot, adSlot.lastResolvedSize);\n          }\n        }\n        else {\n          /*\n           console.error(`Cannot find an adSlot with id: ${id} - Ad Unit path is\n           ${event.slot.getAdUnitPath()}`);\n           */\n        }\n      });\n    }\n    else {\n      throw new Error('googletag api was not ready when \\'initSlotRenderedCallback\\' was called!');\n    }\n  }\n\n  releaseSlotDependencies(adSlot) {\n    try {\n      const id = adSlot.id;\n      this.conflictResolver.updateResolvedSlot(id, adSlot.lastResolvedSize);\n      if (this.conflictResolver.isBlocking(id)) {\n        // Hide all blocked adSlots\n        for (const blockedSlot of this.conflictResolver.getBlockedSlotsIds(id)) {\n          if (this.conflictResolver.isBlocked(blockedSlot)) {\n            if (this.adSlots.has(blockedSlot)) {\n              this.adSlots.get(blockedSlot).hide();\n            }\n          }\n        }\n        // Show the non blocked\n        for (const deferredSlotKey of this.conflictResolver.deferredSlots.keys()) {\n          const deferredAdSlot = this.adSlots.get(deferredSlotKey);\n          if (deferredAdSlot && this.shouldSendRequestToDfp(deferredAdSlot)) {\n            this.conflictResolver.deferredSlots.delete(deferredSlotKey);\n            if (deferredAdSlot.deferredSlot) {\n              deferredAdSlot.defineSlot();\n              deferredAdSlot.deferredSlot = false;\n            }\n            deferredAdSlot.show();\n          }\n        }\n      }\n    }\n    catch (err) {\n      /* eslint-disable no-console*/\n      console.error(`Cannot updateSlotDependencies for adSlot: ${adSlot.id}`);\n      /* eslint-enable no-console*/\n    }\n  }\n\n  /**\n   * Initializes page-level targeting params.\n   */\n  initGoogleTargetingParams() {\n    if (window.googletag && window.googletag.apiReady) {\n      // Returns a reference to the pubads service.\n      const pubads = googletag.pubads();\n      // Environment targeting (dev, test, prod)\n      if (this.config.environment) {\n        pubads.setTargeting('stg', [this.config.environment]);\n      }\n\n      // User targeting\n      if (this.user.type) {\n        pubads.setTargeting('UserType', [this.user.type]);\n      }\n      if (this.user.age) {\n        pubads.setTargeting('age', [this.user.age]);\n      }\n      if (this.user.gender) {\n        pubads.setTargeting('urgdr', [this.user.gender]);\n      }\n\n      // Context targeting\n      if (this.config.articleId) {\n        pubads.setTargeting('articleId', [this.config.articleId]);\n      }\n      if (this.config.gStatCampaignNumber && this.config.gStatCampaignNumber !== -1) {\n        pubads.setTargeting('gstat_campaign_id', [this.config.gStatCampaignNumber]);\n      }\n      if (this.config.isWriterAlerts) {\n        pubads.setTargeting('WriterAlerts', ['true']);\n      }\n      // UTM targeting\n      /* eslint-disable no-underscore-dangle */\n      if (this.config.utm_.content) {\n        pubads.setTargeting('utm_content', [this.config.utm_.content]);\n      }\n      if (this.config.utm_.source) {\n        pubads.setTargeting('utm_source', [this.config.utm_.source]);\n      }\n      if (this.config.utm_.medium) {\n        pubads.setTargeting('utm_medium', [this.config.utm_.medium]);\n      }\n      if (this.config.utm_.campaign) {\n        pubads.setTargeting('utm_campaign', [this.config.utm_.campaign]);\n      }\n      /* eslint-enable no-underscore-dangle */\n      // AdBlock removal\n      if (this.config.adBlockRemoved) {\n        pubads.setTargeting('adblock_removed', [this.config.adBlockRemoved]);\n      }\n      // University targeting - triggered via cookie\n      if (this.config.wifiLocation) {\n        pubads.setTargeting('wifi', [this.config.wifiLocation]);\n      }\n      if (this.config.tags && Array.isArray(this.config.tags)) {\n        pubads.setTargeting('tags', [...this.config.tags]);\n      }\n\n      // Ads Centering\n      pubads.setCentering(true);\n    }\n    else {\n      throw new Error('googletag api was not ready when \\'initGoogleTargetingParams\\' was called!');\n    }\n  }\n\n  /**\n   * Initializes googletag services.\n   */\n  initGoogleGlobalSettings() {\n    if (window.googletag && window.googletag.apiReady) {\n      const googleGlobalSettings = this.config.googleGlobalSettings;\n      // Enable GET parameter overrides\n      if (window.location.search) {\n        const search = window.location.search;\n        if (search.indexOf('sraon') > 0) {\n          console.log('Single Request Mode: active'); // eslint-disable-line no-console\n          googleGlobalSettings.enableSingleRequest = true;\n        }\n        else if (search.indexOf('sraoff') > 0) {\n          console.log('Single Request Mode: disabled');// eslint-disable-line no-console\n          googleGlobalSettings.enableSingleRequest = false;\n        }\n        if (search.indexOf('asyncrenderingon') > 0) {\n          console.log('Async rendering mode: active'); // eslint-disable-line no-console\n          googleGlobalSettings.enableAsyncRendering = true;\n        }\n        else if (search.indexOf('asyncrenderingonoff') > 0) {\n          console.log('Sync rendering mode: active');// eslint-disable-line no-console\n          googleGlobalSettings.enableAsyncRendering = false;\n        }\n      }\n      // Google services activation\n      if (googleGlobalSettings.enableSingleRequest === true) {\n        googletag.pubads().enableSingleRequest();\n      }\n      if (googleGlobalSettings.enableAsyncRendering === true) {\n        googletag.pubads().enableAsyncRendering();\n      }\n      else {\n        googletag.pubads().enableSyncRendering();\n      }\n      // Enables all GPT services that have been defined for ad slots on the page.\n      googletag.enableServices();\n    }\n    else {\n      throw new Error('googletag api wasn\\'t ready when \\'initGoogleGlobalSettings\\' was called!');\n    }\n  }\n}\n","/* globals googletag */\nimport AdManager from '../src/objects/adManager';\nimport globalConfig from './globalConfig';\nimport { getBreakpoint, debounce } from '../src/utils/breakpoints';\n\nconst defaultConfig = globalConfig || {};\nconst resizeTimeout = 250;\n\nexport default class DFP {\n\n  constructor(config) {\n    this.config = Object.assign({}, defaultConfig, config);\n    this.wasInitialized = false;\n    this.initStarted = false;\n    this.breakpoint = getBreakpoint();\n    this.initWindowResizeListener();\n  }\n\n  /**\n   * This part of the object's construction is dependent on the call to 'init'\n   */\n  resumeInit() {\n    try {\n      this.adManager = this.adManager || new AdManager(this.config);\n    }\n    catch (err) {\n      console.error(err); // eslint-disable-line no-console\n    }\n  }\n\n  /**\n   * initializes the 'googletag' global namespace and add the\n   * google publish tags library to the page\n   * @returns {Promise} that resolves to true once the googletag api is ready to use\n   * (googletag.apiReady = true)\n   */\n  initGoogleTag() {\n    const dfpThis = this;\n    return new Promise((resolve, reject) => {\n      if (dfpThis.initStarted === true) {\n        googletag.cmd.push(() => {\n          dfpThis.wasInitialized = true;\n          resolve(dfpThis);\n        });\n      }\n      else {\n        dfpThis.initStarted = true;\n        // set up a place holder for the gpt code downloaded from google\n        window.googletag = window.googletag || {};\n\n        // this is a command queue used by GPT any methods added to it will be\n        // executed when GPT code is available, if GPT is already available they\n        // will be executed immediately\n        window.googletag.cmd = window.googletag.cmd || [];\n        // load google tag services JavaScript\n        (() => {\n          const tag = window.document.createElement('script');\n          tag.async = true;\n          tag.type = 'text/javascript';\n          // Supports both https and http\n          tag.setAttribute('src', '//www.googletagservices.com/tag/js/gpt.js');\n          const node = window.document.getElementsByTagName('script')[0];\n          tag.addEventListener('load', () => {\n            dfpThis.resumeInit();\n            googletag.cmd.push(() => {\n              dfpThis.wasInitialized = true;\n              resolve(this);\n            });\n          });\n          tag.addEventListener('error', (error) => {\n            dfpThis.wasInitialized = false;\n            reject(error);\n          });\n          node.parentNode.insertBefore(tag, node);\n        })();\n      }\n    });\n  }\n\n  /**\n   *  Returns true iff googletag was properly initialized on the page\n   * @returns {boolean}\n   */\n  isGoogleTagReady() {\n    if (this.wasInitialized === true || (window.googletag && window.googletag.apiReady)) {\n      this.wasInitialized = true;\n    }\n    return this.wasInitialized;\n  }\n\n  /**\n   * Initializes the window resize listener to support responsive ad refreshes\n   */\n  initWindowResizeListener() {\n    const dfpThis = this;\n    function onResize() {\n      const currentBreakpoint = getBreakpoint();\n      if (dfpThis.breakpoint !== currentBreakpoint) {\n        dfpThis.breakpoint = currentBreakpoint;\n        if (dfpThis.adManager) {\n          dfpThis.adManager.refreshAllSlots();\n        }\n        else {\n          throw new Error('initWindowResizeListener error - adManager instance is not available');\n        }\n      }\n    }\n    const debouncedFunction = debounce(onResize, resizeTimeout);\n    window.onresize = debouncedFunction;\n  }\n}\n","import DFP from './dfp';\nimport globalConfig from './globalConfig';\nimport { version as v } from './../package.json';\n// const pkg = require('./../package.json');\n\n// DFP version is based on the package.json\nDFP.version = v || 'VERSION';\n\n/*\n // Only for development mode\n if ( process.env.NODE_ENV !== 'production' ) {\n DFP.dev = '123';\n }\n */\n\nexport const config = globalConfig;\nexport const version = DFP.version;\nexport default DFP;\n"]}