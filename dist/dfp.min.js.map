{"version":3,"sources":["../src/utils/cookieUtils.js","../src/utils/time.js","../src/utils/breakpoints.js","../src/utils/arrays.js","../jspm_packages/npm/systemjs-plugin-babel@0.0.17/babel-helpers/classCallCheck.js","../jspm_packages/npm/systemjs-plugin-babel@0.0.17/babel-helpers/createClass.js","../src/globalConfig.js","../src/objects/impressionsManager.js","../src/objects/user.js","../src/objects/conflictResolver.js","../src/objects/adSlot.js","../src/objects/adManager.js","../src/dfp.js","../src/index.js"],"names":["stringToMap","string","separator","undefined","_ref$separator","operator","_ref$operator","map","itemsArr","split","forEach","element","keyValue","length","decodeURIComponent","getCookieAsMap","document","cookie","tmsso","engsso","addHours","date","hours","SyntaxError","isNaN","parseInt","TypeError","result","Date","setHours","getHours","addDays","days","setDate","getDate","debounce","func","wait","arguments","immediate","timeout","context","this","args","later","apply","callNow","setTimeout","getBreakpoint","breakpoint","windowWidth","window","innerWidth","breakpoints","xs","xxs","s","m","l","xl","xxl","getBreakpointName","resultBreakpoint","arraysEqual$1","a","b","Array","isArray","i","version","_","instance","Constructor","defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","key","protoProps","staticProps","prototype","ssoKey","location","hostname","indexOf","dfpConfig","Object","assign","referrer","isMobile","test","navigator","userAgent","isHomepage","pathname","environment","department","domain","regexMatch","exec","path","sectionArray","articleId","slice","filter","section","index","arr","reduce","last","current","concat","env","port","dev","prod","articleIdMatch","pop","content","getUrlParam","source","medium","campaign","results","RegExp","search","adBlockRemoved","localStorage","getItem","err","isWriterAlerts","match","wifiLocation","cookieMap","_htzwif","gStatCampaignNumber","gstatCampaign","JSON","parse","CampaignNumber","isType1","breakpoints1","breakpoints2","getTime","breakpointsConfig","keys","ImpressionsManager","impressionManagerConfig","now","config","impressions","retrieveImpressionsData","initImpressionMap","migrateImpressionsData","_this","hasOwnProperty","call","frequency","impressionsData","oldImpressionsArray","e","impression","adUnitImpression","name","data","tmp","slotId","join","id","exposed","expires","_this2","adSlotId","err1","debouncedSave","saveImpressionsToLocalStorageImpl","setItem","stringify","error","slot","_this3","shouldUpdateExpiryDate","initSlotFromConfig","updateExpiryDate","slotName","Error","frequencyMap","frequencyRegex","setMilliseconds","setSeconds","setMinutes","maxImpressions","saveImpressionsToLocalStorage","atQuota","userTypes$1","User","userConfig","sso","type","getUserType","impressionManager","age","getUserAge","gender","getUserGender","userType","payerProp","payer","registered","anonymous","usrae","urgdr","ConflictResolver","conflictManagementConfig","dependencyMap","initializeDependencyMap","deferredSlots","Set","conflictManagementJson","queue","Map","value","rules","item","onsize","avoid","set","resolvedSize","has","get","resolvedWith","isBlocked","_step","Symbol","iterator","_iteratorNormalCompletion","_iterator","next","done","adSlotKey","adSlot","_step2","_iteratorNormalCompletion2","_iterator2","adSlotRule","parentResolvedWith","add","find","sizeString","size","numberStr","arraysEqual","isBlocking","_step3","_iteratorNormalCompletion3","_iterator3","from","EMPTY_SIZE","adSlotConfig","responsive","fluid","user","adManager","htmlElement","priority","deferredSlot","network","adUnitBase","adSizeMapping","responsiveAdSizeMapping","blacklistReferrers","whitelistReferrers","lastResolvedSize","lastResolvedWithBreakpoint","defineSlot","adTypes","maavaron","popunder","talkback","regular","whitelisted","blacklisted","shown","cmd","push","getElementById","classList","remove","display","isMaavaron","maavaronSlot","defineMaavaron","shouldSendRequestToDfp","googletag","pubads","defineFn","isOutOfPage","defineOutOfPageSlot","getPath","responsiveSlotSizeMapping","sizeMapping","addSize","build","defineSizeMapping","addService","setCollapseEmptyDiv","calculatedPath","toLowerCase","event","getAdUnitPath","isEmpty","refresh","_this4","adUnitMaavaronPath","adUnitMaavaronSize","definePassback","setTargeting","adPriorities","adTargets","userTypes$$1","AdManager","conflictResolver","initGoogleTargetingParams","initGoogleGlobalSettings","initSlotRenderedCallback","adSlots","initAdSlots","high","addEventListener","normal","low","adSlot$$1","show","priorityFilter","values","deferredSlotId","deferredAdSlot","currentBreakpoint","hide","filteredPriority","adSlotPlaceholders","getElementsByClassName","node","adSlotNodeSet","adSlotPriority","computedAdSlotConfig","attributes","all","getAdType","adManagerConfig","adSlotInstance","isWhitelisted","isBlacklisted","shouldDisplayAdAfterAdBlockRemoval","doesBreakpointContainAd","doesUserTypeMatchBannerTargeting","reachedQuota","adSlotOrTarget","adTarget","nonPaying","paying","digitalOnly","digitalAndPrint","count","_step4","_iteratorNormalCompletion4","_iterator4","containsBreakpoint","mapping","apiReady","releaseSlotDependencies","registerImpression","updateResolvedSlot","_step5","getBlockedSlotsIds","_iteratorNormalCompletion5","_iterator5","blockedSlot","_step6","_iteratorNormalCompletion6","_iterator6","deferredSlotKey","delete","utm_","setCentering","googleGlobalSettings","log","enableAsyncRendering","enableSingleRequest","enableSyncRendering","enableServices","defaultConfig","googletagInitTimeout","resizeTimeout","DFP$1","wasInitialized","initWindowResizeListener","dfpThis","Promise","resolve","reject","isGoogleTagReady","tag","createElement","async","setAttribute","getElementsByTagName","onload","resumeInit","onerror","parentNode","insertBefore","promise","onResize","refreshAllSlots","debouncedFunction","onresize","version$1"],"mappings":"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","file":"dfp.min.js","sourcesContent":["/**\r\n * Htz-cookie-util\r\n * @module htzCookieUtil\r\n * @author Elia Grady elia.grady@haaretz.co.il\r\n * @license MIT\r\n */\r\n\r\n/**\r\n * Translates Key-Value string into a convenient map.\r\n * @param {String} string String in format of \"key<operator>value<separator>.....\"\r\n * @param {object} options object for overriding defaults:\r\n * options.separator is a String or regExp that separates between each key value pairs\r\n * (default is ';'). options.operator is a String or regExp that separates between each key\r\n * and value within a pair (default is '=').\r\n * @returns {object} a map object, with key-value mapping according to the passed configuration.\r\n */\r\nfunction stringToMap(string,\r\n  { separator = ';', operator = '=' } = {}) {\r\n  const map = {};\r\n  const itemsArr = string.split(separator);\r\n  itemsArr.forEach(element => {\r\n    if (typeof element === 'string') {\r\n      const keyValue = element.split(operator);\r\n      if (keyValue.length === 2) {\r\n        map[keyValue[0]] = decodeURIComponent(keyValue[1]);\r\n      }\r\n    }\r\n  });\r\n  return map;\r\n}\r\nexport const ssoKey = window.location.hostname.indexOf('haaretz.com') > -1 ? 'engsso' : 'tmsso';\r\n\r\n// Translates Cookie string into a convenient map.\r\nexport default function getCookieAsMap() {\r\n  const map = stringToMap(document.cookie, { separator: /;\\s?/ });\r\n  if (typeof map.tmsso === 'string') {\r\n    map.tmsso = stringToMap(map.tmsso, { separator: ':' });\r\n  }\r\n  if (typeof map.engsso === 'string') {\r\n    map.engsso = stringToMap(map.engsso, { separator: ':' });\r\n  }\r\n  return map;\r\n}\r\n","/**\r\n * Helper function. Adds N hours to a given date object.\r\n * @param {Date} date - the date to derive from\r\n * @param {Number} hours - the amount of hours to add, in whole numbers\r\n * @throws {SyntaxError} Will throw if the 'date' param is not provided\r\n * @throws {SyntaxError} Will throw if the 'hours' param is not provided\r\n * @throws {TypeError} Will throw if the 'hours' param is not a valid integer\r\n * @returns {Date} date - the new date, derived from adding the given hours\r\n */\r\nexport function addHours(date, hours) {\r\n  if (!date) {\r\n    throw new SyntaxError('addHours called without a required \\'date\\' parameter!');\r\n  }\r\n  if (!hours) {\r\n    throw new SyntaxError('addHours called without a required \\'hours\\' parameter!');\r\n  }\r\n  else if (isNaN(parseInt(hours, 10))) {\r\n    throw new TypeError('addHours called with an invalid integer \\'hours\\' parameter!');\r\n  }\r\n  const result = new Date(date);\r\n  result.setHours(result.getHours() + parseInt(hours, 10));\r\n  return result;\r\n}\r\n\r\n/**\r\n * Helper function. Adds N days to a given date object.\r\n * @param {Date} date - the date to derive from\r\n * @param {Integer} days - the amount of days to add\r\n * @throws {SyntaxError} Will throw if the 'date' param is not provided\r\n * @throws {SyntaxError} Will throw if the 'days' param is not provided\r\n * @throws {TypeError} Will throw if the 'hours' param is not a valid integer\r\n * @returns {Date} date - the new date, derived from adding the given days\r\n */\r\nexport function addDays(date, days) {\r\n  if (!date) {\r\n    throw new SyntaxError('addDays called without a required \\'date\\' parameter!');\r\n  }\r\n  if (!days) {\r\n    throw new SyntaxError('addDays called without a required \\'days\\' parameter!');\r\n  }\r\n  else if (isNaN(parseInt(days, 10))) {\r\n    throw new TypeError('addDays called with an invalid integer \\'days\\' parameter!');\r\n  }\r\n  const result = new Date(date);\r\n  result.setDate(result.getDate() + parseInt(days, 10));\r\n  return result;\r\n}\r\n","import globalConfig from '../globalConfig';\r\n\r\nconst breakpoints = globalConfig.breakpointsConfig.breakpoints;\r\n\r\n/**\r\n * Returns a function, that, as long as it continues to be invoked, will not\r\n * be triggered. The function will be called after it stops being called for\r\n * N milliseconds. If `immediate` is passed, trigger the function on the\r\n * leading edge, instead of the trailing.\r\n * @param {function} func - the function to run\r\n * @param {Number} wait - the timeout period to avoid running the function\r\n * @param {Boolean} immediate - leading edge modifier\r\n * @returns {function} the debounced function\r\n * //TODO translate to ES6 format or import lodash debounce instead\r\n */\r\nexport function debounce(func, wait = 100, immediate) {\r\n  let timeout;\r\n  return function debounced() {\r\n    const context = this;\r\n    const args = arguments;// eslint-disable-line prefer-rest-params\r\n    const later = () => {\r\n      timeout = null;\r\n      if (!immediate) func.apply(context, args);\r\n    };\r\n    const callNow = immediate && !timeout;\r\n    clearTimeout(timeout);\r\n    timeout = setTimeout(later, wait);\r\n    if (callNow) func.apply(context, args);\r\n  };\r\n}\r\n\r\n/**\r\n * Returns the current breakpoint that is closest to the window's width\r\n * @returns {number} the break that the current width represents\r\n */\r\nexport function getBreakpoint() {\r\n  let breakpoint;\r\n  const windowWidth = window.innerWidth;\r\n  switch (windowWidth) {\r\n    case windowWidth < breakpoints.xs: breakpoint = breakpoints.xxs; break;\r\n    case windowWidth < breakpoints.s: breakpoint = breakpoints.xs; break;\r\n    case windowWidth < breakpoints.m: breakpoint = breakpoints.s; break;\r\n    case windowWidth < breakpoints.l: breakpoint = breakpoints.m; break;\r\n    case windowWidth < breakpoints.xl: breakpoint = breakpoints.l; break;\r\n    case windowWidth < breakpoints.xxl: breakpoint = breakpoints.xl; break;\r\n    default: breakpoint = breakpoints.xxl;\r\n  }\r\n  return breakpoint;\r\n}\r\n/**\r\n * Returns the current breakpoint that is closest to the window's width\r\n * @param {string} breakpoint - the breakpoint label enumerator that the current width represents\r\n * @returns {string} breakpoint - the breakpoint label that the current width represents,\r\n * as a string\r\n */\r\nexport function getBreakpointName(breakpoint) {\r\n  let resultBreakpoint;\r\n  const windowWidth = breakpoint || window.innerWidth;\r\n  switch (windowWidth) {\r\n    case windowWidth < breakpoints.xs: resultBreakpoint = 'xxs'; break;\r\n    case windowWidth < breakpoints.s: resultBreakpoint = 'xs'; break;\r\n    case windowWidth < breakpoints.m: resultBreakpoint = 's'; break;\r\n    case windowWidth < breakpoints.l: resultBreakpoint = 'm'; break;\r\n    case windowWidth < breakpoints.xl: resultBreakpoint = 'l'; break;\r\n    case windowWidth < breakpoints.xxl: resultBreakpoint = 'xl'; break;\r\n    default: resultBreakpoint = 'xxl';\r\n  }\r\n  return resultBreakpoint;\r\n}\r\n","/**\r\n * Checks whether two arrays are equal\r\n * @param {Array} a - the first array to check\r\n * @param {Array} b - the second array to check\r\n * @returns {Boolean} true iff both a and b are arrays, with equal values\r\n */\r\nexport function arraysEqual(a, b) {\r\n  if (!a || !b) return false;\r\n  if (!Array.isArray(a) || !Array.isArray(b)) return false;\r\n  if (a === b) return true;\r\n  if (a.length !== b.length) return false;\r\n  for (let i = 0; i < a.length; ++i) {\r\n    if (a[i] !== b[i]) return false;\r\n  }\r\n  return true;\r\n}\r\nexport default arraysEqual;\r\n","export default (function (instance, Constructor) {\r\n  if (!(instance instanceof Constructor)) {\r\n    throw new TypeError(\"Cannot call a class as a function\");\r\n  }\r\n});","export default (function () {\r\n  function defineProperties(target, props) {\r\n    for (var i = 0; i < props.length; i++) {\r\n      var descriptor = props[i];\r\n      descriptor.enumerable = descriptor.enumerable || false;\r\n      descriptor.configurable = true;\r\n      if (\"value\" in descriptor) descriptor.writable = true;\r\n      Object.defineProperty(target, descriptor.key, descriptor);\r\n    }\r\n  }\r\n\r\n  return function (Constructor, protoProps, staticProps) {\r\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\r\n    if (staticProps) defineProperties(Constructor, staticProps);\r\n    return Constructor;\r\n  };\r\n})();","/* global dfpBaseConf */\nimport getCookieAsMap, { ssoKey } from './utils/cookieUtils';\n// globalConfig for DFP\nconst dfpConfig = Object.assign({\n  get referrer() {\n    return document.referrer ? document.referrer : '';\n  },\n  get isMobile() {\n    return (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i\n      .test(window.navigator.userAgent || ''));\n  },\n  /**\n   * Returns true iff the loaded page is the homepage (no inner path)\n   * @returns {boolean}\n   */\n  get isHomepage() {\n    return window.location.pathname === '/' || this.environment === 3; // 'prod'\n  },\n  get department() {\n    return this.isHomepage ? '_homepage' : '_section';\n  },\n  /**\n   * returns the domain the page was loaded to. i.e: 'haaretz.co.il', 'haaretz.com'\n   * @returns {string} the domain name from the windows's location hostname property\n   */\n  get domain() {\n    const regexMatch = /([\\d|\\w]+)(\\.co\\.il|\\.com)(.*)?/.exec(window.location.hostname);\n    const result = regexMatch ? regexMatch[0] : window.location.hostname;\n    return result;\n  },\n  /**\n   * Returns an array of concatenated paths, separated by a dot.\n   * For example, for the URL:\n   * http://www.haaretz.co.il/news/world/america/us-election-2016/LIVE-1.2869045\n   * the path is '/news/world/america/us-election-2016/LIVE-1.2869045'.\n   * This function takes the directories ['news', 'world', 'america', 'us-election-2016']\n   * and converts it to the following format:\n   * ['.news', '.news.world', '.news.world.america', '.news.world.america.us-election-2016']\n   * This denotes the path configuration for the given adSlot\n   * non articles (sections) will be given a '0' - no articleId value for targeting purposes)\n   * @returns {Array.<T>} an array of path names\n   */\n  get path() {\n    let sectionArray = this.articleId && this.articleId !== '0' ?\n      window.location.pathname.split('/').slice(1, -1) :\n      window.location.pathname.split('/').slice(1);\n    sectionArray = sectionArray.filter(path =>\n    path !== 'wwwMobileSite' && path !== 'whtzMobileSite');\n    return sectionArray\n      .map(section => `.${section}`)\n      .map((section, index, arr) => arr.slice(0, index + 1)\n        .reduce((last, current) => last.concat(current)));\n  },\n  /**\n   * Returns the current environment targeting param, if such is defined.\n   * @returns {number} targeting param, 1 for local development, 2 for test servers and 3 for prod.\n   * May return undefined if no targeting is specified.\n   */\n  get environment() {\n    const env = {\n      dev: 1,\n      test: 2,\n      prod: 3,\n    };\n    return window.location.port === '8080' ? env.dev :\n      (window.location.hostname.indexOf('pre.haaretz.co.il') > -1\n      || window.location.hostname.indexOf('tmtest.themarker.com') > -1) ? env.test :\n        (window.location.pathname.indexOf('/cmlink/Haaretz.HomePage') > -1\n        || window.location.pathname.indexOf('/cmlink/TheMarker.HomePage') > -1)\n          ? env.prod : undefined;\n  },\n  /**\n   * Returns the articleIf if on an article page, or null otherwise\n   * @returns {string} an articleId string from the pathname, or 0 if not found\n   */\n  get articleId() {\n    const articleIdMatch = /\\d\\.\\d+/g.exec(window.location.pathname);\n    let articleId = '0';\n    if (articleIdMatch) {\n      articleId = articleIdMatch.pop(); // Converts [\"1.23145\"] to \"1.23145\"\n    }\n    return articleId;\n  },\n  utm_: {\n    get content() {\n      return this.getUrlParam('utm_content');\n    },\n    get source() {\n      return this.getUrlParam('utm_source');\n    },\n    get medium() {\n      return this.getUrlParam('utm_medium');\n    },\n    get campaign() {\n      return this.getUrlParam('utm_campaign');\n    },\n    getUrlParam(key) {\n      const results = RegExp(`(${key})(=)([^&\"]+)`).exec(window.location.search);\n      return results && results[3] ? results[3] : undefined;\n    },\n  },\n  get adBlockRemoved() {\n    let adBlockRemoved = false;\n    try {\n      if (localStorage.getItem('adblock_removed')) {\n        adBlockRemoved = true;\n      }\n    }\n    catch (err) {\n      // do nothing\n    }\n    return adBlockRemoved;\n  },\n  get isWriterAlerts(){\n    return !!location.search.match('writerAlerts=true');\n  },\n  get wifiLocation() {\n    let wifiLocation = '';\n    const cookieMap = getCookieAsMap();\n    try {\n      if (cookieMap && cookieMap._htzwif) { // eslint-disable-line no-underscore-dangle\n        wifiLocation = (cookieMap._htzwif === 'arcaffe') // eslint-disable-line no-underscore-dangle\n          ? 'ArCafe' : 'university';\n      }\n    }\n    catch (err) {\n      // do nothing\n    }\n    return wifiLocation;\n  },\n  get gStatCampaignNumber() {\n    let gstatCampaign;\n    try {\n      gstatCampaign = localStorage.getItem('GstatCampaign') ?\n        JSON.parse(localStorage.getItem('GstatCampaign')) : undefined;\n    }\n    catch (err) {\n      /* In case of thrown 'SecurityError' or 'QuotaExceededError',\n       the variable should be undefined */\n      gstatCampaign = undefined;\n    }\n    return gstatCampaign ? gstatCampaign.CampaignNumber : undefined;\n  },\n  adSlotConfig: {\n    'haaretz.co.il.example.slot': {\n      id: 'slotId',\n      // path : \"/network/base/slotId/slotId_subsection\", Will be calculated from AdManager\n      responsive: true,\n      adSizeMapping: [['width1', 'height1'], ...['widthN', 'heightN']],\n      priority: 'normal',\n      fluid: false,\n      responsiveAdSizeMapping: {\n        xxs: [['width1', 'height1'], ...['widthN', 'heightN']],\n        xs: [['width1', 'height1'], ...['widthN', 'heightN']],\n        s: [['width1', 'height1'], ...['widthN', 'heightN']],\n        m: [['width1', 'height1'], ...['widthN', 'heightN']],\n        l: [['width1', 'height1'], ...['widthN', 'heightN']],\n        xl: [['width1', 'height1'], ...['widthN', 'heightN']],\n        xxl: [['width1', 'height1'], ...['widthN', 'heightN']],\n      },\n      blacklistReferrers: 'comma, delimited, blacklisted, referrer, list',\n      whitelistReferrers: 'comma, delimited, referrer, list',\n    },\n  },\n  adManagerConfig: {\n    network: '9401',\n    adUnitBase: 'haaretz.co.il_Web',\n  },\n  breakpointsConfig: {\n    get breakpoints() {\n      const isType1 = true; // Override in VM from backend to control this toggle.\n      return isType1 ? this.breakpoints1 : this.breakpoints2;\n    },\n    // Type 1\n    breakpoints1: {\n      xxs: 600,\n      xs: 761,\n      s: 993,\n      m: 1009,\n      l: 1291,\n      xl: 1600,\n      xxl: 1900,\n    },\n    // Type 2\n    breakpoints2: {\n      xxs: 600,\n      xs: 1000,\n      s: 1150,\n      m: 1281,\n      l: 1600,\n      xl: 1920,\n      xxl: 1920,\n    },\n  },\n  userConfig: {\n    type: undefined,\n    age: undefined,\n    gender: undefined,\n  },\n  conflictManagementConfig: {\n    'blocking.ad.unit.name': [\n      {\n        onsize: '1280x200,970x250,3x3',\n        avoid: 'blocked.ad.unit.name',\n      },\n      {\n        onsize: '1280x200,970x250,3x3',\n        avoid: 'blocked.ad.unit.name',\n      },\n    ],\n  },\n  impressionManagerConfig: {\n    'ad.unit.name': {\n      target: 'all|section|homepage',\n      frequency: '$1/$2(day|hour)',\n      exposed: 0,\n      expires: (new Date()).getTime(),\n    },\n  },\n  googleGlobalSettings: {\n    enableSingleRequest: true,\n    enableAsyncRendering: true,\n  },\n  sso: ssoKey,\n\n}, window.dfpConfig);\n\nexport default dfpConfig;\n","import globalConfig from '../globalConfig';\r\nimport { addHours, addDays } from '../utils/time';\r\nimport { debounce } from '../utils/breakpoints';\r\n\r\nexport const keys = {\r\n  impressions: 'impressions',\r\n  frequency: 'frequency',\r\n  /**\r\n   * [0] - full match\r\n   * [1] - impression count i.e: \"1\" | \"22\"\r\n   * [2] - impression expiry range quantifier  i.e: \"1\" | \"22\"\r\n   * [3] - impression expiry range unit i.e: \"day\" | \"hour\"\r\n   */\r\n  frequencyRegex: /(\\d+)\\/(\\d+)(day|hour)/,\r\n  expires: 'expires',\r\n  exposed: 'exposed',\r\n  target: 'target',\r\n  maxImpressions: 'maxImpressions',\r\n  hours: 'hour',\r\n  days: 'day',\r\n  adSlotId: 'id',\r\n};\r\n\r\nexport default class ImpressionsManager {\r\n\r\n  constructor(impressionManagerConfig) {\r\n    this.now = (new Date()).getTime(); // this date is used for comparisons only\r\n    this.config = Object.assign({}, impressionManagerConfig);\r\n    this.impressions = this.retrieveImpressionsData();\r\n    this.initImpressionMap();\r\n  }\r\n\r\n  retrieveImpressionsData() {\r\n    const impressions = this.migrateImpressionsData();\r\n    /*\r\n     Merge migrated data with new data\r\n     console.log('Migrated: ',impressions);\r\n     */\r\n    Object.keys(impressions).map((key, index) => {\r\n      impressions[key] = Object.assign({}, impressions[key], this.config[key]);\r\n      return this;\r\n    });\r\n    /*\r\n     console.log('Merged: ',impressions);\r\n     Filter out entries without frequency\r\n     */\r\n    for (const key in impressions) {\r\n      if ({}.hasOwnProperty.call(impressions, key)) {\r\n        if (!impressions[key][keys.frequency]) {\r\n          // console.log(`Removing ${key} - since it does not have a frequency`,impressions[key]);\r\n          delete impressions[key];\r\n        }\r\n      }\r\n    }\r\n    // console.log('Filtered: ',impressions);\r\n    return impressions;\r\n  }\r\n\r\n  migrateImpressionsData() {\r\n    let impressions;\r\n    let impressionsData;\r\n    try {\r\n      impressionsData = window.localStorage.getItem(keys.impressions);\r\n    }\r\n    catch (err) {\r\n      // In case of thrown 'SecurityError' or 'QuotaExceededError', the variable should be undefined\r\n      impressionsData = undefined;\r\n    }\r\n    try {\r\n      impressions = JSON.parse(impressionsData);\r\n    }\r\n    catch (err) {\r\n      // Here is where old impression data is converted to new format\r\n      impressions = {};\r\n      const oldImpressionsArray = impressionsData.split(';').filter(e => e);\r\n\r\n      oldImpressionsArray.forEach((impression) => {\r\n        try {\r\n          const adUnitImpression = impression.split(' = ');\r\n          const name = adUnitImpression[0];\r\n          const data = adUnitImpression[1];\r\n          const tmp = name.split('.');\r\n          let target = tmp.pop();\r\n          if (target && target === 'hp') {\r\n            target = 'homepage';\r\n          }\r\n          const slotId = tmp.join('.');\r\n          const id = `${slotId}_${target}`;\r\n          const exposed = parseInt(data.split('/')[0], 10) || 0;\r\n          const expires = parseInt(data.split('/')[1], 10) || this.now;\r\n          impressions[id] = {};\r\n          impressions[id][keys.adSlotId] = slotId;\r\n          impressions[id][keys.target] = target;\r\n          impressions[id][keys.exposed] = exposed;\r\n          impressions[id][keys.expires] = expires;\r\n        }\r\n        catch (err1) {\r\n          // console.log(`Failed converting impression: ${impression}`, err1);\r\n        }\r\n      });\r\n    }\r\n    return impressions || {};\r\n  }\r\n\r\n  /**\r\n   * Define the debounced version of the local storage save\r\n   */\r\n  saveImpressionsToLocalStorage() {\r\n    if (this.debouncedSave && typeof this.debouncedSave === 'function') {\r\n      this.debouncedSave();\r\n    }\r\n    else {\r\n      this.debouncedSave = debounce(this.saveImpressionsToLocalStorageImpl, 250, false);\r\n      this.debouncedSave();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Implementation of saving the impression map to localstorage\r\n   */\r\n  saveImpressionsToLocalStorageImpl() {\r\n    try {\r\n      localStorage.setItem(keys.impressions, JSON.stringify(this.impressions));\r\n    }\r\n    catch (err) {\r\n      /* In case of thrown 'SecurityError' or 'QuotaExceededError',\r\n       the operation should not break*/\r\n      console.error('localStorage isn\\'t available:', err); // eslint-disable-line no-console\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initializes the impression map based on the retrieved impressions and the global\r\n   * configuration.\r\n   */\r\n  initImpressionMap() {\r\n    Object.keys(this.config).map((key, index) => {\r\n      const adSlotId = key;\r\n      const slot = this.impressions[adSlotId];\r\n      let shouldUpdateExpiryDate = false;\r\n      // Case I: Existing slot (update)\r\n      if (slot) {\r\n        // Case I.I Existing slot, frequency has changed\r\n        if (this.config[adSlotId][keys.frequency] !== slot[keys.frequency]) {\r\n          // Updating the frequency will trigger a new expiry date\r\n          shouldUpdateExpiryDate = true;\r\n          this.impressions[adSlotId][keys.frequency] = this.config[adSlotId][keys.frequency];\r\n        } // Case I.II Existing slot, old expiry date\r\n        else if (this.now > slot[keys.expires]) {\r\n          // Old value that should trigger a new expiry date\r\n          shouldUpdateExpiryDate = true;\r\n        }\r\n      } // Case II: Non-existing slot (create new slot)\r\n      else {\r\n        this.initSlotFromConfig(adSlotId);\r\n      } // Finally, updates the expiry date (cases I.I and I.II)\r\n      if (shouldUpdateExpiryDate) {\r\n        this.updateExpiryDate(adSlotId);\r\n      }\r\n      return this;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Updates the expiry date of a slotName based on the configured slot frequency\r\n   * @param {String} slotName - the slotName to update.\r\n   */\r\n  updateExpiryDate(slotName) {\r\n    const now = new Date();\r\n    if (!(this.impressions[slotName] && this.impressions[slotName][keys.frequency])) {\r\n      throw new Error(`Unable to update expiry date for slot: ${slotName}\r\n      - this.impressions[slotName]:`, this.impressions[slotName]);\r\n    }\r\n    const frequencyMap = this.impressions[slotName][keys.frequency].match(keys.frequencyRegex);\r\n    now.setMilliseconds(0);\r\n    now.setSeconds(0);\r\n    now.setMinutes(0);\r\n    if (frequencyMap.indexOf(keys.days) > -1) {\r\n      now.setHours(0);\r\n    }\r\n    this.impressions[slotName][keys.expires] = (frequencyMap.indexOf(keys.days) > -1 ?\r\n      addDays(now, frequencyMap[2]) : addHours(now, frequencyMap[2])).getTime();\r\n\r\n    // Set max impressions:\r\n    this.impressions[slotName][keys.maxImpressions] = parseInt(frequencyMap[1], 10);\r\n    // Reset exposed\r\n    this.impressions[slotName][keys.exposed] = 0;\r\n  }\r\n\r\n  /**\r\n   * Initializes a non-existing slot from the passed global configuration for the slot\r\n   * @param {String} slotName - the name of the slot to create\r\n   */\r\n  initSlotFromConfig(slotName) {\r\n    const slot = this.impressions[slotName] || {};\r\n    slot[keys.frequency] = this.config[slotName][keys.frequency];\r\n    slot[keys.target] = this.config[slotName][keys.target];\r\n    slot[keys.exposed] = 0;\r\n    this.impressions[slotName] = slot;\r\n    this.updateExpiryDate(slotName);\r\n  }\r\n\r\n  /**\r\n   * Registers an impression for a given adSlot.\r\n   * @param {String} adSlotId - the adSlot id to register an impression for\r\n   * @returns {boolean} returns true iff the impression has been registered\r\n   */\r\n  registerImpression(adSlotId) {\r\n    if (adSlotId) {\r\n      const slot = this.impressions[adSlotId];\r\n      if (slot) {\r\n        const exposed = slot[keys.exposed];\r\n        if (isNaN(parseInt(exposed, 10)) === false) {\r\n          this.impressions[adSlotId][keys.exposed] += 1;\r\n          try {\r\n            this.saveImpressionsToLocalStorage();\r\n          }\r\n          catch (err) {\r\n            // console.log('Error saving ad impressions to localStorage!', err);\r\n          }\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Checks whether an adSlot has reached it's allocated impressions count.\r\n   * @param {String} adSlotId - the adSlot to check\r\n   * @returns {boolean} true iff there is a quota for the adSlot, and it has been reached\r\n   */\r\n  reachedQuota(adSlotId) {\r\n    // An adSlotId is suffixed with _homepage | _section if it's targeting is different\r\n    // between the two. If there is no difference, an _all suffix can be used.\r\n    const slotName = this.impressions[`${adSlotId}${globalConfig.department}`] ?\r\n      `${adSlotId}${globalConfig.department}` : `${adSlotId}_all`;\r\n\r\n    const slot = this.impressions[slotName];\r\n    let atQuota = false;\r\n    if (slot) {\r\n      const now = (new Date()).getTime();\r\n      // Second element of 2/4day matches '2'\r\n      const expires = this.impressions[slotName][keys.expires];\r\n      if (expires < now) {\r\n        this.updateExpiryDate(slotName);\r\n      }\r\n      else {\r\n        const maxImpressions = this.impressions[slotName][keys.maxImpressions];\r\n        // Not expired, did reach max impressions?\r\n        if (maxImpressions) {\r\n          atQuota = this.impressions[slotName][keys.exposed] >= maxImpressions;\r\n        }\r\n      }\r\n    }\r\n    return atQuota;\r\n  }\r\n\r\n\r\n  /**\r\n   * Clears the impression map from 'exposed' impressions\r\n   */\r\n  resetImpressions() {\r\n    const impressions = this.impressions;\r\n    for (const key in impressions) {\r\n      if ({}.hasOwnProperty.call(impressions, key)) {\r\n        if (impressions[key][keys.exposed]) {\r\n          impressions[key][keys.exposed] = 0;\r\n        }\r\n      }\r\n    }\r\n    this.saveImpressionsToLocalStorage();\r\n  }\r\n}\r\n","import getCookieAsMap from '../utils/cookieUtils';\r\nimport ImpressionManager from './impressionsManager';\r\nimport globalConfig from '../globalConfig';\r\n\r\nexport const userTypes = {\r\n  payer: 'payer',\r\n  registered: 'registered',\r\n  anonymous: 'anonymous',\r\n};\r\n\r\nexport default class User {\r\n  constructor(config) {\r\n    this.config = Object.assign({}, config.userConfig);\r\n    const cookieMap = getCookieAsMap();\r\n    this.ssoKey = globalConfig.sso;\r\n    if (!cookieMap[this.ssoKey]) {\r\n      // Flips the ssoKey, since cookieMap.ssoKey cannot be used to retrieve data\r\n      this.ssoKey = this.ssoKey === 'tmsso' ? 'engsso' : 'tmsso';\r\n    }\r\n    this.type = this.getUserType(cookieMap);\r\n    this.impressionManager = new ImpressionManager(config.impressionManagerConfig);\r\n    this.age = this.getUserAge(cookieMap);\r\n    this.gender = this.getUserGender(cookieMap);\r\n  }\r\n\r\n  getUserType(cookieMap) {\r\n    let userType;\r\n    if (cookieMap && cookieMap[this.ssoKey]) {\r\n      const payerProp = window.location.hostname.indexOf('haaretz.com') > -1 ?\r\n        'HdcPusr' : 'HtzPusr';\r\n      userType = cookieMap[payerProp] ? userTypes.payer : userTypes.registered;\r\n    }\r\n    else {\r\n      userType = userTypes.anonymous;\r\n    }\r\n    return userType;\r\n  }\r\n\r\n  getUserAge(cookieMap) {\r\n    let age;\r\n    const usrae = cookieMap[this.ssoKey] && cookieMap[this.ssoKey].usrae;\r\n    if (usrae) {\r\n      age = parseInt(cookieMap[this.ssoKey].usrae, 10);\r\n      age = age > 0 ? age : undefined;\r\n    }\r\n    return age;\r\n  }\r\n\r\n  getUserGender(cookieMap) {\r\n    let gender;\r\n    const urgdr = cookieMap[this.ssoKey] && cookieMap[this.ssoKey].urgdr;\r\n    if (urgdr) {\r\n      gender = parseInt(cookieMap[this.ssoKey].urgdr, 10);\r\n      gender = gender === 2 || gender === 1 ? gender : undefined;\r\n    }\r\n    return gender;\r\n  }\r\n}\r\n","class ConflictResolver {\r\n  constructor(conflictManagementConfig) {\r\n    this.dependencyMap = this.initializeDependencyMap(conflictManagementConfig);\r\n    this.deferredSlots = new Set();\r\n  }\r\n  initializeDependencyMap(conflictManagementJson) {\r\n    const queue = new Map();\r\n    Object.keys(conflictManagementJson).map((key, value) => {\r\n      let rules = conflictManagementJson[key];\r\n      if (rules) {\r\n        rules = rules.filter((item) => item.onsize && item.avoid);\r\n      }\r\n      queue.set(key, {\r\n        id: key,\r\n        rules,\r\n        resolvedWith: null,\r\n      });\r\n      return this;\r\n    });\r\n    return queue;\r\n  }\r\n\r\n  updateResolvedSlot(adSlotId, resolvedSize) {\r\n    if (!adSlotId) {\r\n      throw new Error('updateResolvedSlot must be called with an adSlotId!');\r\n    }\r\n    if (!resolvedSize) {\r\n      throw new Error('updateResolvedSlot must be called with a resolved size!');\r\n    }\r\n    if (this.dependencyMap.has(adSlotId)) {\r\n      this.dependencyMap.get(adSlotId).resolvedWith = resolvedSize;\r\n    }\r\n  }\r\n\r\n\r\n  isBlocked(adSlotId) {\r\n    if (!adSlotId) {\r\n      throw new Error('isBlocked must be called with an adSlotId!');\r\n    }\r\n    let isBlocked = false;\r\n    for (const adSlotKey of this.dependencyMap.keys()) {\r\n      const adSlot = this.dependencyMap.get(adSlotKey);\r\n      for (const adSlotRule of adSlot.rules) {\r\n        // Found rule specific to our target\r\n        if (adSlotRule.avoid === adSlotId) {\r\n          const parentResolvedWith = adSlot.resolvedWith;\r\n          // Fail fast: parent is not resolved yet - unknown returned size.\r\n          if (!parentResolvedWith) {\r\n            isBlocked = true;\r\n            this.deferredSlots.add(adSlotId);\r\n          }\r\n          if (adSlotRule.onsize.split(',').find(sizeString => { // eslint-disable-line\r\n            const size = sizeString.split('x').map(numberStr => parseInt(numberStr, 10));\r\n            return this.arraysEqual(size, parentResolvedWith);\r\n          })) {\r\n            // Block found\r\n            this.deferredSlots.add(adSlotId);\r\n            isBlocked = true;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return isBlocked;\r\n  }\r\n\r\n  isBlocking(adSlotId) {\r\n    if (!adSlotId) {\r\n      throw new Error('isBlocking must be called with an adSlotId!');\r\n    }\r\n    let isBlocking = false;\r\n    for (const adSlotKey of this.dependencyMap.keys()) {\r\n      if (adSlotKey === adSlotId) {\r\n        isBlocking = true;\r\n      }\r\n    }\r\n    return isBlocking;\r\n  }\r\n\r\n  /**\r\n   * Gets an array of adSlot Ids for a given adSlotId, that are dependent on (blocked by)\r\n   * @param {String} adSlotId - the blocking slot id\r\n   * @return {Array} an array of blocked slot, that has a dependency on the given slot\r\n   */\r\n  getBlockedSlotsIds(adSlotId) {\r\n    let result;\r\n    if (this.dependencyMap.has(adSlotId)) {\r\n      result = Array.from(this.dependencyMap.get(adSlotId).rules.map(adSlot => adSlot.avoid));\r\n    }\r\n    return result || [];\r\n  }\r\n\r\n  arraysEqual(a, b) {\r\n    if (a === b) return true;\r\n    if (a === null || b === null) return false;\r\n    if (a.length !== b.length) return false;\r\n    for (let i = 0; i < a.length; ++i) {\r\n      if (a[i] !== b[i]) return false;\r\n    }\r\n    return true;\r\n  }\r\n}\r\nConflictResolver.EMPTY_SIZE = [];\r\nexport default ConflictResolver;\r\n","/* global googletag */\r\nimport { adTypes } from '../objects/adManager';\r\nimport globalConfig from '../globalConfig';\r\n\r\nexport default class adSlot {\r\n\r\n  constructor(adSlotConfig) {\r\n    this.config = Object.assign({}, adSlotConfig);\r\n\r\n    // Part I : Markup configuration - passed from AdManager\r\n    this.id = this.config.id;\r\n    if (!this.config.id) {\r\n      throw new Error('an adSlot requires an id!');\r\n    }\r\n    this.target = this.config.target;\r\n    this.type = this.config.type;\r\n    this.responsive = this.config.responsive;\r\n    this.fluid = this.config.fluid;\r\n    this.user = this.config.user;\r\n    this.adManager = this.config.adManager;\r\n    this.htmlElement = this.config.htmlElement;\r\n    this.priority = this.config.priority;\r\n    this.deferredSlot = this.config.deferredSlot;\r\n\r\n    // Part II : Global, general ad configuration - passed from AdManager\r\n    this.department = this.config.department;\r\n    this.network = this.config.network;\r\n    this.adUnitBase = this.config.adUnitBase;\r\n\r\n    // Part III : ad specific configuration - passed from globalConfig.adSlotConfig\r\n    this.adSizeMapping = this.config.adSizeMapping;\r\n    this.responsiveAdSizeMapping = this.config.responsiveAdSizeMapping;\r\n    this.blacklistReferrers = this.config.blacklistReferrers ?\r\n      this.config.blacklistReferrers.split(',') : [];\r\n    this.whitelistReferrers = this.config.whitelistReferrers ?\r\n      this.config.whitelistReferrers.split(',') : [];\r\n\r\n\r\n    // Part IV : Runtime configuration - calculated data - only present in runtime\r\n    this.lastResolvedSize = undefined; // Initialized in 'slotRenderEnded' callback\r\n    this.lastResolvedWithBreakpoint = undefined; // Initialized in 'slotRenderEnded' callback\r\n    this.slot = undefined; // Holds a googletag.Slot object\r\n    // [https://developers.google.com/doubleclick-gpt/reference#googletag.Slot]\r\n    try {\r\n      if (!this.deferredSlot) {\r\n        this.slot = this.defineSlot();\r\n      }\r\n    }\r\n    catch (err) {\r\n      console.error(err); // eslint-disable-line no-console\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Checks whether this adSlot is an 'Out-of-page' slot or not.\r\n   * An Out-of-page slot is a slot that is not embedded in the page 'normally'.\r\n   * @returns {boolean} true iff this adSlot is one of the predefined 'out-of-page' slots.\r\n   */\r\n  isOutOfPage() {\r\n    if (typeof this.type !== 'string') {\r\n      throw new Error('An adSlot cannot by typeless!', this);\r\n    }\r\n    if (this.isMobile() === true) {\r\n      return false;\r\n    }\r\n    switch (this.type) {\r\n      case adTypes.maavaron: return true;\r\n      case adTypes.popunder: return true;\r\n      case adTypes.talkback: return false;\r\n      case adTypes.regular: return false;\r\n      default: return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Checks whether this adSlot is a 'maavaron' slot or not.\r\n   * An Out-of-page slot is a slot that is not embedded in the page 'normally'.\r\n   * @returns {boolean} true iff this adSlot is one of the predefined 'out-of-page' slots.\r\n   */\r\n  isMaavaron() {\r\n    if (typeof this.type !== 'string') {\r\n      throw new Error('An adSlot cannot by typeless!', this);\r\n    }\r\n    if (this.isMobile() === true) {\r\n      return false;\r\n    }\r\n    switch (this.type) {\r\n      case adTypes.maavaron: return true;\r\n      default: return false;\r\n    }\r\n  }\r\n\r\n  isMobile() {\r\n    return (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i\r\n      .test(window.navigator.userAgent || ''));\r\n  }\r\n  /**\r\n   * Checks whether or not this adSlot has a non-empty whitelist, and if so, that the current\r\n   * referrer appears in the whitelist.\r\n   * Should return false iff there is a whitelist for the current adSlot, but the referrer is not\r\n   * mentioned in the whitelist.\r\n   * @returns {boolean} true iff the ad can be displayed.\r\n   */\r\n  isWhitelisted() {\r\n    let whitelisted = false;\r\n    if (this.whitelistReferrers.length !== 0) {\r\n      for (const referrer of this.whitelistReferrers) {\r\n        if (globalConfig.referrer.indexOf(referrer) > -1) {\r\n          whitelisted = true;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    else {\r\n      whitelisted = true;\r\n    }\r\n    return whitelisted;\r\n  }\r\n\r\n  /**\r\n   * Checks whether or not this adSlot has a non-empty blacklist, and if so, that the current\r\n   * referrer does not appear in the blacklist.\r\n   * Should return true iff there is a blacklist for the current adSlot, and the referrer is\r\n   * mentioned in the blacklist - to indicate that the adSlot is 'blocked'.\r\n   * @returns {boolean} true iff the ad cannot be displayed.\r\n   */\r\n  isBlacklisted() {\r\n    let blacklisted = false;\r\n    if (this.blacklistReferrers.length !== 0) {\r\n      for (const referrer of this.blacklistReferrers) {\r\n        if (globalConfig.referrer.indexOf(referrer) > -1) {\r\n          blacklisted = true;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    return blacklisted;\r\n  }\r\n\r\n\r\n  /**\r\n   * Shows the current adSlot.\r\n   * It assumes a markup is available for this slot (any tag with an id attribute = this.id)\r\n   */\r\n  show() {\r\n    if (!this.shown === true) {\r\n      this.shown = true; // Ensure show will be called once per adSlot\r\n      googletag.cmd.push(() => {\r\n        if (this.deferredSlot) {\r\n          this.slot = this.defineSlot();\r\n        }\r\n        // console.log('calling show for slot',this.id,' called @',window.performance.now());\r\n        document.getElementById(this.id).classList.remove('h-hidden');\r\n        googletag.display(this.id);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Shows the current adSlot.\r\n   * It assumes a markup is available for this slot (any tag with an id attribute = this.id)\r\n   */\r\n  hide() {\r\n    googletag.cmd.push(() => {\r\n      document.getElementById(this.id).classList.add('h-hidden');\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Initializes page-level slot definition for the current slot\r\n   * @return {Slot} slot - the Google Slot that was defined from this AdSlot configuration\r\n   */\r\n  defineSlot() {\r\n    if (this.isMaavaron()) {\r\n      const maavaronSlot = this.defineMaavaron();\r\n      if (this.adManager.shouldSendRequestToDfp(this)) {\r\n        if (!this.shown) {\r\n          this.shown = true; // Ensure show will be called once\r\n          maavaronSlot.display();\r\n        }\r\n      }\r\n      return maavaronSlot;\r\n    }\r\n    const googletag = window.googletag;\r\n    const pubads = googletag.pubads();\r\n    const args = [];\r\n    const defineFn = this.isOutOfPage() ? googletag.defineOutOfPageSlot : googletag.defineSlot;\r\n    // 3 or 2 params according to the function that we want to activate.\r\n    args.push(this.getPath());\r\n    if (this.isOutOfPage() === false) {\r\n      if (this.fluid) {\r\n        args.push('fluid');\r\n      }\r\n      else {\r\n        args.push(this.adSizeMapping);\r\n      }\r\n    }\r\n    args.push(this.id);\r\n    let slot = defineFn.apply(defineFn, args);\r\n    if (slot) {\r\n      // Responsive size Mapping\r\n      if (this.responsive) {\r\n        let responsiveSlotSizeMapping = googletag.sizeMapping();\r\n        const breakpoints = globalConfig.breakpointsConfig.breakpoints;\r\n        const keys = Object.keys(this.responsiveAdSizeMapping);\r\n        for (const key of keys) { // ['xxs','xs',...]\r\n          responsiveSlotSizeMapping.addSize(\r\n            [breakpoints[key], 100], // 100 is a default height, since it is height agnostic\r\n            this.responsiveAdSizeMapping[key]);\r\n        }\r\n        responsiveSlotSizeMapping = responsiveSlotSizeMapping.build();\r\n        slot = slot.defineSizeMapping(responsiveSlotSizeMapping);\r\n      }\r\n      slot = slot.addService(pubads);\r\n      if (this.isOutOfPage() === false) {\r\n        slot.setCollapseEmptyDiv(true);\r\n      }\r\n    }\r\n    return slot;\r\n  }\r\n\r\n  /**\r\n   * Returns the current path calculated for the adSlot\r\n   * @returns {String} a formatted string that represent the path for the slot definition\r\n   */\r\n  getPath() {\r\n    /* eslint-disable no-shadow */\r\n    let path = globalConfig.path || [];\r\n    path = path.filter(path => path !== '.');\r\n    path = path.map(section => `${this.id}${this.department}${section}`).join('/');\r\n    // If a path exist, it will be preceded with a forward slash\r\n    path = path && this.config.department !== '_homepage' ? `/${path}` : '';\r\n    /* eslint-enable no-shadow */\r\n    const calculatedPath = `/${this.config.network}/${this.config.adUnitBase}/${this.id}/${this.id}${this.department}${path}`; // eslint-disable-line max-len\r\n    return calculatedPath.toLowerCase();\r\n  }\r\n\r\n  /* eslint-disable */\r\n  slotRendered(event) {\r\n    const id = event.slot.getAdUnitPath().split('/')[3]; // Convention: [0]/[1]network/[2]base/[3]id\r\n    const isEmpty = event.isEmpty; // Did the ad return as empty?\r\n    const resolvedSize = event.size; // What 'creative' size did the ad return with?\r\n    // Empty or onload callback should be called next?\r\n  }\r\n  /* eslint-enable */\r\n\r\n  /**\r\n   * Refresh this adSlot\r\n   */\r\n  refresh() {\r\n    googletag.cmd.push(() => {\r\n      googletag.pubads().refresh([this.slot]);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Shows 'Maavaron' type adSlot using Passback definition\r\n   * @return {Slot} slot - the Google Slot that was defined for Maavaron\r\n   */\r\n  defineMaavaron() {\r\n    if (!document.referrer.match('loc.haaretz')) {\r\n      const adUnitMaavaronPath = this.getPath();\r\n      const adUnitMaavaronSize = [\r\n        [2, 1],\r\n      ];\r\n      const slot = googletag.pubads().definePassback(adUnitMaavaronPath, adUnitMaavaronSize)\r\n        .setTargeting('UserType', [this.user.type])\r\n        .setTargeting('age', [this.user.age])\r\n        .setTargeting('urgdr', [this.user.gender])\r\n        .setTargeting('articleId', [globalConfig.articleId])\r\n        .setTargeting('stg', [globalConfig.environment]);\r\n      return slot;\r\n    }\r\n    return null;\r\n  }\r\n}\r\n","/* global googletag */\nimport User from '../objects/user';\nimport ConflictResolver from '../objects/conflictResolver';\nimport AdSlot from '../objects/adSlot';\nimport { getBreakpoint, getBreakpointName } from '../utils/breakpoints';\nimport { arraysEqual } from '../utils/arrays';\n\n// There are a total of 7 adTargets:\n// \"all\",\"nonPaying\",\"anonymous\",\"registered\",\"paying\",\"digitalOnly\" and \"digitalAndPrint\"\nexport const adPriorities = {\n  high: 'high',\n  normal: 'normal',\n  low: 'low',\n};\n\nexport const adTargets = {\n  all: 'all',\n  nonPaying: 'nonPaying',\n  anonymous: 'anonymous',\n  registered: 'registered',\n  paying: 'paying',\n  digitalOnly: 'digitalOnly',\n  digitalAndPrint: 'digitalAndPrint',\n};\n\n// There are a total of 3 userTypes: \"anonymous\", \"registered\" and \"payer\"\nexport const userTypes = {\n  anonymous: 'anonymous',\n  registered: 'registered',\n  payer: 'payer',\n};\n\nexport const adTypes = {\n  maavaron: '.maavaron',\n  popunder: '.popunder',\n  talkback: '.talkback',\n  regular: '',\n};\n\n\nexport default class AdManager {\n\n  constructor(config) {\n    this.config = Object.assign({}, config);\n    this.user = new User(config);\n    this.conflictResolver = new ConflictResolver(config.conflictManagementConfig);\n    /**\n     * Avoid race conditions by making sure to respect the usual timing of GPT.\n     * This DFP implementation uses Enable-Define-Display:\n     * Define page-level settings\n     * enableServices()\n     * Define slots\n     * Display slots\n     */\n    try {\n      googletag.cmd.push(() => {\n        this.initGoogleTargetingParams(); //  Define page-level settings\n        this.initGoogleGlobalSettings();  //  enableServices()\n        this.initSlotRenderedCallback();  //  Define callbacks\n      });\n      // Holds adSlot objects as soon as possible.\n      googletag.cmd.push(() => {\n        this.adSlots = this.initAdSlots(config.adSlotConfig, adPriorities.high);\n      });\n      // Once DOM ready, add more adSlots.\n      document.addEventListener('DOMContentLoaded', () => {\n        googletag.cmd.push(() => {\n          this.adSlots = this.initAdSlots(config.adSlotConfig, adPriorities.high);\n          googletag.cmd.push(() => {\n            this.adSlots = this.initAdSlots(config.adSlotConfig, adPriorities.normal);\n          });\n        });\n      });\n      // Once window was loaded, add the rest of the adSlots.\n      window.addEventListener('load', () => {\n        googletag.cmd.push(() => {\n          this.adSlots = this.initAdSlots(config.adSlotConfig, adPriorities.low);\n        });\n      });\n    }\n    catch (err) {\n      console.error(err); // eslint-disable-line no-console\n    }\n  }\n\n  /**\n   * Shows all of the adSlots that can be displayed.\n   */\n  showAllSlots() {\n    for (const adSlotKey of this.adSlots.keys()) {\n      const adSlot = this.adSlots.get(adSlotKey);\n      if (adSlot.type !== adTypes.talkback && this.shouldSendRequestToDfp(adSlot)) {\n        adSlot.show();\n      }\n    }\n  }\n\n  /**\n   * Gets all adSlots that has a certain priority\n   * @param {adPriority} priority - the priority of the ad {high, normal, low}\n   * @return {Array<AdSlot>} adSlots - all of the defined adSlots that matches\n   * the given priority\n   */\n  getAdSlotsByPriority(priority) {\n    function priorityFilter(adSlot) {\n      return adSlot.priority === priority;\n    }\n    return Array.from(this.adSlots.values()).filter(priorityFilter);\n  }\n\n  showAllDeferredSlots() {\n    for (const deferredSlotId of this.conflictResolver.deferredSlots) {\n      if (this.adSlots.has(deferredSlotId)) {\n        if (!this.conflictResolver.isBlocked(deferredSlotId)) {\n          const deferredAdSlot = this.adSlots.get(deferredSlotId);\n          if (this.shouldSendRequestToDfp(deferredAdSlot)) {\n            deferredAdSlot.show();\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Refreshes all responsive adSlots\n   */\n  refreshAllSlots() {\n    const currentBreakpoint = getBreakpoint();\n    for (const adSlotKey of this.adSlots.keys()) {\n      const adSlot = this.adSlots.get(adSlotKey);\n      if (adSlot.responsive) {\n        if (adSlot.lastResolvedWithBreakpoint !== currentBreakpoint &&\n          this.shouldSendRequestToDfp(adSlot)) {\n          // console.log(`calling refresh for adSlot: ${adSlot.id}`);\n          adSlot.refresh();\n        }\n        else {\n          adSlot.hide();\n        }\n      }\n    }\n  }\n\n  /**\n   * Initializes adSlots based on the currently found slot markup (HTML page specific),\n   * and the predefined configuration for the slots.\n   * @param {Object} adSlotConfig - the AdSlots configuration object (see: globalConfig)\n   * @param {String} filteredPriority - filters out all adSlots that does not match\n   * a given adPriority. This is used to cherry pick the init process of ads.\n   * @returns {Map}\n   */\n  initAdSlots(adSlotConfig, filteredPriority) {\n    const adSlots = new Map(this.adSlots);\n    let adSlotPlaceholders = Array.from(document.getElementsByClassName('js-dfp-ad'));\n    adSlotPlaceholders = adSlotPlaceholders.filter(node => node.id); // only nodes with an id\n    const adSlotNodeSet = new Set();\n    adSlotPlaceholders = Array.prototype.filter.call(adSlotPlaceholders, node => {\n      if (adSlotNodeSet.has(node.id) === false) { // first occurrence of Node\n        adSlotNodeSet.add(node.id);\n        return true;\n      }\n      return false;\n    });\n    // adSlotPlaceholders = adSlotPlaceholders.sort((a,b) => a.offsetTop - b.offsetTop);\n    adSlotPlaceholders.forEach(adSlot => {\n      const adSlotPriority = adSlotConfig[adSlot.id] ?\n      adSlotConfig[adSlot.id].priority || adPriorities.normal : undefined;\n      if (adSlotConfig[adSlot.id] && adSlots.has(adSlot.id) === false &&\n        adSlotPriority === filteredPriority) {\n        // The markup has a matching configuration from adSlotConfig AND was not already defined\n        try {\n          // adSlotConfig is built from globalConfig, but can be overridden by markup\n          const computedAdSlotConfig = Object.assign({}, adSlotConfig[adSlot.id], {\n            id: adSlot.id,\n            target: adSlot.attributes['data-audtarget'] ?\n              adSlot.attributes['data-audtarget'].value : adTargets.all,\n            type: this.getAdType(adSlot.id),\n            responsive: adSlotConfig[adSlot.id].responsive,\n            fluid: adSlotConfig[adSlot.id].fluid || false,\n            user: this.user,\n            adManager: this,\n            htmlElement: adSlot,\n            department: this.config.department,\n            network: this.config.adManagerConfig.network,\n            adUnitBase: this.config.adManagerConfig.adUnitBase,\n            deferredSlot: this.conflictResolver.isBlocked(adSlot.id),\n            priority: adSlotPriority,\n          });\n          const adSlotInstance = new AdSlot(computedAdSlotConfig);\n          adSlots.set(adSlot.id, adSlotInstance);\n          if (adSlotInstance.type !== adTypes.talkback &&\n            adSlotInstance.priority === adPriorities.high &&\n            this.shouldSendRequestToDfp(adSlotInstance)) {\n            /*\n             console.log('calling show for high priority slot', adSlotInstance.id, ' called @',\n             window.performance.now());\n             */\n            adSlotInstance.show();\n          }\n        }\n        catch (err) {\n          console.error(err); // eslint-disable-line no-console\n        }\n      }\n    });\n    return adSlots;\n  }\n\n  isPriority(adSlotId) {\n    return (typeof adSlotId === 'string' &&\n    (adSlotId.indexOf('plazma') > 0 ||\n    adSlotId.indexOf('maavaron') > 0 ||\n    adSlotId.indexOf('popunder') > 0));\n  }\n\n  /**\n   * Returns the adType based on the adSlot name.\n   * @param {String} adSlotId - the adSlot's identifier.\n   * @returns {*} enumerated export 'adTypes'\n   */\n  getAdType(adSlotId) {\n    if (!adSlotId) {\n      throw new Error('Missing argument: a call to getAdType must have an adSlotId');\n    }\n    if (adSlotId.indexOf(adTypes.maavaron) > -1) return adTypes.maavaron;\n    if (adSlotId.indexOf(adTypes.popunder) > -1) return adTypes.popunder;\n    if (adSlotId.indexOf(adTypes.talkback) > -1) return adTypes.talkback;\n    return adTypes.regular;\n  }\n\n  /**\n   * @param {object} adSlot the AdSlot\n   * @returns {boolean|*}\n   */\n  shouldSendRequestToDfp(adSlot) {\n    // Conflict management check\n    return this.conflictResolver.isBlocked(adSlot.id) === false &&\n      // Valid Referrer check\n      adSlot.isWhitelisted() &&\n      // Not in referrer Blacklist\n      adSlot.isBlacklisted() === false &&\n      this.shouldDisplayAdAfterAdBlockRemoval(adSlot) &&\n      // Responsive: breakpoint contains ad?\n      this.doesBreakpointContainAd(adSlot) &&\n      // Targeting check (userType vs. slotTargeting)\n      this.doesUserTypeMatchBannerTargeting(adSlot) &&\n      // Impressions Manager check (limits number of impressions per slot)\n      this.user.impressionManager.reachedQuota(adSlot.id) === false;\n  }\n\n  shouldDisplayAdAfterAdBlockRemoval(adSlot) {\n    return !(this.config.adBlockRemoved === true &&\n    (adSlot.type === adTypes.maavaron ||\n    adSlot.type === adTypes.popunder));\n  }\n\n  /**\n   * Check whether or not an ad slot should appear for the current user type\n   * @param {String} adSlotOrTarget the adSlot to check or the target as a string\n   * @returns {boolean} true iff the slot should appear for the user type\n   */\n  doesUserTypeMatchBannerTargeting(adSlotOrTarget) {\n    const userType = this.user.type;\n    const adTarget = typeof adSlotOrTarget === 'string' ? adSlotOrTarget : adSlotOrTarget.target;\n\n    switch (adTarget) {\n      case adTargets.all : return true;\n      case adTargets.nonPaying :\n        return userType === userTypes.anonymous || userType === userTypes.registered;\n      case adTargets.anonymous : return userType === userTypes.anonymous;\n      case adTargets.registered : return userType === userTypes.registered;\n      case adTargets.paying : return userType === userTypes.payer;\n      case adTargets.digitalOnly : return userType === userTypes.payer;\n      case adTargets.digitalAndPrint : return userType === userTypes.payer;\n      default: return false;\n    }\n  }\n\n  /**\n   * Report to the AdManager that a breakpoint has been switched (passed from one break to\n   * another). Should there be a responsive slot with a\n   * @param {Breakpoint} breakpoint - the breakpoint that is currently being displayed\n   * @returns {Integer} affected - the number of adSlots affected by the change\n   */\n  switchedToBreakpoint(breakpoint) {\n    if (!breakpoint) {\n      throw new Error('Missing argument: a call to switchedToBreakpoint must have an breakpoint');\n    }\n    let count = 0;\n    for (const adSlotKey of this.adSlots.keys()) {\n      const adSlot = this.adSlots.get(adSlotKey);\n      if (adSlot.responsive === true && adSlot.lastResolvedWithBreakpoint) {\n        if (adSlot.lastResolvedWithBreakpoint !== breakpoint) {\n          adSlot.refresh();\n          count++;\n        }\n      }\n    }\n    return count;\n  }\n\n  /**\n   * Checks whether an adSlot is defined for a given breakpoint (Default: current breakpoint)\n   * @param {AdSlot} adSlot - the adSlot to check.\n   * @param {Breakpoint} [breakpoint=currentBreakpoint] - the breakpoint to check this ad in.\n   * @returns {boolean} true iff the adSlot is defined for the given breakpoint.\n   */\n  doesBreakpointContainAd(adSlot, breakpoint = getBreakpoint()) {\n    if (!adSlot) {\n      throw new Error('Missing argument: a call to doesBreakpointContainAd must have an adSlot');\n    }\n    let containsBreakpoint = true;\n    if (adSlot.responsive === true) {\n      const mapping = adSlot.responsiveAdSizeMapping[getBreakpointName(breakpoint)];\n      if (Array.isArray(mapping) === false) {\n        throw new Error(`Invalid argument: breakpoint:${breakpoint} doesn't exist!`, this);\n      }\n      containsBreakpoint = mapping.length > 0 && !arraysEqual(mapping, [0, 0]);\n    }\n    return containsBreakpoint;\n  }\n\n  /**\n   * Initializes the callback from the 'slotRenderEnded' event for each slot\n   */\n  initSlotRenderedCallback() {\n    if (window.googletag && window.googletag.apiReady) {\n      const pubads = window.googletag.pubads();\n      pubads.addEventListener('slotRenderEnded', event => {\n        const id = event.slot.getAdUnitPath().split('/')[3];\n        const isEmpty = event.isEmpty;\n        const resolvedSize = event.size;\n        // console.log('slotRenderEnded for slot',id,' called @',window.performance.now());\n        if (this.adSlots.has(id)) {\n          const adSlot = this.adSlots.get(id);\n          adSlot.lastResolvedSize = resolvedSize;\n          adSlot.lastResolvedWithBreakpoint = getBreakpoint();\n          if (isEmpty) {\n            adSlot.lastResolvedSize = ConflictResolver.EMPTY_SIZE;\n            adSlot.hide();\n            this.releaseSlotDependencies(adSlot);\n          }\n          else {\n            this.user.impressionManager.registerImpression(`${adSlot.id}${this.config.department}`);\n            this.user.impressionManager.registerImpression(`${adSlot.id}_all`);\n            this.releaseSlotDependencies(adSlot, adSlot.lastResolvedSize);\n          }\n        }\n        else {\n          /*\n           console.error(`Cannot find an adSlot with id: ${id} - Ad Unit path is\n           ${event.slot.getAdUnitPath()}`);\n           */\n        }\n      });\n    }\n    else {\n      throw new Error('googletag api was not ready when \\'initSlotRenderedCallback\\' was called!');\n    }\n  }\n\n  releaseSlotDependencies(adSlot) {\n    try {\n      const id = adSlot.id;\n      this.conflictResolver.updateResolvedSlot(id, adSlot.lastResolvedSize);\n      if (this.conflictResolver.isBlocking(id)) {\n        // Hide all blocked adSlots\n        for (const blockedSlot of this.conflictResolver.getBlockedSlotsIds(id)) {\n          if (this.conflictResolver.isBlocked(blockedSlot)) {\n            if (this.adSlots.has(blockedSlot)) {\n              this.adSlots.get(blockedSlot).hide();\n            }\n          }\n        }\n        // Show the non blocked\n        for (const deferredSlotKey of this.conflictResolver.deferredSlots.keys()) {\n          const deferredAdSlot = this.adSlots.get(deferredSlotKey);\n          if (deferredAdSlot && this.shouldSendRequestToDfp(deferredAdSlot)) {\n            this.conflictResolver.deferredSlots.delete(deferredSlotKey);\n            if (deferredAdSlot.deferredSlot) {\n              deferredAdSlot.defineSlot();\n              deferredAdSlot.deferredSlot = false;\n            }\n            deferredAdSlot.show();\n          }\n        }\n      }\n    }\n    catch (err) {\n      /* eslint-disable no-console*/\n      console.error(`Cannot updateSlotDependencies for adSlot: ${adSlot.id}`);\n      /* eslint-enable no-console*/\n    }\n  }\n\n  /**\n   * Initializes page-level targeting params.\n   */\n  initGoogleTargetingParams() {\n    if (window.googletag && window.googletag.apiReady) {\n      // Returns a reference to the pubads service.\n      const pubads = googletag.pubads();\n      // Environment targeting (dev, test, prod)\n      if (this.config.environment) {\n        pubads.setTargeting('stg', [this.config.environment]);\n      }\n\n      // User targeting\n      if (this.user.type) {\n        pubads.setTargeting('UserType', [this.user.type]);\n      }\n      if (this.user.age) {\n        pubads.setTargeting('age', [this.user.age]);\n      }\n      if (this.user.gender) {\n        pubads.setTargeting('urgdr', [this.user.gender]);\n      }\n\n      // Context targeting\n      if (this.config.articleId) {\n        pubads.setTargeting('articleId', [this.config.articleId]);\n      }\n      if (this.config.gStatCampaignNumber && this.config.gStatCampaignNumber !== -1) {\n        pubads.setTargeting('gstat_campaign_id', [this.config.gStatCampaignNumber]);\n      }\n      if (this.config.isWriterAlerts) {\n        pubads.setTargeting('WriterAlerts', ['true']);\n      }\n      // UTM targeting\n      /* eslint-disable no-underscore-dangle */\n      if (this.config.utm_.content) {\n        pubads.setTargeting('utm_content', [this.config.utm_.content]);\n      }\n      if (this.config.utm_.source) {\n        pubads.setTargeting('utm_source', [this.config.utm_.source]);\n      }\n      if (this.config.utm_.medium) {\n        pubads.setTargeting('utm_medium', [this.config.utm_.medium]);\n      }\n      if (this.config.utm_.campaign) {\n        pubads.setTargeting('utm_campaign', [this.config.utm_.campaign]);\n      }\n      /* eslint-enable no-underscore-dangle */\n      // AdBlock removal\n      if (this.config.adBlockRemoved) {\n        pubads.setTargeting('adblock_removed', [this.config.adBlockRemoved]);\n      }\n      // University targeting - triggered via cookie\n      if (this.config.wifiLocation) {\n        pubads.setTargeting('wifi', [this.config.wifiLocation]);\n      }\n\n      // Ads Centering\n      pubads.setCentering(true);\n    }\n    else {\n      throw new Error('googletag api was not ready when \\'initGoogleTargetingParams\\' was called!');\n    }\n  }\n\n  /**\n   * Initializes googletag services.\n   */\n  initGoogleGlobalSettings() {\n    if (window.googletag && window.googletag.apiReady) {\n      const googleGlobalSettings = this.config.googleGlobalSettings;\n      // Enable GET parameter overrides\n      if (window.location.search) {\n        const search = window.location.search;\n        if (search.indexOf('sraon') > 0) {\n          console.log('Single Request Mode: active'); // eslint-disable-line no-console\n          googleGlobalSettings.enableAsyncRendering = true;\n        }\n        else if (search.indexOf('sraoff') > 0) {\n          console.log('Single Request Mode: disabled');// eslint-disable-line no-console\n          googleGlobalSettings.enableAsyncRendering = false;\n        }\n        if (search.indexOf('asyncrenderingon') > 0) {\n          console.log('Async rendering mode: active'); // eslint-disable-line no-console\n          googleGlobalSettings.enableAsyncRendering = true;\n        }\n        else if (search.indexOf('asyncrenderingonoff') > 0) {\n          console.log('Sync rendering mode: active');// eslint-disable-line no-console\n          googleGlobalSettings.enableAsyncRendering = false;\n        }\n      }\n      // Google services activation\n      if (googleGlobalSettings.enableSingleRequest === true) {\n        googletag.pubads().enableSingleRequest();\n      }\n      if (googleGlobalSettings.enableAsyncRendering === true) {\n        googletag.pubads().enableAsyncRendering();\n      }\n      else {\n        googletag.pubads().enableSyncRendering();\n      }\n      // Enables all GPT services that have been defined for ad slots on the page.\n      googletag.enableServices();\n    }\n    else {\n      throw new Error('googletag api wasn\\'t ready when \\'initGoogleGlobalSettings\\' was called!');\n    }\n  }\n}\n","/* globals googletag */\r\nimport AdManager from '../src/objects/adManager';\r\nimport globalConfig from './globalConfig';\r\nimport { getBreakpoint, debounce } from '../src/utils/breakpoints';\r\n\r\nconst defaultConfig = globalConfig || {};\r\nconst googletagInitTimeout = 10000;\r\nconst resizeTimeout = 250;\r\n\r\nexport default class DFP {\r\n\r\n  constructor(config) {\r\n    this.config = Object.assign({}, defaultConfig, config);\r\n    this.wasInitialized = false;\r\n    this.breakpoint = getBreakpoint();\r\n    this.initWindowResizeListener();\r\n  }\r\n\r\n  /**\r\n   * This part of the object's construction is dependent on the call to 'init'\r\n   */\r\n  resumeInit() {\r\n    try {\r\n      this.adManager = new AdManager(this.config);\r\n    }\r\n    catch (err) {\r\n      console.error(err); // eslint-disable-line no-console\r\n    }\r\n  }\r\n\r\n  /**\r\n   * initializes the 'googletag' global namespace and add the\r\n   * google publish tags library to the page\r\n   * @returns {Promise} that resolves to true once the googletag api is ready to use\r\n   * (googletag.apiReady = true)\r\n   */\r\n  initGoogleTag() {\r\n    const dfpThis = this;\r\n    return new Promise((resolve, reject) => {\r\n      if (dfpThis.wasInitialized === true || (window.googletag && window.googletag.apiReady)) {\r\n        this.adManager = this.adManager || new AdManager(this.config);\r\n        dfpThis.wasInitialized = true;\r\n        resolve(this.isGoogleTagReady);\r\n      }\r\n      else {\r\n        // set up a place holder for the gpt code downloaded from google\r\n        window.googletag = window.googletag || {};\r\n\r\n        // this is a command queue used by GPT any methods added to it will be\r\n        // executed when GPT code is available, if GPT is already available they\r\n        // will be executed immediately\r\n        window.googletag.cmd = window.googletag.cmd || [];\r\n        // load google tag services JavaScript\r\n        (() => {\r\n          const tag = window.document.createElement('script');\r\n          tag.async = false;\r\n          tag.type = 'text/javascript';\r\n          // var useSSL = 'https:' == document.location.protocol;\r\n          tag.setAttribute('src', '//www.googletagservices.com/tag/js/gpt.js');\r\n          const node = window.document.getElementsByTagName('script')[0];\r\n          tag.onload = () => {\r\n            dfpThis.wasInitialized = true;\r\n            dfpThis.resumeInit();\r\n            resolve(this.isGoogleTagReady);\r\n          };\r\n          tag.onerror = (error) => {\r\n            dfpThis.wasInitialized = false;\r\n            reject(error);\r\n          };\r\n          node.parentNode.insertBefore(tag, node);\r\n        })();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @returns {Promise}\r\n   */\r\n  isGoogleTagReady() {\r\n    const promise = new Promise((resolve, reject) => {\r\n      googletag.cmd.push(() => {\r\n        resolve(this);\r\n      });\r\n      setTimeout(() => {\r\n        if (!(googletag && googletag.apiReady === true)) {\r\n          reject(new Error('googletag failed to initialize on the page!'));\r\n        }\r\n      }, googletagInitTimeout);\r\n    });\r\n    return promise;\r\n  }\r\n\r\n  /**\r\n   * Initializes the window resize listener to support responsive ad refreshes\r\n   */\r\n  initWindowResizeListener() {\r\n    const dfpThis = this;\r\n    function onResize() {\r\n      const currentBreakpoint = getBreakpoint();\r\n      if (dfpThis.breakpoint !== currentBreakpoint) {\r\n        dfpThis.breakpoint = currentBreakpoint;\r\n        if (dfpThis.adManager) {\r\n          dfpThis.adManager.refreshAllSlots();\r\n        }\r\n        else {\r\n          throw new Error('initWindowResizeListener error - adManager instance is not available');\r\n        }\r\n      }\r\n    }\r\n    const debouncedFunction = debounce(onResize, resizeTimeout);\r\n    window.onresize = debouncedFunction;\r\n  }\r\n}\r\n","import DFP from './dfp';\r\nimport globalConfig from './globalConfig';\r\nimport { version as v } from './../package.json';\r\n// const pkg = require('./../package.json');\r\n\r\n// DFP version is based on the package.json\r\nDFP.version = v || 'VERSION';\r\n\r\n/*\r\n // Only for development mode\r\n if ( process.env.NODE_ENV !== 'production' ) {\r\n DFP.dev = '123';\r\n }\r\n */\r\n\r\nexport const config = globalConfig;\r\nexport const version = DFP.version;\r\nexport default DFP;\r\n"]}