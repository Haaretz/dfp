{"version":3,"sources":["../src/utils/cookieUtils.js","../src/utils/time.js","../src/utils/breakpoints.js","../src/utils/arrays.js","../jspm_packages/npm/systemjs-plugin-babel@0.0.17/babel-helpers/classCallCheck.js","../jspm_packages/npm/systemjs-plugin-babel@0.0.17/babel-helpers/createClass.js","../src/globalConfig.js","../src/objects/impressionsManager.js","../src/objects/user.js","../src/objects/conflictResolver.js","../src/objects/adSlot.js","../src/objects/adManager.js","../src/dfp.js","../src/index.js"],"names":["stringToMap","string","separator","undefined","_ref$separator","operator","_ref$operator","map","itemsArr","split","forEach","element","keyValue","length","decodeURIComponent","getCookieAsMap","document","cookie","tmsso","engsso","addHours","date","hours","SyntaxError","isNaN","parseInt","TypeError","result","Date","setHours","getHours","addDays","days","setDate","getDate","debounce","func","wait","arguments","immediate","timeout","context","this","args","later","apply","callNow","setTimeout","getBreakpoint","breakpoint","windowWidth","window","innerWidth","breakpoints","xs","xxs","s","m","l","xl","xxl","getBreakpointName","resultBreakpoint","arraysEqual$1","a","b","Array","isArray","i","version","_","instance","Constructor","defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","key","protoProps","staticProps","prototype","ssoKey","location","hostname","indexOf","dfpConfig","Object","assign","referrer","isMobile","test","navigator","userAgent","isHomepage","pathname","environment","department","domain","regexMatch","exec","path","sectionArray","articleId","slice","filter","section","index","arr","reduce","last","current","concat","env","port","dev","prod","articleIdMatch","pop","content","getUrlParam","source","medium","campaign","results","RegExp","search","adBlockRemoved","localStorage","getItem","err","wifiLocation","cookieMap","_htzwif","gStatCampaignNumber","gstatCampaign","JSON","parse","CampaignNumber","typeName","type","breakpoints1","breakpoints2","breakpoints3","getTime","breakpointsConfig","keys","impressionManagerConfig","ImpressionsManager","now","config","impressions","retrieveImpressionsData","initImpressionMap","migrateImpressionsData","_this","hasOwnProperty","call","frequency","impressionsData","oldImpressionsArray","e","impression","adUnitImpression","name","data","tmp","slotId","join","id","exposed","expires","_this2","adSlotId","err1","debouncedSave","saveImpressionsToLocalStorageImpl","setItem","stringify","error","slot","_this3","shouldUpdateExpiryDate","initSlotFromConfig","updateExpiryDate","slotName","Error","frequencyMap","match","frequencyRegex","setMilliseconds","setSeconds","setMinutes","maxImpressions","saveImpressionsToLocalStorage","atQuota","userTypes$1","User","userConfig","sso","getUserType","impressionManager","age","getUserAge","gender","getUserGender","userType","payerProp","payer","registered","anonymous","usrae","urgdr","ConflictResolver","conflictManagementConfig","dependencyMap","initializeDependencyMap","deferredSlots","Set","queue","Map","conflictManagementJson","value","rules","item","onsize","avoid","set","resolvedSize","has","get","resolvedWith","isBlocked","_step","Symbol","iterator","_iteratorNormalCompletion","_iterator","next","done","adSlotKey","adSlot","_step2","_iteratorNormalCompletion2","_iterator2","adSlotRule","parentResolvedWith","add","find","sizeString","size","numberStr","arraysEqual","return","_iteratorError2","_iteratorError","isBlocking","_step3","_iteratorNormalCompletion3","_iterator3","_iteratorError3","from","EMPTY_SIZE","adSlotConfig","responsive","fluid","user","adManager","htmlElement","priority","deferredSlot","network","adUnitBase","adSizeMapping","responsiveAdSizeMapping","blacklistReferrers","whitelistReferrers","lastResolvedSize","lastResolvedWithBreakpoint","defineSlot","adTypes","maavaron","popunder","talkback","regular","whitelisted","blacklisted","shown","cmd","push","getElementById","classList","remove","display","isMaavaron","maavaronSlot","defineMaavaron","shouldSendRequestToDfp","googletag","pubads","defineFn","isOutOfPage","defineOutOfPageSlot","getPath","responsiveSlotSizeMapping","sizeMapping","addSize","build","defineSizeMapping","addService","setCollapseEmptyDiv","calculatedPath","toLowerCase","event","getAdUnitPath","isEmpty","refresh","_this4","adUnitMaavaronPath","adUnitMaavaronSize","definePassback","setTargeting","adPriorities","adTargets","userTypes$$1","AdManager","conflictResolver","initGoogleTargetingParams","initGoogleGlobalSettings","initSlotRenderedCallback","adSlots","initAdSlots","high","addEventListener","normal","low","adSlot$$1","show","priorityFilter","values","deferredSlotId","deferredAdSlot","currentBreakpoint","hide","filteredPriority","adSlotPlaceholders","getElementsByClassName","node","adSlotNodeSet","adManagerConfig","adSlotPriority","computedAdSlotConfig","attributes","all","getAdType","adSlotInstance","isWhitelisted","isBlacklisted","shouldDisplayAdAfterAdBlockRemoval","doesBreakpointContainAd","doesUserTypeMatchBannerTargeting","reachedQuota","adTarget","adSlotOrTarget","nonPaying","paying","digitalOnly","digitalAndPrint","count","_step4","_iteratorNormalCompletion4","_iterator4","_iteratorError4","containsBreakpoint","mapping","apiReady","releaseSlotDependencies","registerImpression","updateResolvedSlot","_step5","getBlockedSlotsIds","_iteratorNormalCompletion5","_iterator5","blockedSlot","_iteratorError5","_step6","_iteratorNormalCompletion6","_iterator6","deferredSlotKey","delete","_iteratorError6","utm_","setCentering","googleGlobalSettings","log","enableAsyncRendering","enableSingleRequest","enableSyncRendering","enableServices","defaultConfig","googletagInitTimeout","resizeTimeout","DFP$1","DFP","wasInitialized","initWindowResizeListener","dfpThis","Promise","resolve","reject","isGoogleTagReady","tag","createElement","async","setAttribute","getElementsByTagName","onload","resumeInit","onerror","parentNode","insertBefore","promise","onResize","refreshAllSlots","debouncedFunction","onresize","version$1"],"mappings":"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","file":"dfp.min.js","sourcesContent":["/**\n * Htz-cookie-util\n * @module htzCookieUtil\n * @author Elia Grady elia.grady@haaretz.co.il\n * @license MIT\n */\n\n/**\n * Translates Key-Value string into a convenient map.\n * @param {String} string String in format of \"key<operator>value<separator>.....\"\n * @param {object} options object for overriding defaults:\n * options.separator is a String or regExp that separates between each key value pairs\n * (default is ';'). options.operator is a String or regExp that separates between each key\n * and value within a pair (default is '=').\n * @returns {object} a map object, with key-value mapping according to the passed configuration.\n */\nfunction stringToMap(string,\n  { separator = ';', operator = '=' } = {}) {\n  const map = {};\n  const itemsArr = string.split(separator);\n  itemsArr.forEach(element => {\n    if (typeof element === 'string') {\n      const keyValue = element.split(operator);\n      if (keyValue.length === 2) {\n        map[keyValue[0]] = decodeURIComponent(keyValue[1]);\n      }\n    }\n  });\n  return map;\n}\nexport const ssoKey = window.location.hostname.indexOf('haaretz.com') > -1 ? 'engsso' : 'tmsso';\n\n// Translates Cookie string into a convenient map.\nexport default function getCookieAsMap() {\n  const map = stringToMap(document.cookie, { separator: /;\\s?/ });\n  if (typeof map.tmsso === 'string') {\n    map.tmsso = stringToMap(map.tmsso, { separator: ':' });\n  }\n  if (typeof map.engsso === 'string') {\n    map.engsso = stringToMap(map.engsso, { separator: ':' });\n  }\n  return map;\n}\n","/**\n * Helper function. Adds N hours to a given date object.\n * @param {Date} date - the date to derive from\n * @param {Number} hours - the amount of hours to add, in whole numbers\n * @throws {SyntaxError} Will throw if the 'date' param is not provided\n * @throws {SyntaxError} Will throw if the 'hours' param is not provided\n * @throws {TypeError} Will throw if the 'hours' param is not a valid integer\n * @returns {Date} date - the new date, derived from adding the given hours\n */\nexport function addHours(date, hours) {\n  if (!date) {\n    throw new SyntaxError('addHours called without a required \\'date\\' parameter!');\n  }\n  if (!hours) {\n    throw new SyntaxError('addHours called without a required \\'hours\\' parameter!');\n  }\n  else if (isNaN(parseInt(hours, 10))) {\n    throw new TypeError('addHours called with an invalid integer \\'hours\\' parameter!');\n  }\n  const result = new Date(date);\n  result.setHours(result.getHours() + parseInt(hours, 10));\n  return result;\n}\n\n/**\n * Helper function. Adds N days to a given date object.\n * @param {Date} date - the date to derive from\n * @param {Integer} days - the amount of days to add\n * @throws {SyntaxError} Will throw if the 'date' param is not provided\n * @throws {SyntaxError} Will throw if the 'days' param is not provided\n * @throws {TypeError} Will throw if the 'hours' param is not a valid integer\n * @returns {Date} date - the new date, derived from adding the given days\n */\nexport function addDays(date, days) {\n  if (!date) {\n    throw new SyntaxError('addDays called without a required \\'date\\' parameter!');\n  }\n  if (!days) {\n    throw new SyntaxError('addDays called without a required \\'days\\' parameter!');\n  }\n  else if (isNaN(parseInt(days, 10))) {\n    throw new TypeError('addDays called with an invalid integer \\'days\\' parameter!');\n  }\n  const result = new Date(date);\n  result.setDate(result.getDate() + parseInt(days, 10));\n  return result;\n}\n","import globalConfig from '../globalConfig';\r\n\r\nconst breakpoints = globalConfig.breakpointsConfig.breakpoints;\r\n\r\n/**\r\n * Returns a function, that, as long as it continues to be invoked, will not\r\n * be triggered. The function will be called after it stops being called for\r\n * N milliseconds. If `immediate` is passed, trigger the function on the\r\n * leading edge, instead of the trailing.\r\n * @param {function} func - the function to run\r\n * @param {Number} wait - the timeout period to avoid running the function\r\n * @param {Boolean} immediate - leading edge modifier\r\n * @returns {function} the debounced function\r\n */\r\nexport function debounce(func, wait = 100, immediate) {\r\n  let timeout;\r\n  return function debounced() {\r\n    const context = this;\r\n    const args = arguments;// eslint-disable-line prefer-rest-params\r\n    const later = () => {\r\n      timeout = null;\r\n      if (!immediate) func.apply(context, args);\r\n    };\r\n    const callNow = immediate && !timeout;\r\n    clearTimeout(timeout);\r\n    timeout = setTimeout(later, wait);\r\n    if (callNow) func.apply(context, args);\r\n  };\r\n}\r\n\r\n/**\r\n * Returns the current breakpoint that is closest to the window's width\r\n * @returns {number} the break that the current width represents\r\n */\r\nexport function getBreakpoint() {\r\n  let breakpoint;\r\n  const windowWidth = window.innerWidth;\r\n  switch (windowWidth) {\r\n    case windowWidth < breakpoints.xs: breakpoint = breakpoints.xxs; break;\r\n    case windowWidth < breakpoints.s: breakpoint = breakpoints.xs; break;\r\n    case windowWidth < breakpoints.m: breakpoint = breakpoints.s; break;\r\n    case windowWidth < breakpoints.l: breakpoint = breakpoints.m; break;\r\n    case windowWidth < breakpoints.xl: breakpoint = breakpoints.l; break;\r\n    case windowWidth < breakpoints.xxl: breakpoint = breakpoints.xl; break;\r\n    default: breakpoint = breakpoints.xxl;\r\n  }\r\n  return breakpoint;\r\n}\r\n/**\r\n * Returns the current breakpoint that is closest to the window's width\r\n * @param {number} breakpoint - the breakpoint label enumerator that the current width represents\r\n * (yield with a getBreakpoint() call or passed manually )\r\n * @returns {string} breakpoint - the breakpoint label that the current width represents,\r\n * as a string\r\n */\r\nexport function getBreakpointName(breakpoint) {\r\n  let resultBreakpoint;\r\n  const windowWidth = breakpoint || window.innerWidth;\r\n  switch (windowWidth) {\r\n    case windowWidth < breakpoints.xs: resultBreakpoint = 'xxs'; break;\r\n    case windowWidth < breakpoints.s: resultBreakpoint = 'xs'; break;\r\n    case windowWidth < breakpoints.m: resultBreakpoint = 's'; break;\r\n    case windowWidth < breakpoints.l: resultBreakpoint = 'm'; break;\r\n    case windowWidth < breakpoints.xl: resultBreakpoint = 'l'; break;\r\n    case windowWidth < breakpoints.xxl: resultBreakpoint = 'xl'; break;\r\n    default: resultBreakpoint = 'xxl';\r\n  }\r\n  return resultBreakpoint;\r\n}\r\n","/**\n * Checks whether two arrays are equal\n * @param {Array} a - the first array to check\n * @param {Array} b - the second array to check\n * @returns {Boolean} true iff both a and b are arrays, with equal values\n */\nexport function arraysEqual(a, b) {\n  if (!a || !b) return false;\n  if (!Array.isArray(a) || !Array.isArray(b)) return false;\n  if (a === b) return true;\n  if (a.length !== b.length) return false;\n  for (let i = 0; i < a.length; ++i) {\n    if (a[i] !== b[i]) return false;\n  }\n  return true;\n}\nexport default arraysEqual;\n","export default (function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n});","export default (function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n})();","/* global dfpBaseConf */\r\nimport getCookieAsMap, { ssoKey } from './utils/cookieUtils';\r\n// globalConfig for DFP\r\nconst dfpConfig = Object.assign({\r\n  get referrer() {\r\n    return document.referrer ? document.referrer : '';\r\n  },\r\n  get isMobile() {\r\n    return (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i\r\n      .test(window.navigator.userAgent || ''));\r\n  },\r\n  /**\r\n   * Returns true iff the loaded page is the homepage (no inner path)\r\n   * @returns {boolean}\r\n   */\r\n  get isHomepage() {\r\n    return window.location.pathname === '/' || this.environment === 3; // 'prod'\r\n  },\r\n  get department() {\r\n    return this.isHomepage ? '_homepage' : '_section';\r\n  },\r\n  /**\r\n   * returns the domain the page was loaded to. i.e: 'haaretz.co.il', 'haaretz.com'\r\n   * @returns {string} the domain name from the windows's location hostname property\r\n   */\r\n  get domain() {\r\n    const regexMatch = /([\\d|\\w]+)(\\.co\\.il|\\.com)(.*)?/.exec(window.location.hostname);\r\n    const result = regexMatch ? regexMatch[0] : window.location.hostname;\r\n    return result;\r\n  },\r\n  /**\r\n   * Returns an array of concatenated paths, separated by a dot.\r\n   * For example, for the URL:\r\n   * http://www.haaretz.co.il/news/world/america/us-election-2016/LIVE-1.2869045\r\n   * the path is '/news/world/america/us-election-2016/LIVE-1.2869045'.\r\n   * This function takes the directories ['news', 'world', 'america', 'us-election-2016']\r\n   * and converts it to the following format:\r\n   * ['.news', '.news.world', '.news.world.america', '.news.world.america.us-election-2016']\r\n   * This denotes the path configuration for the given adSlot\r\n   * non articles (sections) will be given a '0' - no articleId value for targeting purposes)\r\n   * @returns {Array.<T>} an array of path names\r\n   */\r\n  get path() {\r\n    let sectionArray = this.articleId && this.articleId !== '0' ?\r\n      window.location.pathname.split('/').slice(1, -1) :\r\n      window.location.pathname.split('/').slice(1);\r\n    sectionArray = sectionArray.filter(path =>\r\n    path !== 'wwwMobileSite' && path !== 'whtzMobileSite');\r\n    return sectionArray\r\n      .map(section => `.${section}`)\r\n      .map((section, index, arr) => arr.slice(0, index + 1)\r\n        .reduce((last, current) => last.concat(current)));\r\n  },\r\n  /**\r\n   * Returns the current environment targeting param, if such is defined.\r\n   * @returns {number} targeting param, 1 for local development, 2 for test servers and 3 for prod.\r\n   * May return undefined if no targeting is specified.\r\n   */\r\n  get environment() {\r\n    const env = {\r\n      dev: 1,\r\n      test: 2,\r\n      prod: 3,\r\n    };\r\n    return window.location.port === '8080' ? env.dev :\r\n      (window.location.hostname.indexOf('pre.haaretz.co.il') > -1\r\n      || window.location.hostname.indexOf('tmtest.themarker.com') > -1\r\n      || window.location.hostname.indexOf('pre.mouse.co.il') > -1) ? env.test :\r\n        (window.location.pathname.indexOf('/cmlink/Haaretz.HomePage') > -1\r\n        || window.location.pathname.indexOf('/cmlink/TheMarker.HomePage') > -1\r\n        || window.location.pathname.indexOf('/cmlink/Mouse.HomePage') > -1)\r\n          ? env.prod : undefined;\r\n  },\r\n  /**\r\n   * Returns the articleIf if on an article page, or null otherwise\r\n   * @returns {string} an articleId string from the pathname, or 0 if not found\r\n   */\r\n  get articleId() {\r\n    const articleIdMatch = /\\d\\.\\d+/g.exec(window.location.pathname);\r\n    let articleId = '0';\r\n    if (articleIdMatch) {\r\n      articleId = articleIdMatch.pop(); // Converts [\"1.23145\"] to \"1.23145\"\r\n    }\r\n    return articleId;\r\n  },\r\n  utm_: {\r\n    get content() {\r\n      return this.getUrlParam('utm_content');\r\n    },\r\n    get source() {\r\n      return this.getUrlParam('utm_source');\r\n    },\r\n    get medium() {\r\n      return this.getUrlParam('utm_medium');\r\n    },\r\n    get campaign() {\r\n      return this.getUrlParam('utm_campaign');\r\n    },\r\n    getUrlParam(key) {\r\n      const results = RegExp(`(${key})(=)([^&\"]+)`).exec(window.location.search);\r\n      return results && results[3] ? results[3] : undefined;\r\n    },\r\n  },\r\n  get adBlockRemoved() {\r\n    let adBlockRemoved = false;\r\n    try {\r\n      if (localStorage.getItem('adblock_removed')) {\r\n        adBlockRemoved = true;\r\n      }\r\n    }\r\n    catch (err) {\r\n      // do nothing\r\n    }\r\n    return adBlockRemoved;\r\n  },\r\n  get wifiLocation() {\r\n    let wifiLocation = '';\r\n    const cookieMap = getCookieAsMap();\r\n    try {\r\n      if (cookieMap && cookieMap._htzwif) { // eslint-disable-line no-underscore-dangle\r\n        wifiLocation = (cookieMap._htzwif === 'arcaffe') // eslint-disable-line no-underscore-dangle\r\n          ? 'ArCafe' : 'university';\r\n      }\r\n    }\r\n    catch (err) {\r\n      // do nothing\r\n    }\r\n    return wifiLocation;\r\n  },\r\n  get gStatCampaignNumber() {\r\n    let gstatCampaign;\r\n    try {\r\n      gstatCampaign = localStorage.getItem('GstatCampaign') ?\r\n        JSON.parse(localStorage.getItem('GstatCampaign')) : undefined;\r\n    }\r\n    catch (err) {\r\n      /* In case of thrown 'SecurityError' or 'QuotaExceededError',\r\n       the variable should be undefined */\r\n      gstatCampaign = undefined;\r\n    }\r\n    return gstatCampaign ? gstatCampaign.CampaignNumber : undefined;\r\n  },\r\n  adSlotConfig: {\r\n    'haaretz.co.il.example.slot': {\r\n      id: 'slotId',\r\n      // path : \"/network/base/slotId/slotId_subsection\", Will be calculated from AdManager\r\n      responsive: true,\r\n      adSizeMapping: [['width1', 'height1'], ...['widthN', 'heightN']],\r\n      priority: 'normal',\r\n      fluid: false,\r\n      responsiveAdSizeMapping: {\r\n        xxs: [['width1', 'height1'], ...['widthN', 'heightN']],\r\n        xs: [['width1', 'height1'], ...['widthN', 'heightN']],\r\n        s: [['width1', 'height1'], ...['widthN', 'heightN']],\r\n        m: [['width1', 'height1'], ...['widthN', 'heightN']],\r\n        l: [['width1', 'height1'], ...['widthN', 'heightN']],\r\n        xl: [['width1', 'height1'], ...['widthN', 'heightN']],\r\n        xxl: [['width1', 'height1'], ...['widthN', 'heightN']],\r\n      },\r\n      blacklistReferrers: 'comma, delimited, blacklisted, referrer, list',\r\n      whitelistReferrers: 'comma, delimited, referrer, list',\r\n    },\r\n  },\r\n  adManagerConfig: {\r\n    network: '9401',\r\n    adUnitBase: 'haaretz.co.il_Web',\r\n  },\r\n  breakpointsConfig: {\r\n    get breakpoints() {\r\n      const typeName = 'type1'; // Override in VM from backend to control this toggle\r\n      let type;\r\n      switch (typeName) {\r\n        case 'type1': type = this.breakpoints1; break;\r\n        case 'type2': type = this.breakpoints2; break;\r\n        case 'type3': type = this.breakpoints3; break;\r\n        default: type = this.breakpoints1;\r\n      }\r\n      return type;\r\n    },\r\n    // Type 1\r\n    breakpoints1: {\r\n      xxs: 600,\r\n      xs: 761,\r\n      s: 993,\r\n      m: 1009,\r\n      l: 1291,\r\n      xl: 1600,\r\n      xxl: 1900,\r\n    },\r\n    // Type 2\r\n    breakpoints2: {\r\n      xxs: 600,\r\n      xs: 1000,\r\n      s: 1150,\r\n      m: 1281,\r\n      l: 1600,\r\n      xl: 1920,\r\n      xxl: 1920,\r\n    },\r\n    // Type 3\r\n    breakpoints3: {\r\n      xxs: 480,\r\n      xs: 600,\r\n      s: 768,\r\n      m: 1024,\r\n      l: 1280,\r\n      xl: 1900,\r\n      xxl: 1900,\r\n    },\r\n  },\r\n  userConfig: {\r\n    type: undefined,\r\n    age: undefined,\r\n    gender: undefined,\r\n  },\r\n  conflictManagementConfig: {\r\n    'blocking.ad.unit.name': [\r\n      {\r\n        onsize: '1280x200,970x250,3x3',\r\n        avoid: 'blocked.ad.unit.name',\r\n      },\r\n      {\r\n        onsize: '1280x200,970x250,3x3',\r\n        avoid: 'blocked.ad.unit.name',\r\n      },\r\n    ],\r\n  },\r\n  impressionManagerConfig: {\r\n    'ad.unit.name': {\r\n      target: 'all|section|homepage',\r\n      frequency: '$1/$2(day|hour)',\r\n      exposed: 0,\r\n      expires: (new Date()).getTime(),\r\n    },\r\n  },\r\n  googleGlobalSettings: {\r\n    enableSingleRequest: true,\r\n    enableAsyncRendering: true,\r\n  },\r\n  sso: ssoKey,\r\n\r\n}, window.dfpConfig);\r\n\r\nexport default dfpConfig;\r\n","import globalConfig from '../globalConfig';\nimport { addHours, addDays } from '../utils/time';\nimport { debounce } from '../utils/breakpoints';\n\nexport const keys = {\n  impressions: 'impressions',\n  frequency: 'frequency',\n  /**\n   * [0] - full match\n   * [1] - impression count i.e: \"1\" | \"22\"\n   * [2] - impression expiry range quantifier  i.e: \"1\" | \"22\"\n   * [3] - impression expiry range unit i.e: \"day\" | \"hour\"\n   */\n  frequencyRegex: /(\\d+)\\/(\\d+)(day|hour)/,\n  expires: 'expires',\n  exposed: 'exposed',\n  target: 'target',\n  maxImpressions: 'maxImpressions',\n  hours: 'hour',\n  days: 'day',\n  adSlotId: 'id',\n};\n\nexport default class ImpressionsManager {\n\n  constructor(impressionManagerConfig) {\n    this.now = (new Date()).getTime(); // this date is used for comparisons only\n    this.config = Object.assign({}, impressionManagerConfig);\n    this.impressions = this.retrieveImpressionsData();\n    this.initImpressionMap();\n  }\n\n  retrieveImpressionsData() {\n    const impressions = this.migrateImpressionsData();\n    /*\n     Merge migrated data with new data\n     console.log('Migrated: ',impressions);\n     */\n    Object.keys(impressions).map((key, index) => {\n      impressions[key] = Object.assign({}, impressions[key], this.config[key]);\n      return this;\n    });\n    /*\n     console.log('Merged: ',impressions);\n     Filter out entries without frequency\n     */\n    for (const key in impressions) {\n      if ({}.hasOwnProperty.call(impressions, key)) {\n        if (!impressions[key][keys.frequency]) {\n          // console.log(`Removing ${key} - since it does not have a frequency`,impressions[key]);\n          delete impressions[key];\n        }\n      }\n    }\n    // console.log('Filtered: ',impressions);\n    return impressions;\n  }\n\n  migrateImpressionsData() {\n    let impressions;\n    let impressionsData;\n    try {\n      impressionsData = window.localStorage.getItem(keys.impressions);\n    }\n    catch (err) {\n      // In case of thrown 'SecurityError' or 'QuotaExceededError', the variable should be undefined\n      impressionsData = undefined;\n    }\n    try {\n      impressions = JSON.parse(impressionsData);\n    }\n    catch (err) {\n      // Here is where old impression data is converted to new format\n      impressions = {};\n      const oldImpressionsArray = impressionsData.split(';').filter(e => e);\n\n      oldImpressionsArray.forEach((impression) => {\n        try {\n          const adUnitImpression = impression.split(' = ');\n          const name = adUnitImpression[0];\n          const data = adUnitImpression[1];\n          const tmp = name.split('.');\n          let target = tmp.pop();\n          if (target && target === 'hp') {\n            target = 'homepage';\n          }\n          const slotId = tmp.join('.');\n          const id = `${slotId}_${target}`;\n          const exposed = parseInt(data.split('/')[0], 10) || 0;\n          const expires = parseInt(data.split('/')[1], 10) || this.now;\n          impressions[id] = {};\n          impressions[id][keys.adSlotId] = slotId;\n          impressions[id][keys.target] = target;\n          impressions[id][keys.exposed] = exposed;\n          impressions[id][keys.expires] = expires;\n        }\n        catch (err1) {\n          // console.log(`Failed converting impression: ${impression}`, err1);\n        }\n      });\n    }\n    return impressions || {};\n  }\n\n  /**\n   * Define the debounced version of the local storage save\n   */\n  saveImpressionsToLocalStorage() {\n    if (this.debouncedSave && typeof this.debouncedSave === 'function') {\n      this.debouncedSave();\n    }\n    else {\n      this.debouncedSave = debounce(this.saveImpressionsToLocalStorageImpl, 250, false);\n      this.debouncedSave();\n    }\n  }\n\n  /**\n   * Implementation of saving the impression map to localstorage\n   */\n  saveImpressionsToLocalStorageImpl() {\n    try {\n      localStorage.setItem(keys.impressions, JSON.stringify(this.impressions));\n    }\n    catch (err) {\n      /* In case of thrown 'SecurityError' or 'QuotaExceededError',\n       the operation should not break*/\n      console.error('localStorage isn\\'t available:', err); // eslint-disable-line no-console\n    }\n  }\n\n  /**\n   * Initializes the impression map based on the retrieved impressions and the global\n   * configuration.\n   */\n  initImpressionMap() {\n    Object.keys(this.config).map((key, index) => {\n      const adSlotId = key;\n      const slot = this.impressions[adSlotId];\n      let shouldUpdateExpiryDate = false;\n      // Case I: Existing slot (update)\n      if (slot) {\n        // Case I.I Existing slot, frequency has changed\n        if (this.config[adSlotId][keys.frequency] !== slot[keys.frequency]) {\n          // Updating the frequency will trigger a new expiry date\n          shouldUpdateExpiryDate = true;\n          this.impressions[adSlotId][keys.frequency] = this.config[adSlotId][keys.frequency];\n        } // Case I.II Existing slot, old expiry date\n        else if (this.now > slot[keys.expires]) {\n          // Old value that should trigger a new expiry date\n          shouldUpdateExpiryDate = true;\n        }\n      } // Case II: Non-existing slot (create new slot)\n      else {\n        this.initSlotFromConfig(adSlotId);\n      } // Finally, updates the expiry date (cases I.I and I.II)\n      if (shouldUpdateExpiryDate) {\n        this.updateExpiryDate(adSlotId);\n      }\n      return this;\n    });\n  }\n\n  /**\n   * Updates the expiry date of a slotName based on the configured slot frequency\n   * @param {String} slotName - the slotName to update.\n   */\n  updateExpiryDate(slotName) {\n    const now = new Date();\n    if (!(this.impressions[slotName] && this.impressions[slotName][keys.frequency])) {\n      throw new Error(`Unable to update expiry date for slot: ${slotName}\n      - this.impressions[slotName]:`, this.impressions[slotName]);\n    }\n    const frequencyMap = this.impressions[slotName][keys.frequency].match(keys.frequencyRegex);\n    now.setMilliseconds(0);\n    now.setSeconds(0);\n    now.setMinutes(0);\n    if (frequencyMap.indexOf(keys.days) > -1) {\n      now.setHours(0);\n    }\n    this.impressions[slotName][keys.expires] = (frequencyMap.indexOf(keys.days) > -1 ?\n      addDays(now, frequencyMap[2]) : addHours(now, frequencyMap[2])).getTime();\n\n    // Set max impressions:\n    this.impressions[slotName][keys.maxImpressions] = parseInt(frequencyMap[1], 10);\n    // Reset exposed\n    this.impressions[slotName][keys.exposed] = 0;\n  }\n\n  /**\n   * Initializes a non-existing slot from the passed global configuration for the slot\n   * @param {String} slotName - the name of the slot to create\n   */\n  initSlotFromConfig(slotName) {\n    const slot = this.impressions[slotName] || {};\n    slot[keys.frequency] = this.config[slotName][keys.frequency];\n    slot[keys.target] = this.config[slotName][keys.target];\n    slot[keys.exposed] = 0;\n    this.impressions[slotName] = slot;\n    this.updateExpiryDate(slotName);\n  }\n\n  /**\n   * Registers an impression for a given adSlot.\n   * @param {String} adSlotId - the adSlot id to register an impression for\n   * @returns {boolean} returns true iff the impression has been registered\n   */\n  registerImpression(adSlotId) {\n    if (adSlotId) {\n      const slot = this.impressions[adSlotId];\n      if (slot) {\n        const exposed = slot[keys.exposed];\n        if (isNaN(parseInt(exposed, 10)) === false) {\n          this.impressions[adSlotId][keys.exposed] += 1;\n          try {\n            this.saveImpressionsToLocalStorage();\n          }\n          catch (err) {\n            // console.log('Error saving ad impressions to localStorage!', err);\n          }\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Checks whether an adSlot has reached it's allocated impressions count.\n   * @param {String} adSlotId - the adSlot to check\n   * @returns {boolean} true iff there is a quota for the adSlot, and it has been reached\n   */\n  reachedQuota(adSlotId) {\n    // An adSlotId is suffixed with _homepage | _section if it's targeting is different\n    // between the two. If there is no difference, an _all suffix can be used.\n    const slotName = this.impressions[`${adSlotId}${globalConfig.department}`] ?\n      `${adSlotId}${globalConfig.department}` : `${adSlotId}_all`;\n\n    const slot = this.impressions[slotName];\n    let atQuota = false;\n    if (slot) {\n      const now = (new Date()).getTime();\n      // Second element of 2/4day matches '2'\n      const expires = this.impressions[slotName][keys.expires];\n      if (expires < now) {\n        this.updateExpiryDate(slotName);\n      }\n      else {\n        const maxImpressions = this.impressions[slotName][keys.maxImpressions];\n        // Not expired, did reach max impressions?\n        if (maxImpressions) {\n          atQuota = this.impressions[slotName][keys.exposed] >= maxImpressions;\n        }\n      }\n    }\n    return atQuota;\n  }\n\n\n  /**\n   * Clears the impression map from 'exposed' impressions\n   */\n  resetImpressions() {\n    const impressions = this.impressions;\n    for (const key in impressions) {\n      if ({}.hasOwnProperty.call(impressions, key)) {\n        if (impressions[key][keys.exposed]) {\n          impressions[key][keys.exposed] = 0;\n        }\n      }\n    }\n    this.saveImpressionsToLocalStorage();\n  }\n}\n","import getCookieAsMap from '../utils/cookieUtils';\nimport ImpressionManager from './impressionsManager';\nimport globalConfig from '../globalConfig';\n\nexport const userTypes = {\n  payer: 'payer',\n  registered: 'registered',\n  anonymous: 'anonymous',\n};\n\nexport default class User {\n  constructor(config) {\n    this.config = Object.assign({}, config.userConfig);\n    const cookieMap = getCookieAsMap();\n    this.ssoKey = globalConfig.sso;\n    if (!cookieMap[this.ssoKey]) {\n      // Flips the ssoKey, since cookieMap.ssoKey cannot be used to retrieve data\n      this.ssoKey = this.ssoKey === 'tmsso' ? 'engsso' : 'tmsso';\n    }\n    this.type = this.getUserType(cookieMap);\n    this.impressionManager = new ImpressionManager(config.impressionManagerConfig);\n    this.age = this.getUserAge(cookieMap);\n    this.gender = this.getUserGender(cookieMap);\n  }\n\n  getUserType(cookieMap) {\n    let userType;\n    if (cookieMap && cookieMap[this.ssoKey]) {\n      const payerProp = window.location.hostname.indexOf('haaretz.com') > -1 ?\n        'HdcPusr' : 'HtzPusr';\n      userType = cookieMap[payerProp] ? userTypes.payer : userTypes.registered;\n    }\n    else {\n      userType = userTypes.anonymous;\n    }\n    return userType;\n  }\n\n  getUserAge(cookieMap) {\n    let age;\n    const usrae = cookieMap[this.ssoKey] && cookieMap[this.ssoKey].usrae;\n    if (usrae) {\n      age = parseInt(cookieMap[this.ssoKey].usrae, 10);\n      age = age > 0 ? age : undefined;\n    }\n    return age;\n  }\n\n  getUserGender(cookieMap) {\n    let gender;\n    const urgdr = cookieMap[this.ssoKey] && cookieMap[this.ssoKey].urgdr;\n    if (urgdr) {\n      gender = parseInt(cookieMap[this.ssoKey].urgdr, 10);\n      gender = gender === 2 || gender === 1 ? gender : undefined;\n    }\n    return gender;\n  }\n}\n","class ConflictResolver {\n  constructor(conflictManagementConfig) {\n    this.dependencyMap = this.initializeDependencyMap(conflictManagementConfig);\n    this.deferredSlots = new Set();\n  }\n  initializeDependencyMap(conflictManagementJson) {\n    const queue = new Map();\n    Object.keys(conflictManagementJson).map((key, value) => {\n      let rules = conflictManagementJson[key];\n      if (rules) {\n        rules = rules.filter((item) => item.onsize && item.avoid);\n      }\n      queue.set(key, {\n        id: key,\n        rules,\n        resolvedWith: null,\n      });\n      return this;\n    });\n    return queue;\n  }\n\n  updateResolvedSlot(adSlotId, resolvedSize) {\n    if (!adSlotId) {\n      throw new Error('updateResolvedSlot must be called with an adSlotId!');\n    }\n    if (!resolvedSize) {\n      throw new Error('updateResolvedSlot must be called with a resolved size!');\n    }\n    if (this.dependencyMap.has(adSlotId)) {\n      this.dependencyMap.get(adSlotId).resolvedWith = resolvedSize;\n    }\n  }\n\n\n  isBlocked(adSlotId) {\n    if (!adSlotId) {\n      throw new Error('isBlocked must be called with an adSlotId!');\n    }\n    let isBlocked = false;\n    for (const adSlotKey of this.dependencyMap.keys()) {\n      const adSlot = this.dependencyMap.get(adSlotKey);\n      for (const adSlotRule of adSlot.rules) {\n        // Found rule specific to our target\n        if (adSlotRule.avoid === adSlotId) {\n          const parentResolvedWith = adSlot.resolvedWith;\n          // Fail fast: parent is not resolved yet - unknown returned size.\n          if (!parentResolvedWith) {\n            isBlocked = true;\n            this.deferredSlots.add(adSlotId);\n          }\n          if (adSlotRule.onsize.split(',').find(sizeString => { // eslint-disable-line\n            const size = sizeString.split('x').map(numberStr => parseInt(numberStr, 10));\n            return this.arraysEqual(size, parentResolvedWith);\n          })) {\n            // Block found\n            this.deferredSlots.add(adSlotId);\n            isBlocked = true;\n          }\n        }\n      }\n    }\n    return isBlocked;\n  }\n\n  isBlocking(adSlotId) {\n    if (!adSlotId) {\n      throw new Error('isBlocking must be called with an adSlotId!');\n    }\n    let isBlocking = false;\n    for (const adSlotKey of this.dependencyMap.keys()) {\n      if (adSlotKey === adSlotId) {\n        isBlocking = true;\n      }\n    }\n    return isBlocking;\n  }\n\n  /**\n   * Gets an array of adSlot Ids for a given adSlotId, that are dependent on (blocked by)\n   * @param {String} adSlotId - the blocking slot id\n   * @return {Array} an array of blocked slot, that has a dependency on the given slot\n   */\n  getBlockedSlotsIds(adSlotId) {\n    let result;\n    if (this.dependencyMap.has(adSlotId)) {\n      result = Array.from(this.dependencyMap.get(adSlotId).rules.map(adSlot => adSlot.avoid));\n    }\n    return result || [];\n  }\n\n  arraysEqual(a, b) {\n    if (a === b) return true;\n    if (a === null || b === null) return false;\n    if (a.length !== b.length) return false;\n    for (let i = 0; i < a.length; ++i) {\n      if (a[i] !== b[i]) return false;\n    }\n    return true;\n  }\n}\nConflictResolver.EMPTY_SIZE = [];\nexport default ConflictResolver;\n","/* global googletag */\nimport { adTypes } from '../objects/adManager';\nimport globalConfig from '../globalConfig';\n\nexport default class adSlot {\n\n  constructor(adSlotConfig) {\n    this.config = Object.assign({}, adSlotConfig);\n\n    // Part I : Markup configuration - passed from AdManager\n    this.id = this.config.id;\n    if (!this.config.id) {\n      throw new Error('an adSlot requires an id!');\n    }\n    this.target = this.config.target;\n    this.type = this.config.type;\n    this.responsive = this.config.responsive;\n    this.fluid = this.config.fluid;\n    this.user = this.config.user;\n    this.adManager = this.config.adManager;\n    this.htmlElement = this.config.htmlElement;\n    this.priority = this.config.priority;\n    this.deferredSlot = this.config.deferredSlot;\n\n    // Part II : Global, general ad configuration - passed from AdManager\n    this.department = this.config.department;\n    this.network = this.config.network;\n    this.adUnitBase = this.config.adUnitBase;\n\n    // Part III : ad specific configuration - passed from globalConfig.adSlotConfig\n    this.adSizeMapping = this.config.adSizeMapping;\n    this.responsiveAdSizeMapping = this.config.responsiveAdSizeMapping;\n    this.blacklistReferrers = this.config.blacklistReferrers ?\n      this.config.blacklistReferrers.split(',') : [];\n    this.whitelistReferrers = this.config.whitelistReferrers ?\n      this.config.whitelistReferrers.split(',') : [];\n\n\n    // Part IV : Runtime configuration - calculated data - only present in runtime\n    this.lastResolvedSize = undefined; // Initialized in 'slotRenderEnded' callback\n    this.lastResolvedWithBreakpoint = undefined; // Initialized in 'slotRenderEnded' callback\n    this.slot = undefined; // Holds a googletag.Slot object\n    // [https://developers.google.com/doubleclick-gpt/reference#googletag.Slot]\n    try {\n      if (!this.deferredSlot) {\n        this.slot = this.defineSlot();\n      }\n    }\n    catch (err) {\n      console.error(err); // eslint-disable-line no-console\n    }\n  }\n\n  /**\n   * Checks whether this adSlot is an 'Out-of-page' slot or not.\n   * An Out-of-page slot is a slot that is not embedded in the page 'normally'.\n   * @returns {boolean} true iff this adSlot is one of the predefined 'out-of-page' slots.\n   */\n  isOutOfPage() {\n    if (typeof this.type !== 'string') {\n      throw new Error('An adSlot cannot by typeless!', this);\n    }\n    if (this.isMobile() === true) {\n      return false;\n    }\n    switch (this.type) {\n      case adTypes.maavaron: return true;\n      case adTypes.popunder: return true;\n      case adTypes.talkback: return false;\n      case adTypes.regular: return false;\n      default: return false;\n    }\n  }\n\n  /**\n   * Checks whether this adSlot is a 'maavaron' slot or not.\n   * An Out-of-page slot is a slot that is not embedded in the page 'normally'.\n   * @returns {boolean} true iff this adSlot is one of the predefined 'out-of-page' slots.\n   */\n  isMaavaron() {\n    if (typeof this.type !== 'string') {\n      throw new Error('An adSlot cannot by typeless!', this);\n    }\n    if (this.isMobile() === true) {\n      return false;\n    }\n    switch (this.type) {\n      case adTypes.maavaron: return true;\n      default: return false;\n    }\n  }\n\n  isMobile() {\n    return (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i\n      .test(window.navigator.userAgent || ''));\n  }\n  /**\n   * Checks whether or not this adSlot has a non-empty whitelist, and if so, that the current\n   * referrer appears in the whitelist.\n   * Should return false iff there is a whitelist for the current adSlot, but the referrer is not\n   * mentioned in the whitelist.\n   * @returns {boolean} true iff the ad can be displayed.\n   */\n  isWhitelisted() {\n    let whitelisted = false;\n    if (this.whitelistReferrers.length !== 0) {\n      for (const referrer of this.whitelistReferrers) {\n        if (globalConfig.referrer.indexOf(referrer) > -1) {\n          whitelisted = true;\n          break;\n        }\n      }\n    }\n    else {\n      whitelisted = true;\n    }\n    return whitelisted;\n  }\n\n  /**\n   * Checks whether or not this adSlot has a non-empty blacklist, and if so, that the current\n   * referrer does not appear in the blacklist.\n   * Should return true iff there is a blacklist for the current adSlot, and the referrer is\n   * mentioned in the blacklist - to indicate that the adSlot is 'blocked'.\n   * @returns {boolean} true iff the ad cannot be displayed.\n   */\n  isBlacklisted() {\n    let blacklisted = false;\n    if (this.blacklistReferrers.length !== 0) {\n      for (const referrer of this.blacklistReferrers) {\n        if (globalConfig.referrer.indexOf(referrer) > -1) {\n          blacklisted = true;\n          break;\n        }\n      }\n    }\n    return blacklisted;\n  }\n\n\n  /**\n   * Shows the current adSlot.\n   * It assumes a markup is available for this slot (any tag with an id attribute = this.id)\n   */\n  show() {\n    if (!this.shown === true) {\n      this.shown = true; // Ensure show will be called once per adSlot\n      googletag.cmd.push(() => {\n        if (this.deferredSlot) {\n          this.slot = this.defineSlot();\n        }\n        // console.log('calling show for slot',this.id,' called @',window.performance.now());\n        document.getElementById(this.id).classList.remove('h-hidden');\n        googletag.display(this.id);\n      });\n    }\n  }\n\n  /**\n   * Shows the current adSlot.\n   * It assumes a markup is available for this slot (any tag with an id attribute = this.id)\n   */\n  hide() {\n    googletag.cmd.push(() => {\n      document.getElementById(this.id).classList.add('h-hidden');\n    });\n  }\n\n  /**\n   * Initializes page-level slot definition for the current slot\n   * @return {Slot} slot - the Google Slot that was defined from this AdSlot configuration\n   */\n  defineSlot() {\n    if (this.isMaavaron()) {\n      const maavaronSlot = this.defineMaavaron();\n      if (this.adManager.shouldSendRequestToDfp(this)) {\n        if (!this.shown) {\n          this.shown = true; // Ensure show will be called once\n          maavaronSlot.display();\n        }\n      }\n      return maavaronSlot;\n    }\n    const googletag = window.googletag;\n    const pubads = googletag.pubads();\n    const args = [];\n    const defineFn = this.isOutOfPage() ? googletag.defineOutOfPageSlot : googletag.defineSlot;\n    // 3 or 2 params according to the function that we want to activate.\n    args.push(this.getPath());\n    if (this.isOutOfPage() === false) {\n      if (this.fluid) {\n        args.push('fluid');\n      }\n      else {\n        args.push(this.adSizeMapping);\n      }\n    }\n    args.push(this.id);\n    let slot = defineFn.apply(defineFn, args);\n    if (slot) {\n      // Responsive size Mapping\n      if (this.responsive) {\n        let responsiveSlotSizeMapping = googletag.sizeMapping();\n        const breakpoints = globalConfig.breakpointsConfig.breakpoints;\n        const keys = Object.keys(this.responsiveAdSizeMapping);\n        for (const key of keys) { // ['xxs','xs',...]\n          responsiveSlotSizeMapping.addSize(\n            [breakpoints[key], 100], // 100 is a default height, since it is height agnostic\n            this.responsiveAdSizeMapping[key]);\n        }\n        responsiveSlotSizeMapping = responsiveSlotSizeMapping.build();\n        slot = slot.defineSizeMapping(responsiveSlotSizeMapping);\n      }\n      slot = slot.addService(pubads);\n      if (this.isOutOfPage() === false) {\n        slot.setCollapseEmptyDiv(true);\n      }\n    }\n    return slot;\n  }\n\n  /**\n   * Returns the current path calculated for the adSlot\n   * @returns {String} a formatted string that represent the path for the slot definition\n   */\n  getPath() {\n    /* eslint-disable no-shadow */\n    let path = globalConfig.path || [];\n    path = path.filter(path => path !== '.');\n    path = path.map(section => `${this.id}${this.department}${section}`).join('/');\n    // If a path exist, it will be preceded with a forward slash\n    path = path && this.config.department !== '_homepage' ? `/${path}` : '';\n    /* eslint-enable no-shadow */\n    const calculatedPath = `/${this.config.network}/${this.config.adUnitBase}/${this.id}/${this.id}${this.department}${path}`; // eslint-disable-line max-len\n    return calculatedPath.toLowerCase();\n  }\n\n  /* eslint-disable */\n  slotRendered(event) {\n    const id = event.slot.getAdUnitPath().split('/')[3]; // Convention: [0]/[1]network/[2]base/[3]id\n    const isEmpty = event.isEmpty; // Did the ad return as empty?\n    const resolvedSize = event.size; // What 'creative' size did the ad return with?\n    // Empty or onload callback should be called next?\n  }\n  /* eslint-enable */\n\n  /**\n   * Refresh this adSlot\n   */\n  refresh() {\n    googletag.cmd.push(() => {\n      googletag.pubads().refresh([this.slot]);\n    });\n  }\n\n  /**\n   * Shows 'Maavaron' type adSlot using Passback definition\n   * @return {Slot} slot - the Google Slot that was defined for Maavaron\n   */\n  defineMaavaron() {\n    if (!document.referrer.match('loc.haaretz')) {\n      const adUnitMaavaronPath = this.getPath();\n      const adUnitMaavaronSize = [\n        [2, 1],\n      ];\n      const slot = googletag.pubads().definePassback(adUnitMaavaronPath, adUnitMaavaronSize)\n        .setTargeting('UserType', [this.user.type])\n        .setTargeting('age', [this.user.age])\n        .setTargeting('urgdr', [this.user.gender])\n        .setTargeting('articleId', [globalConfig.articleId])\n        .setTargeting('stg', [globalConfig.environment]);\n      return slot;\n    }\n    return null;\n  }\n}\n","/* global googletag */\r\nimport User from '../objects/user';\r\nimport ConflictResolver from '../objects/conflictResolver';\r\nimport AdSlot from '../objects/adSlot';\r\nimport { getBreakpoint, getBreakpointName } from '../utils/breakpoints';\r\nimport { arraysEqual } from '../utils/arrays';\r\n\r\n// There are a total of 7 adTargets:\r\n// \"all\",\"nonPaying\",\"anonymous\",\"registered\",\"paying\",\"digitalOnly\" and \"digitalAndPrint\"\r\nexport const adPriorities = {\r\n  high: 'high',\r\n  normal: 'normal',\r\n  low: 'low',\r\n};\r\n\r\nexport const adTargets = {\r\n  all: 'all',\r\n  nonPaying: 'nonPaying',\r\n  anonymous: 'anonymous',\r\n  registered: 'registered',\r\n  paying: 'paying',\r\n  digitalOnly: 'digitalOnly',\r\n  digitalAndPrint: 'digitalAndPrint',\r\n};\r\n\r\n// There are a total of 3 userTypes: \"anonymous\", \"registered\" and \"payer\"\r\nexport const userTypes = {\r\n  anonymous: 'anonymous',\r\n  registered: 'registered',\r\n  payer: 'payer',\r\n};\r\n\r\nexport const adTypes = {\r\n  maavaron: '.maavaron',\r\n  popunder: '.popunder',\r\n  talkback: '.talkback',\r\n  regular: '',\r\n};\r\n\r\n\r\nexport default class AdManager {\r\n\r\n  constructor(config) {\r\n    this.config = Object.assign({}, config);\r\n    this.user = new User(config);\r\n    this.conflictResolver = new ConflictResolver(config.conflictManagementConfig);\r\n    /**\r\n     * Avoid race conditions by making sure to respect the usual timing of GPT.\r\n     * This DFP implementation uses Enable-Define-Display:\r\n     * Define page-level settings\r\n     * enableServices()\r\n     * Define slots\r\n     * Display slots\r\n     */\r\n    try {\r\n      googletag.cmd.push(() => {\r\n        this.initGoogleTargetingParams(); //  Define page-level settings\r\n        this.initGoogleGlobalSettings();  //  enableServices()\r\n        this.initSlotRenderedCallback();  //  Define callbacks\r\n      });\r\n      // Holds adSlot objects as soon as possible.\r\n      googletag.cmd.push(() => {\r\n        this.adSlots = this.initAdSlots(config.adSlotConfig, adPriorities.high);\r\n      });\r\n      // Once DOM ready, add more adSlots.\r\n      document.addEventListener('DOMContentLoaded', () => {\r\n        googletag.cmd.push(() => {\r\n          this.adSlots = this.initAdSlots(config.adSlotConfig, adPriorities.high);\r\n          googletag.cmd.push(() => {\r\n            this.adSlots = this.initAdSlots(config.adSlotConfig, adPriorities.normal);\r\n          });\r\n        });\r\n      });\r\n      // Once window was loaded, add the rest of the adSlots.\r\n      window.addEventListener('load', () => {\r\n        googletag.cmd.push(() => {\r\n          this.adSlots = this.initAdSlots(config.adSlotConfig, adPriorities.low);\r\n        });\r\n      });\r\n    }\r\n    catch (err) {\r\n      console.error(err); // eslint-disable-line no-console\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Shows all of the adSlots that can be displayed.\r\n   */\r\n  showAllSlots() {\r\n    for (const adSlotKey of this.adSlots.keys()) {\r\n      const adSlot = this.adSlots.get(adSlotKey);\r\n      if (adSlot.type !== adTypes.talkback && this.shouldSendRequestToDfp(adSlot)) {\r\n        adSlot.show();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets all adSlots that has a certain priority\r\n   * @param {adPriority} priority - the priority of the ad {high, normal, low}\r\n   * @return {Array<AdSlot>} adSlots - all of the defined adSlots that matches\r\n   * the given priority\r\n   */\r\n  getAdSlotsByPriority(priority) {\r\n    function priorityFilter(adSlot) {\r\n      return adSlot.priority === priority;\r\n    }\r\n    return Array.from(this.adSlots.values()).filter(priorityFilter);\r\n  }\r\n\r\n  showAllDeferredSlots() {\r\n    for (const deferredSlotId of this.conflictResolver.deferredSlots) {\r\n      if (this.adSlots.has(deferredSlotId)) {\r\n        if (!this.conflictResolver.isBlocked(deferredSlotId)) {\r\n          const deferredAdSlot = this.adSlots.get(deferredSlotId);\r\n          if (this.shouldSendRequestToDfp(deferredAdSlot)) {\r\n            deferredAdSlot.show();\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Refreshes all responsive adSlots\r\n   */\r\n  refreshAllSlots() {\r\n    const currentBreakpoint = getBreakpoint();\r\n    for (const adSlotKey of this.adSlots.keys()) {\r\n      const adSlot = this.adSlots.get(adSlotKey);\r\n      if (adSlot.responsive) {\r\n        if (adSlot.lastResolvedWithBreakpoint !== currentBreakpoint &&\r\n          this.shouldSendRequestToDfp(adSlot)) {\r\n          // console.log(`calling refresh for adSlot: ${adSlot.id}`);\r\n          adSlot.refresh();\r\n        }\r\n        else {\r\n          adSlot.hide();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initializes adSlots based on the currently found slot markup (HTML page specific),\r\n   * and the predefined configuration for the slots.\r\n   * @param {Object} adSlotConfig - the AdSlots configuration object (see: globalConfig)\r\n   * @param {String} filteredPriority - filters out all adSlots that does not match\r\n   * a given adPriority. This is used to cherry pick the init process of ads.\r\n   * @returns {Map}\r\n   */\r\n  initAdSlots(adSlotConfig, filteredPriority) {\r\n    const adSlots = new Map(this.adSlots);\r\n    let adSlotPlaceholders = Array.from(document.getElementsByClassName('js-dfp-ad'));\r\n    adSlotPlaceholders = adSlotPlaceholders.filter(node => node.id); // only nodes with an id\r\n    const adSlotNodeSet = new Set();\r\n    adSlotPlaceholders = Array.prototype.filter.call(adSlotPlaceholders, node => {\r\n      if (adSlotNodeSet.has(node.id) === false) { // first occurrence of Node\r\n        adSlotNodeSet.add(node.id);\r\n        return true;\r\n      }\r\n      return false;\r\n    });\r\n    // adSlotPlaceholders = adSlotPlaceholders.sort((a,b) => a.offsetTop - b.offsetTop);\r\n    if(this.config.adManagerConfig.adUnitBase.indexOf('mouse.co.il') > -1 &&\r\n      getBreakpointName(getBreakpoint()).indexOf('xs') > -1) {\r\n      this.config.adManagerConfig.adUnitBase = 'mouse.co.il.mobile_web';\r\n    }\r\n    adSlotPlaceholders.forEach(adSlot => {\r\n      const adSlotPriority = adSlotConfig[adSlot.id] ?\r\n      adSlotConfig[adSlot.id].priority || adPriorities.normal : undefined;\r\n      if (adSlotConfig[adSlot.id] && adSlots.has(adSlot.id) === false &&\r\n        adSlotPriority === filteredPriority) {\r\n        // The markup has a matching configuration from adSlotConfig AND was not already defined\r\n        try {\r\n          // adSlotConfig is built from globalConfig, but can be overridden by markup\r\n          const computedAdSlotConfig = Object.assign({}, adSlotConfig[adSlot.id], {\r\n            id: adSlot.id,\r\n            target: adSlot.attributes['data-audtarget'] ?\r\n              adSlot.attributes['data-audtarget'].value : adTargets.all,\r\n            type: this.getAdType(adSlot.id),\r\n            responsive: adSlotConfig[adSlot.id].responsive,\r\n            fluid: adSlotConfig[adSlot.id].fluid || false,\r\n            user: this.user,\r\n            adManager: this,\r\n            htmlElement: adSlot,\r\n            department: this.config.department,\r\n            network: this.config.adManagerConfig.network,\r\n            adUnitBase: this.config.adManagerConfig.adUnitBase,\r\n            deferredSlot: this.conflictResolver.isBlocked(adSlot.id),\r\n            priority: adSlotPriority,\r\n          });\r\n          const adSlotInstance = new AdSlot(computedAdSlotConfig);\r\n          adSlots.set(adSlot.id, adSlotInstance);\r\n          if (adSlotInstance.type !== adTypes.talkback &&\r\n            adSlotInstance.priority === adPriorities.high &&\r\n            this.shouldSendRequestToDfp(adSlotInstance)) {\r\n            /*\r\n             console.log('calling show for high priority slot', adSlotInstance.id, ' called @',\r\n             window.performance.now());\r\n             */\r\n            adSlotInstance.show();\r\n          }\r\n        }\r\n        catch (err) {\r\n          console.error(err); // eslint-disable-line no-console\r\n        }\r\n      }\r\n    });\r\n    return adSlots;\r\n  }\r\n\r\n  isPriority(adSlotId) {\r\n    return (typeof adSlotId === 'string' &&\r\n    (adSlotId.indexOf('plazma') > 0 ||\r\n    adSlotId.indexOf('maavaron') > 0 ||\r\n    adSlotId.indexOf('popunder') > 0));\r\n  }\r\n\r\n  /**\r\n   * Returns the adType based on the adSlot name.\r\n   * @param {String} adSlotId - the adSlot's identifier.\r\n   * @returns {*} enumerated export 'adTypes'\r\n   */\r\n  getAdType(adSlotId) {\r\n    if (!adSlotId) {\r\n      throw new Error('Missing argument: a call to getAdType must have an adSlotId');\r\n    }\r\n    if (adSlotId.indexOf(adTypes.maavaron) > -1) return adTypes.maavaron;\r\n    if (adSlotId.indexOf(adTypes.popunder) > -1) return adTypes.popunder;\r\n    if (adSlotId.indexOf(adTypes.talkback) > -1) return adTypes.talkback;\r\n    return adTypes.regular;\r\n  }\r\n\r\n  /**\r\n   * @param {object} adSlot the AdSlot\r\n   * @returns {boolean|*}\r\n   */\r\n  shouldSendRequestToDfp(adSlot) {\r\n    // Conflict management check\r\n    return this.conflictResolver.isBlocked(adSlot.id) === false &&\r\n      // Valid Referrer check\r\n      adSlot.isWhitelisted() &&\r\n      // Not in referrer Blacklist\r\n      adSlot.isBlacklisted() === false &&\r\n      this.shouldDisplayAdAfterAdBlockRemoval(adSlot) &&\r\n      // Responsive: breakpoint contains ad?\r\n      this.doesBreakpointContainAd(adSlot) &&\r\n      // Targeting check (userType vs. slotTargeting)\r\n      this.doesUserTypeMatchBannerTargeting(adSlot) &&\r\n      // Impressions Manager check (limits number of impressions per slot)\r\n      this.user.impressionManager.reachedQuota(adSlot.id) === false;\r\n  }\r\n\r\n  shouldDisplayAdAfterAdBlockRemoval(adSlot) {\r\n    return !(this.config.adBlockRemoved === true &&\r\n    (adSlot.type === adTypes.maavaron ||\r\n    adSlot.type === adTypes.popunder));\r\n  }\r\n\r\n  /**\r\n   * Check whether or not an ad slot should appear for the current user type\r\n   * @param {String} adSlotOrTarget the adSlot to check or the target as a string\r\n   * @returns {boolean} true iff the slot should appear for the user type\r\n   */\r\n  doesUserTypeMatchBannerTargeting(adSlotOrTarget) {\r\n    const userType = this.user.type;\r\n    const adTarget = typeof adSlotOrTarget === 'string' ? adSlotOrTarget : adSlotOrTarget.target;\r\n\r\n    switch (adTarget) {\r\n      case adTargets.all : return true;\r\n      case adTargets.nonPaying :\r\n        return userType === userTypes.anonymous || userType === userTypes.registered;\r\n      case adTargets.anonymous : return userType === userTypes.anonymous;\r\n      case adTargets.registered : return userType === userTypes.registered;\r\n      case adTargets.paying : return userType === userTypes.payer;\r\n      case adTargets.digitalOnly : return userType === userTypes.payer;\r\n      case adTargets.digitalAndPrint : return userType === userTypes.payer;\r\n      default: return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Report to the AdManager that a breakpoint has been switched (passed from one break to\r\n   * another). Should there be a responsive slot with a\r\n   * @param {Breakpoint} breakpoint - the breakpoint that is currently being displayed\r\n   * @returns {Integer} affected - the number of adSlots affected by the change\r\n   */\r\n  switchedToBreakpoint(breakpoint) {\r\n    if (!breakpoint) {\r\n      throw new Error('Missing argument: a call to switchedToBreakpoint must have an breakpoint');\r\n    }\r\n    let count = 0;\r\n    for (const adSlotKey of this.adSlots.keys()) {\r\n      const adSlot = this.adSlots.get(adSlotKey);\r\n      if (adSlot.responsive === true && adSlot.lastResolvedWithBreakpoint) {\r\n        if (adSlot.lastResolvedWithBreakpoint !== breakpoint) {\r\n          adSlot.refresh();\r\n          count++;\r\n        }\r\n      }\r\n    }\r\n    return count;\r\n  }\r\n\r\n  /**\r\n   * Checks whether an adSlot is defined for a given breakpoint (Default: current breakpoint)\r\n   * @param {AdSlot} adSlot - the adSlot to check.\r\n   * @param {Breakpoint} [breakpoint=currentBreakpoint] - the breakpoint to check this ad in.\r\n   * @returns {boolean} true iff the adSlot is defined for the given breakpoint.\r\n   */\r\n  doesBreakpointContainAd(adSlot, breakpoint = getBreakpoint()) {\r\n    if (!adSlot) {\r\n      throw new Error('Missing argument: a call to doesBreakpointContainAd must have an adSlot');\r\n    }\r\n    let containsBreakpoint = true;\r\n    if (adSlot.responsive === true) {\r\n      const mapping = adSlot.responsiveAdSizeMapping[getBreakpointName(breakpoint)];\r\n      if (Array.isArray(mapping) === false) {\r\n        throw new Error(`Invalid argument: breakpoint:${breakpoint} doesn't exist!`, this);\r\n      }\r\n      containsBreakpoint = mapping.length > 0 && !arraysEqual(mapping, [0, 0]);\r\n    }\r\n    return containsBreakpoint;\r\n  }\r\n\r\n  /**\r\n   * Initializes the callback from the 'slotRenderEnded' event for each slot\r\n   */\r\n  initSlotRenderedCallback() {\r\n    if (window.googletag && window.googletag.apiReady) {\r\n      const pubads = window.googletag.pubads();\r\n      pubads.addEventListener('slotRenderEnded', event => {\r\n        const id = event.slot.getAdUnitPath().split('/')[3];\r\n        const isEmpty = event.isEmpty;\r\n        const resolvedSize = event.size;\r\n        // console.log('slotRenderEnded for slot',id,' called @',window.performance.now());\r\n        if (this.adSlots.has(id)) {\r\n          const adSlot = this.adSlots.get(id);\r\n          adSlot.lastResolvedSize = resolvedSize;\r\n          adSlot.lastResolvedWithBreakpoint = getBreakpoint();\r\n          if (isEmpty) {\r\n            adSlot.lastResolvedSize = ConflictResolver.EMPTY_SIZE;\r\n            adSlot.hide();\r\n            this.releaseSlotDependencies(adSlot);\r\n          }\r\n          else {\r\n            this.user.impressionManager.registerImpression(`${adSlot.id}${this.config.department}`);\r\n            this.user.impressionManager.registerImpression(`${adSlot.id}_all`);\r\n            this.releaseSlotDependencies(adSlot, adSlot.lastResolvedSize);\r\n          }\r\n        }\r\n        else {\r\n          /*\r\n           console.error(`Cannot find an adSlot with id: ${id} - Ad Unit path is\r\n           ${event.slot.getAdUnitPath()}`);\r\n           */\r\n        }\r\n      });\r\n    }\r\n    else {\r\n      throw new Error('googletag api was not ready when \\'initSlotRenderedCallback\\' was called!');\r\n    }\r\n  }\r\n\r\n  releaseSlotDependencies(adSlot) {\r\n    try {\r\n      const id = adSlot.id;\r\n      this.conflictResolver.updateResolvedSlot(id, adSlot.lastResolvedSize);\r\n      if (this.conflictResolver.isBlocking(id)) {\r\n        // Hide all blocked adSlots\r\n        for (const blockedSlot of this.conflictResolver.getBlockedSlotsIds(id)) {\r\n          if (this.conflictResolver.isBlocked(blockedSlot)) {\r\n            if (this.adSlots.has(blockedSlot)) {\r\n              this.adSlots.get(blockedSlot).hide();\r\n            }\r\n          }\r\n        }\r\n        // Show the non blocked\r\n        for (const deferredSlotKey of this.conflictResolver.deferredSlots.keys()) {\r\n          const deferredAdSlot = this.adSlots.get(deferredSlotKey);\r\n          if (deferredAdSlot && this.shouldSendRequestToDfp(deferredAdSlot)) {\r\n            this.conflictResolver.deferredSlots.delete(deferredSlotKey);\r\n            if (deferredAdSlot.deferredSlot) {\r\n              deferredAdSlot.defineSlot();\r\n              deferredAdSlot.deferredSlot = false;\r\n            }\r\n            deferredAdSlot.show();\r\n          }\r\n        }\r\n      }\r\n    }\r\n    catch (err) {\r\n      /* eslint-disable no-console*/\r\n      console.error(`Cannot updateSlotDependencies for adSlot: ${adSlot.id}`);\r\n      /* eslint-enable no-console*/\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initializes page-level targeting params.\r\n   */\r\n  initGoogleTargetingParams() {\r\n    if (window.googletag && window.googletag.apiReady) {\r\n      // Returns a reference to the pubads service.\r\n      const pubads = googletag.pubads();\r\n      // Environment targeting (dev, test, prod)\r\n      if (this.config.environment) {\r\n        pubads.setTargeting('stg', [this.config.environment]);\r\n      }\r\n\r\n      // User targeting\r\n      if (this.user.type) {\r\n        pubads.setTargeting('UserType', [this.user.type]);\r\n      }\r\n      if (this.user.age) {\r\n        pubads.setTargeting('age', [this.user.age]);\r\n      }\r\n      if (this.user.gender) {\r\n        pubads.setTargeting('urgdr', [this.user.gender]);\r\n      }\r\n\r\n      // Context targeting\r\n      if (this.config.articleId) {\r\n        pubads.setTargeting('articleId', [this.config.articleId]);\r\n      }\r\n      if (this.config.gStatCampaignNumber && this.config.gStatCampaignNumber !== -1) {\r\n        pubads.setTargeting('gstat_campaign_id', [this.config.gStatCampaignNumber]);\r\n      }\r\n\r\n      // UTM targeting\r\n      /* eslint-disable no-underscore-dangle */\r\n      if (this.config.utm_.content) {\r\n        pubads.setTargeting('utm_content', [this.config.utm_.content]);\r\n      }\r\n      if (this.config.utm_.source) {\r\n        pubads.setTargeting('utm_source', [this.config.utm_.source]);\r\n      }\r\n      if (this.config.utm_.medium) {\r\n        pubads.setTargeting('utm_medium', [this.config.utm_.medium]);\r\n      }\r\n      if (this.config.utm_.campaign) {\r\n        pubads.setTargeting('utm_campaign', [this.config.utm_.campaign]);\r\n      }\r\n      /* eslint-enable no-underscore-dangle */\r\n      // AdBlock removal\r\n      if (this.config.adBlockRemoved) {\r\n        pubads.setTargeting('adblock_removed', [this.config.adBlockRemoved]);\r\n      }\r\n      // University targeting - triggered via cookie\r\n      if (this.config.wifiLocation) {\r\n        pubads.setTargeting('wifi', [this.config.wifiLocation]);\r\n      }\r\n\r\n      // Ads Centering\r\n      pubads.setCentering(true);\r\n    }\r\n    else {\r\n      throw new Error('googletag api was not ready when \\'initGoogleTargetingParams\\' was called!');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initializes googletag services.\r\n   */\r\n  initGoogleGlobalSettings() {\r\n    if (window.googletag && window.googletag.apiReady) {\r\n      const googleGlobalSettings = this.config.googleGlobalSettings;\r\n      // Enable GET parameter overrides\r\n      if (window.location.search) {\r\n        const search = window.location.search;\r\n        if (search.indexOf('sraon') > 0) {\r\n          console.log('Single Request Mode: active'); // eslint-disable-line no-console\r\n          googleGlobalSettings.enableAsyncRendering = true;\r\n        }\r\n        else if (search.indexOf('sraoff') > 0) {\r\n          console.log('Single Request Mode: disabled');// eslint-disable-line no-console\r\n          googleGlobalSettings.enableAsyncRendering = false;\r\n        }\r\n        if (search.indexOf('asyncrenderingon') > 0) {\r\n          console.log('Async rendering mode: active'); // eslint-disable-line no-console\r\n          googleGlobalSettings.enableAsyncRendering = true;\r\n        }\r\n        else if (search.indexOf('asyncrenderingonoff') > 0) {\r\n          console.log('Sync rendering mode: active');// eslint-disable-line no-console\r\n          googleGlobalSettings.enableAsyncRendering = false;\r\n        }\r\n      }\r\n      // Google services activation\r\n      if (googleGlobalSettings.enableSingleRequest === true) {\r\n        googletag.pubads().enableSingleRequest();\r\n      }\r\n      if (googleGlobalSettings.enableAsyncRendering === true) {\r\n        googletag.pubads().enableAsyncRendering();\r\n      }\r\n      else {\r\n        googletag.pubads().enableSyncRendering();\r\n      }\r\n      // Enables all GPT services that have been defined for ad slots on the page.\r\n      googletag.enableServices();\r\n    }\r\n    else {\r\n      throw new Error('googletag api wasn\\'t ready when \\'initGoogleGlobalSettings\\' was called!');\r\n    }\r\n  }\r\n}\r\n","/* globals googletag */\nimport AdManager from '../src/objects/adManager';\nimport globalConfig from './globalConfig';\nimport { getBreakpoint, debounce } from '../src/utils/breakpoints';\n\nconst defaultConfig = globalConfig || {};\nconst googletagInitTimeout = 10000;\nconst resizeTimeout = 250;\n\nexport default class DFP {\n\n  constructor(config) {\n    this.config = Object.assign({}, defaultConfig, config);\n    this.wasInitialized = false;\n    this.breakpoint = getBreakpoint();\n    this.initWindowResizeListener();\n  }\n\n  /**\n   * This part of the object's construction is dependent on the call to 'init'\n   */\n  resumeInit() {\n    try {\n      this.adManager = new AdManager(this.config);\n    }\n    catch (err) {\n      console.error(err); // eslint-disable-line no-console\n    }\n  }\n\n  /**\n   * initializes the 'googletag' global namespace and add the\n   * google publish tags library to the page\n   * @returns {Promise} that resolves to true once the googletag api is ready to use\n   * (googletag.apiReady = true)\n   */\n  initGoogleTag() {\n    const dfpThis = this;\n    return new Promise((resolve, reject) => {\n      if (dfpThis.wasInitialized === true || (window.googletag && window.googletag.apiReady)) {\n        this.adManager = this.adManager || new AdManager(this.config);\n        dfpThis.wasInitialized = true;\n        resolve(this.isGoogleTagReady);\n      }\n      else {\n        // set up a place holder for the gpt code downloaded from google\n        window.googletag = window.googletag || {};\n\n        // this is a command queue used by GPT any methods added to it will be\n        // executed when GPT code is available, if GPT is already available they\n        // will be executed immediately\n        window.googletag.cmd = window.googletag.cmd || [];\n        // load google tag services JavaScript\n        (() => {\n          const tag = window.document.createElement('script');\n          tag.async = false;\n          tag.type = 'text/javascript';\n          // var useSSL = 'https:' == document.location.protocol;\n          tag.setAttribute('src', '//www.googletagservices.com/tag/js/gpt.js');\n          const node = window.document.getElementsByTagName('script')[0];\n          tag.onload = () => {\n            dfpThis.wasInitialized = true;\n            dfpThis.resumeInit();\n            resolve(this.isGoogleTagReady);\n          };\n          tag.onerror = (error) => {\n            dfpThis.wasInitialized = false;\n            reject(error);\n          };\n          node.parentNode.insertBefore(tag, node);\n        })();\n      }\n    });\n  }\n\n  /**\n   *\n   * @returns {Promise}\n   */\n  isGoogleTagReady() {\n    const promise = new Promise((resolve, reject) => {\n      googletag.cmd.push(() => {\n        resolve(this);\n      });\n      setTimeout(() => {\n        if (!(googletag && googletag.apiReady === true)) {\n          reject(new Error('googletag failed to initialize on the page!'));\n        }\n      }, googletagInitTimeout);\n    });\n    return promise;\n  }\n\n  /**\n   * Initializes the window resize listener to support responsive ad refreshes\n   */\n  initWindowResizeListener() {\n    const dfpThis = this;\n    function onResize() {\n      const currentBreakpoint = getBreakpoint();\n      if (dfpThis.breakpoint !== currentBreakpoint) {\n        dfpThis.breakpoint = currentBreakpoint;\n        if (dfpThis.adManager) {\n          dfpThis.adManager.refreshAllSlots();\n        }\n        else {\n          throw new Error('initWindowResizeListener error - adManager instance is not available');\n        }\n      }\n    }\n    const debouncedFunction = debounce(onResize, resizeTimeout);\n    window.onresize = debouncedFunction;\n  }\n}\n","import DFP from './dfp';\nimport globalConfig from './globalConfig';\nimport { version as v } from './../package.json';\n// const pkg = require('./../package.json');\n\n// DFP version is based on the package.json\nDFP.version = v || 'VERSION';\n\n/*\n // Only for development mode\n if ( process.env.NODE_ENV !== 'production' ) {\n DFP.dev = '123';\n }\n */\n\nexport const config = globalConfig;\nexport const version = DFP.version;\nexport default DFP;\n"]}