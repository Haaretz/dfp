{"version":3,"sources":["../src/utils/cookieUtils.js","../src/utils/time.js","../src/utils/breakpoints.js","../src/utils/arrays.js","../jspm_packages/npm/systemjs-plugin-babel@0.0.17/babel-helpers/classCallCheck.js","../jspm_packages/npm/systemjs-plugin-babel@0.0.17/babel-helpers/createClass.js","../src/globalConfig.js","../src/objects/impressionsManager.js","../src/objects/user.js","../src/objects/conflictResolver.js","../src/objects/adSlot.js","../src/objects/adManager.js","../src/dfp.js","../src/index.js"],"names":["stringToMap","string","separator","undefined","_ref$separator","operator","_ref$operator","map","itemsArr","split","forEach","element","keyValue","length","decodeURIComponent","getCookieAsMap","document","cookie","tmsso","engsso","addHours","date","hours","SyntaxError","isNaN","parseInt","TypeError","result","Date","setHours","getHours","addDays","days","setDate","getDate","debounce","func","wait","arguments","immediate","timeout","context","this","args","later","apply","callNow","setTimeout","getBreakpoint","breakpoint","windowWidth","window","innerWidth","documentElement","clientWidth","body","breakpoints","xs","xxs","s","m","l","xl","xxl","getBreakpointName","resultBreakpoint","arraysEqual$1","a","b","Array","isArray","i","version","_","instance","Constructor","defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","key","protoProps","staticProps","prototype","ssoKey","location","hostname","indexOf","dfpConfig","Object","assign","referrer","isMobile","test","navigator","userAgent","isHomepage","pathname","environment","department","domain","regexMatch","exec","path","sectionArray","articleId","slice","filter","section","index","arr","reduce","last","current","concat","site","env","port","dev","prod","articleIdMatch","pop","content","getUrlParam","source","medium","campaign","results","RegExp","search","adBlockRemoved","localStorage","getItem","err","isWriterAlerts","wifiLocation","cookieMap","_htzwif","gStatCampaignNumber","gstatCampaign","JSON","parse","CampaignNumber","breakpoints2","breakpoints3","breakpoints1","getTime","breakpointsConfig","keys","ImpressionsManager","impressionManagerConfig","now","config","impressions","retrieveImpressionsData","initImpressionMap","migrateImpressionsData","_this","hasOwnProperty","call","frequency","impressionsData","oldImpressionsArray","e","impression","adUnitImpression","name","data","tmp","slotId","join","id","exposed","expires","_this2","adSlotId","err1","debouncedSave","saveImpressionsToLocalStorageImpl","setItem","stringify","error","slot","_this3","shouldUpdateExpiryDate","initSlotFromConfig","updateExpiryDate","slotName","Error","frequencyMap","match","frequencyRegex","setMilliseconds","setSeconds","setMinutes","maxImpressions","saveImpressionsToLocalStorage","atQuota","userTypes$1","User","userConfig","sso","type","getUserType","impressionManager","age","getUserAge","gender","getUserGender","userType","payerProp","payer","registered","anonymous","usrae","urgdr","ConflictResolver","conflictManagementConfig","dependencyMap","initializeDependencyMap","deferredSlots","Set","conflictManagementJson","queue","Map","value","rules","item","onsize","avoid","set","resolvedSize","has","get","resolvedWith","isBlocked","_step","Symbol","iterator","_iteratorNormalCompletion","_iterator","next","done","adSlotKey","adSlot","_step2","_iteratorNormalCompletion2","_iterator2","adSlotRule","parentResolvedWith","add","find","sizeString","size","numberStr","arraysEqual","isBlocking","_step3","_iteratorNormalCompletion3","_iterator3","from","EMPTY_SIZE","adSlotConfig","responsive","fluid","user","adManager","htmlElement","priority","deferredSlot","network","adUnitBase","adSizeMapping","responsiveAdSizeMapping","blacklistReferrers","whitelistReferrers","lastResolvedSize","lastResolvedWithBreakpoint","defineSlot","adTypes","maavaron","popunder","talkback","regular","whitelisted","blacklisted","shown","cmd","push","getElementById","classList","remove","display","isMaavaron","maavaronSlot","defineMaavaron","shouldSendRequestToDfp","googletag","pubads","defineFn","isOutOfPage","defineOutOfPageSlot","getPath","responsiveSlotSizeMapping","sizeMapping","addSize","build","defineSizeMapping","addService","setCollapseEmptyDiv","calculatedPath","toLowerCase","event","getAdUnitPath","isEmpty","refresh","_this4","adUnitMaavaronPath","adUnitMaavaronSize","definePassback","setTargeting","adPriorities","adTargets","userTypes$$1","AdManager","conflictResolver","initGoogleTargetingParams","initGoogleGlobalSettings","initSlotRenderedCallback","currentBreakpointName","adManagerConfig","adSlots","initAdSlots","high","addEventListener","normal","low","adSlot$$1","show","priorityFilter","values","deferredSlotId","deferredAdSlot","currentBreakpoint","hide","filteredPriority","adSlotPlaceholders","getElementsByClassName","node","adSlotNodeSet","adSlotPriority","computedAdSlotConfig","attributes","all","getAdType","adSlotInstance","isWhitelisted","isBlacklisted","shouldDisplayAdAfterAdBlockRemoval","doesBreakpointContainAd","doesUserTypeMatchBannerTargeting","reachedQuota","adSlotOrTarget","adTarget","nonPaying","paying","digitalOnly","digitalAndPrint","count","_step4","_iteratorNormalCompletion4","_iterator4","containsBreakpoint","mapping","apiReady","releaseSlotDependencies","registerImpression","updateResolvedSlot","_step5","getBlockedSlotsIds","_iteratorNormalCompletion5","_iterator5","blockedSlot","_step6","_iteratorNormalCompletion6","_iterator6","deferredSlotKey","delete","utm_","setCentering","googleGlobalSettings","log","enableAsyncRendering","enableSingleRequest","enableSyncRendering","enableServices","defaultConfig","googletagInitTimeout","resizeTimeout","DFP$1","wasInitialized","initWindowResizeListener","dfpThis","Promise","resolve","reject","isGoogleTagReady","tag","createElement","async","setAttribute","getElementsByTagName","onload","resumeInit","onerror","parentNode","insertBefore","promise","onResize","refreshAllSlots","debouncedFunction","onresize","version$1"],"mappings":"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","file":"dfp.min.js","sourcesContent":["/**\r\n * Htz-cookie-util\r\n * @module htzCookieUtil\r\n * @author Elia Grady elia.grady@haaretz.co.il\r\n * @license MIT\r\n */\r\n\r\n/**\r\n * Translates Key-Value string into a convenient map.\r\n * @param {String} string String in format of \"key<operator>value<separator>.....\"\r\n * @param {object} options object for overriding defaults:\r\n * options.separator is a String or regExp that separates between each key value pairs\r\n * (default is ';'). options.operator is a String or regExp that separates between each key\r\n * and value within a pair (default is '=').\r\n * @returns {object} a map object, with key-value mapping according to the passed configuration.\r\n */\r\nfunction stringToMap(string,\r\n  { separator = ';', operator = '=' } = {}) {\r\n  const map = {};\r\n  const itemsArr = string.split(separator);\r\n  itemsArr.forEach(element => {\r\n    if (typeof element === 'string') {\r\n      const keyValue = element.split(operator);\r\n      if (keyValue.length === 2) {\r\n        map[keyValue[0]] = decodeURIComponent(keyValue[1]);\r\n      }\r\n    }\r\n  });\r\n  return map;\r\n}\r\nexport const ssoKey = window.location.hostname.indexOf('haaretz.com') > -1 ? 'engsso' : 'tmsso';\r\n\r\n// Translates Cookie string into a convenient map.\r\nexport default function getCookieAsMap() {\r\n  const map = stringToMap(document.cookie, { separator: /;\\s?/ });\r\n  if (typeof map.tmsso === 'string') {\r\n    map.tmsso = stringToMap(map.tmsso, { separator: ':' });\r\n  }\r\n  if (typeof map.engsso === 'string') {\r\n    map.engsso = stringToMap(map.engsso, { separator: ':' });\r\n  }\r\n  return map;\r\n}\r\n","/**\r\n * Helper function. Adds N hours to a given date object.\r\n * @param {Date} date - the date to derive from\r\n * @param {Number} hours - the amount of hours to add, in whole numbers\r\n * @throws {SyntaxError} Will throw if the 'date' param is not provided\r\n * @throws {SyntaxError} Will throw if the 'hours' param is not provided\r\n * @throws {TypeError} Will throw if the 'hours' param is not a valid integer\r\n * @returns {Date} date - the new date, derived from adding the given hours\r\n */\r\nexport function addHours(date, hours) {\r\n  if (!date) {\r\n    throw new SyntaxError('addHours called without a required \\'date\\' parameter!');\r\n  }\r\n  if (!hours) {\r\n    throw new SyntaxError('addHours called without a required \\'hours\\' parameter!');\r\n  }\r\n  else if (isNaN(parseInt(hours, 10))) {\r\n    throw new TypeError('addHours called with an invalid integer \\'hours\\' parameter!');\r\n  }\r\n  const result = new Date(date);\r\n  result.setHours(result.getHours() + parseInt(hours, 10));\r\n  return result;\r\n}\r\n\r\n/**\r\n * Helper function. Adds N days to a given date object.\r\n * @param {Date} date - the date to derive from\r\n * @param {Integer} days - the amount of days to add\r\n * @throws {SyntaxError} Will throw if the 'date' param is not provided\r\n * @throws {SyntaxError} Will throw if the 'days' param is not provided\r\n * @throws {TypeError} Will throw if the 'hours' param is not a valid integer\r\n * @returns {Date} date - the new date, derived from adding the given days\r\n */\r\nexport function addDays(date, days) {\r\n  if (!date) {\r\n    throw new SyntaxError('addDays called without a required \\'date\\' parameter!');\r\n  }\r\n  if (!days) {\r\n    throw new SyntaxError('addDays called without a required \\'days\\' parameter!');\r\n  }\r\n  else if (isNaN(parseInt(days, 10))) {\r\n    throw new TypeError('addDays called with an invalid integer \\'days\\' parameter!');\r\n  }\r\n  const result = new Date(date);\r\n  result.setDate(result.getDate() + parseInt(days, 10));\r\n  return result;\r\n}\r\n","import globalConfig from '../globalConfig';\r\n\r\nconst breakpoints = globalConfig.breakpointsConfig.breakpoints;\r\n\r\n/**\r\n * Returns a function, that, as long as it continues to be invoked, will not\r\n * be triggered. The function will be called after it stops being called for\r\n * N milliseconds. If `immediate` is passed, trigger the function on the\r\n * leading edge, instead of the trailing.\r\n * @param {function} func - the function to run\r\n * @param {Number} wait - the timeout period to avoid running the function\r\n * @param {Boolean} immediate - leading edge modifier\r\n * @returns {function} the debounced function\r\n */\r\nexport function debounce(func, wait = 100, immediate) {\r\n  let timeout;\r\n  return function debounced() {\r\n    const context = this;\r\n    const args = arguments;// eslint-disable-line prefer-rest-params\r\n    const later = () => {\r\n      timeout = null;\r\n      if (!immediate) func.apply(context, args);\r\n    };\r\n    const callNow = immediate && !timeout;\r\n    clearTimeout(timeout);\r\n    timeout = setTimeout(later, wait);\r\n    if (callNow) func.apply(context, args);\r\n  };\r\n}\r\n\r\n/**\r\n * Returns the current breakpoint that is closest to the window's width\r\n * @returns {number} the break that the current width represents\r\n */\r\nexport function getBreakpoint() {\r\n  let breakpoint;\r\n  const windowWidth = window.innerWidth\r\n    || document.documentElement.clientWidth\r\n    || document.body.clientWidth;\r\n  switch (true) {\r\n    case windowWidth < breakpoints.xs: breakpoint = breakpoints.xxs; break;\r\n    case windowWidth < breakpoints.s: breakpoint = breakpoints.xs; break;\r\n    case windowWidth < breakpoints.m: breakpoint = breakpoints.s; break;\r\n    case windowWidth < breakpoints.l: breakpoint = breakpoints.m; break;\r\n    case windowWidth < breakpoints.xl: breakpoint = breakpoints.l; break;\r\n    case windowWidth < breakpoints.xxl: breakpoint = breakpoints.xl; break;\r\n    default: breakpoint = breakpoints.xxl;\r\n  }\r\n  return breakpoint;\r\n}\r\n/**\r\n * Returns the current breakpoint that is closest to the window's width\r\n * @param {number} breakpoint - the breakpoint label enumerator that the current width represents\r\n * (yield with a getBreakpoint() call or passed manually )\r\n * @returns {string} breakpoint - the breakpoint label that the current width represents,\r\n * as a string\r\n */\r\nexport function getBreakpointName(breakpoint) {\r\n  let resultBreakpoint;\r\n  const windowWidth = breakpoint || window.innerWidth;\r\n  switch (true) {\r\n    case windowWidth < breakpoints.xs: resultBreakpoint = 'xxs'; break;\r\n    case windowWidth < breakpoints.s: resultBreakpoint = 'xs'; break;\r\n    case windowWidth < breakpoints.m: resultBreakpoint = 's'; break;\r\n    case windowWidth < breakpoints.l: resultBreakpoint = 'm'; break;\r\n    case windowWidth < breakpoints.xl: resultBreakpoint = 'l'; break;\r\n    case windowWidth < breakpoints.xxl: resultBreakpoint = 'xl'; break;\r\n    default: resultBreakpoint = 'xxl';\r\n  }\r\n  return resultBreakpoint;\r\n}\r\n","/**\r\n * Checks whether two arrays are equal\r\n * @param {Array} a - the first array to check\r\n * @param {Array} b - the second array to check\r\n * @returns {Boolean} true iff both a and b are arrays, with equal values\r\n */\r\nexport function arraysEqual(a, b) {\r\n  if (!a || !b) return false;\r\n  if (!Array.isArray(a) || !Array.isArray(b)) return false;\r\n  if (a === b) return true;\r\n  if (a.length !== b.length) return false;\r\n  for (let i = 0; i < a.length; ++i) {\r\n    if (a[i] !== b[i]) return false;\r\n  }\r\n  return true;\r\n}\r\nexport default arraysEqual;\r\n","export default (function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n});","export default (function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n})();","/* global dfpBaseConf */\r\nimport getCookieAsMap, { ssoKey } from './utils/cookieUtils';\r\n// globalConfig for DFP\r\nconst dfpConfig = Object.assign({\r\n  get referrer() {\r\n    return document.referrer ? document.referrer : '';\r\n  },\r\n  get isMobile() {\r\n    return (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i\r\n      .test(window.navigator.userAgent || ''));\r\n  },\r\n  /**\r\n   * Returns true iff the loaded page is the homepage (no inner path)\r\n   * @returns {boolean}\r\n   */\r\n  get isHomepage() {\r\n    return window.location.pathname === '/' || this.environment === 3; // 'prod'\r\n  },\r\n  get department() {\r\n    return this.isHomepage ? '_homepage' : '_section';\r\n  },\r\n  /**\r\n   * returns the domain the page was loaded to. i.e: 'haaretz.co.il', 'haaretz.com'\r\n   * @returns {string} the domain name from the windows's location hostname property\r\n   */\r\n  get domain() {\r\n    const regexMatch = /([\\d|\\w]+)(\\.co\\.il|\\.com)(.*)?/.exec(window.location.hostname);\r\n    const result = regexMatch ? regexMatch[0] : window.location.hostname;\r\n    return result;\r\n  },\r\n  /**\r\n   * Returns an array of concatenated paths, separated by a dot.\r\n   * For example, for the URL:\r\n   * http://www.haaretz.co.il/news/world/america/us-election-2016/LIVE-1.2869045\r\n   * the path is '/news/world/america/us-election-2016/LIVE-1.2869045'.\r\n   * This function takes the directories ['news', 'world', 'america', 'us-election-2016']\r\n   * and converts it to the following format:\r\n   * ['.news', '.news.world', '.news.world.america', '.news.world.america.us-election-2016']\r\n   * This denotes the path configuration for the given adSlot\r\n   * non articles (sections) will be given a '0' - no articleId value for targeting purposes)\r\n   * @returns {Array.<T>} an array of path names\r\n   */\r\n  get path() {\r\n    let sectionArray = this.articleId && this.articleId !== '0' ?\r\n      window.location.pathname.split('/').slice(1, -1) :\r\n      window.location.pathname.split('/').slice(1);\r\n    sectionArray = sectionArray.filter(path =>\r\n    path !== 'wwwMobileSite' && path !== 'whtzMobileSite');\r\n    return sectionArray\r\n      .map(section => `.${section}`)\r\n      .map((section, index, arr) => arr.slice(0, index + 1)\r\n        .reduce((last, current) => last.concat(current)));\r\n  },\r\n  /**\r\n   * Returns a string representation for the name of the site\r\n   * @return {*|string}\r\n   */\r\n  get site() {\r\n    let site;\r\n    if (window.location.hostname.indexOf('haaretz.co.il') > -1) {\r\n      site = 'haaretz';\r\n    }\r\n    else if (window.location.hostname.indexOf('themarker.com') > -1) {\r\n      site = 'themarker';\r\n    }\r\n    else if (window.location.hostname.indexOf('mouse.co.il') > -1) {\r\n      site = 'mouse';\r\n    }\r\n    return site || 'haaretz';\r\n  },\r\n  /**\r\n   * Returns the current environment targeting param, if such is defined.\r\n   * @returns {number} targeting param, 1 for local development, 2 for test servers and 3 for prod.\r\n   * May return undefined if no targeting is specified.\r\n   */\r\n  get environment() {\r\n    const env = {\r\n      dev: 1,\r\n      test: 2,\r\n      prod: 3,\r\n    };\r\n    return window.location.port === '8080' ? env.dev :\r\n      (window.location.hostname.indexOf('pre.haaretz.co.il') > -1\r\n      || window.location.hostname.indexOf('tmtest.themarker.com') > -1\r\n      || window.location.hostname.indexOf('prodmouse.mouse.co.il') > -1) ? env.test :\r\n        (window.location.pathname.indexOf('/cmlink/Haaretz.HomePage') > -1\r\n        || window.location.pathname.indexOf('/cmlink/TheMarker.HomePage') > -1\r\n        || window.location.pathname.indexOf('/cmlink/Mouse.HomePage') > -1)\r\n          ? env.prod : undefined;\r\n  },\r\n  /**\r\n   * Returns the articleIf if on an article page, or null otherwise\r\n   * @returns {string} an articleId string from the pathname, or 0 if not found\r\n   */\r\n  get articleId() {\r\n    const articleIdMatch = /\\d\\.\\d+/g.exec(window.location.pathname);\r\n    let articleId = '0';\r\n    if (articleIdMatch) {\r\n      articleId = articleIdMatch.pop(); // Converts [\"1.23145\"] to \"1.23145\"\r\n    }\r\n    return articleId;\r\n  },\r\n  utm_: {\r\n    get content() {\r\n      return this.getUrlParam('utm_content');\r\n    },\r\n    get source() {\r\n      return this.getUrlParam('utm_source');\r\n    },\r\n    get medium() {\r\n      return this.getUrlParam('utm_medium');\r\n    },\r\n    get campaign() {\r\n      return this.getUrlParam('utm_campaign');\r\n    },\r\n    getUrlParam(key) {\r\n      const results = RegExp(`(${key})(=)([^&\"]+)`).exec(window.location.search);\r\n      return results && results[3] ? results[3] : undefined;\r\n    },\r\n  },\r\n  get adBlockRemoved() {\r\n    let adBlockRemoved = false;\r\n    try {\r\n      if (localStorage.getItem('adblock_removed')) {\r\n        adBlockRemoved = true;\r\n      }\r\n    }\r\n    catch (err) {\r\n      // do nothing\r\n    }\r\n    return adBlockRemoved;\r\n  },\r\n  get isWriterAlerts() {\r\n    return (location.search.indexOf('writerAlerts=true') > -1);\r\n  },\r\n  get wifiLocation() {\r\n    let wifiLocation = '';\r\n    const cookieMap = getCookieAsMap();\r\n    try {\r\n      if (cookieMap && cookieMap._htzwif) { // eslint-disable-line no-underscore-dangle\r\n        wifiLocation = (cookieMap._htzwif === 'arcaffe') // eslint-disable-line no-underscore-dangle\r\n          ? 'ArCafe' : 'university';\r\n      }\r\n    }\r\n    catch (err) {\r\n      // do nothing\r\n    }\r\n    return wifiLocation;\r\n  },\r\n  get gStatCampaignNumber() {\r\n    let gstatCampaign;\r\n    try {\r\n      gstatCampaign = localStorage.getItem('GstatCampaign') ?\r\n        JSON.parse(localStorage.getItem('GstatCampaign')) : undefined;\r\n    }\r\n    catch (err) {\r\n      /* In case of thrown 'SecurityError' or 'QuotaExceededError',\r\n       the variable should be undefined */\r\n      gstatCampaign = undefined;\r\n    }\r\n    return gstatCampaign ? gstatCampaign.CampaignNumber : undefined;\r\n  },\r\n  adSlotConfig: {\r\n    'haaretz.co.il.example.slot': {\r\n      id: 'slotId',\r\n      // path : \"/network/base/slotId/slotId_subsection\", Will be calculated from AdManager\r\n      responsive: true,\r\n      adSizeMapping: [['width1', 'height1'], ...['widthN', 'heightN']],\r\n      priority: 'normal',\r\n      fluid: false,\r\n      responsiveAdSizeMapping: {\r\n        xxs: [['width1', 'height1'], ...['widthN', 'heightN']],\r\n        xs: [['width1', 'height1'], ...['widthN', 'heightN']],\r\n        s: [['width1', 'height1'], ...['widthN', 'heightN']],\r\n        m: [['width1', 'height1'], ...['widthN', 'heightN']],\r\n        l: [['width1', 'height1'], ...['widthN', 'heightN']],\r\n        xl: [['width1', 'height1'], ...['widthN', 'heightN']],\r\n        xxl: [['width1', 'height1'], ...['widthN', 'heightN']],\r\n      },\r\n      blacklistReferrers: 'comma, delimited, blacklisted, referrer, list',\r\n      whitelistReferrers: 'comma, delimited, referrer, list',\r\n    },\r\n  },\r\n  adManagerConfig: {\r\n    network: '9401',\r\n    adUnitBase: 'haaretz.co.il_Web',\r\n  },\r\n  breakpointsConfig: {\r\n    get breakpoints() {\r\n      // Override in VM from backend to control this toggle.\r\n      let breakpoints;\r\n      switch (this.site) {\r\n        case 'themarker': breakpoints = this.breakpoints2; break;\r\n        case 'mouse': breakpoints = this.breakpoints3; break;\r\n        default: breakpoints = this.breakpoints1;\r\n      }\r\n      return breakpoints;\r\n    },\r\n    // Type 1\r\n    breakpoints1: {\r\n      xxs: 600,\r\n      xs: 761,\r\n      s: 993,\r\n      m: 1009,\r\n      l: 1291,\r\n      xl: 1600,\r\n      xxl: 1900,\r\n    },\r\n    // Type 2\r\n    breakpoints2: {\r\n      xxs: 600,\r\n      xs: 1000,\r\n      s: 1150,\r\n      m: 1281,\r\n      l: 1600,\r\n      xl: 1920,\r\n      xxl: 1920,\r\n    },\r\n    // Type 3\r\n    breakpoints3: {\r\n      xxs: 480,\r\n      xs: 600,\r\n      s: 768,\r\n      m: 1024,\r\n      l: 1280,\r\n      xl: 1900,\r\n      xxl: 1900,\r\n    },\r\n  },\r\n  userConfig: {\r\n    type: undefined,\r\n    age: undefined,\r\n    gender: undefined,\r\n  },\r\n  conflictManagementConfig: {\r\n    'blocking.ad.unit.name': [\r\n      {\r\n        onsize: '1280x200,970x250,3x3',\r\n        avoid: 'blocked.ad.unit.name',\r\n      },\r\n      {\r\n        onsize: '1280x200,970x250,3x3',\r\n        avoid: 'blocked.ad.unit.name',\r\n      },\r\n    ],\r\n  },\r\n  impressionManagerConfig: {\r\n    'ad.unit.name': {\r\n      target: 'all|section|homepage',\r\n      frequency: '$1/$2(day|hour)',\r\n      exposed: 0,\r\n      expires: (new Date()).getTime(),\r\n    },\r\n  },\r\n  googleGlobalSettings: {\r\n    enableSingleRequest: true,\r\n    enableAsyncRendering: true,\r\n  },\r\n  sso: ssoKey,\r\n\r\n}, window.dfpConfig);\r\n\r\nexport default dfpConfig;\r\n","import globalConfig from '../globalConfig';\r\nimport { addHours, addDays } from '../utils/time';\r\nimport { debounce } from '../utils/breakpoints';\r\n\r\nexport const keys = {\r\n  impressions: 'impressions',\r\n  frequency: 'frequency',\r\n  /**\r\n   * [0] - full match\r\n   * [1] - impression count i.e: \"1\" | \"22\"\r\n   * [2] - impression expiry range quantifier  i.e: \"1\" | \"22\"\r\n   * [3] - impression expiry range unit i.e: \"day\" | \"hour\"\r\n   */\r\n  frequencyRegex: /(\\d+)\\/(\\d+)(day|hour)/,\r\n  expires: 'expires',\r\n  exposed: 'exposed',\r\n  target: 'target',\r\n  maxImpressions: 'maxImpressions',\r\n  hours: 'hour',\r\n  days: 'day',\r\n  adSlotId: 'id',\r\n};\r\n\r\nexport default class ImpressionsManager {\r\n\r\n  constructor(impressionManagerConfig) {\r\n    this.now = (new Date()).getTime(); // this date is used for comparisons only\r\n    this.config = Object.assign({}, impressionManagerConfig);\r\n    this.impressions = this.retrieveImpressionsData();\r\n    this.initImpressionMap();\r\n  }\r\n\r\n  retrieveImpressionsData() {\r\n    const impressions = this.migrateImpressionsData();\r\n    /*\r\n     Merge migrated data with new data\r\n     console.log('Migrated: ',impressions);\r\n     */\r\n    Object.keys(impressions).map((key, index) => {\r\n      impressions[key] = Object.assign({}, impressions[key], this.config[key]);\r\n      return this;\r\n    });\r\n    /*\r\n     console.log('Merged: ',impressions);\r\n     Filter out entries without frequency\r\n     */\r\n    for (const key in impressions) {\r\n      if ({}.hasOwnProperty.call(impressions, key)) {\r\n        if (!impressions[key][keys.frequency]) {\r\n          // console.log(`Removing ${key} - since it does not have a frequency`,impressions[key]);\r\n          delete impressions[key];\r\n        }\r\n      }\r\n    }\r\n    // console.log('Filtered: ',impressions);\r\n    return impressions;\r\n  }\r\n\r\n  migrateImpressionsData() {\r\n    let impressions;\r\n    let impressionsData;\r\n    try {\r\n      impressionsData = window.localStorage.getItem(keys.impressions);\r\n    }\r\n    catch (err) {\r\n      // In case of thrown 'SecurityError' or 'QuotaExceededError', the variable should be undefined\r\n      impressionsData = undefined;\r\n    }\r\n    try {\r\n      impressions = JSON.parse(impressionsData);\r\n    }\r\n    catch (err) {\r\n      // Here is where old impression data is converted to new format\r\n      impressions = {};\r\n      const oldImpressionsArray = impressionsData.split(';').filter(e => e);\r\n\r\n      oldImpressionsArray.forEach((impression) => {\r\n        try {\r\n          const adUnitImpression = impression.split(' = ');\r\n          const name = adUnitImpression[0];\r\n          const data = adUnitImpression[1];\r\n          const tmp = name.split('.');\r\n          let target = tmp.pop();\r\n          if (target && target === 'hp') {\r\n            target = 'homepage';\r\n          }\r\n          const slotId = tmp.join('.');\r\n          const id = `${slotId}_${target}`;\r\n          const exposed = parseInt(data.split('/')[0], 10) || 0;\r\n          const expires = parseInt(data.split('/')[1], 10) || this.now;\r\n          impressions[id] = {};\r\n          impressions[id][keys.adSlotId] = slotId;\r\n          impressions[id][keys.target] = target;\r\n          impressions[id][keys.exposed] = exposed;\r\n          impressions[id][keys.expires] = expires;\r\n        }\r\n        catch (err1) {\r\n          // console.log(`Failed converting impression: ${impression}`, err1);\r\n        }\r\n      });\r\n    }\r\n    return impressions || {};\r\n  }\r\n\r\n  /**\r\n   * Define the debounced version of the local storage save\r\n   */\r\n  saveImpressionsToLocalStorage() {\r\n    if (this.debouncedSave && typeof this.debouncedSave === 'function') {\r\n      this.debouncedSave();\r\n    }\r\n    else {\r\n      this.debouncedSave = debounce(this.saveImpressionsToLocalStorageImpl, 250, false);\r\n      this.debouncedSave();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Implementation of saving the impression map to localstorage\r\n   */\r\n  saveImpressionsToLocalStorageImpl() {\r\n    try {\r\n      localStorage.setItem(keys.impressions, JSON.stringify(this.impressions));\r\n    }\r\n    catch (err) {\r\n      /* In case of thrown 'SecurityError' or 'QuotaExceededError',\r\n       the operation should not break*/\r\n      console.error('localStorage isn\\'t available:', err); // eslint-disable-line no-console\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initializes the impression map based on the retrieved impressions and the global\r\n   * configuration.\r\n   */\r\n  initImpressionMap() {\r\n    Object.keys(this.config).map((key, index) => {\r\n      const adSlotId = key;\r\n      const slot = this.impressions[adSlotId];\r\n      let shouldUpdateExpiryDate = false;\r\n      // Case I: Existing slot (update)\r\n      if (slot) {\r\n        // Case I.I Existing slot, frequency has changed\r\n        if (this.config[adSlotId][keys.frequency] !== slot[keys.frequency]) {\r\n          // Updating the frequency will trigger a new expiry date\r\n          shouldUpdateExpiryDate = true;\r\n          this.impressions[adSlotId][keys.frequency] = this.config[adSlotId][keys.frequency];\r\n        } // Case I.II Existing slot, old expiry date\r\n        else if (this.now > slot[keys.expires]) {\r\n          // Old value that should trigger a new expiry date\r\n          shouldUpdateExpiryDate = true;\r\n        }\r\n      } // Case II: Non-existing slot (create new slot)\r\n      else {\r\n        this.initSlotFromConfig(adSlotId);\r\n      } // Finally, updates the expiry date (cases I.I and I.II)\r\n      if (shouldUpdateExpiryDate) {\r\n        this.updateExpiryDate(adSlotId);\r\n      }\r\n      return this;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Updates the expiry date of a slotName based on the configured slot frequency\r\n   * @param {String} slotName - the slotName to update.\r\n   */\r\n  updateExpiryDate(slotName) {\r\n    const now = new Date();\r\n    if (!(this.impressions[slotName] && this.impressions[slotName][keys.frequency])) {\r\n      throw new Error(`Unable to update expiry date for slot: ${slotName}\r\n      - this.impressions[slotName]:`, this.impressions[slotName]);\r\n    }\r\n    const frequencyMap = this.impressions[slotName][keys.frequency].match(keys.frequencyRegex);\r\n    now.setMilliseconds(0);\r\n    now.setSeconds(0);\r\n    now.setMinutes(0);\r\n    if (frequencyMap.indexOf(keys.days) > -1) {\r\n      now.setHours(0);\r\n    }\r\n    this.impressions[slotName][keys.expires] = (frequencyMap.indexOf(keys.days) > -1 ?\r\n      addDays(now, frequencyMap[2]) : addHours(now, frequencyMap[2])).getTime();\r\n\r\n    // Set max impressions:\r\n    this.impressions[slotName][keys.maxImpressions] = parseInt(frequencyMap[1], 10);\r\n    // Reset exposed\r\n    this.impressions[slotName][keys.exposed] = 0;\r\n  }\r\n\r\n  /**\r\n   * Initializes a non-existing slot from the passed global configuration for the slot\r\n   * @param {String} slotName - the name of the slot to create\r\n   */\r\n  initSlotFromConfig(slotName) {\r\n    const slot = this.impressions[slotName] || {};\r\n    slot[keys.frequency] = this.config[slotName][keys.frequency];\r\n    slot[keys.target] = this.config[slotName][keys.target];\r\n    slot[keys.exposed] = 0;\r\n    this.impressions[slotName] = slot;\r\n    this.updateExpiryDate(slotName);\r\n  }\r\n\r\n  /**\r\n   * Registers an impression for a given adSlot.\r\n   * @param {String} adSlotId - the adSlot id to register an impression for\r\n   * @returns {boolean} returns true iff the impression has been registered\r\n   */\r\n  registerImpression(adSlotId) {\r\n    if (adSlotId) {\r\n      const slot = this.impressions[adSlotId];\r\n      if (slot) {\r\n        const exposed = slot[keys.exposed];\r\n        if (isNaN(parseInt(exposed, 10)) === false) {\r\n          this.impressions[adSlotId][keys.exposed] += 1;\r\n          try {\r\n            this.saveImpressionsToLocalStorage();\r\n          }\r\n          catch (err) {\r\n            // console.log('Error saving ad impressions to localStorage!', err);\r\n          }\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Checks whether an adSlot has reached it's allocated impressions count.\r\n   * @param {String} adSlotId - the adSlot to check\r\n   * @returns {boolean} true iff there is a quota for the adSlot, and it has been reached\r\n   */\r\n  reachedQuota(adSlotId) {\r\n    // An adSlotId is suffixed with _homepage | _section if it's targeting is different\r\n    // between the two. If there is no difference, an _all suffix can be used.\r\n    const slotName = this.impressions[`${adSlotId}${globalConfig.department}`] ?\r\n      `${adSlotId}${globalConfig.department}` : `${adSlotId}_all`;\r\n\r\n    const slot = this.impressions[slotName];\r\n    let atQuota = false;\r\n    if (slot) {\r\n      const now = (new Date()).getTime();\r\n      // Second element of 2/4day matches '2'\r\n      const expires = this.impressions[slotName][keys.expires];\r\n      if (expires < now) {\r\n        this.updateExpiryDate(slotName);\r\n      }\r\n      else {\r\n        const maxImpressions = this.impressions[slotName][keys.maxImpressions];\r\n        // Not expired, did reach max impressions?\r\n        if (maxImpressions) {\r\n          atQuota = this.impressions[slotName][keys.exposed] >= maxImpressions;\r\n        }\r\n      }\r\n    }\r\n    return atQuota;\r\n  }\r\n\r\n\r\n  /**\r\n   * Clears the impression map from 'exposed' impressions\r\n   */\r\n  resetImpressions() {\r\n    const impressions = this.impressions;\r\n    for (const key in impressions) {\r\n      if ({}.hasOwnProperty.call(impressions, key)) {\r\n        if (impressions[key][keys.exposed]) {\r\n          impressions[key][keys.exposed] = 0;\r\n        }\r\n      }\r\n    }\r\n    this.saveImpressionsToLocalStorage();\r\n  }\r\n}\r\n","import getCookieAsMap from '../utils/cookieUtils';\r\nimport ImpressionManager from './impressionsManager';\r\nimport globalConfig from '../globalConfig';\r\n\r\nexport const userTypes = {\r\n  payer: 'payer',\r\n  registered: 'registered',\r\n  anonymous: 'anonymous',\r\n};\r\n\r\nexport default class User {\r\n  constructor(config) {\r\n    this.config = Object.assign({}, config.userConfig);\r\n    const cookieMap = getCookieAsMap();\r\n    this.ssoKey = globalConfig.sso;\r\n    if (!cookieMap[this.ssoKey]) {\r\n      // Flips the ssoKey, since cookieMap.ssoKey cannot be used to retrieve data\r\n      this.ssoKey = this.ssoKey === 'tmsso' ? 'engsso' : 'tmsso';\r\n    }\r\n    this.type = this.getUserType(cookieMap);\r\n    this.impressionManager = new ImpressionManager(config.impressionManagerConfig);\r\n    this.age = this.getUserAge(cookieMap);\r\n    this.gender = this.getUserGender(cookieMap);\r\n  }\r\n\r\n  getUserType(cookieMap) {\r\n    let userType;\r\n    if (cookieMap && cookieMap[this.ssoKey]) {\r\n      const payerProp = window.location.hostname.indexOf('haaretz.com') > -1 ?\r\n        'HdcPusr' : 'HtzPusr';\r\n      userType = cookieMap[payerProp] ? userTypes.payer : userTypes.registered;\r\n    }\r\n    else {\r\n      userType = userTypes.anonymous;\r\n    }\r\n    return userType;\r\n  }\r\n\r\n  getUserAge(cookieMap) {\r\n    let age;\r\n    const usrae = cookieMap[this.ssoKey] && cookieMap[this.ssoKey].usrae;\r\n    if (usrae) {\r\n      age = parseInt(cookieMap[this.ssoKey].usrae, 10);\r\n      age = age > 0 ? age : undefined;\r\n    }\r\n    return age;\r\n  }\r\n\r\n  getUserGender(cookieMap) {\r\n    let gender;\r\n    const urgdr = cookieMap[this.ssoKey] && cookieMap[this.ssoKey].urgdr;\r\n    if (urgdr) {\r\n      gender = parseInt(cookieMap[this.ssoKey].urgdr, 10);\r\n      gender = gender === 2 || gender === 1 ? gender : undefined;\r\n    }\r\n    return gender;\r\n  }\r\n}\r\n","class ConflictResolver {\r\n  constructor(conflictManagementConfig) {\r\n    this.dependencyMap = this.initializeDependencyMap(conflictManagementConfig);\r\n    this.deferredSlots = new Set();\r\n  }\r\n  initializeDependencyMap(conflictManagementJson) {\r\n    const queue = new Map();\r\n    Object.keys(conflictManagementJson).map((key, value) => {\r\n      let rules = conflictManagementJson[key];\r\n      if (rules) {\r\n        rules = rules.filter((item) => item.onsize && item.avoid);\r\n      }\r\n      queue.set(key, {\r\n        id: key,\r\n        rules,\r\n        resolvedWith: null,\r\n      });\r\n      return this;\r\n    });\r\n    return queue;\r\n  }\r\n\r\n  updateResolvedSlot(adSlotId, resolvedSize) {\r\n    if (!adSlotId) {\r\n      throw new Error('updateResolvedSlot must be called with an adSlotId!');\r\n    }\r\n    if (!resolvedSize) {\r\n      throw new Error('updateResolvedSlot must be called with a resolved size!');\r\n    }\r\n    if (this.dependencyMap.has(adSlotId)) {\r\n      this.dependencyMap.get(adSlotId).resolvedWith = resolvedSize;\r\n    }\r\n  }\r\n\r\n\r\n  isBlocked(adSlotId) {\r\n    if (!adSlotId) {\r\n      throw new Error('isBlocked must be called with an adSlotId!');\r\n    }\r\n    let isBlocked = false;\r\n    for (const adSlotKey of this.dependencyMap.keys()) {\r\n      const adSlot = this.dependencyMap.get(adSlotKey);\r\n      for (const adSlotRule of adSlot.rules) {\r\n        // Found rule specific to our target\r\n        if (adSlotRule.avoid === adSlotId) {\r\n          const parentResolvedWith = adSlot.resolvedWith;\r\n          // Fail fast: parent is not resolved yet - unknown returned size.\r\n          if (!parentResolvedWith) {\r\n            isBlocked = true;\r\n            this.deferredSlots.add(adSlotId);\r\n          }\r\n          if (adSlotRule.onsize.split(',').find(sizeString => { // eslint-disable-line\r\n            const size = sizeString.split('x').map(numberStr => parseInt(numberStr, 10));\r\n            return this.arraysEqual(size, parentResolvedWith);\r\n          })) {\r\n            // Block found\r\n            this.deferredSlots.add(adSlotId);\r\n            isBlocked = true;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return isBlocked;\r\n  }\r\n\r\n  isBlocking(adSlotId) {\r\n    if (!adSlotId) {\r\n      throw new Error('isBlocking must be called with an adSlotId!');\r\n    }\r\n    let isBlocking = false;\r\n    for (const adSlotKey of this.dependencyMap.keys()) {\r\n      if (adSlotKey === adSlotId) {\r\n        isBlocking = true;\r\n      }\r\n    }\r\n    return isBlocking;\r\n  }\r\n\r\n  /**\r\n   * Gets an array of adSlot Ids for a given adSlotId, that are dependent on (blocked by)\r\n   * @param {String} adSlotId - the blocking slot id\r\n   * @return {Array} an array of blocked slot, that has a dependency on the given slot\r\n   */\r\n  getBlockedSlotsIds(adSlotId) {\r\n    let result;\r\n    if (this.dependencyMap.has(adSlotId)) {\r\n      result = Array.from(this.dependencyMap.get(adSlotId).rules.map(adSlot => adSlot.avoid));\r\n    }\r\n    return result || [];\r\n  }\r\n\r\n  arraysEqual(a, b) {\r\n    if (a === b) return true;\r\n    if (a === null || b === null) return false;\r\n    if (a.length !== b.length) return false;\r\n    for (let i = 0; i < a.length; ++i) {\r\n      if (a[i] !== b[i]) return false;\r\n    }\r\n    return true;\r\n  }\r\n}\r\nConflictResolver.EMPTY_SIZE = [];\r\nexport default ConflictResolver;\r\n","/* global googletag */\r\nimport { adTypes } from '../objects/adManager';\r\nimport globalConfig from '../globalConfig';\r\n\r\nexport default class adSlot {\r\n\r\n  constructor(adSlotConfig) {\r\n    this.config = Object.assign({}, adSlotConfig);\r\n\r\n    // Part I : Markup configuration - passed from AdManager\r\n    this.id = this.config.id;\r\n    if (!this.config.id) {\r\n      throw new Error('an adSlot requires an id!');\r\n    }\r\n    this.target = this.config.target;\r\n    this.type = this.config.type;\r\n    this.responsive = this.config.responsive;\r\n    this.fluid = this.config.fluid;\r\n    this.user = this.config.user;\r\n    this.adManager = this.config.adManager;\r\n    this.htmlElement = this.config.htmlElement;\r\n    this.priority = this.config.priority;\r\n    this.deferredSlot = this.config.deferredSlot;\r\n\r\n    // Part II : Global, general ad configuration - passed from AdManager\r\n    this.department = this.config.department;\r\n    this.network = this.config.network;\r\n    this.adUnitBase = this.config.adUnitBase;\r\n\r\n    // Part III : ad specific configuration - passed from globalConfig.adSlotConfig\r\n    this.adSizeMapping = this.config.adSizeMapping;\r\n    this.responsiveAdSizeMapping = this.config.responsiveAdSizeMapping;\r\n    this.blacklistReferrers = this.config.blacklistReferrers ?\r\n      this.config.blacklistReferrers.split(',') : [];\r\n    this.whitelistReferrers = this.config.whitelistReferrers ?\r\n      this.config.whitelistReferrers.split(',') : [];\r\n\r\n\r\n    // Part IV : Runtime configuration - calculated data - only present in runtime\r\n    this.lastResolvedSize = undefined; // Initialized in 'slotRenderEnded' callback\r\n    this.lastResolvedWithBreakpoint = undefined; // Initialized in 'slotRenderEnded' callback\r\n    this.slot = undefined; // Holds a googletag.Slot object\r\n    // [https://developers.google.com/doubleclick-gpt/reference#googletag.Slot]\r\n    try {\r\n      if (!this.deferredSlot) {\r\n        this.slot = this.defineSlot();\r\n      }\r\n    }\r\n    catch (err) {\r\n      console.error(err); // eslint-disable-line no-console\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Checks whether this adSlot is an 'Out-of-page' slot or not.\r\n   * An Out-of-page slot is a slot that is not embedded in the page 'normally'.\r\n   * @returns {boolean} true iff this adSlot is one of the predefined 'out-of-page' slots.\r\n   */\r\n  isOutOfPage() {\r\n    if (typeof this.type !== 'string') {\r\n      throw new Error('An adSlot cannot by typeless!', this);\r\n    }\r\n    if (this.isMobile() === true) {\r\n      return false;\r\n    }\r\n    switch (this.type) {\r\n      case adTypes.maavaron: return true;\r\n      case adTypes.popunder: return true;\r\n      case adTypes.talkback: return false;\r\n      case adTypes.regular: return false;\r\n      default: return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Checks whether this adSlot is a 'maavaron' slot or not.\r\n   * An Out-of-page slot is a slot that is not embedded in the page 'normally'.\r\n   * @returns {boolean} true iff this adSlot is one of the predefined 'out-of-page' slots.\r\n   */\r\n  isMaavaron() {\r\n    if (typeof this.type !== 'string') {\r\n      throw new Error('An adSlot cannot by typeless!', this);\r\n    }\r\n    if (this.isMobile() === true) {\r\n      return false;\r\n    }\r\n    switch (this.type) {\r\n      case adTypes.maavaron: return true;\r\n      default: return false;\r\n    }\r\n  }\r\n\r\n  isMobile() {\r\n    return (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i\r\n      .test(window.navigator.userAgent || ''));\r\n  }\r\n  /**\r\n   * Checks whether or not this adSlot has a non-empty whitelist, and if so, that the current\r\n   * referrer appears in the whitelist.\r\n   * Should return false iff there is a whitelist for the current adSlot, but the referrer is not\r\n   * mentioned in the whitelist.\r\n   * @returns {boolean} true iff the ad can be displayed.\r\n   */\r\n  isWhitelisted() {\r\n    let whitelisted = false;\r\n    if (this.whitelistReferrers.length !== 0) {\r\n      for (const referrer of this.whitelistReferrers) {\r\n        if (globalConfig.referrer.indexOf(referrer) > -1) {\r\n          whitelisted = true;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    else {\r\n      whitelisted = true;\r\n    }\r\n    return whitelisted;\r\n  }\r\n\r\n  /**\r\n   * Checks whether or not this adSlot has a non-empty blacklist, and if so, that the current\r\n   * referrer does not appear in the blacklist.\r\n   * Should return true iff there is a blacklist for the current adSlot, and the referrer is\r\n   * mentioned in the blacklist - to indicate that the adSlot is 'blocked'.\r\n   * @returns {boolean} true iff the ad cannot be displayed.\r\n   */\r\n  isBlacklisted() {\r\n    let blacklisted = false;\r\n    if (this.blacklistReferrers.length !== 0) {\r\n      for (const referrer of this.blacklistReferrers) {\r\n        if (globalConfig.referrer.indexOf(referrer) > -1) {\r\n          blacklisted = true;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    return blacklisted;\r\n  }\r\n\r\n\r\n  /**\r\n   * Shows the current adSlot.\r\n   * It assumes a markup is available for this slot (any tag with an id attribute = this.id)\r\n   */\r\n  show() {\r\n    if (!this.shown === true) {\r\n      this.shown = true; // Ensure show will be called once per adSlot\r\n      googletag.cmd.push(() => {\r\n        if (this.deferredSlot) {\r\n          this.slot = this.defineSlot();\r\n        }\r\n        // console.log('calling show for slot',this.id,' called @',window.performance.now());\r\n        document.getElementById(this.id).classList.remove('h-hidden');\r\n        googletag.display(this.id);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Shows the current adSlot.\r\n   * It assumes a markup is available for this slot (any tag with an id attribute = this.id)\r\n   */\r\n  hide() {\r\n    googletag.cmd.push(() => {\r\n      document.getElementById(this.id).classList.add('h-hidden');\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Initializes page-level slot definition for the current slot\r\n   * @return {Slot} slot - the Google Slot that was defined from this AdSlot configuration\r\n   */\r\n  defineSlot() {\r\n    if (this.isMaavaron()) {\r\n      const maavaronSlot = this.defineMaavaron();\r\n      if (this.adManager.shouldSendRequestToDfp(this)) {\r\n        if (!this.shown) {\r\n          this.shown = true; // Ensure show will be called once\r\n          maavaronSlot.display();\r\n        }\r\n      }\r\n      return maavaronSlot;\r\n    }\r\n    const googletag = window.googletag;\r\n    const pubads = googletag.pubads();\r\n    const args = [];\r\n    const defineFn = this.isOutOfPage() ? googletag.defineOutOfPageSlot : googletag.defineSlot;\r\n    // 3 or 2 params according to the function that we want to activate.\r\n    args.push(this.getPath());\r\n    if (this.isOutOfPage() === false) {\r\n      if (this.fluid) {\r\n        args.push('fluid');\r\n      }\r\n      else {\r\n        args.push(this.adSizeMapping);\r\n      }\r\n    }\r\n    args.push(this.id);\r\n    let slot = defineFn.apply(defineFn, args);\r\n    if (slot) {\r\n      // Responsive size Mapping\r\n      if (this.responsive) {\r\n        let responsiveSlotSizeMapping = googletag.sizeMapping();\r\n        const breakpoints = globalConfig.breakpointsConfig.breakpoints;\r\n        const keys = Object.keys(this.responsiveAdSizeMapping);\r\n        for (const key of keys) { // ['xxs','xs',...]\r\n          responsiveSlotSizeMapping.addSize(\r\n            [breakpoints[key], 100], // 100 is a default height, since it is height agnostic\r\n            this.responsiveAdSizeMapping[key]);\r\n        }\r\n        responsiveSlotSizeMapping = responsiveSlotSizeMapping.build();\r\n        slot = slot.defineSizeMapping(responsiveSlotSizeMapping);\r\n      }\r\n      slot = slot.addService(pubads);\r\n      if (this.isOutOfPage() === false) {\r\n        slot.setCollapseEmptyDiv(true);\r\n      }\r\n    }\r\n    return slot;\r\n  }\r\n\r\n  /**\r\n   * Returns the current path calculated for the adSlot\r\n   * @returns {String} a formatted string that represent the path for the slot definition\r\n   */\r\n  getPath() {\r\n    /* eslint-disable no-shadow */\r\n    let path = globalConfig.path || [];\r\n    path = path.filter(path => path !== '.');\r\n    path = path.map(section => `${this.id}${this.department}${section}`).join('/');\r\n    // If a path exist, it will be preceded with a forward slash\r\n    path = path && this.config.department !== '_homepage' ? `/${path}` : '';\r\n    /* eslint-enable no-shadow */\r\n    const calculatedPath = `/${this.config.network}/${this.config.adUnitBase}/${this.id}/${this.id}${this.department}${path}`; // eslint-disable-line max-len\r\n    return calculatedPath.toLowerCase();\r\n  }\r\n\r\n  /* eslint-disable */\r\n  slotRendered(event) {\r\n    const id = event.slot.getAdUnitPath().split('/')[3]; // Convention: [0]/[1]network/[2]base/[3]id\r\n    const isEmpty = event.isEmpty; // Did the ad return as empty?\r\n    const resolvedSize = event.size; // What 'creative' size did the ad return with?\r\n    // Empty or onload callback should be called next?\r\n  }\r\n  /* eslint-enable */\r\n\r\n  /**\r\n   * Refresh this adSlot\r\n   */\r\n  refresh() {\r\n    googletag.cmd.push(() => {\r\n      googletag.pubads().refresh([this.slot]);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Shows 'Maavaron' type adSlot using Passback definition\r\n   * @return {Slot} slot - the Google Slot that was defined for Maavaron\r\n   */\r\n  defineMaavaron() {\r\n    if (!document.referrer.match('loc.haaretz')) {\r\n      const adUnitMaavaronPath = this.getPath();\r\n      const adUnitMaavaronSize = [\r\n        [2, 1],\r\n      ];\r\n      const slot = googletag.pubads().definePassback(adUnitMaavaronPath, adUnitMaavaronSize)\r\n        .setTargeting('UserType', [this.user.type])\r\n        .setTargeting('age', [this.user.age])\r\n        .setTargeting('urgdr', [this.user.gender])\r\n        .setTargeting('articleId', [globalConfig.articleId])\r\n        .setTargeting('stg', [globalConfig.environment]);\r\n      return slot;\r\n    }\r\n    return null;\r\n  }\r\n}\r\n","/* global googletag */\r\nimport User from '../objects/user';\r\nimport ConflictResolver from '../objects/conflictResolver';\r\nimport AdSlot from '../objects/adSlot';\r\nimport { getBreakpoint, getBreakpointName } from '../utils/breakpoints';\r\nimport { arraysEqual } from '../utils/arrays';\r\n\r\n// There are a total of 7 adTargets:\r\n// \"all\",\"nonPaying\",\"anonymous\",\"registered\",\"paying\",\"digitalOnly\" and \"digitalAndPrint\"\r\nexport const adPriorities = {\r\n  high: 'high',\r\n  normal: 'normal',\r\n  low: 'low',\r\n};\r\n\r\nexport const adTargets = {\r\n  all: 'all',\r\n  nonPaying: 'nonPaying',\r\n  anonymous: 'anonymous',\r\n  registered: 'registered',\r\n  paying: 'paying',\r\n  digitalOnly: 'digitalOnly',\r\n  digitalAndPrint: 'digitalAndPrint',\r\n};\r\n\r\n// There are a total of 3 userTypes: \"anonymous\", \"registered\" and \"payer\"\r\nexport const userTypes = {\r\n  anonymous: 'anonymous',\r\n  registered: 'registered',\r\n  payer: 'payer',\r\n};\r\n\r\nexport const adTypes = {\r\n  maavaron: '.maavaron',\r\n  popunder: '.popunder',\r\n  talkback: '.talkback',\r\n  regular: '',\r\n};\r\n\r\n\r\nexport default class AdManager {\r\n\r\n  constructor(config) {\r\n    this.config = Object.assign({}, config);\r\n    this.user = new User(config);\r\n    this.conflictResolver = new ConflictResolver(config.conflictManagementConfig);\r\n    /**\r\n     * Avoid race conditions by making sure to respect the usual timing of GPT.\r\n     * This DFP implementation uses Enable-Define-Display:\r\n     * Define page-level settings\r\n     * enableServices()\r\n     * Define slots\r\n     * Display slots\r\n     */\r\n    try {\r\n      googletag.cmd.push(() => {\r\n        this.initGoogleTargetingParams(); //  Define page-level settings\r\n        this.initGoogleGlobalSettings();  //  enableServices()\r\n        this.initSlotRenderedCallback();  //  Define callbacks\r\n      });\r\n      // Mouse special treatment to base path on mobile breakpoints\r\n      const currentBreakpointName = getBreakpointName(getBreakpoint());\r\n      if (this.config.adManagerConfig.adUnitBase.indexOf('mouse.co.il') > -1 &&\r\n        currentBreakpointName.indexOf('xs') > -1) {\r\n        this.config.adManagerConfig.adUnitBase = 'mouse.co.il.mobile_web';\r\n      }\r\n      // Holds adSlot objects as soon as possible.\r\n      googletag.cmd.push(() => {\r\n        this.adSlots = this.initAdSlots(config.adSlotConfig, adPriorities.high);\r\n      });\r\n      // Once DOM ready, add more adSlots.\r\n      document.addEventListener('DOMContentLoaded', () => {\r\n        googletag.cmd.push(() => {\r\n          this.adSlots = this.initAdSlots(config.adSlotConfig, adPriorities.high);\r\n          googletag.cmd.push(() => {\r\n            this.adSlots = this.initAdSlots(config.adSlotConfig, adPriorities.normal);\r\n          });\r\n        });\r\n      });\r\n      // Once window was loaded, add the rest of the adSlots.\r\n      window.addEventListener('load', () => {\r\n        googletag.cmd.push(() => {\r\n          this.adSlots = this.initAdSlots(config.adSlotConfig, adPriorities.low);\r\n        });\r\n      });\r\n    }\r\n    catch (err) {\r\n      console.error(err); // eslint-disable-line no-console\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Shows all of the adSlots that can be displayed.\r\n   */\r\n  showAllSlots() {\r\n    for (const adSlotKey of this.adSlots.keys()) {\r\n      const adSlot = this.adSlots.get(adSlotKey);\r\n      if (adSlot.type !== adTypes.talkback && this.shouldSendRequestToDfp(adSlot)) {\r\n        adSlot.show();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets all adSlots that has a certain priority\r\n   * @param {adPriority} priority - the priority of the ad {high, normal, low}\r\n   * @return {Array<AdSlot>} adSlots - all of the defined adSlots that matches\r\n   * the given priority\r\n   */\r\n  getAdSlotsByPriority(priority) {\r\n    function priorityFilter(adSlot) {\r\n      return adSlot.priority === priority;\r\n    }\r\n    return Array.from(this.adSlots.values()).filter(priorityFilter);\r\n  }\r\n\r\n  showAllDeferredSlots() {\r\n    for (const deferredSlotId of this.conflictResolver.deferredSlots) {\r\n      if (this.adSlots.has(deferredSlotId)) {\r\n        if (!this.conflictResolver.isBlocked(deferredSlotId)) {\r\n          const deferredAdSlot = this.adSlots.get(deferredSlotId);\r\n          if (this.shouldSendRequestToDfp(deferredAdSlot)) {\r\n            deferredAdSlot.show();\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Refreshes all responsive adSlots\r\n   */\r\n  refreshAllSlots() {\r\n    const currentBreakpoint = getBreakpoint();\r\n    for (const adSlotKey of this.adSlots.keys()) {\r\n      const adSlot = this.adSlots.get(adSlotKey);\r\n      if (adSlot.responsive) {\r\n        if (adSlot.lastResolvedWithBreakpoint !== currentBreakpoint &&\r\n          this.shouldSendRequestToDfp(adSlot)) {\r\n          // console.log(`calling refresh for adSlot: ${adSlot.id}`);\r\n          adSlot.refresh();\r\n        }\r\n        else {\r\n          adSlot.hide();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initializes adSlots based on the currently found slot markup (HTML page specific),\r\n   * and the predefined configuration for the slots.\r\n   * @param {Object} adSlotConfig - the AdSlots configuration object (see: globalConfig)\r\n   * @param {String} filteredPriority - filters out all adSlots that does not match\r\n   * a given adPriority. This is used to cherry pick the init process of ads.\r\n   * @returns {Map}\r\n   */\r\n  initAdSlots(adSlotConfig, filteredPriority) {\r\n    const adSlots = new Map(this.adSlots);\r\n    let adSlotPlaceholders = Array.from(document.getElementsByClassName('js-dfp-ad'));\r\n    adSlotPlaceholders = adSlotPlaceholders.filter(node => node.id); // only nodes with an id\r\n    const adSlotNodeSet = new Set();\r\n    adSlotPlaceholders = Array.prototype.filter.call(adSlotPlaceholders, node => {\r\n      if (adSlotNodeSet.has(node.id) === false) { // first occurrence of Node\r\n        adSlotNodeSet.add(node.id);\r\n        return true;\r\n      }\r\n      return false;\r\n    });\r\n    // adSlotPlaceholders = adSlotPlaceholders.sort((a,b) => a.offsetTop - b.offsetTop);\r\n    adSlotPlaceholders.forEach(adSlot => {\r\n      const adSlotPriority = adSlotConfig[adSlot.id] ?\r\n      adSlotConfig[adSlot.id].priority || adPriorities.normal : undefined;\r\n      if (adSlotConfig[adSlot.id] && adSlots.has(adSlot.id) === false &&\r\n        adSlotPriority === filteredPriority) {\r\n        // The markup has a matching configuration from adSlotConfig AND was not already defined\r\n        try {\r\n          // adSlotConfig is built from globalConfig, but can be overridden by markup\r\n          const computedAdSlotConfig = Object.assign({}, adSlotConfig[adSlot.id], {\r\n            id: adSlot.id,\r\n            target: adSlot.attributes['data-audtarget'] ?\r\n              adSlot.attributes['data-audtarget'].value : adTargets.all,\r\n            type: this.getAdType(adSlot.id),\r\n            responsive: adSlotConfig[adSlot.id].responsive,\r\n            fluid: adSlotConfig[adSlot.id].fluid || false,\r\n            user: this.user,\r\n            adManager: this,\r\n            htmlElement: adSlot,\r\n            department: this.config.department,\r\n            network: this.config.adManagerConfig.network,\r\n            adUnitBase: this.config.adManagerConfig.adUnitBase,\r\n            deferredSlot: this.conflictResolver.isBlocked(adSlot.id),\r\n            priority: adSlotPriority,\r\n          });\r\n          const adSlotInstance = new AdSlot(computedAdSlotConfig);\r\n          adSlots.set(adSlot.id, adSlotInstance);\r\n          if (adSlotInstance.type !== adTypes.talkback &&\r\n            adSlotInstance.priority === adPriorities.high &&\r\n            this.shouldSendRequestToDfp(adSlotInstance)) {\r\n            /*\r\n             console.log('calling show for high priority slot', adSlotInstance.id, ' called @',\r\n             window.performance.now());\r\n             */\r\n            adSlotInstance.show();\r\n          }\r\n        }\r\n        catch (err) {\r\n          console.error(err); // eslint-disable-line no-console\r\n        }\r\n      }\r\n    });\r\n    return adSlots;\r\n  }\r\n\r\n  isPriority(adSlotId) {\r\n    return (typeof adSlotId === 'string' &&\r\n    (adSlotId.indexOf('plazma') > 0 ||\r\n    adSlotId.indexOf('maavaron') > 0 ||\r\n    adSlotId.indexOf('popunder') > 0));\r\n  }\r\n\r\n  /**\r\n   * Returns the adType based on the adSlot name.\r\n   * @param {String} adSlotId - the adSlot's identifier.\r\n   * @returns {*} enumerated export 'adTypes'\r\n   */\r\n  getAdType(adSlotId) {\r\n    if (!adSlotId) {\r\n      throw new Error('Missing argument: a call to getAdType must have an adSlotId');\r\n    }\r\n    if (adSlotId.indexOf(adTypes.maavaron) > -1) return adTypes.maavaron;\r\n    if (adSlotId.indexOf(adTypes.popunder) > -1) return adTypes.popunder;\r\n    if (adSlotId.indexOf(adTypes.talkback) > -1) return adTypes.talkback;\r\n    return adTypes.regular;\r\n  }\r\n\r\n  /**\r\n   * @param {object} adSlot the AdSlot\r\n   * @returns {boolean|*}\r\n   */\r\n  shouldSendRequestToDfp(adSlot) {\r\n    // Conflict management check\r\n    return this.conflictResolver.isBlocked(adSlot.id) === false &&\r\n      // Valid Referrer check\r\n      adSlot.isWhitelisted() &&\r\n      // Not in referrer Blacklist\r\n      adSlot.isBlacklisted() === false &&\r\n      this.shouldDisplayAdAfterAdBlockRemoval(adSlot) &&\r\n      // Responsive: breakpoint contains ad?\r\n      this.doesBreakpointContainAd(adSlot) &&\r\n      // Targeting check (userType vs. slotTargeting)\r\n      this.doesUserTypeMatchBannerTargeting(adSlot) &&\r\n      // Impressions Manager check (limits number of impressions per slot)\r\n      this.user.impressionManager.reachedQuota(adSlot.id) === false;\r\n  }\r\n\r\n  shouldDisplayAdAfterAdBlockRemoval(adSlot) {\r\n    return !(this.config.adBlockRemoved === true &&\r\n    (adSlot.type === adTypes.maavaron ||\r\n    adSlot.type === adTypes.popunder));\r\n  }\r\n\r\n  /**\r\n   * Check whether or not an ad slot should appear for the current user type\r\n   * @param {String} adSlotOrTarget the adSlot to check or the target as a string\r\n   * @returns {boolean} true iff the slot should appear for the user type\r\n   */\r\n  doesUserTypeMatchBannerTargeting(adSlotOrTarget) {\r\n    const userType = this.user.type;\r\n    const adTarget = typeof adSlotOrTarget === 'string' ? adSlotOrTarget : adSlotOrTarget.target;\r\n\r\n    switch (adTarget) {\r\n      case adTargets.all : return true;\r\n      case adTargets.nonPaying :\r\n        return userType === userTypes.anonymous || userType === userTypes.registered;\r\n      case adTargets.anonymous : return userType === userTypes.anonymous;\r\n      case adTargets.registered : return userType === userTypes.registered;\r\n      case adTargets.paying : return userType === userTypes.payer;\r\n      case adTargets.digitalOnly : return userType === userTypes.payer;\r\n      case adTargets.digitalAndPrint : return userType === userTypes.payer;\r\n      default: return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Report to the AdManager that a breakpoint has been switched (passed from one break to\r\n   * another). Should there be a responsive slot with a\r\n   * @param {Breakpoint} breakpoint - the breakpoint that is currently being displayed\r\n   * @returns {Integer} affected - the number of adSlots affected by the change\r\n   */\r\n  switchedToBreakpoint(breakpoint) {\r\n    if (!breakpoint) {\r\n      throw new Error('Missing argument: a call to switchedToBreakpoint must have an breakpoint');\r\n    }\r\n    let count = 0;\r\n    for (const adSlotKey of this.adSlots.keys()) {\r\n      const adSlot = this.adSlots.get(adSlotKey);\r\n      if (adSlot.responsive === true && adSlot.lastResolvedWithBreakpoint) {\r\n        if (adSlot.lastResolvedWithBreakpoint !== breakpoint) {\r\n          adSlot.refresh();\r\n          count++;\r\n        }\r\n      }\r\n    }\r\n    return count;\r\n  }\r\n\r\n  /**\r\n   * Checks whether an adSlot is defined for a given breakpoint (Default: current breakpoint)\r\n   * @param {AdSlot} adSlot - the adSlot to check.\r\n   * @param {Breakpoint} [breakpoint=currentBreakpoint] - the breakpoint to check this ad in.\r\n   * @returns {boolean} true iff the adSlot is defined for the given breakpoint.\r\n   */\r\n  doesBreakpointContainAd(adSlot, breakpoint = getBreakpoint()) {\r\n    if (!adSlot) {\r\n      throw new Error('Missing argument: a call to doesBreakpointContainAd must have an adSlot');\r\n    }\r\n    let containsBreakpoint = true;\r\n    if (adSlot.responsive === true) {\r\n      const mapping = adSlot.responsiveAdSizeMapping[getBreakpointName(breakpoint)];\r\n      if (Array.isArray(mapping) === false) {\r\n        throw new Error(`Invalid argument: breakpoint:${breakpoint} doesn't exist!`, this);\r\n      }\r\n      containsBreakpoint = mapping.length > 0 && !arraysEqual(mapping, [[0, 0]]);\r\n    }\r\n    return containsBreakpoint;\r\n  }\r\n\r\n  /**\r\n   * Initializes the callback from the 'slotRenderEnded' event for each slot\r\n   */\r\n  initSlotRenderedCallback() {\r\n    if (window.googletag && window.googletag.apiReady) {\r\n      const pubads = window.googletag.pubads();\r\n      pubads.addEventListener('slotRenderEnded', event => {\r\n        const id = event.slot.getAdUnitPath().split('/')[3];\r\n        const isEmpty = event.isEmpty;\r\n        const resolvedSize = event.size;\r\n        // console.log('slotRenderEnded for slot',id,' called @',window.performance.now());\r\n        if (this.adSlots.has(id)) {\r\n          const adSlot = this.adSlots.get(id);\r\n          adSlot.lastResolvedSize = resolvedSize;\r\n          adSlot.lastResolvedWithBreakpoint = getBreakpoint();\r\n          if (isEmpty) {\r\n            adSlot.lastResolvedSize = ConflictResolver.EMPTY_SIZE;\r\n            adSlot.hide();\r\n            this.releaseSlotDependencies(adSlot);\r\n          }\r\n          else {\r\n            this.user.impressionManager.registerImpression(`${adSlot.id}${this.config.department}`);\r\n            this.user.impressionManager.registerImpression(`${adSlot.id}_all`);\r\n            this.releaseSlotDependencies(adSlot, adSlot.lastResolvedSize);\r\n          }\r\n        }\r\n        else {\r\n          /*\r\n           console.error(`Cannot find an adSlot with id: ${id} - Ad Unit path is\r\n           ${event.slot.getAdUnitPath()}`);\r\n           */\r\n        }\r\n      });\r\n    }\r\n    else {\r\n      throw new Error('googletag api was not ready when \\'initSlotRenderedCallback\\' was called!');\r\n    }\r\n  }\r\n\r\n  releaseSlotDependencies(adSlot) {\r\n    try {\r\n      const id = adSlot.id;\r\n      this.conflictResolver.updateResolvedSlot(id, adSlot.lastResolvedSize);\r\n      if (this.conflictResolver.isBlocking(id)) {\r\n        // Hide all blocked adSlots\r\n        for (const blockedSlot of this.conflictResolver.getBlockedSlotsIds(id)) {\r\n          if (this.conflictResolver.isBlocked(blockedSlot)) {\r\n            if (this.adSlots.has(blockedSlot)) {\r\n              this.adSlots.get(blockedSlot).hide();\r\n            }\r\n          }\r\n        }\r\n        // Show the non blocked\r\n        for (const deferredSlotKey of this.conflictResolver.deferredSlots.keys()) {\r\n          const deferredAdSlot = this.adSlots.get(deferredSlotKey);\r\n          if (deferredAdSlot && this.shouldSendRequestToDfp(deferredAdSlot)) {\r\n            this.conflictResolver.deferredSlots.delete(deferredSlotKey);\r\n            if (deferredAdSlot.deferredSlot) {\r\n              deferredAdSlot.defineSlot();\r\n              deferredAdSlot.deferredSlot = false;\r\n            }\r\n            deferredAdSlot.show();\r\n          }\r\n        }\r\n      }\r\n    }\r\n    catch (err) {\r\n      /* eslint-disable no-console*/\r\n      console.error(`Cannot updateSlotDependencies for adSlot: ${adSlot.id}`);\r\n      /* eslint-enable no-console*/\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initializes page-level targeting params.\r\n   */\r\n  initGoogleTargetingParams() {\r\n    if (window.googletag && window.googletag.apiReady) {\r\n      // Returns a reference to the pubads service.\r\n      const pubads = googletag.pubads();\r\n      // Environment targeting (dev, test, prod)\r\n      if (this.config.environment) {\r\n        pubads.setTargeting('stg', [this.config.environment]);\r\n      }\r\n\r\n      // User targeting\r\n      if (this.user.type) {\r\n        pubads.setTargeting('UserType', [this.user.type]);\r\n      }\r\n      if (this.user.age) {\r\n        pubads.setTargeting('age', [this.user.age]);\r\n      }\r\n      if (this.user.gender) {\r\n        pubads.setTargeting('urgdr', [this.user.gender]);\r\n      }\r\n\r\n      // Context targeting\r\n      if (this.config.articleId) {\r\n        pubads.setTargeting('articleId', [this.config.articleId]);\r\n      }\r\n      if (this.config.gStatCampaignNumber && this.config.gStatCampaignNumber !== -1) {\r\n        pubads.setTargeting('gstat_campaign_id', [this.config.gStatCampaignNumber]);\r\n      }\r\n      if (this.config.isWriterAlerts) {\r\n        pubads.setTargeting('WriterAlerts', ['true']);\r\n      }\r\n      // UTM targeting\r\n      /* eslint-disable no-underscore-dangle */\r\n      if (this.config.utm_.content) {\r\n        pubads.setTargeting('utm_content', [this.config.utm_.content]);\r\n      }\r\n      if (this.config.utm_.source) {\r\n        pubads.setTargeting('utm_source', [this.config.utm_.source]);\r\n      }\r\n      if (this.config.utm_.medium) {\r\n        pubads.setTargeting('utm_medium', [this.config.utm_.medium]);\r\n      }\r\n      if (this.config.utm_.campaign) {\r\n        pubads.setTargeting('utm_campaign', [this.config.utm_.campaign]);\r\n      }\r\n      /* eslint-enable no-underscore-dangle */\r\n      // AdBlock removal\r\n      if (this.config.adBlockRemoved) {\r\n        pubads.setTargeting('adblock_removed', [this.config.adBlockRemoved]);\r\n      }\r\n      // University targeting - triggered via cookie\r\n      if (this.config.wifiLocation) {\r\n        pubads.setTargeting('wifi', [this.config.wifiLocation]);\r\n      }\r\n\r\n      // Ads Centering\r\n      pubads.setCentering(true);\r\n    }\r\n    else {\r\n      throw new Error('googletag api was not ready when \\'initGoogleTargetingParams\\' was called!');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initializes googletag services.\r\n   */\r\n  initGoogleGlobalSettings() {\r\n    if (window.googletag && window.googletag.apiReady) {\r\n      const googleGlobalSettings = this.config.googleGlobalSettings;\r\n      // Enable GET parameter overrides\r\n      if (window.location.search) {\r\n        const search = window.location.search;\r\n        if (search.indexOf('sraon') > 0) {\r\n          console.log('Single Request Mode: active'); // eslint-disable-line no-console\r\n          googleGlobalSettings.enableAsyncRendering = true;\r\n        }\r\n        else if (search.indexOf('sraoff') > 0) {\r\n          console.log('Single Request Mode: disabled');// eslint-disable-line no-console\r\n          googleGlobalSettings.enableAsyncRendering = false;\r\n        }\r\n        if (search.indexOf('asyncrenderingon') > 0) {\r\n          console.log('Async rendering mode: active'); // eslint-disable-line no-console\r\n          googleGlobalSettings.enableAsyncRendering = true;\r\n        }\r\n        else if (search.indexOf('asyncrenderingonoff') > 0) {\r\n          console.log('Sync rendering mode: active');// eslint-disable-line no-console\r\n          googleGlobalSettings.enableAsyncRendering = false;\r\n        }\r\n      }\r\n      // Google services activation\r\n      if (googleGlobalSettings.enableSingleRequest === true) {\r\n        googletag.pubads().enableSingleRequest();\r\n      }\r\n      if (googleGlobalSettings.enableAsyncRendering === true) {\r\n        googletag.pubads().enableAsyncRendering();\r\n      }\r\n      else {\r\n        googletag.pubads().enableSyncRendering();\r\n      }\r\n      // Enables all GPT services that have been defined for ad slots on the page.\r\n      googletag.enableServices();\r\n    }\r\n    else {\r\n      throw new Error('googletag api wasn\\'t ready when \\'initGoogleGlobalSettings\\' was called!');\r\n    }\r\n  }\r\n}\r\n","/* globals googletag */\r\nimport AdManager from '../src/objects/adManager';\r\nimport globalConfig from './globalConfig';\r\nimport { getBreakpoint, debounce } from '../src/utils/breakpoints';\r\n\r\nconst defaultConfig = globalConfig || {};\r\nconst googletagInitTimeout = 10000;\r\nconst resizeTimeout = 250;\r\n\r\nexport default class DFP {\r\n\r\n  constructor(config) {\r\n    this.config = Object.assign({}, defaultConfig, config);\r\n    this.wasInitialized = false;\r\n    this.breakpoint = getBreakpoint();\r\n    this.initWindowResizeListener();\r\n  }\r\n\r\n  /**\r\n   * This part of the object's construction is dependent on the call to 'init'\r\n   */\r\n  resumeInit() {\r\n    try {\r\n      this.adManager = new AdManager(this.config);\r\n    }\r\n    catch (err) {\r\n      console.error(err); // eslint-disable-line no-console\r\n    }\r\n  }\r\n\r\n  /**\r\n   * initializes the 'googletag' global namespace and add the\r\n   * google publish tags library to the page\r\n   * @returns {Promise} that resolves to true once the googletag api is ready to use\r\n   * (googletag.apiReady = true)\r\n   */\r\n  initGoogleTag() {\r\n    const dfpThis = this;\r\n    return new Promise((resolve, reject) => {\r\n      if (dfpThis.wasInitialized === true || (window.googletag && window.googletag.apiReady)) {\r\n        this.adManager = this.adManager || new AdManager(this.config);\r\n        dfpThis.wasInitialized = true;\r\n        resolve(this.isGoogleTagReady);\r\n      }\r\n      else {\r\n        // set up a place holder for the gpt code downloaded from google\r\n        window.googletag = window.googletag || {};\r\n\r\n        // this is a command queue used by GPT any methods added to it will be\r\n        // executed when GPT code is available, if GPT is already available they\r\n        // will be executed immediately\r\n        window.googletag.cmd = window.googletag.cmd || [];\r\n        // load google tag services JavaScript\r\n        (() => {\r\n          const tag = window.document.createElement('script');\r\n          tag.async = false;\r\n          tag.type = 'text/javascript';\r\n          // var useSSL = 'https:' == document.location.protocol;\r\n          tag.setAttribute('src', '//www.googletagservices.com/tag/js/gpt.js');\r\n          const node = window.document.getElementsByTagName('script')[0];\r\n          tag.onload = () => {\r\n            dfpThis.wasInitialized = true;\r\n            dfpThis.resumeInit();\r\n            resolve(this.isGoogleTagReady);\r\n          };\r\n          tag.onerror = (error) => {\r\n            dfpThis.wasInitialized = false;\r\n            reject(error);\r\n          };\r\n          node.parentNode.insertBefore(tag, node);\r\n        })();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @returns {Promise}\r\n   */\r\n  isGoogleTagReady() {\r\n    const promise = new Promise((resolve, reject) => {\r\n      googletag.cmd.push(() => {\r\n        resolve(this);\r\n      });\r\n      setTimeout(() => {\r\n        if (!(googletag && googletag.apiReady === true)) {\r\n          reject(new Error('googletag failed to initialize on the page!'));\r\n        }\r\n      }, googletagInitTimeout);\r\n    });\r\n    return promise;\r\n  }\r\n\r\n  /**\r\n   * Initializes the window resize listener to support responsive ad refreshes\r\n   */\r\n  initWindowResizeListener() {\r\n    const dfpThis = this;\r\n    function onResize() {\r\n      const currentBreakpoint = getBreakpoint();\r\n      if (dfpThis.breakpoint !== currentBreakpoint) {\r\n        dfpThis.breakpoint = currentBreakpoint;\r\n        if (dfpThis.adManager) {\r\n          dfpThis.adManager.refreshAllSlots();\r\n        }\r\n        else {\r\n          throw new Error('initWindowResizeListener error - adManager instance is not available');\r\n        }\r\n      }\r\n    }\r\n    const debouncedFunction = debounce(onResize, resizeTimeout);\r\n    window.onresize = debouncedFunction;\r\n  }\r\n}\r\n","import DFP from './dfp';\r\nimport globalConfig from './globalConfig';\r\nimport { version as v } from './../package.json';\r\n// const pkg = require('./../package.json');\r\n\r\n// DFP version is based on the package.json\r\nDFP.version = v || 'VERSION';\r\n\r\n/*\r\n // Only for development mode\r\n if ( process.env.NODE_ENV !== 'production' ) {\r\n DFP.dev = '123';\r\n }\r\n */\r\n\r\nexport const config = globalConfig;\r\nexport const version = DFP.version;\r\nexport default DFP;\r\n"]}