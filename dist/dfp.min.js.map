{"version":3,"sources":["../src/utils/cookieUtils.js","../src/utils/time.js","../src/utils/breakpoints.js","../src/utils/arrays.js","../jspm_packages/npm/systemjs-plugin-babel@0.0.17/babel-helpers/classCallCheck.js","../jspm_packages/npm/systemjs-plugin-babel@0.0.17/babel-helpers/createClass.js","../jspm_packages/npm/systemjs-plugin-babel@0.0.17/babel-helpers/toConsumableArray.js","../src/globalConfig.js","../src/objects/impressionsManager.js","../src/objects/user.js","../src/objects/conflictResolver.js","../src/objects/adSlot.js","../src/objects/adManager.js","../src/dfp.js","../src/index.js","../src/version.js"],"names":["stringToMap","string","separator","undefined","_ref$separator","operator","_ref$operator","map","split","forEach","element","keyValue","length","decodeURIComponent","e","getCookieAsMap","document","cookie","tmsso","engsso","addHours","date","hours","SyntaxError","isNaN","parseInt","TypeError","result","Date","setHours","getHours","addDays","days","setDate","getDate","debounce","func","wait","arguments","immediate","timeout","context","this","args","later","apply","callNow","setTimeout","getBreakpoint","breakpoint","windowWidth","window","innerWidth","documentElement","clientWidth","body","breakpoints","xs","xxs","s","m","l","xl","xxl","getBreakpointName","resultBreakpoint","arraysEqual","a","b","Array","isArray","i","_classCallCheck","instance","Constructor","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","key","protoProps","staticProps","prototype","_toConsumableArray","arr","arr2","from","ssoKey","location","hostname","indexOf","dfpBaseConf","JSON","parse","getElementById","textContent","err","dfpConfig","Object","assign","referrer","test","navigator","userAgent","pathname","environment","isHomepage","regexMatch","exec","sectionArray","articleId","slice","filter","path","section","index","reduce","last","current","concat","site","env","port","dev","prod","articleIdMatch","pop","getUrlParam","results","RegExp","search","adBlockRemoved","localStorage","getItem","cookieName","cookieMap","anonymousId","wifiLocation","toLowerCase","fairs","validForAds","PageUrl","href","isSmartphoneapp","match","HtzPusr","userName","gstatCampaign","CampaignNumber","type","htmlclassList","querySelector","classList","domain","proposal","googleGlobalSettings","breakpointType","breakpoints1","breakpoints2","breakpoints3","breakpoints4","getTime","globalConfig","breakpointsConfig","keys","impressionManagerConfig","ImpressionsManager","now","config","impressions","retrieveImpressionsData","initImpressionMap","migrateImpressionsData","_this","hasOwnProperty","call","frequency","impressionsData","oldImpressionsArray","impression","adUnitImpression","name","data","tmp","slotId","join","id","exposed","expires","_this2","adSlotId","err1","debouncedSave","saveImpressionsToLocalStorageImpl","setItem","stringify","error","slot","_this3","shouldUpdateExpiryDate","initSlotFromConfig","updateExpiryDate","slotName","Error","frequencyMap","frequencyRegex","setMilliseconds","setSeconds","setMinutes","maxImpressions","saveImpressionsToLocalStorage","department","atQuota","userTypes","productTypes","User","userConfig","sso","getUserType","htz_type","getUserTypeByProduct","htz","tm_type","tm","hdc_type","hdc","impressionManager","ImpressionManager","age","getUserAge","gender","getUserGender","getUserSSO","country","getUserCountry","TmPusr","HdcPusr","payer","registered","anonymous","productType","userType","userProducts","getHdcUserType","getHtzTmUserType","firstName","lastName","guest","userHasProduct","trial","htz_tm","products","product","prodNum","usrae","urgdr","then","resp","json","ConflictResolver","conflictManagementConfig","dependencyMap","initializeDependencyMap","deferredSlots","Set","conflictManagementJson","queue","Map","value","rules","item","onsize","avoid","set","resolvedSize","has","get","resolvedWith","isBlocked","_step","Symbol","iterator","_iteratorNormalCompletion","_iterator","next","done","adSlotKey","adSlot","_step2","_iteratorNormalCompletion2","_iterator2","adSlotRule","parentResolvedWith","find","sizeString","size","numberStr","add","return","_iteratorError2","_iteratorError","isBlocking","_step3","_iteratorNormalCompletion3","_iterator3","_iteratorError3","EMPTY_SIZE","hiddenClass","adSlotConfig","responsive","fluid","user","adManager","htmlElement","priority","deferredSlot","network","adUnitBase","adSizeMapping","responsiveAdSizeMapping","blacklistReferrers","whitelistReferrers","lastResolvedSize","lastResolvedWithBreakpoint","defineSlot","isMobile","adTypes","maavaron","popunder","talkback","regular","whitelisted","blacklisted","shown","cmd","push","remove","display","isMaavaron","maavaronSlot","defineMaavaron","shouldSendRequestToDfp","googletag","pubads","defineFn","isOutOfPage","defineOutOfPageSlot","getPath","responsiveSlotSizeMapping","sizeMapping","addSize","build","defineSizeMapping","addService","setCollapseEmptyDiv","event","getAdUnitPath","isEmpty","refresh","_this4","adUnitMaavaronPath","adUnitMaavaronSize","definePassback","setTargeting","adPriorities","adTargets","AdManager","conflictResolver","initGoogleTargetingParams","initGoogleGlobalSettings","initSlotRenderedCallback","currentBreakpointName","adManagerConfig","adSlots","initAdSlots","high","onDomLoaded","normal","log","onWindowLoaded","low","blockingAdSlotKey","delete","showAllDeferredSlots","readyState","addEventListener","show","priorityFilter","values","deferredSlotId","deferredAdSlot","currentBreakpoint","_step4","_iteratorNormalCompletion4","_iterator4","hide","_iteratorError4","_step5","_iteratorNormalCompletion5","_iterator5","_iteratorError5","adUnitName","filteredPriority","adSlotPlaceholders","getElementsByClassName","node","adSlotNodeSet","adSlot$$1","adSlotPriority","computedAdSlotConfig","attributes","all","getAdType","adSlotInstance","AdSlot","isWhitelisted","isBlacklisted","shouldDisplayAdAfterAdBlockRemoval","shouldDisplayAdMaavaronAfterPayWallBanner","doesBreakpointContainAd","haveValidCookieForSmartphoneapp","doesUserTypeMatchBannerTargeting","reachedQuota","res","write","replace","shouldDisplay","paywallBanner","mc","nextslotLocation","includes","isValidForsmartPhone","adSlotOrTarget","login","nonPaying","paying","digitalOnly","digitalAndPrint","count","_step6","_iteratorNormalCompletion6","_iterator6","_iteratorError6","containsBreakpoint","mapping","apiReady","releaseSlotDependencies","registerImpression","updateResolvedSlot","_step7","getBlockedSlotsIds","_iteratorNormalCompletion7","_iterator7","blockedSlot","_iteratorError7","_step8","_iteratorNormalCompletion8","_iterator8","deferredSlotKey","_iteratorError8","userId","SsoGroupKey","setSsoGroupKey","sub_section","gStatCampaignNumber","proposalNumber","pageType","isWriterAlerts","tags","cityNames","getCityNames","setCentering","enableSingleRequest","enableAsyncRendering","enableServices","querySelectorAll","dataset","locationCityName","defaultConfig","resizeTimeout","DFP","wasInitialized","initStarted","initWindowResizeListener","dfpThis","Promise","resolve","reject","tag","createElement","async","setAttribute","getElementsByTagName","resumeInit","parentNode","insertBefore","onResize","refreshAllSlots","debouncedFunction","onresize","version"],"mappings":"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","file":"dfp.min.js","sourcesContent":["/**\n * Htz-cookie-util\n * @module htzCookieUtil\n * @author Elia Grady elia.grady@haaretz.co.il\n * @license MIT\n */\n\n/**\n * Translates Key-Value string into a convenient map.\n * @param {String} string String in format of \"key<operator>value<separator>.....\"\n * @param {object} options object for overriding defaults:\n * options.separator is a String or regExp that separates between each key value pairs\n * (default is ';'). options.operator is a String or regExp that separates between each key\n * and value within a pair (default is '=').\n * @returns {object} a map object, with key-value mapping according to the passed configuration.\n */\nfunction stringToMap(string,\n  { separator = ';', operator = '=' } = {}) {\n  const map = {};\n  const itemsArr = string.split(separator);\n  itemsArr.forEach(element => {\n    if (typeof element === 'string') {\n      const keyValue = element.split(operator);\n      if (keyValue.length === 2) {\n        try {\n          map[keyValue[0]] = decodeURIComponent(keyValue[1]);\n        }\n        catch (e) {\n          // Do nothing, malformed URI\n        }\n      }\n    }\n  });\n  return map;\n}\nexport const ssoKey = window.location.hostname.indexOf('haaretz.com') > -1 ? 'engsso' : 'tmsso';\n\n// Translates Cookie string into a convenient map.\nexport default function getCookieAsMap() {\n  const map = stringToMap(document.cookie, { separator: /;\\s?/ });\n  if (typeof map.tmsso === 'string') {\n    map.tmsso = stringToMap(map.tmsso, { separator: ':' });\n  }\n  if (typeof map.engsso === 'string') {\n    map.engsso = stringToMap(map.engsso, { separator: ':' });\n  }\n  return map;\n}\n","/**\n * Helper function. Adds N hours to a given date object.\n * @param {Date} date - the date to derive from\n * @param {Number} hours - the amount of hours to add, in whole numbers\n * @throws {SyntaxError} Will throw if the 'date' param is not provided\n * @throws {SyntaxError} Will throw if the 'hours' param is not provided\n * @throws {TypeError} Will throw if the 'hours' param is not a valid integer\n * @returns {Date} date - the new date, derived from adding the given hours\n */\nexport function addHours(date, hours) {\n  if (!date) {\n    throw new SyntaxError('addHours called without a required \\'date\\' parameter!');\n  }\n  if (!hours) {\n    throw new SyntaxError('addHours called without a required \\'hours\\' parameter!');\n  }\n  else if (isNaN(parseInt(hours, 10))) {\n    throw new TypeError('addHours called with an invalid integer \\'hours\\' parameter!');\n  }\n  const result = new Date(date);\n  result.setHours(result.getHours() + parseInt(hours, 10));\n  return result;\n}\n\n/**\n * Helper function. Adds N days to a given date object.\n * @param {Date} date - the date to derive from\n * @param {Integer} days - the amount of days to add\n * @throws {SyntaxError} Will throw if the 'date' param is not provided\n * @throws {SyntaxError} Will throw if the 'days' param is not provided\n * @throws {TypeError} Will throw if the 'hours' param is not a valid integer\n * @returns {Date} date - the new date, derived from adding the given days\n */\nexport function addDays(date, days) {\n  if (!date) {\n    throw new SyntaxError('addDays called without a required \\'date\\' parameter!');\n  }\n  if (!days) {\n    throw new SyntaxError('addDays called without a required \\'days\\' parameter!');\n  }\n  else if (isNaN(parseInt(days, 10))) {\n    throw new TypeError('addDays called with an invalid integer \\'days\\' parameter!');\n  }\n  const result = new Date(date);\n  result.setDate(result.getDate() + parseInt(days, 10));\n  return result;\n}\n","import globalConfig from '../globalConfig';\n\nconst breakpoints = globalConfig.breakpointsConfig.breakpoints;\n\n/**\n * Returns a function, that, as long as it continues to be invoked, will not\n * be triggered. The function will be called after it stops being called for\n * N milliseconds. If `immediate` is passed, trigger the function on the\n * leading edge, instead of the trailing.\n * @param { function } func - the function to run\n * @param { number } wait - the timeout period to avoid running the function\n * @param { boolean } immediate - leading edge modifier\n * @returns {function } the debounced function\n */\nexport function debounce(func, wait = 100, immediate) {\n  let timeout;\n  return function debounced() {\n    const context = this;\n    const args = arguments;// eslint-disable-line prefer-rest-params\n    const later = () => {\n      timeout = null;\n      if (!immediate) func.apply(context, args);\n    };\n    const callNow = immediate && !timeout;\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n    if (callNow) func.apply(context, args);\n  };\n}\n\n/**\n * Returns the current breakpoint that is closest to the window's width\n * @returns {number} the break that the current width represents\n */\nexport function getBreakpoint() {\n  let breakpoint;\n  const windowWidth = window.innerWidth\n    || document.documentElement.clientWidth\n    || document.body.clientWidth;\n  switch (true) {\n    case windowWidth < breakpoints.xs: breakpoint = breakpoints.xxs; break;\n    case windowWidth < breakpoints.s: breakpoint = breakpoints.xs; break;\n    case windowWidth < breakpoints.m: breakpoint = breakpoints.s; break;\n    case windowWidth < breakpoints.l: breakpoint = breakpoints.m; break;\n    case windowWidth < breakpoints.xl: breakpoint = breakpoints.l; break;\n    case windowWidth < breakpoints.xxl: breakpoint = breakpoints.xl; break;\n    default: breakpoint = breakpoints.xxl;\n  }\n  return breakpoint;\n}\n/**\n * Returns the current breakpoint that is closest to the window's width\n * @param {number} breakpoint - the breakpoint label enumerator that the current width represents\n * (yield with a getBreakpoint() call or passed manually )\n * @returns {string} breakpoint - the breakpoint label that the current width represents,\n * as a string\n */\nexport function getBreakpointName(breakpoint) {\n  let resultBreakpoint;\n  const windowWidth = breakpoint || window.innerWidth;\n  switch (true) {\n    case windowWidth < breakpoints.xs: resultBreakpoint = 'xxs'; break;\n    case windowWidth < breakpoints.s: resultBreakpoint = 'xs'; break;\n    case windowWidth < breakpoints.m: resultBreakpoint = 's'; break;\n    case windowWidth < breakpoints.l: resultBreakpoint = 'm'; break;\n    case windowWidth < breakpoints.xl: resultBreakpoint = 'l'; break;\n    case windowWidth < breakpoints.xxl: resultBreakpoint = 'xl'; break;\n    default: resultBreakpoint = 'xxl';\n  }\n  return resultBreakpoint;\n}\n","/**\n * Checks whether two arrays are equal\n * @param {Array} a - the first array to check\n * @param {Array} b - the second array to check\n * @returns {Boolean} true iff both a and b are arrays, with equal values\n */\nexport function arraysEqual(a, b) {\n  if (!a || !b) return false;\n  if (!Array.isArray(a) || !Array.isArray(b)) return false;\n  if (a === b) return true;\n  if (a.length !== b.length) return false;\n  for (let i = 0; i < a.length; ++i) {\n    if (Array.isArray(a[i]) && Array.isArray(b[i])) {\n      if (!arraysEqual(a[i], b[i])) return false;\n    }\n    else if (a[i] !== b[i]) {\n      return false;\n    }\n  }\n  return true;\n}\nexport default arraysEqual;\n","export default (function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n});","export default (function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n})();","export default (function (arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n});","/* global dfpConfig */\nimport getCookieAsMap, { ssoKey } from './utils/cookieUtils';\n// globalConfig for DFP\nlet dfpBaseConf;\ntry {\n  dfpBaseConf = window.JSON.parse(document.getElementById('dfpConfig').textContent);\n}\ncatch (err) {\n  dfpBaseConf = window.dfpConfig;\n}\nconst dfpConfig = Object.assign({\n  get referrer() {\n    return document.referrer ? document.referrer : '';\n  },\n  get isMobile() {\n    return (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i\n      .test(window.navigator.userAgent || ''));\n  },\n  /**\n   * Returns true iff the loaded page is the homepage (no inner path)\n   * @returns {boolean}\n   */\n  get isHomepage() {\n    return window.location.pathname === '/' || this.environment === 3; // 'prod'\n  },\n  get department() {\n    return this.isHomepage ? '_homepage' : '_section';\n  },\n  /**\n   * returns the domain the page was loaded to. i.e: 'haaretz.co.il', 'haaretz.com'\n   * @returns {string} the domain name from the windows's location hostname property\n   */\n  get domain() {\n    const regexMatch = /([\\d|\\w]+)(\\.co\\.il|\\.com)(.*)?/.exec(window.location.hostname);\n    const result = regexMatch ? regexMatch[0] : window.location.hostname;\n    return result;\n  },\n  /**\n   * Returns an array of concatenated paths, separated by a dot.\n   * For example, for the URL:\n   * http://www.haaretz.co.il/news/world/america/us-election-2016/LIVE-1.2869045\n   * the path is '/news/world/america/us-election-2016/LIVE-1.2869045'.\n   * This function takes the directories ['news', 'world', 'america', 'us-election-2016']\n   * and converts it to the following format:\n   * ['.news', '.news.world', '.news.world.america', '.news.world.america.us-election-2016']\n   * This denotes the path configuration for the given adSlot\n   * non articles (sections) will be given a '0' - no articleId value for targeting purposes)\n   * @returns {Array.<T>} an array of path names\n   */\n  get path() {\n    let sectionArray = this.articleId && this.articleId !== '0' ?\n      window.location.pathname.split('/').slice(1, -1) :\n      window.location.pathname.split('/').slice(1);\n    sectionArray = sectionArray.filter(path =>\n    path !== 'wwwMobileSite' && path !== 'whtzMobileSite');\n    return sectionArray\n      .map(section => `.${section}`)\n      .map((section, index, arr) => arr.slice(0, index + 1)\n        .reduce((last, current) => last.concat(current)));\n  },\n  /**\n   * Returns a string representation for the name of the site\n   * @return {*|string}\n   */\n  get site() {\n    let site;\n    if (window.location.hostname.indexOf('haaretz.co.il') > -1) {\n      site = 'haaretz';\n    }\n    else if (window.location.hostname.indexOf('themarker.com') > -1) {\n      site = 'themarker';\n    }\n    else if (window.location.hostname.indexOf('mouse.co.il') > -1) {\n      site = 'mouse';\n    }\n    return site || 'haaretz';\n  },\n  /**\n   * Returns the current environment targeting param, if such is defined.\n   * @returns {number} targeting param, 1 for local development, 2 for test servers and 3 for prod.\n   * May return undefined if no targeting is specified.\n   */\n  get environment() {\n    const env = {\n      dev: 1,\n      test: 2,\n      prod: 3,\n    };\n    return window.location.port === '8080' ? env.dev :\n      (window.location.hostname.indexOf('pre.haaretz.co.il') > -1\n      || window.location.hostname.indexOf('tmtest.themarker.com') > -1\n      || window.location.hostname.indexOf('pre.haaretz.com') > -1\n      || window.location.hostname.indexOf('prodmouse.mouse.co.il') > -1) ? env.test :\n        (window.location.pathname.indexOf('/cmlink/Haaretz.HomePage') > -1\n        || window.location.pathname.indexOf('/cmlink/TheMarker.HomePage') > -1\n        || window.location.pathname.indexOf('/cmlink/Mouse.HomePage') > -1)\n          ? env.prod : undefined;\n  },\n  /**\n   * Returns the articleIf if on an article page, or null otherwise\n   * @returns {string} an articleId string from the pathname, or 0 if not found\n   */\n  get articleId() {\n    const articleIdMatch = /\\d\\.\\d+/g.exec(window.location.pathname);\n    let articleId = '0';\n    if (articleIdMatch) {\n      articleId = articleIdMatch.pop(); // Converts [\"1.23145\"] to \"1.23145\"\n    }\n    return articleId;\n  },\n  utm_: {\n    get content() {\n      return this.getUrlParam('utm_content');\n    },\n    get source() {\n      return this.getUrlParam('utm_source');\n    },\n    get medium() {\n      return this.getUrlParam('utm_medium');\n    },\n    get campaign() {\n      return this.getUrlParam('utm_campaign');\n    },\n    getUrlParam(key) {\n      const results = RegExp(`(${key})(=)([^&\"]+)`).exec(window.location.search);\n      return results && results[3] ? results[3] : undefined;\n    },\n  },\n  get adBlockRemoved() {\n    let adBlockRemoved = false;\n    try {\n      if (localStorage.getItem('adblock_removed')) {\n        adBlockRemoved = true;\n      }\n    }\n    catch (err) {\n      // do nothing\n    }\n    return adBlockRemoved;\n  },\n  get ssoGroupKey() {\n    return window.localStorage.getItem('_SsoGroupKey');\n  },\n  get anonymousId() {\n    const cookieName = 'anonymousId';\n    const cookieMap = getCookieAsMap();\n    let anonymousId = '';\n    if (cookieMap && cookieMap[cookieName]) {\n      anonymousId = cookieMap[cookieName];\n    }\n    return anonymousId;\n  },\n  get isWriterAlerts() {\n    return (location.search.indexOf('writerAlerts=true') > -1);\n  },\n  get wifiLocation() {\n    let wifiLocation;\n    const cookieName = '_htzwif'; // eslint-disable-line no-underscore-dangle\n    const cookieMap = getCookieAsMap();\n    try {\n      if (cookieMap && cookieMap[cookieName]) {\n        if (cookieMap[cookieName].toLowerCase() === 'arcaffe') {\n          wifiLocation = 'ArCafe';\n        }\n        if (cookieMap[cookieName].toLowerCase() === 'university') {\n          wifiLocation = 'university';\n        }\n      }\n      if (cookieMap && cookieMap.fairs) {\n        wifiLocation = 'fairs';\n      }\n    }\n    catch (err) {\n      // do nothing\n    }\n    return wifiLocation;\n  },\n  get isValidForsmartPhone() {\n    let validForAds = true;\n    const PageUrl = window.location.href;\n    const isSmartphoneapp = PageUrl.match('haaretzsmartphoneapp');\n    const cookieMap = getCookieAsMap();\n    try {\n      if (isSmartphoneapp) {\n        // eslint-disable-line no-underscore-dangle\n        if (cookieMap && cookieMap.HtzPusr &&\n          (cookieMap.tmsso === undefined || cookieMap.tmsso.userName !== 'pilosmadar@gmail.com')) {\n          validForAds = false;\n        }\n      }\n    }\n    catch (err) {\n      // do nothing\n    }\n    return validForAds;\n  },\n  get gStatCampaignNumber() {\n    let gstatCampaign;\n    try {\n      gstatCampaign = localStorage.getItem('GstatCampaign') ?\n        JSON.parse(localStorage.getItem('GstatCampaign')) : undefined;\n    }\n    catch (err) {\n      /* In case of thrown 'SecurityError' or 'QuotaExceededError',\n       the variable should be undefined */\n      gstatCampaign = undefined;\n    }\n    return gstatCampaign ? gstatCampaign.CampaignNumber : undefined;\n  },\n  get pageType() {\n    let type = '';\n    try {\n      const htmlclassList = document.querySelector('html').classList;\n      switch (true) {\n        case /mouse_location/.test(htmlclassList):\n          type = 'mouse_location';\n          break;\n        case /mouse_event/.test(htmlclassList):\n          type = 'mouse_event';\n          break;\n        case /contentType-story/.test(htmlclassList):\n          type = 'mouse_article';\n          break;\n        default:\n          if (this.articleId !== '0') {\n            switch (this.domain) {\n              case 'haaretz.co.il':\n                type = 'htz_article';\n                break;\n              case 'haaretz.com':\n                type = 'hdc_article';\n                break;\n              case 'themarker.com':\n                type = 'tm_article';\n                break;\n              default:\n                type = '';\n            }\n          }\n          else {\n            type = '';\n          }\n      }\n    }\n    catch (err) {\n      /* In case of thrown 'SecurityError' or 'QuotaExceededError',\n       the variable should be undefined */\n      type = '';\n    }\n    return type;\n  },\n  get proposalNumber() {\n    let proposal;\n    try {\n      proposal = localStorage.getItem('proposaltype') ?\n        localStorage.getItem('proposaltype') : undefined;\n    }\n    catch (err) {\n      /* In case of thrown 'SecurityError' or 'QuotaExceededError',\n       the variable should be undefined */\n      proposal = undefined;\n    }\n    return proposal;\n  },\n  adSlotConfig: {\n    'haaretz.co.il.example.slot': {\n      id: 'slotId',\n      // path : \"/network/base/slotId/slotId_subsection\", Will be calculated from AdManager\n      responsive: true,\n      adSizeMapping: [['width1', 'height1'], ...['widthN', 'heightN']],\n      priority: 'normal',\n      fluid: false,\n      responsiveAdSizeMapping: {\n        xxs: [['width1', 'height1'], ...['widthN', 'heightN']],\n        xs: [['width1', 'height1'], ...['widthN', 'heightN']],\n        s: [['width1', 'height1'], ...['widthN', 'heightN']],\n        m: [['width1', 'height1'], ...['widthN', 'heightN']],\n        l: [['width1', 'height1'], ...['widthN', 'heightN']],\n        xl: [['width1', 'height1'], ...['widthN', 'heightN']],\n        xxl: [['width1', 'height1'], ...['widthN', 'heightN']],\n      },\n      blacklistReferrers: 'comma, delimited, blacklisted, referrer, list',\n      whitelistReferrers: 'comma, delimited, referrer, list',\n    },\n  },\n  adManagerConfig: {\n    network: '9401',\n    adUnitBase: 'haaretz.co.il_Web',\n  },\n  breakpointsConfig: {\n    get breakpoints() {\n      // Override in VM from backend to control this toggle.\n      let breakpoints;\n      switch (dfpConfig.googleGlobalSettings.breakpointType) {\n        case 'type1': breakpoints = this.breakpoints1; break;\n        case 'type2': breakpoints = this.breakpoints2; break;\n        case 'type3': breakpoints = this.breakpoints3; break;\n        case 'type4': breakpoints = this.breakpoints4; break;\n        default: breakpoints = this.breakpoints1;\n      }\n      return breakpoints;\n    },\n    // Type 1\n    breakpoints1: {\n      xxs: 600,\n      xs: 761,\n      s: 993,\n      m: 1009,\n      l: 1291,\n      xl: 1600,\n      xxl: 1900,\n    },\n    // Type 2\n    breakpoints2: {\n      xxs: 600,\n      xs: 1000,\n      s: 1150,\n      m: 1281,\n      l: 1600,\n      xl: 1920,\n      xxl: 1920,\n    },\n    // Type 3\n    breakpoints3: {\n      xxs: 100,\n      xs: 480,\n      s: 600,\n      m: 768,\n      l: 1024,\n      xl: 1280,\n      xxl: 1900,\n    },\n    // Type 4\n    breakpoints4: {\n      xxs: 600,\n      xs: 768,\n      s: 1024,\n      m: 1280,\n      l: 1900,\n      xl: 1900,\n      xxl: 1900,\n    },\n  },\n  userConfig: {\n    type: undefined,\n    age: undefined,\n    gender: undefined,\n  },\n  conflictManagementConfig: {\n    'blocking.ad.unit.name': [\n      {\n        onsize: '1280x200,970x250,3x3',\n        avoid: 'blocked.ad.unit.name',\n      },\n      {\n        onsize: '1280x200,970x250,3x3',\n        avoid: 'blocked.ad.unit.name',\n      },\n    ],\n  },\n  impressionManagerConfig: {\n    'ad.unit.name': {\n      target: 'all|section|homepage',\n      frequency: '$1/$2(day|hour)',\n      exposed: 0,\n      expires: (new Date()).getTime(),\n    },\n  },\n  googleGlobalSettings: {\n    enableSingleRequest: true,\n    enableAsyncRendering: true,\n    refreshIntervalTime: 1000,\n    breakpointType: 'type1',\n  },\n  sso: ssoKey,\n\n}, dfpBaseConf);\n\nexport default dfpConfig;\n","import globalConfig from '../globalConfig';\nimport { addHours, addDays } from '../utils/time';\nimport { debounce } from '../utils/breakpoints';\n\nexport const keys = {\n  impressions: 'impressions',\n  frequency: 'frequency',\n  /**\n   * [0] - full match\n   * [1] - impression count i.e: \"1\" | \"22\"\n   * [2] - impression expiry range quantifier  i.e: \"1\" | \"22\"\n   * [3] - impression expiry range unit i.e: \"day\" | \"hour\"\n   */\n  frequencyRegex: /(\\d+)\\/(\\d+)(day|hour)/,\n  expires: 'expires',\n  exposed: 'exposed',\n  target: 'target',\n  maxImpressions: 'maxImpressions',\n  hours: 'hour',\n  days: 'day',\n  adSlotId: 'id',\n};\n\nexport default class ImpressionsManager {\n\n  constructor(impressionManagerConfig) {\n    this.now = (new Date()).getTime(); // this date is used for comparisons only\n    this.config = Object.assign({}, impressionManagerConfig);\n    this.impressions = this.retrieveImpressionsData();\n    this.initImpressionMap();\n  }\n\n  retrieveImpressionsData() {\n    const impressions = this.migrateImpressionsData();\n    /*\n     Merge migrated data with new data\n     console.log('Migrated: ',impressions);\n     */\n    Object.keys(impressions).map((key, index) => {\n      impressions[key] = Object.assign({}, impressions[key], this.config[key]);\n      return this;\n    });\n    /*\n     console.log('Merged: ',impressions);\n     Filter out entries without frequency\n     */\n    for (const key in impressions) {\n      if ({}.hasOwnProperty.call(impressions, key)) {\n        if (!impressions[key][keys.frequency]) {\n          // console.log(`Removing ${key} - since it does not have a frequency`,impressions[key]);\n          delete impressions[key];\n        }\n      }\n    }\n    // console.log('Filtered: ',impressions);\n    return impressions;\n  }\n\n  migrateImpressionsData() {\n    let impressions;\n    let impressionsData;\n    try {\n      impressionsData = window.localStorage.getItem(keys.impressions);\n    }\n    catch (err) {\n      // In case of thrown 'SecurityError' or 'QuotaExceededError', the variable should be undefined\n      impressionsData = undefined;\n    }\n    try {\n      impressions = JSON.parse(impressionsData);\n    }\n    catch (err) {\n      // Here is where old impression data is converted to new format\n      impressions = {};\n      const oldImpressionsArray = impressionsData.split(';').filter(e => e);\n\n      oldImpressionsArray.forEach((impression) => {\n        try {\n          const adUnitImpression = impression.split(' = ');\n          const name = adUnitImpression[0];\n          const data = adUnitImpression[1];\n          const tmp = name.split('.');\n          let target = tmp.pop();\n          if (target && target === 'hp') {\n            target = 'homepage';\n          }\n          const slotId = tmp.join('.');\n          const id = `${slotId}_${target}`;\n          const exposed = parseInt(data.split('/')[0], 10) || 0;\n          const expires = parseInt(data.split('/')[1], 10) || this.now;\n          impressions[id] = {};\n          impressions[id][keys.adSlotId] = slotId;\n          impressions[id][keys.target] = target;\n          impressions[id][keys.exposed] = exposed;\n          impressions[id][keys.expires] = expires;\n        }\n        catch (err1) {\n          // console.log(`Failed converting impression: ${impression}`, err1);\n        }\n      });\n    }\n    return impressions || {};\n  }\n\n  /**\n   * Define the debounced version of the local storage save\n   */\n  saveImpressionsToLocalStorage() {\n    if (this.debouncedSave && typeof this.debouncedSave === 'function') {\n      this.debouncedSave();\n    }\n    else {\n      this.debouncedSave = debounce(this.saveImpressionsToLocalStorageImpl, 250, false);\n      this.debouncedSave();\n    }\n  }\n\n  /**\n   * Implementation of saving the impression map to localstorage\n   */\n  saveImpressionsToLocalStorageImpl() {\n    try {\n      localStorage.setItem(keys.impressions, JSON.stringify(this.impressions));\n    }\n    catch (err) {\n      /* In case of thrown 'SecurityError' or 'QuotaExceededError',\n       the operation should not break*/\n      console.error('localStorage isn\\'t available:', err); // eslint-disable-line no-console\n    }\n  }\n\n  /**\n   * Initializes the impression map based on the retrieved impressions and the global\n   * configuration.\n   */\n  initImpressionMap() {\n    Object.keys(this.config).map((key, index) => {\n      const adSlotId = key;\n      const slot = this.impressions[adSlotId];\n      let shouldUpdateExpiryDate = false;\n      // Case I: Existing slot (update)\n      if (slot) {\n        // Case I.I Existing slot, frequency has changed\n        if (this.config[adSlotId][keys.frequency] !== slot[keys.frequency]) {\n          // Updating the frequency will trigger a new expiry date\n          shouldUpdateExpiryDate = true;\n          this.impressions[adSlotId][keys.frequency] = this.config[adSlotId][keys.frequency];\n        } // Case I.II Existing slot, old expiry date\n        else if (this.now > slot[keys.expires]) {\n          // Old value that should trigger a new expiry date\n          shouldUpdateExpiryDate = true;\n        }\n      } // Case II: Non-existing slot (create new slot)\n      else {\n        this.initSlotFromConfig(adSlotId);\n      } // Finally, updates the expiry date (cases I.I and I.II)\n      if (shouldUpdateExpiryDate) {\n        this.updateExpiryDate(adSlotId);\n      }\n      return this;\n    });\n  }\n\n  /**\n   * Updates the expiry date of a slotName based on the configured slot frequency\n   * @param {String} slotName - the slotName to update.\n   */\n  updateExpiryDate(slotName) {\n    const now = new Date();\n    if (!(this.impressions[slotName] && this.impressions[slotName][keys.frequency])) {\n      throw new Error(`Unable to update expiry date for slot: ${slotName}\n      - this.impressions[slotName]:`, this.impressions[slotName]);\n    }\n    const frequencyMap = this.impressions[slotName][keys.frequency].match(keys.frequencyRegex);\n    now.setMilliseconds(0);\n    now.setSeconds(0);\n    now.setMinutes(0);\n    if (frequencyMap.indexOf(keys.days) > -1) {\n      now.setHours(0);\n    }\n    this.impressions[slotName][keys.expires] = (frequencyMap.indexOf(keys.days) > -1 ?\n      addDays(now, frequencyMap[2]) : addHours(now, frequencyMap[2])).getTime();\n\n    // Set max impressions:\n    this.impressions[slotName][keys.maxImpressions] = parseInt(frequencyMap[1], 10);\n    // Reset exposed\n    this.impressions[slotName][keys.exposed] = 0;\n  }\n\n  /**\n   * Initializes a non-existing slot from the passed global configuration for the slot\n   * @param {String} slotName - the name of the slot to create\n   */\n  initSlotFromConfig(slotName) {\n    const slot = this.impressions[slotName] || {};\n    slot[keys.frequency] = this.config[slotName][keys.frequency];\n    slot[keys.target] = this.config[slotName][keys.target];\n    slot[keys.exposed] = 0;\n    this.impressions[slotName] = slot;\n    this.updateExpiryDate(slotName);\n  }\n\n  /**\n   * Registers an impression for a given adSlot.\n   * @param {String} adSlotId - the adSlot id to register an impression for\n   * @returns {boolean} returns true iff the impression has been registered\n   */\n  registerImpression(adSlotId) {\n    if (adSlotId) {\n      const slot = this.impressions[adSlotId];\n      if (slot) {\n        const exposed = slot[keys.exposed];\n        if (isNaN(parseInt(exposed, 10)) === false) {\n          this.impressions[adSlotId][keys.exposed] += 1;\n          try {\n            this.saveImpressionsToLocalStorage();\n          }\n          catch (err) {\n            // console.log('Error saving ad impressions to localStorage!', err);\n          }\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Checks whether an adSlot has reached it's allocated impressions count.\n   * @param {String} adSlotId - the adSlot to check\n   * @returns {boolean} true iff there is a quota for the adSlot, and it has been reached\n   */\n  reachedQuota(adSlotId) {\n    // An adSlotId is suffixed with _homepage | _section if it's targeting is different\n    // between the two. If there is no difference, an _all suffix can be used.\n    const slotName = this.impressions[`${adSlotId}${globalConfig.department}`] ?\n      `${adSlotId}${globalConfig.department}` : `${adSlotId}_all`;\n\n    const slot = this.impressions[slotName];\n    let atQuota = false;\n    if (slot) {\n      const now = (new Date()).getTime();\n      // Second element of 2/4day matches '2'\n      const expires = this.impressions[slotName][keys.expires];\n      if (expires < now) {\n        this.updateExpiryDate(slotName);\n      }\n      else {\n        const maxImpressions = this.impressions[slotName][keys.maxImpressions];\n        // Not expired, did reach max impressions?\n        if (maxImpressions) {\n          atQuota = this.impressions[slotName][keys.exposed] >= maxImpressions;\n        }\n      }\n    }\n    return atQuota;\n  }\n\n\n  /**\n   * Clears the impression map from 'exposed' impressions\n   */\n  resetImpressions() {\n    const impressions = this.impressions;\n    for (const key in impressions) {\n      if ({}.hasOwnProperty.call(impressions, key)) {\n        if (impressions[key][keys.exposed]) {\n          impressions[key][keys.exposed] = 0;\n        }\n      }\n    }\n    this.saveImpressionsToLocalStorage();\n  }\n}\n","import getCookieAsMap from '../utils/cookieUtils';\nimport ImpressionManager from './impressionsManager';\nimport globalConfig from '../globalConfig';\n\nexport const userTypes = {\n  payer: 'payer',\n  registered: 'registered',\n  anonymous: 'anonymous',\n  trial: 'trial',\n  guest: 'reg_guest',\n};\n\nexport const productTypes = {\n  htz: 243,\n  tm: 273,\n  hdc: 239,\n  htz_tm: 274,\n};\n\nexport default class User {\n  constructor(config) {\n    this.config = Object.assign({}, config.userConfig);\n    const cookieMap = getCookieAsMap();\n    this.ssoKey = globalConfig.sso;\n    if (!cookieMap[this.ssoKey]) {\n      // Flips the ssoKey, since cookieMap.ssoKey cannot be used to retrieve data\n      this.ssoKey = this.ssoKey === 'tmsso' ? 'engsso' : 'tmsso';\n    }\n    this.type = this.getUserType(cookieMap);\n    this.htz_type = this.getUserTypeByProduct(cookieMap, productTypes.htz, 'tmsso');\n    this.tm_type = this.getUserTypeByProduct(cookieMap, productTypes.tm, 'tmsso');\n    this.hdc_type = this.getUserTypeByProduct(cookieMap, productTypes.hdc, 'engsso');\n    this.impressionManager = new ImpressionManager(config.impressionManagerConfig);\n    this.age = this.getUserAge(cookieMap);\n    this.gender = this.getUserGender(cookieMap);\n    this.sso = this.getUserSSO(cookieMap, this.ssoKey);\n    this.country = this.getUserCountry();\n  }\n\n  getUserType(cookieMap) {\n    let userType;\n    if (cookieMap && cookieMap[this.ssoKey]) {\n      userType = (cookieMap.HtzPusr || cookieMap.TmPusr || cookieMap.HdcPusr) ?\n        userTypes.payer : userTypes.registered;\n    }\n    else {\n      userType = userTypes.anonymous;\n    }\n    return userType;\n  }\n\n\n  getUserTypeByProduct(cookieMap, productType, ssoKey) {\n    let userType = userTypes.anonymous;\n    if (cookieMap && cookieMap[ssoKey]) {\n      if (cookieMap.userProducts) {\n        let userProducts = decodeURIComponent(cookieMap.userProducts);\n        userProducts = JSON.parse(userProducts);\n        if (productType === productTypes.hdc) {\n          userType = this.getHdcUserType(userProducts);\n        }\n        else {\n          userType = this.getHtzTmUserType(userProducts, productType);\n        }\n        if (userType === userTypes.registered &&\n          cookieMap[ssoKey].firstName === 'guest' &&\n          cookieMap[ssoKey].lastName === 'guest') {\n          userType = userTypes.guest;\n        }\n      }\n    }\n    return userType;\n  }\n\n  getHdcUserType(userProducts) {\n    // user has hdc paying product\n    if (this.userHasProduct(userProducts, productTypes.hdc, false)) {\n      return userTypes.payer;\n    }\n    // user has hdc trial product\n    else if (this.userHasProduct(userProducts, productTypes.hdc, true)) {\n      return userTypes.trial;\n    }\n    return userTypes.registered;\n  }\n\n  getHtzTmUserType(userProducts, productType) {\n    // user has htz/tm paying product\n    if (this.userHasProduct(userProducts, productType, false) ||\n      this.userHasProduct(userProducts, productTypes.htz_tm, false)) {\n      return userTypes.payer;\n    }\n    // user has htz/tm trial product\n    else if (this.userHasProduct(userProducts, productType, true) ||\n      this.userHasProduct(userProducts, productTypes.htz_tm, true)) {\n      return userTypes.trial;\n    }\n    return userTypes.registered;\n  }\n\n  userHasProduct(userProducts, productType, trial) {\n    return userProducts.products\n        .filter(product => product.prodNum === productType && product.trial === trial)\n        .length > 0;\n  }\n\n  getUserAge(cookieMap) {\n    let age;\n    const usrae = cookieMap[this.ssoKey] && cookieMap[this.ssoKey].usrae;\n    if (usrae) {\n      age = parseInt(cookieMap[this.ssoKey].usrae, 10);\n      age = age > 0 ? age : undefined;\n    }\n    return age;\n  }\n\n  getUserGender(cookieMap) {\n    let gender;\n    const urgdr = cookieMap[this.ssoKey] && cookieMap[this.ssoKey].urgdr;\n    if (urgdr) {\n      gender = parseInt(cookieMap[this.ssoKey].urgdr, 10);\n      gender = gender === 2 || gender === 1 ? gender : undefined;\n    }\n    return gender;\n  }\n\n  getUserSSO(cookieMap, ssoKey) {\n    return cookieMap[ssoKey];\n  }\n\n  getUserCountry() {\n    const country = window.localStorage.getItem('country');\n    if (!country) {\n      fetch('https://ipinfo.io?token=dcafc6c41691b8', {\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/jsonp',\n        },\n      }).then(resp => resp.json())\n        .then(data => {\n          window.localStorage.setItem('country', data.country);\n        },\n        err => {}\n      );\n      return null;\n    }\n    return country;\n  }\n\n}\n","class ConflictResolver {\n  constructor(conflictManagementConfig) {\n    this.dependencyMap = this.initializeDependencyMap(conflictManagementConfig);\n    this.deferredSlots = new Set();\n  }\n  initializeDependencyMap(conflictManagementJson) {\n    const queue = new Map();\n    Object.keys(conflictManagementJson).map((key, value) => {\n      let rules = conflictManagementJson[key];\n      if (rules) {\n        rules = rules.filter((item) => item.onsize && item.avoid);\n      }\n      queue.set(key, {\n        id: key,\n        rules,\n        resolvedWith: null,\n      });\n      return this;\n    });\n    return queue;\n  }\n\n  updateResolvedSlot(adSlotId, resolvedSize) {\n    if (!adSlotId) {\n      throw new Error('updateResolvedSlot must be called with an adSlotId!');\n    }\n    if (!resolvedSize) {\n      throw new Error('updateResolvedSlot must be called with a resolved size!');\n    }\n    if (this.dependencyMap.has(adSlotId)) {\n      this.dependencyMap.get(adSlotId).resolvedWith = resolvedSize;\n    }\n  }\n\n\n  isBlocked(adSlotId) {\n    if (!adSlotId) {\n      throw new Error('isBlocked must be called with an adSlotId!');\n    }\n    let isBlocked = false;\n    for (const adSlotKey of this.dependencyMap.keys()) {\n      const adSlot = this.dependencyMap.get(adSlotKey);\n      for (const adSlotRule of adSlot.rules) {\n        // Found rule specific to our target\n        if (adSlotRule.avoid === adSlotId) {\n          const parentResolvedWith = adSlot.resolvedWith;\n          if (parentResolvedWith && adSlotRule.onsize.split(',').find(sizeString => { // eslint-disable-line\n            const size = sizeString.split('x').map(numberStr => parseInt(numberStr, 10));\n            return this.arraysEqual(size, parentResolvedWith);\n          })) {\n            // Block found\n            this.deferredSlots.add(adSlotId);\n            isBlocked = true;\n          }\n        }\n      }\n    }\n    return isBlocked;\n  }\n\n  isBlocking(adSlotId) {\n    if (!adSlotId) {\n      throw new Error('isBlocking must be called with an adSlotId!');\n    }\n    let isBlocking = false;\n    for (const adSlotKey of this.dependencyMap.keys()) {\n      if (adSlotKey === adSlotId) {\n        isBlocking = true;\n      }\n    }\n    return isBlocking;\n  }\n\n  /**\n   * Gets an array of adSlot Ids for a given adSlotId, that are dependent on (blocked by)\n   * @param {String} adSlotId - the blocking slot id\n   * @return {Array} an array of blocked slot, that has a dependency on the given slot\n   */\n  getBlockedSlotsIds(adSlotId) {\n    let result;\n    if (this.dependencyMap.has(adSlotId)) {\n      result = Array.from(this.dependencyMap.get(adSlotId).rules.map(adSlot => adSlot.avoid));\n    }\n    return result || [];\n  }\n\n  arraysEqual(a, b) {\n    if (a === b) return true;\n    if (a === null || b === null) return false;\n    if (a.length !== b.length) return false;\n    for (let i = 0; i < a.length; ++i) {\n      if (a[i] !== b[i]) return false;\n    }\n    return true;\n  }\n}\nConflictResolver.EMPTY_SIZE = [];\nexport default ConflictResolver;\n","/* global googletag */\nimport { adTypes } from '../objects/adManager';\nimport globalConfig from '../globalConfig';\nimport { arraysEqual } from '../utils/arrays';\n\nconst hiddenClass = globalConfig.site.indexOf('mouse') > -1 ? 'u-is-hidden' : 'h-hidden';\n\nexport default class adSlot {\n\n  constructor(adSlotConfig) {\n    this.config = Object.assign({}, adSlotConfig);\n\n    // Part I : Markup configuration - passed from AdManager\n    this.id = this.config.id;\n    if (!this.config.id) {\n      throw new Error('an adSlot requires an id!');\n    }\n    this.target = this.config.target;\n    this.type = this.config.type;\n    this.responsive = this.config.responsive;\n    this.fluid = this.config.fluid;\n    this.user = this.config.user;\n    this.adManager = this.config.adManager;\n    this.htmlElement = this.config.htmlElement;\n    this.priority = this.config.priority;\n    this.deferredSlot = this.config.deferredSlot;\n\n    // Part II : Global, general ad configuration - passed from AdManager\n    this.department = this.config.department;\n    this.network = this.config.network;\n    this.adUnitBase = this.config.adUnitBase;\n\n    // Part III : ad specific configuration - passed from globalConfig.adSlotConfig\n    this.adSizeMapping = this.config.adSizeMapping;\n    this.responsiveAdSizeMapping = this.config.responsiveAdSizeMapping;\n    this.blacklistReferrers = this.config.blacklistReferrers ?\n      this.config.blacklistReferrers.split(',') : [];\n    this.whitelistReferrers = this.config.whitelistReferrers ?\n      this.config.whitelistReferrers.split(',') : [];\n\n\n    // Part IV : Runtime configuration - calculated data - only present in runtime\n    this.lastResolvedSize = undefined; // Initialized in 'slotRenderEnded' callback\n    this.lastResolvedWithBreakpoint = undefined; // Initialized in 'slotRenderEnded' callback\n    this.slot = undefined; // Holds a googletag.Slot object\n    // [https://developers.google.com/doubleclick-gpt/reference#googletag.Slot]\n    try {\n      if (!this.deferredSlot) {\n        this.slot = this.defineSlot();\n      }\n    }\n    catch (err) {\n      console.error(err); // eslint-disable-line no-console\n    }\n  }\n\n  /**\n   * Checks whether this adSlot is an 'Out-of-page' slot or not.\n   * An Out-of-page slot is a slot that is not embedded in the page 'normally'.\n   * @returns {boolean} true iff this adSlot is one of the predefined 'out-of-page' slots.\n   */\n  isOutOfPage() {\n    if (typeof this.type !== 'string') {\n      throw new Error('An adSlot cannot by typeless!', this);\n    }\n    if (this.isMobile() === true) {\n      return false;\n    }\n    switch (this.type) {\n      case adTypes.maavaron: return false;\n      case adTypes.popunder: return true;\n      case adTypes.talkback: return false;\n      case adTypes.regular: return false;\n      default: return false;\n    }\n  }\n\n  /**\n   * Checks whether this adSlot is a 'maavaron' slot or not.\n   * An Out-of-page slot is a slot that is not embedded in the page 'normally'.\n   * @returns {boolean} true iff this adSlot is one of the predefined 'out-of-page' slots.\n   */\n  isMaavaron() {\n    if (typeof this.type !== 'string') {\n      throw new Error('An adSlot cannot by typeless!', this);\n    }\n    if (this.isMobile() === true) {\n      return false;\n    }\n    switch (this.type) {\n      case adTypes.maavaron: return false;\n      default: return false;\n    }\n  }\n\n  isMobile() {\n    return (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i\n      .test(window.navigator.userAgent || ''));\n  }\n  /**\n   * Checks whether or not this adSlot has a non-empty whitelist, and if so, that the current\n   * referrer appears in the whitelist.\n   * Should return false iff there is a whitelist for the current adSlot, but the referrer is not\n   * mentioned in the whitelist.\n   * @returns {boolean} true iff the ad can be displayed.\n   */\n  isWhitelisted() {\n    let whitelisted = false;\n    if (this.whitelistReferrers.length !== 0) {\n      for (const referrer of this.whitelistReferrers) {\n        if (globalConfig.referrer.indexOf(referrer) > -1) {\n          whitelisted = true;\n          break;\n        }\n      }\n    }\n    else {\n      whitelisted = true;\n    }\n    return whitelisted;\n  }\n\n  /**\n   * Checks whether or not this adSlot has a non-empty blacklist, and if so, that the current\n   * referrer does not appear in the blacklist.\n   * Should return true iff there is a blacklist for the current adSlot, and the referrer is\n   * mentioned in the blacklist - to indicate that the adSlot is 'blocked'.\n   * @returns {boolean} true iff the ad cannot be displayed.\n   */\n  isBlacklisted() {\n    let blacklisted = false;\n    if (this.blacklistReferrers.length !== 0) {\n      for (const referrer of this.blacklistReferrers) {\n        if (globalConfig.referrer.indexOf(referrer) > -1) {\n          blacklisted = true;\n          break;\n        }\n      }\n    }\n    return blacklisted;\n  }\n\n\n  /**\n   * Shows the current adSlot.\n   * It assumes a markup is available for this slot (any tag with an id attribute = this.id)\n   */\n  show() {\n    if (!this.shown === true) {\n      this.shown = true; // Ensure show will be called once per adSlot\n      googletag.cmd.push(() => {\n        if (this.deferredSlot) {\n          this.slot = this.defineSlot();\n        }\n        // console.log('calling show for slot',this.id,' called @',window.performance.now());\n        document.getElementById(this.id).classList.remove(hiddenClass);\n        googletag.display(this.id);\n      });\n    }\n  }\n\n  /**\n   * Shows the current adSlot.\n   * It assumes a markup is available for this slot (any tag with an id attribute = this.id)\n   */\n  hide() {\n    googletag.cmd.push(() => {\n      document.getElementById(this.id).classList.add(hiddenClass);\n    });\n  }\n\n  /**\n   * Initializes page-level slot definition for the current slot\n   * @return {Slot} slot - the Google Slot that was defined from this AdSlot configuration\n   */\n  defineSlot() {\n    if (this.isMaavaron()) {\n      const maavaronSlot = this.defineMaavaron();\n      if (this.adManager.shouldSendRequestToDfp(this)) {\n        if (!this.shown) {\n          this.shown = true; // Ensure show will be called once\n          maavaronSlot.display();\n        }\n      }\n      return maavaronSlot;\n    }\n    const googletag = window.googletag;\n    const pubads = googletag.pubads();\n    const args = [];\n    const defineFn = this.isOutOfPage() ? googletag.defineOutOfPageSlot : googletag.defineSlot;\n    // 3 or 2 params according to the function that we want to activate.\n    args.push(this.getPath());\n    if (this.isOutOfPage() === false) {\n      if (this.fluid) {\n        args.push('fluid');\n      }\n      else {\n        args.push(this.adSizeMapping);\n      }\n    }\n    args.push(this.id);\n    let slot = defineFn.apply(defineFn, args);\n    if (slot) {\n      // Responsive size Mapping\n      if (this.responsive) {\n        let responsiveSlotSizeMapping = googletag.sizeMapping();\n        const breakpoints = globalConfig.breakpointsConfig.breakpoints;\n        const keys = Object.keys(this.responsiveAdSizeMapping);\n        for (const key of keys) { // ['xxs','xs',...]\n          responsiveSlotSizeMapping.addSize(\n            [breakpoints[key], 100], // 100 is a default height, since it is height agnostic\n            !arraysEqual(this.responsiveAdSizeMapping[key], [[0, 0]]) ?\n              this.responsiveAdSizeMapping[key] : []);\n        }\n        responsiveSlotSizeMapping = responsiveSlotSizeMapping.build();\n        slot = slot.defineSizeMapping(responsiveSlotSizeMapping);\n      }\n      slot = slot.addService(pubads);\n      if (this.isOutOfPage() === false) {\n        slot.setCollapseEmptyDiv(true);\n      }\n    }\n    return slot;\n  }\n\n  /**\n   * Returns the current path calculated for the adSlot\n   * @returns {String} a formatted string that represent the path for the slot definition\n   */\n  getPath() {\n    /* eslint-disable no-shadow */\n    let path = globalConfig.path || [];\n    path = path.filter(path => path !== '.');\n    path = path.map(section => `${this.id}${this.department}${section}`).join('/');\n    // If a path exist, it will be preceded with a forward slash\n    path = path && this.config.department !== '_homepage' ? `/${path}` : '';\n    /* eslint-enable no-shadow */\n    const calculatedPath = `/${this.config.network}/${this.config.adUnitBase}/${this.id}/${this.id}${this.department}${path}`; // eslint-disable-line max-len\n    return calculatedPath.toLowerCase();\n  }\n\n  /* eslint-disable */\n  slotRendered(event) {\n    const id = event.slot.getAdUnitPath().split('/')[3]; // Convention: [0]/[1]network/[2]base/[3]id\n    const isEmpty = event.isEmpty; // Did the ad return as empty?\n    const resolvedSize = event.size; // What 'creative' size did the ad return with?\n    // Empty or onload callback should be called next?\n  }\n  /* eslint-enable */\n\n  /**\n   * Refresh this adSlot\n   */\n  refresh() {\n    googletag.cmd.push(() => {\n      googletag.pubads().refresh([this.slot]);\n    });\n  }\n\n  /**\n   * Shows 'Maavaron' type adSlot using Passback definition\n   * @return {Slot} slot - the Google Slot that was defined for Maavaron\n   */\n  defineMaavaron() {\n    if (!document.referrer.match('loc.haaretz')) {\n      const adUnitMaavaronPath = this.getPath();\n      const adUnitMaavaronSize = [\n        [2, 1],\n      ];\n      const slot = googletag.pubads().definePassback(adUnitMaavaronPath, adUnitMaavaronSize)\n        .setTargeting('UserType', [this.user.type])\n        .setTargeting('age', [this.user.age])\n        .setTargeting('urgdr', [this.user.gender])\n        .setTargeting('articleId', [globalConfig.articleId])\n        .setTargeting('stg', [globalConfig.environment]);\n      return slot;\n    }\n    return null;\n  }\n}\n","/* global googletag */\nimport User from '../objects/user';\nimport ConflictResolver from '../objects/conflictResolver';\nimport AdSlot from '../objects/adSlot';\nimport { getBreakpoint, getBreakpointName } from '../utils/breakpoints';\nimport { arraysEqual } from '../utils/arrays';\nimport getCookieAsMap from '../utils/cookieUtils';\n\n// There are a total of 7 adTargets:\n// \"all\",\"nonPaying\",\"anonymous\",\"registered\",\"paying\",\"digitalOnly\" and \"digitalAndPrint\"\nexport const adPriorities = {\n  high: 'high',\n  normal: 'normal',\n  low: 'low',\n};\n\nexport const adTargets = {\n  all: 'all',\n  nonPaying: 'nonPaying',\n  anonymous: 'anonymous',\n  registered: 'registered',\n  paying: 'paying',\n  digitalOnly: 'digitalOnly',\n  digitalAndPrint: 'digitalAndPrint',\n};\n\n// There are a total of 3 userTypes: \"anonymous\", \"registered\" and \"payer\"\nexport const userTypes = {\n  anonymous: 'anonymous',\n  registered: 'registered',\n  payer: 'payer',\n};\n\nexport const adTypes = {\n  maavaron: '.maavaron',\n  popunder: '.popunder',\n  talkback: '.talkback',\n  regular: '',\n};\n\n\nexport default class AdManager {\n\n  constructor(config) {\n    this.config = Object.assign({}, config);\n    this.user = new User(config);\n    this.conflictResolver = new ConflictResolver(config.conflictManagementConfig);\n    /**\n     * Avoid race conditions by making sure to respect the usual timing of GPT.\n     * This DFP implementation uses Enable-Define-Display:\n     * Define page-level settings\n     * enableServices()\n     * Define slots\n     * Display slots\n     */\n    try {\n      googletag.cmd.push(() => {\n        this.initGoogleTargetingParams(); //  Define page-level settings\n        this.initGoogleGlobalSettings();  //  enableServices()\n        this.initSlotRenderedCallback();  //  Define callbacks\n      });\n      // Mouse special treatment to base path on mobile breakpoints\n      const currentBreakpointName = getBreakpointName(getBreakpoint());\n      if (this.config.adManagerConfig.adUnitBase.indexOf('mouse.co.il') > -1 &&\n        currentBreakpointName.indexOf('xs') > -1) {\n        this.config.adManagerConfig.adUnitBase = 'mouse.co.il.mobile_web';\n      }\n      // Holds adSlot objects as soon as possible.\n      googletag.cmd.push(() => {\n        this.adSlots = this.initAdSlots(config.adSlotConfig, adPriorities.high);\n      });\n      // Once DOM ready, add more adSlots.\n      const onDomLoaded = () => { // eslint-disable-line no-inner-declarations\n        try {\n          googletag.cmd.push(() => {\n            this.adSlots = this.initAdSlots(config.adSlotConfig, adPriorities.high);\n            googletag.cmd.push(() => {\n              this.adSlots = this.initAdSlots(config.adSlotConfig, adPriorities.normal);\n            });\n          });\n        }\n        catch (err) {\n          console.log(err); // eslint-disable-line no-console\n        }\n      };\n      // Once window was loaded, add the rest of the adSlots.\n      const onWindowLoaded = () => { // eslint-disable-line no-inner-declarations\n        googletag.cmd.push(() => {\n          this.adSlots = this.initAdSlots(config.adSlotConfig, adPriorities.low);\n          // Clean blocking adSlots that are not defined on this page\n          for (const blockingAdSlotKey of this.conflictResolver.dependencyMap.keys()) {\n            if (!this.adSlots.has(blockingAdSlotKey)) {\n              this.conflictResolver.dependencyMap.delete(blockingAdSlotKey);\n            }\n          }\n          this.showAllDeferredSlots();\n        });\n      };\n      switch (document.readyState) {\n        case 'loading':\n          document.addEventListener('DOMContentLoaded', onDomLoaded);\n          window.addEventListener('load', onWindowLoaded);\n          break;\n        case 'interactive':\n          onDomLoaded();\n          window.addEventListener('load', onWindowLoaded);\n          break;\n        default: // 'complete' - no need for event listeners.\n          onDomLoaded();\n          onWindowLoaded();\n      }\n    }\n    catch (err) {\n      console.error(err); // eslint-disable-line no-console\n    }\n  }\n\n  /**\n   * Shows all of the adSlots that can be displayed.\n   */\n  showAllSlots() {\n    for (const adSlotKey of this.adSlots.keys()) {\n      const adSlot = this.adSlots.get(adSlotKey);\n      if (adSlot.type !== adTypes.talkback && this.shouldSendRequestToDfp(adSlot)) {\n        adSlot.show();\n      }\n    }\n  }\n\n  /**\n   * Gets all adSlots that has a certain priority\n   * @param {adPriority} priority - the priority of the ad {high, normal, low}\n   * @return {Array<AdSlot>} adSlots - all of the defined adSlots that matches\n   * the given priority\n   */\n  getAdSlotsByPriority(priority) {\n    function priorityFilter(adSlot) {\n      return adSlot.priority === priority;\n    }\n    return Array.from(this.adSlots.values()).filter(priorityFilter);\n  }\n\n  showAllDeferredSlots() {\n    for (const deferredSlotId of this.conflictResolver.deferredSlots) {\n      if (this.adSlots.has(deferredSlotId)) {\n        if (!this.conflictResolver.isBlocked(deferredSlotId)) {\n          const deferredAdSlot = this.adSlots.get(deferredSlotId);\n          if (this.shouldSendRequestToDfp(deferredAdSlot)) {\n            deferredAdSlot.show();\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Refreshes all responsive adSlots\n   */\n  refreshAllSlots() {\n    const currentBreakpoint = getBreakpoint();\n    for (const adSlotKey of this.adSlots.keys()) {\n      const adSlot = this.adSlots.get(adSlotKey);\n      if (adSlot.responsive && adSlot.type !== adTypes.maavaron) {\n        if (adSlot.lastResolvedWithBreakpoint !== currentBreakpoint &&\n          this.shouldSendRequestToDfp(adSlot)) {\n          // console.log(`calling refresh for adSlot: ${adSlot.id}`);\n          adSlot.refresh();\n        }\n        else {\n          adSlot.hide();\n        }\n      }\n    }\n  }\n\n  /**\n   * Refreshes all adSlots\n   */\n  refreshAllSlotsInPage() {\n    for (const adSlotKey of this.adSlots.keys()) {\n      const adSlot = this.adSlots.get(adSlotKey);\n      if (this.shouldSendRequestToDfp(adSlot)) {\n        // console.log(`calling refresh for adSlot: ${adSlot.id}`);\n        adSlot.refresh();\n      }\n      else {\n        adSlot.hide();\n      }\n    }\n  }\n\n  /**\n   * Refreshes adSlot\n   */\n\n  refreshSlot(adUnitName) {\n    const adSlot = this.adSlots.get(adUnitName);\n    if (this.shouldSendRequestToDfp(adSlot)) {\n      // console.log(`calling refresh for adSlot: ${adSlot.id}`);\n      adSlot.refresh();\n    }\n    else {\n      adSlot.hide();\n    }\n  }\n\n\n      /**\n   * Initializes adSlots based on the currently found slot markup (HTML page specific),\n   * and the predefined configuration for the slots.\n   * @param {Object} adSlotConfig - the AdSlots configuration object (see: globalConfig)\n   * @param {String} filteredPriority - filters out all adSlots that does not match\n   * a given adPriority. This is used to cherry pick the init process of ads.\n   * @returns {Map}\n   */\n  initAdSlots(adSlotConfig, filteredPriority) {\n    const adSlots = new Map(this.adSlots);\n    let adSlotPlaceholders = Array.from(document.getElementsByClassName('js-dfp-ad'));\n    adSlotPlaceholders = adSlotPlaceholders.filter(node => node.id); // only nodes with an id\n    const adSlotNodeSet = new Set();\n    adSlotPlaceholders = Array.prototype.filter.call(adSlotPlaceholders, node => {\n      if (adSlotNodeSet.has(node.id) === false) { // first occurrence of Node\n        adSlotNodeSet.add(node.id);\n        return true;\n      }\n      return false;\n    });\n    // adSlotPlaceholders = adSlotPlaceholders.sort((a, b) => a.offsetTop - b.offsetTop);\n    adSlotPlaceholders.forEach(adSlot => {\n      const adSlotPriority = adSlotConfig[adSlot.id] ?\n      adSlotConfig[adSlot.id].priority || adPriorities.normal : undefined;\n      if (adSlotConfig[adSlot.id] && adSlots.has(adSlot.id) === false &&\n        adSlotPriority === filteredPriority) {\n        // The markup has a matching configuration from adSlotConfig AND was not already defined\n        try {\n          // adSlotConfig is built from globalConfig, but can be overridden by markup\n          const computedAdSlotConfig = Object.assign({}, adSlotConfig[adSlot.id], {\n            id: adSlot.id,\n            target: adSlot.attributes['data-audtarget'] ?\n              adSlot.attributes['data-audtarget'].value : adTargets.all,\n            type: this.getAdType(adSlot.id),\n            responsive: adSlotConfig[adSlot.id].responsive,\n            fluid: adSlotConfig[adSlot.id].fluid || false,\n            user: this.user,\n            adManager: this,\n            htmlElement: adSlot,\n            department: this.config.department,\n            network: this.config.adManagerConfig.network,\n            adUnitBase: this.config.adManagerConfig.adUnitBase,\n            deferredSlot: this.conflictResolver.isBlocked(adSlot.id),\n            priority: adSlotPriority,\n          });\n          const adSlotInstance = new AdSlot(computedAdSlotConfig);\n          adSlots.set(adSlot.id, adSlotInstance);\n          if (adSlotInstance.type !== adTypes.talkback &&\n            adSlotInstance.priority === adPriorities.high &&\n            this.shouldSendRequestToDfp(adSlotInstance)) {\n            /*\n             console.log('calling show for high priority slot', adSlotInstance.id, ' called @',\n             window.performance.now());\n             */\n            adSlotInstance.show();\n          }\n        }\n        catch (err) {\n          console.error(err); // eslint-disable-line no-console\n        }\n      }\n    });\n    return adSlots;\n  }\n\n  isPriority(adSlotId) {\n    return (typeof adSlotId === 'string' &&\n    (adSlotId.indexOf('plazma') > 0 ||\n    adSlotId.indexOf('maavaron') > 0 ||\n    adSlotId.indexOf('popunder') > 0));\n  }\n\n  /**\n   * Returns the adType based on the adSlot name.\n   * @param {String} adSlotId - the adSlot's identifier.\n   * @returns {*} enumerated export 'adTypes'\n   */\n  getAdType(adSlotId) {\n    if (!adSlotId) {\n      throw new Error('Missing argument: a call to getAdType must have an adSlotId');\n    }\n    if (adSlotId.indexOf(adTypes.maavaron) > -1) return adTypes.maavaron;\n    if (adSlotId.indexOf(adTypes.popunder) > -1) return adTypes.popunder;\n    if (adSlotId.indexOf(adTypes.talkback) > -1) return adTypes.talkback;\n    return adTypes.regular;\n  }\n\n  /**\n   * @param {object} adSlot the AdSlot\n   * @returns {boolean|*}\n   */\n  shouldSendRequestToDfp(adSlot) {\n    // Conflict management check\n    return this.conflictResolver.isBlocked(adSlot.id) === false &&\n      // Valid Referrer check\n      adSlot.isWhitelisted() &&\n      // Not in referrer Blacklist\n      adSlot.isBlacklisted() === false &&\n      this.shouldDisplayAdAfterAdBlockRemoval(adSlot) &&\n      //  if a paywall pop-up is shown And the number is 12 or more - SHOW MAAVRON\n      this.shouldDisplayAdMaavaronAfterPayWallBanner(adSlot) &&\n      // Responsive: breakpoint contains ad?\n      this.doesBreakpointContainAd(adSlot) &&\n      // check in case of Smartphoneapp\n      this.haveValidCookieForSmartphoneapp() &&\n      // Targeting check (userType vs. slotTargeting)\n      this.doesUserTypeMatchBannerTargeting(adSlot) &&\n      // Impressions Manager check (limits number of impressions per slot)\n      this.user.impressionManager.reachedQuota(adSlot.id) === false;\n  }\n\n  printShouldSendRequestToDfp(id) {\n    let res = '';\n    if (!this.adSlots.has(id)) {\n      res = `id not exist: ${id}`;\n    }\n    else {\n      const a = this.adSlots.get(id);\n      res += this.conflictResolver.isBlocked(a.id) === !1 ? '' : 'isBlocked,';\n      res += a.isWhitelisted() ? '' : 'isWhitelisted,';\n      res += a.isBlacklisted() === !1 ? '' : 'isBlacklisted,';\n      res += this.shouldDisplayAdAfterAdBlockRemoval(a) ? '' : 'AdBlockRemoval,';\n      res += this.shouldDisplayAdMaavaronAfterPayWallBanner(a) ? '' : 'PayWallBanner,';\n      res += this.doesBreakpointContainAd(a) ? '' : 'Breakpoint,';\n      res += this.haveValidCookieForSmartphoneapp() ? '' : 'Smartphoneapp,';\n      res += this.doesUserTypeMatchBannerTargeting(a) ? '' : 'Targeting,';\n      res += this.user.impressionManager.reachedQuota(a.id) === !1 ? '' : 'reachedQuota,';\n      res = `<div>${id}<br>${res}</div>`;\n    }\n    document.write(res);\n    return res;\n  }\n\n  testShouldSendRequestToDfp(id) {\n    // leave the old name for ios legacy\n    let cookieMap = getCookieAsMap();\n    cookieMap = JSON.stringify(cookieMap);\n    cookieMap = cookieMap.replace(/,/g, '<br>');\n    const res = `<div>${cookieMap}</div>`;\n    document.write(res);\n    return res;\n  }\n\n  shouldDisplayAdAfterAdBlockRemoval(adSlot) {\n    return !(this.config.adBlockRemoved === true &&\n    (adSlot.type === adTypes.maavaron ||\n    adSlot.type === adTypes.popunder));\n  }\n\n  shouldDisplayAdMaavaronAfterPayWallBanner(adSlot) {\n    let shouldDisplay = true;\n    if (this.config.site === 'haaretz' && adSlot.type === adTypes.maavaron) {\n      try {\n        const paywallBanner = JSON.parse(window.localStorage.getItem('_cobj'));\n        shouldDisplay = !paywallBanner || ((paywallBanner.mc && paywallBanner.mc >= 12) ||\n                          (paywallBanner.nextslotLocation &&\n                          !paywallBanner.nextslotLocation.includes('pop')));\n      }\n      catch (err) {\n        /* eslint-disable no-console*/\n        console.error('ERROR ON shouldDisplayAdMaavaronAfterPayWallBanner');\n        /* eslint-enable no-console*/\n      }\n    }\n    return shouldDisplay;\n  }\n\n  /**\n   * Check whether or not an ad slot should appear for the current user type\n   * @param {String} adSlotOrTarget the adSlot to check or the target as a string\n   * @returns {boolean} true iff the slot should appear for the user type\n   */\n\n  haveValidCookieForSmartphoneapp() {\n    return this.config.isValidForsmartPhone;\n  }\n\n  /**\n   * Check whether or not an ad slot should appear for the current user type\n   * @param {String} adSlotOrTarget the adSlot to check or the target as a string\n   * @returns {boolean} true iff the slot should appear for the user type\n   */\n  doesUserTypeMatchBannerTargeting(adSlotOrTarget) {\n    // if the user is smadar show her all the banners\n    const cookieMap = getCookieAsMap();\n    if (cookieMap.login === 'pilosmadar@gmail.com') {\n      return true;\n    }\n    if (cookieMap.tmsso !== undefined && cookieMap.tmsso.userName === 'pilosmadar@gmail.com') {\n      return true;\n    }\n    const userType = this.user.type;\n    const adTarget = typeof adSlotOrTarget === 'string' ? adSlotOrTarget : adSlotOrTarget.target;\n\n    switch (adTarget) {\n      case adTargets.all : return true;\n      case adTargets.nonPaying :\n        return userType === userTypes.anonymous || userType === userTypes.registered;\n      case adTargets.anonymous : return userType === userTypes.anonymous;\n      case adTargets.registered : return userType === userTypes.registered;\n      case adTargets.paying : return userType === userTypes.payer;\n      case adTargets.digitalOnly : return userType === userTypes.payer;\n      case adTargets.digitalAndPrint : return userType === userTypes.payer;\n      default: return false;\n    }\n  }\n\n  /**\n   * Report to the AdManager that a breakpoint has been switched (passed from one break to\n   * another). Should there be a responsive slot with a\n   * @param {Breakpoint} breakpoint - the breakpoint that is currently being displayed\n   * @returns {Integer} affected - the number of adSlots affected by the change\n   */\n  switchedToBreakpoint(breakpoint) {\n    if (!breakpoint) {\n      throw new Error('Missing argument: a call to switchedToBreakpoint must have an breakpoint');\n    }\n    let count = 0;\n    for (const adSlotKey of this.adSlots.keys()) {\n      const adSlot = this.adSlots.get(adSlotKey);\n      if (adSlot.responsive === true && adSlot.lastResolvedWithBreakpoint) {\n        if (adSlot.lastResolvedWithBreakpoint !== breakpoint) {\n          adSlot.refresh();\n          count++;\n        }\n      }\n    }\n    return count;\n  }\n\n  /**\n   * Checks whether an adSlot is defined for a given breakpoint (Default: current breakpoint)\n   * @param {AdSlot} adSlot - the adSlot to check.\n   * @param {Breakpoint} [breakpoint=currentBreakpoint] - the breakpoint to check this ad in.\n   * @returns {boolean} true iff the adSlot is defined for the given breakpoint.\n   */\n  doesBreakpointContainAd(adSlot, breakpoint = getBreakpoint()) {\n    if (!adSlot) {\n      throw new Error('Missing argument: a call to doesBreakpointContainAd must have an adSlot');\n    }\n    let containsBreakpoint = true;\n    if (adSlot.responsive === true) {\n      const mapping = adSlot.responsiveAdSizeMapping[getBreakpointName(breakpoint)];\n      if (Array.isArray(mapping) === false) {\n        throw new Error(`Invalid argument: breakpoint:${breakpoint} doesn't exist!`, this);\n      }\n      containsBreakpoint = mapping.length > 0 && !arraysEqual(mapping, [[0, 0]]);\n    }\n    return containsBreakpoint;\n  }\n\n  /**\n   * Initializes the callback from the 'slotRenderEnded' event for each slot\n   */\n  initSlotRenderedCallback() {\n    if (window.googletag && window.googletag.apiReady) {\n      const pubads = window.googletag.pubads();\n      pubads.addEventListener('slotRenderEnded', event => {\n        const id = event.slot.getAdUnitPath().split('/')[3];\n        const isEmpty = event.isEmpty;\n        const resolvedSize = event.size;\n        // console.log('slotRenderEnded for slot',id,' called @',window.performance.now());\n        if (this.adSlots.has(id)) {\n          const adSlot = this.adSlots.get(id);\n          adSlot.lastResolvedSize = resolvedSize;\n          adSlot.lastResolvedWithBreakpoint = getBreakpoint();\n          if (isEmpty) {\n            adSlot.lastResolvedSize = ConflictResolver.EMPTY_SIZE;\n            adSlot.hide();\n            this.releaseSlotDependencies(adSlot);\n          }\n          else {\n            this.releaseSlotDependencies(adSlot, adSlot.lastResolvedSize);\n          }\n          this.user.impressionManager.registerImpression(`${adSlot.id}${this.config.department}`);\n          this.user.impressionManager.registerImpression(`${adSlot.id}_all`);\n        }\n        else {\n          /*\n           console.error(`Cannot find an adSlot with id: ${id} - Ad Unit path is\n           ${event.slot.getAdUnitPath()}`);\n           */\n        }\n      });\n    }\n    else {\n      throw new Error('googletag api was not ready when \\'initSlotRenderedCallback\\' was called!');\n    }\n  }\n\n  releaseSlotDependencies(adSlot) {\n    try {\n      const id = adSlot.id;\n      this.conflictResolver.updateResolvedSlot(id, adSlot.lastResolvedSize);\n      if (this.conflictResolver.isBlocking(id)) {\n        // Hide all blocked adSlots\n        for (const blockedSlot of this.conflictResolver.getBlockedSlotsIds(id)) {\n          if (this.conflictResolver.isBlocked(blockedSlot)) {\n            if (this.adSlots.has(blockedSlot)) {\n              this.adSlots.get(blockedSlot).hide();\n            }\n          }\n        }\n        // Show the non blocked\n        for (const deferredSlotKey of this.conflictResolver.deferredSlots.keys()) {\n          const deferredAdSlot = this.adSlots.get(deferredSlotKey);\n          if (deferredAdSlot && this.shouldSendRequestToDfp(deferredAdSlot)) {\n            this.conflictResolver.deferredSlots.delete(deferredSlotKey);\n            if (deferredAdSlot.deferredSlot) {\n              deferredAdSlot.defineSlot();\n              deferredAdSlot.deferredSlot = false;\n            }\n            deferredAdSlot.show();\n          }\n        }\n      }\n    }\n    catch (err) {\n      /* eslint-disable no-console*/\n      console.error(`Cannot updateSlotDependencies for adSlot: ${adSlot.id}`);\n      /* eslint-enable no-console*/\n    }\n  }\n\n  setSsoGroupKey() {\n    fetch(`/ssoGroupKey?value=${this.user.sso.userId}`, {\n      method: 'GET',\n      cache: 'no-cache',\n    }).then(value => {\n      if (value) {\n        value.json().then(data => {\n          if (data && data.result && data.result !== 'item not found'\n            && data.result !== 'value is empty') {\n            localStorage.setItem('_SsoGroupKey', data.result);\n          }\n        });\n      }\n    });\n  }\n\n  /**\n   * Initializes page-level targeting params.\n   */\n  initGoogleTargetingParams() {\n    if (window.googletag && window.googletag.apiReady) {\n      // Returns a reference to the pubads service.\n      let SsoGroupKey = null;\n      try {\n        SsoGroupKey = localStorage.getItem('_SsoGroupKey');\n        if (!SsoGroupKey && this.user.sso.userId) {\n          this.setSsoGroupKey();\n        }\n      }\n      catch (e) {\n        SsoGroupKey = null;\n      }\n      const pubads = googletag.pubads();\n      // Environment targeting (dev, test, prod)\n      if (this.config.environment) {\n        pubads.setTargeting('stg', [this.config.environment]);\n      }\n      // App targeting\n      // User targeting\n      if (this.user.htz_type) {\n        pubads.setTargeting('htz_user_type', [this.user.htz_type]);\n      }\n      if (this.user.tm_type) {\n        pubads.setTargeting('tm_user_type', [this.user.tm_type]);\n      }\n      if (this.user.hdc_type) {\n        pubads.setTargeting('hdc_user_type', [this.user.hdc_type]);\n      }\n      // Context targeting\n      if (this.config.section) {\n        pubads.setTargeting('section', [this.config.section]);\n      }\n      if (this.config.sub_section) {\n        pubads.setTargeting('sub_section', [this.config.sub_section]);\n      }\n      if (this.config.articleId) {\n        pubads.setTargeting('articleId', [this.config.articleId]);\n        pubads.setTargeting('react', ['false']);\n      }\n      if (this.config.gStatCampaignNumber && this.config.gStatCampaignNumber !== -1) {\n        pubads.setTargeting('gstat_campaign_id', [this.config.gStatCampaignNumber]);\n      }\n      if (this.config.proposalNumber) {\n        pubads.setTargeting('proposaltype', [this.config.proposalNumber]);\n      }\n      if (this.config.pageType) {\n        pubads.setTargeting('pageType', [this.config.pageType]);\n      }\n      if (this.config.isWriterAlerts) {\n        pubads.setTargeting('WriterAlerts', ['true']);\n      }\n      // AdBlock removal\n      if (this.config.adBlockRemoved) {\n        pubads.setTargeting('adblock_removed', [this.config.adBlockRemoved]);\n      }\n      // University targeting - triggered via cookie\n      if (this.config.wifiLocation) {\n        pubads.setTargeting('wifi', [this.config.wifiLocation]);\n      }\n      if (this.config.tags && Array.isArray(this.config.tags)) {\n        pubads.setTargeting('tags', [...this.config.tags]);\n      }\n\n      if (this.user.sso && this.user.sso.userId && SsoGroupKey) {\n        pubads.setTargeting(SsoGroupKey, this.user.sso.userId);\n      }\n      if (this.config.anonymousId) {\n        const anonymousIdKeyName = 'anonymousIdKey';\n        pubads.setTargeting(anonymousIdKeyName, this.config.anonymousId);\n      }\n      if (this.user.country) {\n        pubads.setTargeting('country', this.user.country);\n      }\n\n      const cityNames = this.getCityNames();\n      if (cityNames) {\n        pubads.setTargeting('cityName', [...cityNames]);\n      }\n\n      // Ads Centering\n      pubads.setCentering(true);\n    }\n    else {\n      throw new Error('googletag api was not ready when \\'initGoogleTargetingParams\\' was called!');\n    }\n  }\n\n  /**\n   * Initializes googletag services.\n   */\n  initGoogleGlobalSettings() {\n    if (window.googletag && window.googletag.apiReady) {\n      const googleGlobalSettings = this.config.googleGlobalSettings;\n      // Enable GET parameter overrides\n      if (window.location.search) {\n        const search = window.location.search;\n        if (search.indexOf('sraon') > 0) {\n          console.log('Single Request Mode: active'); // eslint-disable-line no-console\n          googleGlobalSettings.enableSingleRequest = true;\n        }\n        else if (search.indexOf('sraoff') > 0) {\n          console.log('Single Request Mode: disabled');// eslint-disable-line no-console\n          googleGlobalSettings.enableSingleRequest = false;\n        }\n        if (search.indexOf('asyncrenderingon') > 0) {\n          console.log('Async rendering mode: active'); // eslint-disable-line no-console\n          googleGlobalSettings.enableAsyncRendering = true;\n        }\n        else if (search.indexOf('asyncrenderingonoff') > 0) {\n          console.log('Sync rendering mode: active');// eslint-disable-line no-console\n          googleGlobalSettings.enableAsyncRendering = false;\n        }\n      }\n      // Google services activation\n      if (googleGlobalSettings.enableSingleRequest === true) {\n        googletag.pubads().enableSingleRequest();\n      }\n      // if (googleGlobalSettings.enableAsyncRendering === true) {\n      //   googletag.pubads().enableAsyncRendering();\n      // }\n      // else {\n      //   googletag.pubads().enableSyncRendering();\n      // }\n      // Enables all GPT services that have been defined for ad slots on the page.\n      googletag.enableServices();\n    }\n    else {\n      throw new Error('googletag api wasn\\'t ready when \\'initGoogleGlobalSettings\\' was called!');\n    }\n  }\n\n\n  getCityNames() {\n    const cityNames = [];\n    document.querySelectorAll('[data-location-city-name]').forEach((element) => {\n      if (!cityNames.includes(element.dataset.locationCityName)) {\n        cityNames.push(element.dataset.locationCityName);\n      }\n    });\n    return cityNames.length > 0 ? cityNames : null;\n  }\n\n}\n","/* globals googletag */\nimport AdManager from '../src/objects/adManager';\nimport globalConfig from './globalConfig';\nimport { getBreakpoint, debounce } from '../src/utils/breakpoints';\n\nconst defaultConfig = globalConfig || {};\nconst resizeTimeout = 250;\n\nexport default class DFP {\n\n  constructor(config) {\n    this.config = Object.assign({}, defaultConfig, config);\n    this.wasInitialized = false;\n    this.initStarted = false;\n    this.breakpoint = getBreakpoint();\n    this.initWindowResizeListener();\n  }\n\n  /**\n   * This part of the object's construction is dependent on the call to 'init'\n   */\n  resumeInit() {\n    try {\n      this.adManager = this.adManager || new AdManager(this.config);\n    }\n    catch (err) {\n      console.error(err); // eslint-disable-line no-console\n    }\n  }\n\n  /**\n   * initializes the 'googletag' global namespace and add the\n   * google publish tags library to the page\n   * @returns {Promise} that resolves to true once the googletag api is ready to use\n   * (googletag.apiReady = true)\n   */\n  initGoogleTag() {\n    const dfpThis = this;\n    return new Promise((resolve, reject) => {\n      if (dfpThis.initStarted === true) {\n        googletag.cmd.push(() => {\n          dfpThis.wasInitialized = true;\n          resolve(dfpThis);\n        });\n      }\n      else {\n        dfpThis.initStarted = true;\n        // set up a place holder for the gpt code downloaded from google\n        window.googletag = window.googletag || {};\n\n        // this is a command queue used by GPT any methods added to it will be\n        // executed when GPT code is available, if GPT is already available they\n        // will be executed immediately\n        window.googletag.cmd = window.googletag.cmd || [];\n        // load google tag services JavaScript\n        (() => {\n          const tag = window.document.createElement('script');\n          tag.async = true;\n          tag.type = 'text/javascript';\n          // Supports both https and http\n          tag.setAttribute('src', '//www.googletagservices.com/tag/js/gpt.js');\n          const node = window.document.getElementsByTagName('script')[0];\n          tag.addEventListener('load', () => {\n            dfpThis.resumeInit();\n            googletag.cmd.push(() => {\n              dfpThis.wasInitialized = true;\n              resolve(this);\n            });\n          });\n          tag.addEventListener('error', (error) => {\n            dfpThis.wasInitialized = false;\n            reject(error);\n          });\n          node.parentNode.insertBefore(tag, node);\n        })();\n      }\n    });\n  }\n\n  /**\n   *  Returns true iff googletag was properly initialized on the page\n   * @returns {boolean}\n   */\n  isGoogleTagReady() {\n    if (this.wasInitialized === true || (window.googletag && window.googletag.apiReady)) {\n      this.wasInitialized = true;\n    }\n    return this.wasInitialized;\n  }\n\n  /**\n   * Initializes the window resize listener to support responsive ad refreshes\n   */\n  initWindowResizeListener() {\n    const dfpThis = this;\n    function onResize() {\n      const currentBreakpoint = getBreakpoint();\n      if (dfpThis.breakpoint !== currentBreakpoint) {\n        dfpThis.breakpoint = currentBreakpoint;\n        if (dfpThis.adManager) {\n          dfpThis.adManager.refreshAllSlots();\n        }\n        else {\n          throw new Error('initWindowResizeListener error - adManager instance is not available');\n        }\n      }\n    }\n    const debouncedFunction = debounce(onResize, resizeTimeout);\n    window.onresize = debouncedFunction;\n  }\n}\n","import DFP from './dfp';\nimport globalConfig from './globalConfig';\nimport { version as v } from './version';\n\n// DFP version is based on the package.json\nDFP.version = v || 'VERSION';\n\n/*\n // Only for development mode\n if ( process.env.NODE_ENV !== 'production' ) {\n DFP.dev = '123';\n }\n */\n\nexport const config = globalConfig;\nexport const version = DFP.version;\nexport default DFP;\n","// generated by genversion\nexport const version = '2.6.4';\n"]}