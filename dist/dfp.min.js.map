{"version":3,"sources":["../src/utils/cookieUtils.js","../src/utils/time.js","../src/utils/breakpoints.js","../src/utils/arrays.js","../jspm_packages/npm/systemjs-plugin-babel@0.0.17/babel-helpers/classCallCheck.js","../jspm_packages/npm/systemjs-plugin-babel@0.0.17/babel-helpers/createClass.js","../src/globalConfig.js","../src/objects/impressionsManager.js","../src/objects/user.js","../src/objects/conflictResolver.js","../src/objects/adSlot.js","../src/objects/adManager.js","../src/dfp.js","../src/index.js"],"names":["stringToMap","string","separator","undefined","_ref$separator","operator","_ref$operator","map","itemsArr","split","forEach","element","keyValue","length","decodeURIComponent","getCookieAsMap","document","cookie","tmsso","engsso","addHours","date","hours","SyntaxError","isNaN","parseInt","TypeError","result","Date","setHours","getHours","addDays","days","setDate","getDate","debounce","func","wait","arguments","immediate","timeout","context","this","args","later","apply","callNow","setTimeout","getBreakpoint","breakpoint","windowWidth","window","innerWidth","breakpoints","xs","xxs","s","m","l","xl","xxl","getBreakpointName","resultBreakpoint","arraysEqual$1","a","b","Array","isArray","i","version","_","instance","Constructor","defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","key","protoProps","staticProps","prototype","ssoKey","location","hostname","indexOf","dfpConfig","Object","assign","referrer","isMobile","test","navigator","userAgent","isHomepage","pathname","environment","department","domain","regexMatch","exec","path","sectionArray","articleId","slice","filter","section","index","arr","reduce","last","current","concat","env","port","dev","prod","articleIdMatch","pop","content","getUrlParam","source","medium","campaign","results","RegExp","search","adBlockRemoved","localStorage","getItem","err","wifiLocation","cookieMap","_htzwif","gStatCampaignNumber","gstatCampaign","JSON","parse","CampaignNumber","isType1","breakpoints1","breakpoints2","getTime","breakpointsConfig","keys","impressionManagerConfig","ImpressionsManager","now","config","impressions","retrieveImpressionsData","initImpressionMap","migrateImpressionsData","_this","hasOwnProperty","call","frequency","impressionsData","oldImpressionsArray","e","impression","adUnitImpression","name","data","tmp","slotId","join","id","exposed","expires","_this2","adSlotId","err1","debouncedSave","saveImpressionsToLocalStorageImpl","setItem","stringify","error","slot","_this3","shouldUpdateExpiryDate","initSlotFromConfig","updateExpiryDate","slotName","Error","frequencyMap","match","frequencyRegex","setMilliseconds","setSeconds","setMinutes","maxImpressions","saveImpressionsToLocalStorage","atQuota","userTypes$1","User","userConfig","sso","type","getUserType","impressionManager","age","getUserAge","gender","getUserGender","userType","payerProp","payer","registered","anonymous","usrae","urgdr","ConflictResolver","conflictManagementConfig","dependencyMap","initializeDependencyMap","deferredSlots","Set","queue","Map","conflictManagementJson","value","rules","item","onsize","avoid","set","resolvedSize","has","get","resolvedWith","isBlocked","_step","Symbol","iterator","_iteratorNormalCompletion","_iterator","next","done","adSlotKey","adSlot","_step2","_iteratorNormalCompletion2","_iterator2","adSlotRule","parentResolvedWith","add","find","sizeString","size","numberStr","arraysEqual","return","_iteratorError2","_iteratorError","isBlocking","_step3","_iteratorNormalCompletion3","_iterator3","_iteratorError3","from","EMPTY_SIZE","adSlotConfig","responsive","fluid","user","adManager","htmlElement","priority","deferredSlot","network","adUnitBase","adSizeMapping","responsiveAdSizeMapping","blacklistReferrers","whitelistReferrers","lastResolvedSize","lastResolvedWithBreakpoint","defineSlot","adTypes","maavaron","popunder","talkback","regular","whitelisted","blacklisted","shown","cmd","push","getElementById","classList","remove","display","isMaavaron","maavaronSlot","defineMaavaron","shouldSendRequestToDfp","googletag","pubads","defineFn","isOutOfPage","defineOutOfPageSlot","getPath","responsiveSlotSizeMapping","sizeMapping","addSize","build","defineSizeMapping","addService","setCollapseEmptyDiv","calculatedPath","toLowerCase","event","getAdUnitPath","isEmpty","refresh","_this4","adUnitMaavaronPath","adUnitMaavaronSize","definePassback","setTargeting","adPriorities","adTargets","userTypes$$1","AdManager","conflictResolver","initGoogleTargetingParams","initGoogleGlobalSettings","initSlotRenderedCallback","adSlots","initAdSlots","high","addEventListener","normal","low","adSlot$$1","show","priorityFilter","values","deferredSlotId","deferredAdSlot","currentBreakpoint","hide","filteredPriority","adSlotPlaceholders","getElementsByClassName","node","adSlotNodeSet","adSlotPriority","computedAdSlotConfig","attributes","all","getAdType","adManagerConfig","adSlotInstance","isWhitelisted","isBlacklisted","shouldDisplayAdAfterAdBlockRemoval","doesBreakpointContainAd","doesUserTypeMatchBannerTargeting","reachedQuota","adSlotOrTarget","adTarget","nonPaying","paying","digitalOnly","digitalAndPrint","count","_step4","_iteratorNormalCompletion4","_iterator4","_iteratorError4","containsBreakpoint","mapping","apiReady","releaseSlotDependencies","registerImpression","updateResolvedSlot","_step5","getBlockedSlotsIds","_iteratorNormalCompletion5","_iterator5","blockedSlot","_iteratorError5","_step6","_iteratorNormalCompletion6","_iterator6","deferredSlotKey","delete","_iteratorError6","utm_","setCentering","googleGlobalSettings","log","enableAsyncRendering","enableSingleRequest","enableSyncRendering","enableServices","defaultConfig","googletagInitTimeout","resizeTimeout","DFP$1","DFP","wasInitialized","initWindowResizeListener","dfpThis","Promise","resolve","reject","isGoogleTagReady","tag","createElement","async","setAttribute","getElementsByTagName","onload","resumeInit","onerror","parentNode","insertBefore","promise","onResize","refreshAllSlots","debouncedFunction","onresize","version$1"],"mappings":"gnSAgBA,SAASA,GAAYC,uEACjBC,UAAAA,EAAAC,SAAAC,EAAY,IAA4BA,MAAvBC,SAAAA,EAAAF,SAAAG,EAAW,IAC9BA,EAAMC,KACAC,EAAWP,EAAOQ,MAAMP,YACrBQ,QAAQ,SAAAC,MACQ,gBAAZA,GAAsB,IACzBC,GAAWD,EAAQF,MAAMJ,EACP,KAApBO,EAASC,WACPD,EAAS,IAAME,mBAAmBF,EAAS,QAI9CL,EAKT,QAAwBQ,QAChBR,GAAMP,EAAYgB,SAASC,QAAUf,UAAW,eAC7B,gBAAdK,GAAIW,UACTA,MAAQlB,EAAYO,EAAIW,OAAShB,UAAW,OAExB,gBAAfK,GAAIY,WACTA,OAASnB,EAAYO,EAAIY,QAAUjB,UAAW,OAE7CK,EChCT,QAAgBa,GAASC,EAAMC,OACxBD,OACG,IAAIE,aAAY,4DAEnBD,OACG,IAAIC,aAAY,wDAEnB,IAAIC,MAAMC,SAASH,EAAO,UACvB,IAAII,WAAU,iEAEhBC,GAAS,GAAIC,MAAKP,YACjBQ,SAASF,EAAOG,WAAaL,SAASH,EAAO,KAC7CK,EAYT,QAAgBI,GAAQV,EAAMW,OACvBX,OACG,IAAIE,aAAY,2DAEnBS,OACG,IAAIT,aAAY,sDAEnB,IAAIC,MAAMC,SAASO,EAAM,UACtB,IAAIN,WAAU,+DAEhBC,GAAS,GAAIC,MAAKP,YACjBY,QAAQN,EAAOO,UAAYT,SAASO,EAAM,KAC1CL,EC9BT,QAAOQ,GAAAC,MAAwBC,GAAAC,UAAAzB,OAAA,GAAAV,SAAAmC,UAAA,GAAAA,UAAA,GAAO,IAAKC,EAAAD,UACzC,GAAIE,EAAA,aACG,eACCC,GAANC,KACMC,EAFoBL,UAGpBM,EAAQ,aACZ,KACAL,GAAgBH,EAAAS,MAAAJ,EAAAE,IAEZG,EAAUP,IAAhBC,eACAA,KACUO,WAAAH,EAAVP,GACAS,GAAaV,EAAAS,MAAAJ,EAAAE,IAQjB,QAAOK,QACDC,GAAA,OACEC,EAAcC,OAApBC,kBACAF,OACOA,GAAcG,EAAnBC,KAAgDD,EAAbE,GAA8B,WAC5DL,GAAcG,EAAnBG,IAA+CH,EAAbC,EAA6B,WAC1DJ,GAAcG,EAAnBI,IAA+CJ,EAAbG,CAA4B,WACzDN,GAAcG,EAAnBK,IAA+CL,EAAbI,CAA4B,WACzDP,GAAcG,EAAnBM,KAAgDN,EAAbK,CAA4B,WAC1DR,GAAcG,EAAnBO,MAAiDP,EAAbM,EAA6B,iBAC3CN,EAPxBO,UASAX,GAQF,QAAOY,GAAAZ,MACDa,GAAA,OACEZ,EAAcD,GAAcE,OAAlCC,kBACAF,OACOA,GAAcG,EAAnBC,KAAmC,KAA0B,WACxDJ,GAAcG,EAAnBG,IAAkC,IAAyB,WACtDN,GAAcG,EAAnBI,IAAkC,GAAwB,WACrDP,GAAcG,EAAnBK,IAAkC,GAAwB,WACrDR,GAAcG,EAAnBM,KAAmC,GAAwB,WACtDT,GAAcG,EAAnBO,MAAoC,IAAyB,iBAN/D,YASAE,GC7DF,QAAgBC,GAAYC,EAAGC,OACxBD,IAAMC,EAAG,OAAO,MAChBC,MAAMC,QAAQH,KAAOE,MAAMC,QAAQF,GAAI,OAAO,KAC/CD,IAAMC,EAAG,OAAO,KAChBD,EAAEnD,SAAWoD,EAAEpD,OAAQ,OAAO,MAC7B,GAAIuD,GAAI,EAAGA,EAAIJ,EAAEnD,SAAUuD,KAC1BJ,EAAEI,KAAOH,EAAEG,GAAI,OAAO,SAErB,gFCdTC,EAAAC,EAAAD,+BAAgB,SAAAE,EAAAC,QACRD,YAANC,SACQ,IAAA9C,WAAN,wCCFY,mBACd+C,GAAAC,EAAAC,OACO,GAAIP,GAAT,EAAgBA,EAAIO,EAApB9D,OAAAuD,IAAuC,IACjCQ,GAAaD,EAAjBP,KACAS,WAAwBD,EAAAC,aAAxB,IACAC,cAAA,EACI,SAAJF,KAA2BA,EAAAG,UAAA,UAC3BC,eAAAN,EAA8BE,EAA9BK,IAAAL,UAIG,UAAAJ,EAAAU,EAAAC,SACLD,IAAgBT,EAAiBD,EAAjBY,UAAAF,GAChBC,GAAiBV,EAAAD,EAAAW,GACjBX,MLgBSa,EAASlC,OAAOmC,SAASC,SAASC,QAAQ,gBAAiB,EAAK,SAAW,QM3BlFC,EAAAC,OAAYC,WAChBC,kBACS5E,UAAA4E,SAAoB5E,SAApB4E,SAAP,OAEFC,mFACUC,KACA3C,OAAA4C,UAAAC,WADR,QAOFC,oBACS,MAAA9C,OAAAmC,SAAAY,UADQ,IAC4BxD,KAAAyD,gBAE7CC,oBACS1D,MAAAuD,WAAA,YAAP,eAMFI,aACQC,GAAa,kCAAAC,KAAuCpD,OAAAmC,SAA1DC,UACM5D,EAAS2E,EAAaA,EAAb,GAA6BnD,OAAAmC,SAA5CC,eACA5D,OAcF6E,WACMC,GAAe/D,KAAAgE,WAAA,MAAkBhE,KAAAgE,UACnCvD,OAAAmC,SAAAY,SAAAzF,MAAA,KAAAkG,MAAA,GAA6C,GAC7CxD,OAAAmC,SAAAY,SAAAzF,MAAA,KAAAkG,MAFF,cAGeC,OAAoB,SAAAJ,SACnC,kBAAAA,GADmC,mBACPA,MACrBjG,IACA,SAAAsG,aAAAA,IADAtG,IAEA,SAAAsG,EAAAC,EAAAC,YAAyBJ,MAAA,EAAaG,EAAb,GAAAE,OACpB,SAAAC,EAAAC,SAAmBD,GAAAE,OAAnBD,WAOdf,kBACQiB,QAAM,OAAA,OAAZ,SAKO,SAAAjE,OAAAmC,SAAA+B,KAAkCD,EAAlCE,IACJnE,OAAAmC,SAAAC,SAAAC,QAAA,sBAAwD,GACtDrC,OAAAmC,SAAAC,SAAAC,QAAA,yBAA2D,EAAM4B,EADpEtB,KAEG3C,OAAAmC,SAAAY,SAAAV,QAAA,6BAA+D,GAC7DrC,OAAAmC,SAAAY,SAAAV,QAAA,+BAAiE,EAChE4B,EAFJG,KAHJpH,WAWFuG,gBACQc,GAAiB,WAAAjB,KAAgBpD,OAAAmC,SAAvCY,UACIQ,EAAJ,UACAc,OACcA,EADMC,OAGpBf,YAGAgB,iBACShF,MAAAiF,YAAP,mBAEFC,gBACSlF,MAAAiF,YAAP,kBAEFE,gBACSnF,MAAAiF,YAAP,kBAEFG,kBACSpF,MAAAiF,YAAP,sCAXE1C,MAcI8C,GAAUC,OAAA,IAAA/C,EAAA,gBAAAsB,KAAmCpD,OAAAmC,SAAnD2C,cACOF,IAAWA,EAAX,GAAwBA,EAAxB,GAAP5H,YAGJ+H,qBACMA,IAAJ,MAEMC,aAAAC,QAAJ,wBACE,GAGJ,MAAAC,UAGAH,OAEFI,mBACMA,GAAJ,GACMC,EAANxH,QAEMwH,GAAaA,EAAjBC,YACiB,cAACA,QAAA,SAAhB,cAIJ,MAAAH,UAGAC,OAEFG,0BACMC,GAAA,aAEcP,aAAAC,QAAA,iBACdO,KAAAC,MAAWT,aAAAC,QADG,kBAAhBjI,OAGF,MAAAkI,KAGElI,aAEKuI,GAAgBA,EAAhBG,eAAP1I,uDAG8B,qBAAA,kBAIZ,SAAhB,YAAAgH,QAA0C,SAJd,qBAAA,gBAAA,iCAQpB,SAAN,YAAAA,QAAgC,SADT,iBAElB,SAAL,YAAAA,QAA+B,SAFR,gBAGnB,SAAJ,YAAAA,QAA8B,SAHP,gBAInB,SAAJ,YAAAA,QAA8B,SAJP,gBAKnB,SAAJ,YAAAA,QAA8B,SALP,iBAMlB,SAAL,YAAAA,QAA+B,SANR,kBAOjB,SAAN,YAAAA,QAAgC,SAdN,gCAAA,mEA1IF,8DA8Jb,kBA9Ja,2CAmK5B9D,kBACQyF,IADU,QAETA,GAAUpG,KAAVqG,aAA8BrG,KAArCsG,gCAGY,OAAA,MAAA,MAAA,OAAA,QAAA,SANG,wBAgBH,OAAA,MAAA,OAAA,OAAA,QAAA,SAlLc,wBA4LlB7I,WAAAA,cA5LkBA,mEAmM1B,6BADuB,gCAKvB,6BAvM0B,0EA8MZ,iCAAA,0BAAA,WAIJ,GAADyB,OAlNiBqH,uDAqNR,wBArNQ,OAAd5D,GA2NflC,OA3NHsC,WJDMpC,EAAcoC,EAAAyD,kBAApB7F,YKEa8F,eAAO,wBAAA,2BAAA,iCAAA,kBAAA,iBAAA,wBAAA,uBAAA,YAAA,eAAb,8BAqBLC,UACEC,QAAAC,KAAY,GAAD1H,OADwBqH,eAEnCM,OAAc7D,OAAAC,UAAdyD,QACAI,YAAmB9G,KAAnB+G,+BACAC,sFAIAhH,KAAM8G,EAAc9G,KAApBiH,gCAKAR,KAAAK,GAAAjJ,IAA6B,SAAA0E,EAAA6B,YAC3B7B,GAAmBS,OAAAC,UAAkB6D,EAAlBvE,GAAoC2E,EAAAL,OAAvDtE,IAED2E,QAKI,GAAL3E,KAAAuE,QACMK,eAAAC,KAAAN,EAAJvE,KACOuE,EAAAvE,GAAiBkE,EAAtBY,kBAESP,GAAPvE,UAKNuE,0DAIA9G,KAAI8G,EAAA,OACAQ,EAAA,aAEgB7G,OAAAgF,aAAAC,QAA4Be,EAA9CK,aAEF,MAAAnB,KAEElI,aAGcwI,KAAAC,MAAdoB,GAEF,MAAA3B,WAGQ4B,GAAAD,EAAsBvJ,MAAA,KAAAmG,OAAkC,SAAAsD,SAAAA,OAE9DxJ,QAA4B,SAAAyJ,UAElBC,GAAmBD,EAAA1J,MAAzB,OACM4J,EAAOD,EAAb,GACME,EAAOF,EAAb,GACMG,EAAMF,EAAA5J,MAAZ,KACIiE,EAAS6F,EAAb9C,KACI/C,IAAJ,OAAcA,MACZ,eAEI8F,GAASD,EAAAE,KAAf,KACMC,EAAAF,EAAA,IAAN9F,EACMiG,EAAUlJ,SAAS6I,EAAA7J,MAAA,KAAT,GAAA,KAAhB,EACMmK,EAAUnJ,SAAS6I,EAAA7J,MAAA,KAAT,GAAA,KAAoCoK,EAApDvB,MACAoB,QACAA,GAAgBvB,EAAhB2B,UAAAN,IACAE,GAAgBvB,EAAhBzE,QAAAA,IACAgG,GAAgBvB,EAAhBwB,SAAAA,IACAD,GAAgBvB,EAAhByB,SAAAA,EAEF,MAAAG,aAKGvB,+DAOH9G,KAAAsI,eAAJ,kBAAiCtI,MAAPsI,mBACxBA,sBAGAA,cAAqB7I,EAASO,KAATuI,kCAAA,KAArB,QACAD,8FASAE,QAAqB/B,EAArBK,YAAuCb,KAAAwC,UAAezI,KAAtD8G,cAEF,MAAAnB,WAGE+C,MAAA,gCAHU/C,sDAYZ3F,YAAAyG,KAAYzG,KAAZ6G,QAAAhJ,IAA6B,SAAA0E,EAAA6B,MACrBgE,GAAN7F,EACMoG,EAAOC,EAAA9B,YAAbsB,GACIS,GAAJ,QAEAF,GAEMC,EAAA/B,OAAAuB,GAAsB3B,EAAtBY,aAA0CsB,EAAKlC,EAAnDY,eAEE,IACAP,YAAAsB,GAA2B3B,EAA3BY,WAA6CuB,EAAA/B,OAAAuB,GAAsB3B,EAAnEY,YAEOuB,EAAAhC,IAAW+B,EAAKlC,EAApByB,cAEH,KAIFY,mBAAAV,GAEFS,KACEE,iBAAAX,GAGHQ,6CAOcI,MACTpC,GAAM,GAAZ1H,UACMc,KAAA8G,YAAAkC,KAA8BhJ,KAAA8G,YAAAkC,GAA2BvC,EAA/DY,gBACQ,IAAA4B,OAAA,0CAAAD,EAAA,wCAC0BhJ,KAAA8G,YADhCkC,OAGIE,GAAelJ,KAAA8G,YAAAkC,GAA2BvC,EAA3BY,WAAA8B,MAAiD1C,EAAtE2C,kBACAC,gBAAA,KACAC,WAAA,KACAC,WAAA,GACIL,EAAApG,QAAqB2D,EAArBnH,OAAkC,KACpCH,SAAA,QAEF2H,YAAAkC,GAA2BvC,EAA3ByB,UAA4CgB,EAAApG,QAAqB2D,EAArBnH,OAAkC,EAC5ED,EAAAuH,EAAasC,EAD6B,IACVxK,EAAAkI,EAAcsC,EADL,KAA3C3C,eAIAO,YAAAkC,GAA2BvC,EAA3B+C,gBAAkDzK,SAASmK,EAAT,GAAlD,SAEApC,YAAAkC,GAA2BvC,EAA3BwB,SAAA,6CAOiBe,MACXL,GAAO3I,KAAA8G,YAAAkC,SACRvC,EAALY,WAAuBrH,KAAA6G,OAAAmC,GAAsBvC,EAA7CY,aACKZ,EAALzE,QAAoBhC,KAAA6G,OAAAmC,GAAsBvC,EAA1CzE,UACKyE,EAALwB,SAAA,OACAnB,YAAAkC,GAAAL,OACAI,iBAAAC,8CAQiBZ,MACjBA,EAAc,IACNO,GAAO3I,KAAA8G,YAAbsB,MACAO,EAAU,IACFV,GAAUU,EAAKlC,EAArBwB,YACInJ,MAAMC,SAAAkJ,EAAN,QAAJ,EAA4C,MAC1CnB,YAAAsB,GAA2B3B,EAA3BwB,UAAA,WAEEwB,gCAEF,MAAA9D,WAGA,WAIN,6CAWMqD,GAAWhJ,KAAA8G,YAAA,GAAAsB,EAA+BrF,EAA/BW,YAAA,GAAA0E,EACDrF,EADCW,WAAA0E,EAAjB,OAGMO,EAAO3I,KAAA8G,YAAbkC,GACIU,GAAJ,KACAf,EAAU,IACF/B,IAAO,GAAD1H,OAAZqH,UAEM2B,EAAUlI,KAAA8G,YAAAkC,GAA2BvC,EAA3CyB,YACIA,EAAJtB,OACEmC,iBAAAC,OAEG,IACGQ,GAAiBxJ,KAAA8G,YAAAkC,GAA2BvC,EAAlD+C,eAEAA,OACYxJ,KAAA8G,YAAAkC,GAA2BvC,EAA3BwB,UAAVuB,UAINE,iDAQM5C,GAAc9G,KAApB8G,gBACK,GAALvE,KAAAuE,QACMK,eAAAC,KAAAN,EAAJvE,IACMuE,EAAAvE,GAAiBkE,EAArBwB,aACE1F,GAAiBkE,EAAjBwB,SAAA,QAINwB,yCC3QSE,SAAY,mBAAA,uBAAlB,aAMcC,EAAA,sBACnB/C,UACE+C,QAAA/C,OAAc7D,OAAAC,UAAkB4D,EAAhCgD,eACMhE,GAANxH,SACAsE,OAAcI,EAAd+G,IACKjE,EAAU7F,KAAf2C,eAEEA,OAAc,UAAA3C,KAAA2C,OAAA,SAAd,cAEFoH,KAAY/J,KAAAgK,YAAZnE,QACAoE,kBAAyB,GAAAtD,GAAsBE,EAA/CH,8BACAwD,IAAWlK,KAAAmK,WAAXtE,QACAuE,OAAcpK,KAAAqK,cAAdxE,iDAGUA,MACNyE,GAAA,UACAzE,GAAaA,EAAU7F,KAA3B2C,QAAyC,IACjC4H,GAAY9J,OAAAmC,SAAAC,SAAAC,QAAA,gBAAkD,EAAlD,UAAlB,YAEW+C,EAAA0E,GAAuBZ,EAAvBa,MAAyCb,EAApDc,kBAGWd,EAAXe,gBAEFJ,4CAIIJ,GAAA,OACES,EAAQ9E,EAAU7F,KAAV2C,SAA0BkD,EAAU7F,KAAV2C,QAAxCgI,YACAA,OACQ5L,SAAS8G,EAAU7F,KAAV2C,QAATgI,MAAN,MACMT,EAAA,EAAAA,EAANzM,QAEFyM,wCAGYrE,MACRuE,GAAA,OACEQ,EAAQ/E,EAAU7F,KAAV2C,SAA0BkD,EAAU7F,KAAV2C,QAAxCiI,YACAA,OACW7L,SAAS8G,EAAU7F,KAAV2C,QAATiI,MAAT,MACS,IAAAR,GAAA,IAAgBA,EAAhBA,EAAT3M,QAEF2M,WCvDES,EAAA,sBACJC,UACED,QAAAE,cAAqB/K,KAAAgL,wBAArBF,QACAG,cAAqB,GAArBC,wEAGAlL,KAAMmL,EAAQ,GAAdC,mBACA3E,KAAA4E,GAAAxN,IAAwC,SAAA0E,EAAA+I,MAClCC,GAAQF,EAAZ9I,SACAgJ,SACUrH,OAAa,SAAAsH,SAAUA,GAAAC,QAAeD,EAAzBE,WAEvBC,IAAApJ,MAAeA,QAAAgJ,eAAf,OAMDrE,IACDiE,6CAGiB/C,EAAUwD,OAC3BxD,OACQ,IAAAa,OAAN,2DAEF2C,OACQ,IAAA3C,OAAN,0DAEEjJ,MAAA+K,cAAAc,IAAJzD,UACE2C,cAAAe,IAAA1D,GAAA2D,aAAAH,uCAKMxD,SACRpI,SAAAoI,OACQ,IAAAa,OAAN,iDAEE+C,IAJc,KAAA,KAAA,IAAAvO,kBAKlBwO,KAAwBjM,KAAA+K,cAAxBtE,OAAAyF,OAAAC,cAAAC,GAAAH,EAAAI,EAAAC,QAAAC,MAAAH,GAAA,EAAmD,IAAxCI,GAAAP,EACTX,MAAMmB,EAASzM,KAAA+K,cAAAe,IADkCU,MAAA,KAAA,IAAA/O,kBAEjDiP,KAAyBD,EAAzBlB,MAAAW,OAAAC,cAAAQ,GAAAD,EAAAE,EAAAN,QAAAC,MAAAI,GAAA,EAAuC,IAA5BE,GAAAH,EACTpB,KACIuB,GAAAnB,QAAJtD,kBACQ0E,GAAqBL,EAA3BV,YAEAe,QACE,IACA7B,cAAA8B,IAAA3E,MAEEqD,OAAA1N,MAAA,KAAAiP,KAAkC,SAAAC,MAC9BC,GAAAD,EAAOlP,MAAA,KAAAF,IAA0B,SAAAsP,SAAapO,UAAAoO,EAAb,YAChChF,GAAAiF,YAAAF,EAAPJ,SAGA7B,cAAA8B,IAAA3E,MACA,mBAjB2C,IAAAzC,8BAAA0H,2BAAAC,kBALjC,IAAA3H,8BAAA0H,2BAAAE,UA2BlBvB,wCAGS5D,OACTA,OACQ,IAAAa,OAAN,kDAEEuE,IAJe,KAAA,KAAA,IAAA/P,kBAKnBgQ,KAAwBzN,KAAA+K,cAAxBtE,OAAAyF,OAAAC,cAAAuB,GAAAD,EAAAE,EAAArB,QAAAC,MAAAmB,GAAA,EAAmD,IAAxClB,GAAAiB,EACTnC,KAAIkB,KAAJpE,OACE,gBAPe,IAAAzC,8BAAA0H,2BAAAO,UAUnBJ,8CAQiBpF,MACbnJ,GAAA,aACAe,MAAA+K,cAAAc,IAAJzD,aACWyF,KAAA7N,KAAW+K,cAAAe,IAAA1D,GAAAmD,MAAA1N,IAA2C,SAAA4O,SAAUA,GAAVf,UAE1DzM,4CAGMsC,MACTD,IAAJC,EAAa,OAAA,KACT,OAAAD,GAAJ,OAAkBC,EAAY,OAAA,KAC1BD,EAAAnD,SAAaoD,EAAjBpD,OAA2B,OAAA,MACtB,GAAIuD,GAAT,EAAgBA,EAAIJ,EAApBnD,SAAAuD,KACMJ,EAAAI,KAASH,EAAbG,GAAmB,OAAA,SAErB,WAGJmJ,EAAAiD,sCC/FEC,aACEtB,QAAA5F,OAAc7D,OAAAC,UAAd8K,QAGA/F,GAAUhI,KAAA6G,OAAVmB,IACKhI,KAAA6G,OAALmB,QACQ,IAAAiB,OAAN,kCAEFjH,OAAchC,KAAA6G,OAAd7E,YACA+H,KAAY/J,KAAA6G,OAAZkD,UACAiE,WAAkBhO,KAAA6G,OAAlBmH,gBACAC,MAAajO,KAAA6G,OAAboH,WACAC,KAAYlO,KAAA6G,OAAZqH,UACAC,UAAiBnO,KAAA6G,OAAjBsH,eACAC,YAAmBpO,KAAA6G,OAAnBuH,iBACAC,SAAgBrO,KAAA6G,OAAhBwH,cACAC,aAAoBtO,KAAA6G,OAApByH,kBAGA5K,WAAkB1D,KAAA6G,OAAlBnD,gBACA6K,QAAevO,KAAA6G,OAAf0H,aACAC,WAAkBxO,KAAA6G,OAAlB2H,gBAGAC,cAAqBzO,KAAA6G,OAArB4H,mBACAC,wBAA+B1O,KAAA6G,OAA/B6H,6BACAC,mBAA0B3O,KAAA6G,OAAA8H,mBACxB3O,KAAA6G,OAAA8H,mBAAA5Q,MADwB,aAE1B6Q,mBAA0B5O,KAAA6G,OAAA+H,mBACxB5O,KAAA6G,OAAA+H,mBAAA7Q,MADwB,aAK1B8Q,iBAjCwBpR,YAkCxBqR,2BAlCwBrR,YAmCxBkL,KAnCwBlL,WAsCjBuC,KAALsO,oBACE3F,KAAY3I,KAAZ+O,cAGJ,MAAApJ,WACE+C,MADU/C,uDAWZ,gBAAW3F,MAAP+J,UACI,IAAAd,OAAA,gCAANjJ,SAEEA,KAAAmD,cAAJ,SACE,SAEMnD,KAAR+J,UACOiF,GAALC,gBAAuB,MAClBD,GAALE,gBAAuB,MAClBF,GAALG,gBAAuB,MAClBH,GAALI,eAAsB,iBAJxB,2CAeA,gBAAWpP,MAAP+J,UACI,IAAAd,OAAA,gCAANjJ,SAEEA,KAAAmD,cAAJ,SACE,SAEMnD,KAAR+J,UACOiF,GAALC,gBAAuB,iBADzB,6GAOQ7L,KACA3C,OAAA4C,UAAAC,WADR,+CAWI+L,IAAJ,KACA,IAAIrP,KAAA4O,mBAAAzQ,OAAsC,QAAA,KAAA,IAAAV,kBACxCwO,KAAuBjM,KAAvB4O,mBAAA1C,OAAAC,cAAAC,GAAAH,EAAAI,EAAAC,QAAAC,MAAAH,GAAA,EAAgD,IAArClJ,GAAA+I,EACTX,SAAIvI,EAAAG,SAAAJ,QAAAI,IAA0C,EAAI,IAChD,sBAHoC,IAAAyC,8BAAA0H,2BAAAE,aASxC,QAEF8B,8CAWIC,IAAJ,KACA,IAAItP,KAAA2O,mBAAAxQ,OAAsC,QAAA,KAAA,IAAAV,kBACxCiP,KAAuB1M,KAAvB2O,mBAAAzC,OAAAC,cAAAQ,GAAAD,EAAAE,EAAAN,QAAAC,MAAAI,GAAA,EAAgD,IAArCzJ,GAAAwJ,EACTpB,SAAIvI,EAAAG,SAAAJ,QAAAI,IAA0C,EAAI,IAChD,sBAHoC,IAAAyC,8BAAA0H,2BAAAC,WAQ1CgC,wCASAtP,MAAKA,KAADuP,QAAJ,SACEA,OADwB,YAExBC,IAAAC,KAAmB,WACbvI,EAAJoH,iBACE3F,KAAYzB,EAAZ6H,uBAGFW,eAAwBxI,EAAxBc,IAAA2H,UAAAC,OAAA,sBACAC,QAAkB3I,EAAlBc,4CAUJhI,eAAAwP,IAAAC,KAAmB,oBACjBC,eAAwBvH,EAAxBH,IAAA2H,UAAA5C,IAAA,sDASE/M,KAAJ8P,aAAuB,IACfC,GAAe/P,KAArBgQ,uBACIhQ,MAAAmO,UAAA8B,uBAAJjQ,QACOA,KAALuP,aACEA,OADe,IAEfM,YAGJE,KAEIG,GAAYzP,OAAlByP,UACMC,EAASD,EAAfC,SACMlQ,KACAmQ,EAAWpQ,KAAAqQ,cAAqBH,EAArBI,oBAAqDJ,EAAtEnB,aAEAU,KAAUzP,KAAVuQ,WACIvQ,KAAAqQ,iBAAJ,IACMrQ,KAAJiO,QACEwB,KAAA,WAGAA,KAAUzP,KAAVyO,kBAGJgB,KAAUzP,KAAVgI,OACIW,GAAOyH,EAAAjQ,MAAAiQ,EAAXnQ,MACA0I,EAAU,IAEJ3I,KAAJgO,WAAqB,IACfwC,GAA4BN,EAAhCO,cACM9P,EAAcoC,EAAAyD,kBAApB7F,YACM8F,EAAOzD,OAAAyD,KAAYzG,KAHN0O,4BAAA,KAAA,IAAAjR,kBAInBgQ,KAAAhH,EAAAyF,OAAAC,cAAAuB,GAAAD,EAAAE,EAAArB,QAAAC,MAAAmB,GAAA,EAAwB,IAAbnL,GAAAkL,EAAenC,QACxBoF,SACG/P,EAAD4B,GADF,UAEEmM,wBAFFnM,iBALiB,IAAAoD,8BAAA0H,2BAAAO,MASS4C,EAA5BG,UACOhI,EAAAiI,kBAAPJ,KAEK7H,EAAAkI,WAAPV,GACInQ,KAAAqQ,iBAAJ,KACES,qBAAA,SAGJnI,2CAQA3I,KACI8D,EAAOf,EAAAe,aACJI,OAAY,SAAAJ,SAAA,MAAQA,QACpBjG,IAAS,SAAAsG,YAAcyE,EAAdZ,GAAwBY,EAAxBlF,WAAAS,IAAT4D,KAAP,OAEOjE,GAAA,cAAQ9D,KAAA6G,OAAAnD,WAAR,IAAAI,EAAP,MAEMiN,GAAA,IAAqB/Q,KAAA6G,OAArB0H,QAAA,IAA4CvO,KAAA6G,OAA5C2H,WAAA,IAAsExO,KAAtEgI,GAAA,IAAiFhI,KAAjFgI,GAA2FhI,KAA3F0D,WAREI,QASDiN,GAAPC,mDAIWC,GACAA,EAAAtI,KAAAuI,gBAAAnT,MAAA,KADO,GAEFkT,EAFEE,QAGGF,EAHH/D,6CAYlBlN,eAAAwP,IAAAC,KAAmB,qBACjBU,SAAAiB,SAA4BC,EAA5B1I,sDASGrK,SAAA4E,SAAAiG,MAAL,eAA6C,IACrCmI,GAAqBtR,KAA3BuQ,UACMgB,IACJ,EADF,IAGM5I,EAAOuH,UAAAC,SAAAqB,eAAAF,EAAAC,GAAAE,aAAA,YACgBzR,KAAAkO,KADhBnE,OAAA0H,aAAA,OAEWzR,KAAAkO,KAFXhE,MAAAuH,aAAA,SAGazR,KAAAkO,KAHb9D,SAAAqH,aAAA,aAIiB1O,EAJjBiB,YAAAyN,aAAA,OAKW1O,EALxBU,oBAMAkF,SAEF,eCxQS+I,QAAe,cAAA,aAArB,OAMMC,OAAY,gBAAA,sBAAA,uBAAA,oBAAA,qBAAA,8BAAlB,mBAWMC,aAAY,uBAAA,mBAAlB,SAMM5C,YAAU,qBAAA,qBAAA,oBAAhB,4BAULnI,SAAoB7G,YAClB6R,QAAAhL,OAAc7D,OAAAC,UAAd4D,QACAqH,KAAY,GAAAtE,GAAZ/C,QACAiL,iBAAwB,GAAAjH,GAAqBhE,EAA7CiE,wCAUE0E,IAAAC,KAAmB,aAAMsC,8BAAAC,6BAAAC,uCAMzBzC,IAAAC,KAAmB,aACjByC,QAAehL,EAAAiL,YAAiBtL,EAAjBkH,aAAsC2D,EAArDU,iBAGFC,iBAAA,mBAA8C,qBAC5C7C,IAAAC,KAAmB,aACjByC,QAAehL,EAAAiL,YAAiBtL,EAAjBkH,aAAsC2D,EAArDU,gBACA5C,IAAAC,KAAmB,aACjByC,QAAehL,EAAAiL,YAAiBtL,EAAjBkH,aAAsC2D,EAArDY,qBAKND,iBAAA,OAAgC,qBAC9B7C,IAAAC,KAAmB,aACjByC,QAAehL,EAAAiL,YAAiBtL,EAAjBkH,aAAsC2D,EAArDa,SAIN,MAAA5M,WACE+C,MADU/C,4DAQC,KAAA,IAAAlI,kBACbwO,KAAwBjM,KAAAkS,QAAxBzL,OAAAyF,OAAAC,cAAAC,GAAAH,EAAAI,EAAAC,QAAAC,MAAAH,GAAA,EAA6C,IAAlCI,GAAAP,EACTX,MAAMkH,EAASxS,KAAAkS,QAAApG,IAAfU,EACIgG,GAAAzI,OAAgBiF,EAAhBG,UAAoCnP,KAAAiQ,uBAAxCuC,MACEC,oBAJS,IAAA9M,8BAAA0H,2BAAAE,6DAgBbmF,GAAAF,SACSA,GAAAnE,WAAPA,QAEK7M,OAAAqM,KAAW7N,KAAAkS,QAAXS,UAAAzO,OAAPwO,yDAGqB,KAAA,IAAAjV,kBACrBiP,KAA6B1M,KAAA8R,iBAA7B7G,cAAAiB,OAAAC,cAAAQ,GAAAD,EAAAE,EAAAN,QAAAC,MAAAI,GAAA,EAAkE,IAAvDiG,GAAAlG,EACTpB,SAAItL,KAAAkS,QAAArG,IAAJ+G,KACO5S,KAAA8R,iBAAA9F,UAAL4G,GAAsD,IAC9CC,GAAiB7S,KAAAkS,QAAApG,IAAvB8G,EACI5S,MAAAiQ,uBAAJ4C,MACEJ,qBANa,IAAA9M,8BAAA0H,2BAAAC,kDAiBfwF,GADUxS,OAAA,KAAA,IAAA7C,kBAEhBgQ,KAAwBzN,KAAAkS,QAAxBzL,OAAAyF,OAAAC,cAAAuB,GAAAD,EAAAE,EAAArB,QAAAC,MAAAmB,GAAA,EAA6C,IAAlClB,GAAAiB,EACTnC,MAAMkH,EAASxS,KAAAkS,QAAApG,IAAfU,EACIgG,GAAJxE,aACMwE,EAAA1D,6BAAAgE,GACF9S,KAAAiQ,uBADFuC,KAGEpB,YAGA2B,qBAXU,IAAApN,8BAAA0H,2BAAAO,2CAyBQoF,SACxBhT,KAAMkS,EAAU,GAAA9G,KAAQpL,KAAxBkS,SACIe,EAAqBzR,MAAAqM,KAAWvP,SAAA4U,uBAApC,kBACqBhP,OAA0B,SAAAiP,SAAQA,GAARnL,QACzCoL,GAAgB,GAAtBlI,oBACqBxI,UAAAwB,OAAAkD,KAAA6L,EAAgD,SAAAE,SAC/DC,GAAAvH,IAAkBsH,EAAlBnL,OAAJ,MACE+E,IAAkBoG,EAAlBnL,KACA,OAKJhK,QAA2B,SAAAwU,MACnBa,GAAiBtF,EAAayE,EAAbxK,IACvB+F,EAAayE,EAAbxK,IAAAqG,UAAoCqD,EADbY,OAAvB7U,UAEIsQ,EAAayE,EAAbxK,KAA2BkK,EAAArG,IAAY2G,EAAZxK,OAA3B,GACFqL,IADFL,SAKUM,GAAAtQ,OAAuBC,UAAkB8K,EAAayE,EAA/BxK,QACvBwK,EADkExK,UAE9DwK,EAAAe,WAAA,kBACNf,EAAAe,WAAA,kBADMjI,MACsCqG,EAHwB6B,SAIhErL,EAAAsL,UAAejB,EAJiDxK,eAK1D+F,EAAayE,EAAbxK,IAL0DgG,iBAM/DD,EAAayE,EAAbxK,IAAAiG,QAN+D,OAOhE9F,EAPgE+F,eAAA/F,cAAAqK,aAU1DrK,EAAAtB,OAV0DnD,mBAW7DyE,EAAAtB,OAAA6M,gBAX6DnF,mBAY1DpG,EAAAtB,OAAA6M,gBAZ0DlF,wBAaxDrG,EAAA2J,iBAAA9F,UAAgCwG,EAbwBxK,aAAxEqL,IAgBMM,EAAiB,GAAAlH,GAAvB6G,KACA3H,IAAY6G,EAAZxK,GAAA2L,GACIA,EAAA5J,OAAwBiF,EAAxBG,UACFwE,EAAAtF,WAA4BqD,EAD1BU,MAEFjK,EAAA8H,uBAFF0D,MAOElB,OAGJ,MAAA9M,WACE+C,MADU/C,MAKhBuM,qCAGS9J,SACD,gBAAAA,KACPA,EAAAtF,QAAA,UAAA,GACDsF,EAAAtF,QAAA,YADC,GAEDsF,EAAAtF,QAAA,YAHA,qCAWQsF,OACRA,OACQ,IAAAa,OAAN,qEAEEb,GAAAtF,QAAiBkM,EAAjBC,WAAqC,EAAWD,EAAPC,SACzC7G,EAAAtF,QAAiBkM,EAAjBE,WAAqC,EAAWF,EAAPE,SACzC9G,EAAAtF,QAAiBkM,EAAjBG,WAAqC,EAAWH,EAAPG,SACtCH,EAAPI,uDAOqBoD,SAEdxS,MAAA8R,iBAAA9F,UAAgCwG,EAAhCxK,OAAA,KAAA4L,mBAILC,mBAJK,GAKL7T,KAAA8T,mCALKtB,SAOLuB,wBAPKvB,SASLwB,iCATKxB,SAWLtE,KAAAjE,kBAAAgK,aAAyCzB,EAAzCxK,OAXF,6DAciCwK,WACxBxS,KAAA6G,OAAArB,kBAAA,IACRgN,EAAAzI,OAAgBiF,EAAhBC,UACDuD,EAAAzI,OAAgBiF,EAFhBE,oEAU+BgF,MACzB5J,GAAWtK,KAAAkO,KAAjBnE,KACMoK,EAAW,gBAAAD,GAAAA,EAAsDA,EAAvElS,cAEAmS,OACOxC,GAAL6B,WAAqB,MAChB7B,GAALyC,gBACS9J,KAAasH,EAAblH,WAAoCJ,IAAasH,EAAxDnH,eACGkH,GAALjH,gBAAkCJ,KAAasH,EAApBlH,cACtBiH,GAALlH,iBAAmCH,KAAasH,EAApBnH,eACvBkH,GAAL0C,aAA+B/J,KAAasH,EAApBpH,UACnBmH,GAAL2C,kBAAoChK,KAAasH,EAApBpH,UACxBmH,GAAL4C,sBAAwCjK,KAAasH,EAApBpH,qBARnC,uDAoBAjK,OACQ,IAAA0I,OAAN,+EAEEuL,GAJ2B,KAAA,KAAA,IAAA/W,kBAK/BgX,KAAwBzU,KAAAkS,QAAxBzL,OAAAyF,OAAAC,cAAAuI,GAAAD,EAAAE,EAAArI,QAAAC,MAAAmI,GAAA,EAA6C,IAAlClI,GAAAiI,EACTnJ,MAAMkH,EAASxS,KAAAkS,QAAApG,IAAfU,EACIgG,GAAAxE,cAAA,GAA8BwE,EAAlC1D,4BACM0D,EAAA1D,6BAAJvO,MACE6Q,4BATyB,IAAAzL,8BAAA0H,2BAAAuH,UAc/BJ,yDAS8BjU,GAAAX,UAAAzB,OAAA,GAAAV,SAAAmC,UAAA,GAAAA,UAAA,GAAaU,QAC3CkS,OACQ,IAAAvJ,OAAN,8EAEE4L,IAAJ,KACIrC,EAAAxE,cAAJ,EAAgC,IACxB8G,GAAUtC,EAAA9D,wBAA+BvN,EAA/CZ,OACIiB,MAAAC,QAAAqT,MAAJ,OACQ,IAAA7L,OAAA,gCAAA1I,EAAA,kBAANP,QAEmB8U,EAAA3W,OAAA,IAAuBkD,EAAAyT,GAAqB,EAAjE,UAEFD;uBAOA7U,SAAIS,OAAAyP,YAAoBzP,OAAAyP,UAAxB6E,cA+BQ,IAAA9L,OAAN,8EA9BMkH,GAAS1P,OAAAyP,UAAfC,WACAkC,iBAAA,kBAA2C,SAAApB,MACnCjJ,GAAKiJ,EAAAtI,KAAAuI,gBAAAnT,MAAA,KAAX,GACMoT,EAAUF,EAAhBE,QACMvF,EAAeqF,EAArB/D,QAEItE,EAAAsJ,QAAArG,IAAJ7D,GAA0B,IAClBwK,GAAS5J,EAAAsJ,QAAApG,IAAf9D,KACA6G,iBAAAjD,IACAkD,2BAAAxO,IACA6Q,KACEtC,iBAA0BhE,EAA1BiD,aACAiF,SACAiC,wBAAAxC,OAGAtE,KAAAjE,kBAAAgL,mBAAA,GAAkDzC,EAAlDxK,GAA8DY,EAAA/B,OAA9DnD,cACAwK,KAAAjE,kBAAAgL,mBAAkDzC,EAAlDxK,GACA,UAAAgN,wBAAAxC,EAAqCA,EAArC3D,gFAkBA7G,GAAKwK,EAAXxK,WACA8J,iBAAAoD,mBAAAlN,EAA6CwK,EAA7C3D,kBACI7O,KAAA8R,iBAAAtE,WAAJxF,GAA0C,QAAA,KAAA,IAAAvK,kBAExC0X,KAA0BnV,KAAA8R,iBAAAsD,mBAA1BpN,GAAAkE,OAAAC,cAAAkJ,GAAAF,EAAAG,EAAAhJ,QAAAC,MAAA8I,GAAA,EAAwE,IAA7DE,GAAAJ,EACT7J,KAAItL,MAAA8R,iBAAA9F,UAAJuJ,IACMvV,KAAAkS,QAAArG,IAAJ0J,SACErD,QAAApG,IAAAyJ,GAAAxC,oBALkC,IAAApN,8BAAA0H,2BAAAmI,WAAA,KAAA,IAAA/X,kBAUxCgY,KAA8BzV,KAAA8R,iBAAA7G,cAA9BxE,OAAAyF,OAAAC,cAAAuJ,GAAAD,EAAAE,EAAArJ,QAAAC,MAAAmJ,GAAA,EAA0E,IAA/DE,GAAAH,EACTnK,MAAMuH,EAAiB7S,KAAAkS,QAAApG,IAAvB8J,EACI/C,IAAkB7S,KAAAiQ,uBAAtB4C,UACEf,iBAAA7G,cAAA4K,OAAAD,GACI/C,EAAJvE,iBACES,eACAT,cAAA,KAEFmE,qBAlBoC,IAAA9M,8BAAA0H,2BAAAyI,MAuB5C,MAAAnQ,WAEE+C,MAAA,6CAA2D8J,EAA3DxK,6DASEvH,OAAAyP,YAAoBzP,OAAAyP,UAAxB6E,cAuDQ,IAAA9L,OAAN,+EArDMkH,GAASD,UAAfC,QAEInQ,MAAA6G,OAAJpD,eACEgO,aAAA,OAA4BzR,KAAA6G,OAA5BpD,cAIEzD,KAAAkO,KAAJnE,QACE0H,aAAA,YAAiCzR,KAAAkO,KAAjCnE,OAEE/J,KAAAkO,KAAJhE,OACEuH,aAAA,OAA4BzR,KAAAkO,KAA5BhE,MAEElK,KAAAkO,KAAJ9D,UACEqH,aAAA,SAA8BzR,KAAAkO,KAA9B9D,SAIEpK,KAAA6G,OAAJ7C,aACEyN,aAAA,aAAkCzR,KAAA6G,OAAlC7C,YAEEhE,KAAA6G,OAAAd,qBAAmC/F,KAAA6G,OAAAd,uBAAoC,KACzE0L,aAAA,qBAA0CzR,KAAA6G,OAA1Cd,sBAKE/F,KAAA6G,OAAAkP,KAAJ/Q,WACEyM,aAAA,eAAoCzR,KAAA6G,OAAAkP,KAApC/Q,UAEEhF,KAAA6G,OAAAkP,KAAJ7Q,UACEuM,aAAA,cAAmCzR,KAAA6G,OAAAkP,KAAnC7Q,SAEElF,KAAA6G,OAAAkP,KAAJ5Q,UACEsM,aAAA,cAAmCzR,KAAA6G,OAAAkP,KAAnC5Q,SAEEnF,KAAA6G,OAAAkP,KAAJ3Q,YACEqM,aAAA,gBAAqCzR,KAAA6G,OAAAkP,KAArC3Q,WAIEpF,KAAA6G,OAAJrB,kBACEiM,aAAA,mBAAwCzR,KAAA6G,OAAxCrB,iBAGExF,KAAA6G,OAAJjB,gBACE6L,aAAA,QAA6BzR,KAAA6G,OAA7BjB,iBAIFoQ,cAAA,0DAWEvV,OAAAyP,YAAoBzP,OAAAyP,UAAxB6E,cAoCQ,IAAA9L,OAAN,6EAnCMgN,GAAuBjW,KAAA6G,OAA7BoP,wBAEIxV,OAAAmC,SAAJ2C,OAA4B,IACpBA,GAAS9E,OAAAmC,SAAf2C,MACIA,GAAAzC,QAAA,SAAJ,WACEoT,IAD+B,iCAE/BC,sBAAA,GAEO5Q,EAAAzC,QAAA,UAAJ,YACHoT,IADqC,mCAErCC,sBAAA,GAEE5Q,EAAAzC,QAAA,oBAAJ,WACEoT,IAD0C,kCAE1CC,sBAAA,GAEO5Q,EAAAzC,QAAA,uBAAJ,YACHoT,IADkD,iCAElDC,sBAAA,GAIAF,EAAAG,uBAAJ,aACEjG,SAAAiG,sBAEEH,EAAAE,wBAAJ,YACEhG,SAAAgG,iCAGAhG,SAAAkG,gCAGFC,0BC1eAC,EAAgBxT,MAChByT,EAAN,IACMC,EAAN,IAEqBC,EAAA,sBAEnB7P,UACE8P,QAAA9P,OAAc7D,OAAAC,UAAAsT,EAAd1P,QACA+P,gBAAA,OACArW,WAAAD,SACAuW,mFAQE1I,UAAiB,GAAA0D,GAAc7R,KAA/B6G,QAEF,MAAAlB,WACE+C,MADU/C,kDAYZ3F,KAAM8W,EAAN9W,eACO+W,SAAY,SAAAC,EAAAC,GACbH,EAAAF,kBAAA,GAAoCnW,OAAAyP,WAAoBzP,OAAAyP,UAA5D6E,YACE5G,UAAiBjH,EAAAiH,WAAkB,GAAA0D,GAAc3K,EAAjDL,UACA+P,gBAAA,IACQ1P,EAARgQ,2BAIAhH,UAAmBzP,OAAAyP,qBAKnBA,UAAAV,IAAuB/O,OAAAyP,UAAAV,sBAGf2H,GAAM1W,OAAAnC,SAAA8Y,cAAZ,YACAC,OAAA,IACAtN,KAAA,oBAEAuN,aAAA,MAAA,gDACMnE,GAAO1S,OAAAnC,SAAAiZ,qBAAA,UAAb,KACAC,OAAa,aACXZ,gBAAA,IACAa,eACQvQ,EAARgQ,qBAEFQ,QAAc,SAAAhP,KACZkO,gBAAA,IACAlO,MAEFiP,WAAAC,aAAAT,EAAAhE,0DAWNnT,KAAM6X,EAAA,GAAUd,SAAY,SAAAC,EAAAC,aAC1BzH,IAAAC,KAAmB,aAElBtH,gBACU,WACH+H,WAAaA,UAAA6E,YAAnB,KACS,GAAA9L,OAAP,iDAFJuN,WAMFqB,8DAQAC,QACQhF,GAANxS,OACIwW,EAAAvW,aAAJuS,EAA8C,MAC5CvS,WAAAuS,GACIgE,EAAJ3I,eAIQ,IAAAlF,OAAN,0EAHAkF,UAAA4J,sBANAjB,GAAN9W,KAaMgY,EAAoBvY,EAAAqY,EAA1BrB,UACAwB,SAAAD,WCzGJtB,EAAI/U,QAAUA,GAAK,qBASNkF,EAAS9D,eACTmV,EAAUxB,EAAI/U","file":"dfp.min.js","sourcesContent":["/**\n * Htz-cookie-util\n * @module htzCookieUtil\n * @author Elia Grady elia.grady@haaretz.co.il\n * @license MIT\n */\n\n/**\n * Translates Key-Value string into a convenient map.\n * @param {String} string String in format of \"key<operator>value<separator>.....\"\n * @param {object} options object for overriding defaults:\n * options.separator is a String or regExp that separates between each key value pairs\n * (default is ';'). options.operator is a String or regExp that separates between each key\n * and value within a pair (default is '=').\n * @returns {object} a map object, with key-value mapping according to the passed configuration.\n */\nfunction stringToMap(string,\n  { separator = ';', operator = '=' } = {}) {\n  const map = {};\n  const itemsArr = string.split(separator);\n  itemsArr.forEach(element => {\n    if (typeof element === 'string') {\n      const keyValue = element.split(operator);\n      if (keyValue.length === 2) {\n        map[keyValue[0]] = decodeURIComponent(keyValue[1]);\n      }\n    }\n  });\n  return map;\n}\nexport const ssoKey = window.location.hostname.indexOf('haaretz.com') > -1 ? 'engsso' : 'tmsso';\n\n// Translates Cookie string into a convenient map.\nexport default function getCookieAsMap() {\n  const map = stringToMap(document.cookie, { separator: /;\\s?/ });\n  if (typeof map.tmsso === 'string') {\n    map.tmsso = stringToMap(map.tmsso, { separator: ':' });\n  }\n  if (typeof map.engsso === 'string') {\n    map.engsso = stringToMap(map.engsso, { separator: ':' });\n  }\n  return map;\n}\n","/**\n * Helper function. Adds N hours to a given date object.\n * @param {Date} date - the date to derive from\n * @param {Number} hours - the amount of hours to add, in whole numbers\n * @throws {SyntaxError} Will throw if the 'date' param is not provided\n * @throws {SyntaxError} Will throw if the 'hours' param is not provided\n * @throws {TypeError} Will throw if the 'hours' param is not a valid integer\n * @returns {Date} date - the new date, derived from adding the given hours\n */\nexport function addHours(date, hours) {\n  if (!date) {\n    throw new SyntaxError('addHours called without a required \\'date\\' parameter!');\n  }\n  if (!hours) {\n    throw new SyntaxError('addHours called without a required \\'hours\\' parameter!');\n  }\n  else if (isNaN(parseInt(hours, 10))) {\n    throw new TypeError('addHours called with an invalid integer \\'hours\\' parameter!');\n  }\n  const result = new Date(date);\n  result.setHours(result.getHours() + parseInt(hours, 10));\n  return result;\n}\n\n/**\n * Helper function. Adds N days to a given date object.\n * @param {Date} date - the date to derive from\n * @param {Integer} days - the amount of days to add\n * @throws {SyntaxError} Will throw if the 'date' param is not provided\n * @throws {SyntaxError} Will throw if the 'days' param is not provided\n * @throws {TypeError} Will throw if the 'hours' param is not a valid integer\n * @returns {Date} date - the new date, derived from adding the given days\n */\nexport function addDays(date, days) {\n  if (!date) {\n    throw new SyntaxError('addDays called without a required \\'date\\' parameter!');\n  }\n  if (!days) {\n    throw new SyntaxError('addDays called without a required \\'days\\' parameter!');\n  }\n  else if (isNaN(parseInt(days, 10))) {\n    throw new TypeError('addDays called with an invalid integer \\'days\\' parameter!');\n  }\n  const result = new Date(date);\n  result.setDate(result.getDate() + parseInt(days, 10));\n  return result;\n}\n","import globalConfig from '../globalConfig';\n\nconst breakpoints = globalConfig.breakpointsConfig.breakpoints;\n\n/**\n * Returns a function, that, as long as it continues to be invoked, will not\n * be triggered. The function will be called after it stops being called for\n * N milliseconds. If `immediate` is passed, trigger the function on the\n * leading edge, instead of the trailing.\n * @param {function} func - the function to run\n * @param {Number} wait - the timeout period to avoid running the function\n * @param {Boolean} immediate - leading edge modifier\n * @returns {function} the debounced function\n * //TODO translate to ES6 format or import lodash debounce instead\n */\nexport function debounce(func, wait = 100, immediate) {\n  let timeout;\n  return function debounced() {\n    const context = this;\n    const args = arguments;// eslint-disable-line prefer-rest-params\n    const later = () => {\n      timeout = null;\n      if (!immediate) func.apply(context, args);\n    };\n    const callNow = immediate && !timeout;\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n    if (callNow) func.apply(context, args);\n  };\n}\n\n/**\n * Returns the current breakpoint that is closest to the window's width\n * @returns {number} the break that the current width represents\n */\nexport function getBreakpoint() {\n  let breakpoint;\n  const windowWidth = window.innerWidth;\n  switch (windowWidth) {\n    case windowWidth < breakpoints.xs: breakpoint = breakpoints.xxs; break;\n    case windowWidth < breakpoints.s: breakpoint = breakpoints.xs; break;\n    case windowWidth < breakpoints.m: breakpoint = breakpoints.s; break;\n    case windowWidth < breakpoints.l: breakpoint = breakpoints.m; break;\n    case windowWidth < breakpoints.xl: breakpoint = breakpoints.l; break;\n    case windowWidth < breakpoints.xxl: breakpoint = breakpoints.xl; break;\n    default: breakpoint = breakpoints.xxl;\n  }\n  return breakpoint;\n}\n/**\n * Returns the current breakpoint that is closest to the window's width\n * @param {string} breakpoint - the breakpoint label enumerator that the current width represents\n * @returns {string} breakpoint - the breakpoint label that the current width represents,\n * as a string\n */\nexport function getBreakpointName(breakpoint) {\n  let resultBreakpoint;\n  const windowWidth = breakpoint || window.innerWidth;\n  switch (windowWidth) {\n    case windowWidth < breakpoints.xs: resultBreakpoint = 'xxs'; break;\n    case windowWidth < breakpoints.s: resultBreakpoint = 'xs'; break;\n    case windowWidth < breakpoints.m: resultBreakpoint = 's'; break;\n    case windowWidth < breakpoints.l: resultBreakpoint = 'm'; break;\n    case windowWidth < breakpoints.xl: resultBreakpoint = 'l'; break;\n    case windowWidth < breakpoints.xxl: resultBreakpoint = 'xl'; break;\n    default: resultBreakpoint = 'xxl';\n  }\n  return resultBreakpoint;\n}\n","/**\n * Checks whether two arrays are equal\n * @param {Array} a - the first array to check\n * @param {Array} b - the second array to check\n * @returns {Boolean} true iff both a and b are arrays, with equal values\n */\nexport function arraysEqual(a, b) {\n  if (!a || !b) return false;\n  if (!Array.isArray(a) || !Array.isArray(b)) return false;\n  if (a === b) return true;\n  if (a.length !== b.length) return false;\n  for (let i = 0; i < a.length; ++i) {\n    if (a[i] !== b[i]) return false;\n  }\n  return true;\n}\nexport default arraysEqual;\n","export default (function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n});","export default (function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n})();","/* global dfpBaseConf */\nimport getCookieAsMap, { ssoKey } from './utils/cookieUtils';\n// globalConfig for DFP\nconst dfpConfig = Object.assign({\n  get referrer() {\n    return document.referrer ? document.referrer : '';\n  },\n  get isMobile() {\n    return (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i\n      .test(window.navigator.userAgent || ''));\n  },\n  /**\n   * Returns true iff the loaded page is the homepage (no inner path)\n   * @returns {boolean}\n   */\n  get isHomepage() {\n    return window.location.pathname === '/' || this.environment === 3; // 'prod'\n  },\n  get department() {\n    return this.isHomepage ? '_homepage' : '_section';\n  },\n  /**\n   * returns the domain the page was loaded to. i.e: 'haaretz.co.il', 'haaretz.com'\n   * @returns {string} the domain name from the windows's location hostname property\n   */\n  get domain() {\n    const regexMatch = /([\\d|\\w]+)(\\.co\\.il|\\.com)(.*)?/.exec(window.location.hostname);\n    const result = regexMatch ? regexMatch[0] : window.location.hostname;\n    return result;\n  },\n  /**\n   * Returns an array of concatenated paths, separated by a dot.\n   * For example, for the URL:\n   * http://www.haaretz.co.il/news/world/america/us-election-2016/LIVE-1.2869045\n   * the path is '/news/world/america/us-election-2016/LIVE-1.2869045'.\n   * This function takes the directories ['news', 'world', 'america', 'us-election-2016']\n   * and converts it to the following format:\n   * ['.news', '.news.world', '.news.world.america', '.news.world.america.us-election-2016']\n   * This denotes the path configuration for the given adSlot\n   * non articles (sections) will be given a '0' - no articleId value for targeting purposes)\n   * @returns {Array.<T>} an array of path names\n   */\n  get path() {\n    let sectionArray = this.articleId && this.articleId !== '0' ?\n      window.location.pathname.split('/').slice(1, -1) :\n      window.location.pathname.split('/').slice(1);\n    sectionArray = sectionArray.filter(path =>\n    path !== 'wwwMobileSite' && path !== 'whtzMobileSite');\n    return sectionArray\n      .map(section => `.${section}`)\n      .map((section, index, arr) => arr.slice(0, index + 1)\n        .reduce((last, current) => last.concat(current)));\n  },\n  /**\n   * Returns the current environment targeting param, if such is defined.\n   * @returns {number} targeting param, 1 for local development, 2 for test servers and 3 for prod.\n   * May return undefined if no targeting is specified.\n   */\n  get environment() {\n    const env = {\n      dev: 1,\n      test: 2,\n      prod: 3,\n    };\n    return window.location.port === '8080' ? env.dev :\n      (window.location.hostname.indexOf('pre.haaretz.co.il') > -1\n      || window.location.hostname.indexOf('tmtest.themarker.com') > -1) ? env.test :\n        (window.location.pathname.indexOf('/cmlink/Haaretz.HomePage') > -1\n        || window.location.pathname.indexOf('/cmlink/TheMarker.HomePage') > -1)\n          ? env.prod : undefined;\n  },\n  /**\n   * Returns the articleIf if on an article page, or null otherwise\n   * @returns {string} an articleId string from the pathname, or 0 if not found\n   */\n  get articleId() {\n    const articleIdMatch = /\\d\\.\\d+/g.exec(window.location.pathname);\n    let articleId = '0';\n    if (articleIdMatch) {\n      articleId = articleIdMatch.pop(); // Converts [\"1.23145\"] to \"1.23145\"\n    }\n    return articleId;\n  },\n  utm_: {\n    get content() {\n      return this.getUrlParam('utm_content');\n    },\n    get source() {\n      return this.getUrlParam('utm_source');\n    },\n    get medium() {\n      return this.getUrlParam('utm_medium');\n    },\n    get campaign() {\n      return this.getUrlParam('utm_campaign');\n    },\n    getUrlParam(key) {\n      const results = RegExp(`(${key})(=)([^&\"]+)`).exec(window.location.search);\n      return results && results[3] ? results[3] : undefined;\n    },\n  },\n  get adBlockRemoved() {\n    let adBlockRemoved = false;\n    try {\n      if (localStorage.getItem('adblock_removed')) {\n        adBlockRemoved = true;\n      }\n    }\n    catch (err) {\n      // do nothing\n    }\n    return adBlockRemoved;\n  },\n  get wifiLocation() {\n    let wifiLocation = '';\n    const cookieMap = getCookieAsMap();\n    try {\n      if (cookieMap && cookieMap._htzwif) { // eslint-disable-line no-underscore-dangle\n        wifiLocation = (cookieMap._htzwif === 'arcaffe') // eslint-disable-line no-underscore-dangle\n          ? 'ArCafe' : 'university';\n      }\n    }\n    catch (err) {\n      // do nothing\n    }\n    return wifiLocation;\n  },\n  get gStatCampaignNumber() {\n    let gstatCampaign;\n    try {\n      gstatCampaign = localStorage.getItem('GstatCampaign') ?\n        JSON.parse(localStorage.getItem('GstatCampaign')) : undefined;\n    }\n    catch (err) {\n      /* In case of thrown 'SecurityError' or 'QuotaExceededError',\n       the variable should be undefined */\n      gstatCampaign = undefined;\n    }\n    return gstatCampaign ? gstatCampaign.CampaignNumber : undefined;\n  },\n  adSlotConfig: {\n    'haaretz.co.il.example.slot': {\n      id: 'slotId',\n      // path : \"/network/base/slotId/slotId_subsection\", Will be calculated from AdManager\n      responsive: true,\n      adSizeMapping: [['width1', 'height1'], ...['widthN', 'heightN']],\n      priority: 'normal',\n      fluid: false,\n      responsiveAdSizeMapping: {\n        xxs: [['width1', 'height1'], ...['widthN', 'heightN']],\n        xs: [['width1', 'height1'], ...['widthN', 'heightN']],\n        s: [['width1', 'height1'], ...['widthN', 'heightN']],\n        m: [['width1', 'height1'], ...['widthN', 'heightN']],\n        l: [['width1', 'height1'], ...['widthN', 'heightN']],\n        xl: [['width1', 'height1'], ...['widthN', 'heightN']],\n        xxl: [['width1', 'height1'], ...['widthN', 'heightN']],\n      },\n      blacklistReferrers: 'comma, delimited, blacklisted, referrer, list',\n      whitelistReferrers: 'comma, delimited, referrer, list',\n    },\n  },\n  adManagerConfig: {\n    network: '9401',\n    adUnitBase: 'haaretz.co.il_Web',\n  },\n  breakpointsConfig: {\n    get breakpoints() {\n      const isType1 = true; // Override in VM from backend to control this toggle.\n      return isType1 ? this.breakpoints1 : this.breakpoints2;\n    },\n    // Type 1\n    breakpoints1: {\n      xxs: 600,\n      xs: 761,\n      s: 993,\n      m: 1009,\n      l: 1291,\n      xl: 1600,\n      xxl: 1900,\n    },\n    // Type 2\n    breakpoints2: {\n      xxs: 600,\n      xs: 1000,\n      s: 1150,\n      m: 1281,\n      l: 1600,\n      xl: 1920,\n      xxl: 1920,\n    },\n  },\n  userConfig: {\n    type: undefined,\n    age: undefined,\n    gender: undefined,\n  },\n  conflictManagementConfig: {\n    'blocking.ad.unit.name': [\n      {\n        onsize: '1280x200,970x250,3x3',\n        avoid: 'blocked.ad.unit.name',\n      },\n      {\n        onsize: '1280x200,970x250,3x3',\n        avoid: 'blocked.ad.unit.name',\n      },\n    ],\n  },\n  impressionManagerConfig: {\n    'ad.unit.name': {\n      target: 'all|section|homepage',\n      frequency: '$1/$2(day|hour)',\n      exposed: 0,\n      expires: (new Date()).getTime(),\n    },\n  },\n  googleGlobalSettings: {\n    enableSingleRequest: true,\n    enableAsyncRendering: true,\n  },\n  sso: ssoKey,\n\n}, window.dfpConfig);\n\nexport default dfpConfig;\n","import globalConfig from '../globalConfig';\nimport { addHours, addDays } from '../utils/time';\nimport { debounce } from '../utils/breakpoints';\n\nexport const keys = {\n  impressions: 'impressions',\n  frequency: 'frequency',\n  /**\n   * [0] - full match\n   * [1] - impression count i.e: \"1\" | \"22\"\n   * [2] - impression expiry range quantifier  i.e: \"1\" | \"22\"\n   * [3] - impression expiry range unit i.e: \"day\" | \"hour\"\n   */\n  frequencyRegex: /(\\d+)\\/(\\d+)(day|hour)/,\n  expires: 'expires',\n  exposed: 'exposed',\n  target: 'target',\n  maxImpressions: 'maxImpressions',\n  hours: 'hour',\n  days: 'day',\n  adSlotId: 'id',\n};\n\nexport default class ImpressionsManager {\n\n  constructor(impressionManagerConfig) {\n    this.now = (new Date()).getTime(); // this date is used for comparisons only\n    this.config = Object.assign({}, impressionManagerConfig);\n    this.impressions = this.retrieveImpressionsData();\n    this.initImpressionMap();\n  }\n\n  retrieveImpressionsData() {\n    const impressions = this.migrateImpressionsData();\n    /*\n     Merge migrated data with new data\n     console.log('Migrated: ',impressions);\n     */\n    Object.keys(impressions).map((key, index) => {\n      impressions[key] = Object.assign({}, impressions[key], this.config[key]);\n      return this;\n    });\n    /*\n     console.log('Merged: ',impressions);\n     Filter out entries without frequency\n     */\n    for (const key in impressions) {\n      if ({}.hasOwnProperty.call(impressions, key)) {\n        if (!impressions[key][keys.frequency]) {\n          // console.log(`Removing ${key} - since it does not have a frequency`,impressions[key]);\n          delete impressions[key];\n        }\n      }\n    }\n    // console.log('Filtered: ',impressions);\n    return impressions;\n  }\n\n  migrateImpressionsData() {\n    let impressions;\n    let impressionsData;\n    try {\n      impressionsData = window.localStorage.getItem(keys.impressions);\n    }\n    catch (err) {\n      // In case of thrown 'SecurityError' or 'QuotaExceededError', the variable should be undefined\n      impressionsData = undefined;\n    }\n    try {\n      impressions = JSON.parse(impressionsData);\n    }\n    catch (err) {\n      // Here is where old impression data is converted to new format\n      impressions = {};\n      const oldImpressionsArray = impressionsData.split(';').filter(e => e);\n\n      oldImpressionsArray.forEach((impression) => {\n        try {\n          const adUnitImpression = impression.split(' = ');\n          const name = adUnitImpression[0];\n          const data = adUnitImpression[1];\n          const tmp = name.split('.');\n          let target = tmp.pop();\n          if (target && target === 'hp') {\n            target = 'homepage';\n          }\n          const slotId = tmp.join('.');\n          const id = `${slotId}_${target}`;\n          const exposed = parseInt(data.split('/')[0], 10) || 0;\n          const expires = parseInt(data.split('/')[1], 10) || this.now;\n          impressions[id] = {};\n          impressions[id][keys.adSlotId] = slotId;\n          impressions[id][keys.target] = target;\n          impressions[id][keys.exposed] = exposed;\n          impressions[id][keys.expires] = expires;\n        }\n        catch (err1) {\n          // console.log(`Failed converting impression: ${impression}`, err1);\n        }\n      });\n    }\n    return impressions || {};\n  }\n\n  /**\n   * Define the debounced version of the local storage save\n   */\n  saveImpressionsToLocalStorage() {\n    if (this.debouncedSave && typeof this.debouncedSave === 'function') {\n      this.debouncedSave();\n    }\n    else {\n      this.debouncedSave = debounce(this.saveImpressionsToLocalStorageImpl, 250, false);\n      this.debouncedSave();\n    }\n  }\n\n  /**\n   * Implementation of saving the impression map to localstorage\n   */\n  saveImpressionsToLocalStorageImpl() {\n    try {\n      localStorage.setItem(keys.impressions, JSON.stringify(this.impressions));\n    }\n    catch (err) {\n      /* In case of thrown 'SecurityError' or 'QuotaExceededError',\n       the operation should not break*/\n      console.error('localStorage isn\\'t available:', err); // eslint-disable-line no-console\n    }\n  }\n\n  /**\n   * Initializes the impression map based on the retrieved impressions and the global\n   * configuration.\n   */\n  initImpressionMap() {\n    Object.keys(this.config).map((key, index) => {\n      const adSlotId = key;\n      const slot = this.impressions[adSlotId];\n      let shouldUpdateExpiryDate = false;\n      // Case I: Existing slot (update)\n      if (slot) {\n        // Case I.I Existing slot, frequency has changed\n        if (this.config[adSlotId][keys.frequency] !== slot[keys.frequency]) {\n          // Updating the frequency will trigger a new expiry date\n          shouldUpdateExpiryDate = true;\n          this.impressions[adSlotId][keys.frequency] = this.config[adSlotId][keys.frequency];\n        } // Case I.II Existing slot, old expiry date\n        else if (this.now > slot[keys.expires]) {\n          // Old value that should trigger a new expiry date\n          shouldUpdateExpiryDate = true;\n        }\n      } // Case II: Non-existing slot (create new slot)\n      else {\n        this.initSlotFromConfig(adSlotId);\n      } // Finally, updates the expiry date (cases I.I and I.II)\n      if (shouldUpdateExpiryDate) {\n        this.updateExpiryDate(adSlotId);\n      }\n      return this;\n    });\n  }\n\n  /**\n   * Updates the expiry date of a slotName based on the configured slot frequency\n   * @param {String} slotName - the slotName to update.\n   */\n  updateExpiryDate(slotName) {\n    const now = new Date();\n    if (!(this.impressions[slotName] && this.impressions[slotName][keys.frequency])) {\n      throw new Error(`Unable to update expiry date for slot: ${slotName}\n      - this.impressions[slotName]:`, this.impressions[slotName]);\n    }\n    const frequencyMap = this.impressions[slotName][keys.frequency].match(keys.frequencyRegex);\n    now.setMilliseconds(0);\n    now.setSeconds(0);\n    now.setMinutes(0);\n    if (frequencyMap.indexOf(keys.days) > -1) {\n      now.setHours(0);\n    }\n    this.impressions[slotName][keys.expires] = (frequencyMap.indexOf(keys.days) > -1 ?\n      addDays(now, frequencyMap[2]) : addHours(now, frequencyMap[2])).getTime();\n\n    // Set max impressions:\n    this.impressions[slotName][keys.maxImpressions] = parseInt(frequencyMap[1], 10);\n    // Reset exposed\n    this.impressions[slotName][keys.exposed] = 0;\n  }\n\n  /**\n   * Initializes a non-existing slot from the passed global configuration for the slot\n   * @param {String} slotName - the name of the slot to create\n   */\n  initSlotFromConfig(slotName) {\n    const slot = this.impressions[slotName] || {};\n    slot[keys.frequency] = this.config[slotName][keys.frequency];\n    slot[keys.target] = this.config[slotName][keys.target];\n    slot[keys.exposed] = 0;\n    this.impressions[slotName] = slot;\n    this.updateExpiryDate(slotName);\n  }\n\n  /**\n   * Registers an impression for a given adSlot.\n   * @param {String} adSlotId - the adSlot id to register an impression for\n   * @returns {boolean} returns true iff the impression has been registered\n   */\n  registerImpression(adSlotId) {\n    if (adSlotId) {\n      const slot = this.impressions[adSlotId];\n      if (slot) {\n        const exposed = slot[keys.exposed];\n        if (isNaN(parseInt(exposed, 10)) === false) {\n          this.impressions[adSlotId][keys.exposed] += 1;\n          try {\n            this.saveImpressionsToLocalStorage();\n          }\n          catch (err) {\n            // console.log('Error saving ad impressions to localStorage!', err);\n          }\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Checks whether an adSlot has reached it's allocated impressions count.\n   * @param {String} adSlotId - the adSlot to check\n   * @returns {boolean} true iff there is a quota for the adSlot, and it has been reached\n   */\n  reachedQuota(adSlotId) {\n    // An adSlotId is suffixed with _homepage | _section if it's targeting is different\n    // between the two. If there is no difference, an _all suffix can be used.\n    const slotName = this.impressions[`${adSlotId}${globalConfig.department}`] ?\n      `${adSlotId}${globalConfig.department}` : `${adSlotId}_all`;\n\n    const slot = this.impressions[slotName];\n    let atQuota = false;\n    if (slot) {\n      const now = (new Date()).getTime();\n      // Second element of 2/4day matches '2'\n      const expires = this.impressions[slotName][keys.expires];\n      if (expires < now) {\n        this.updateExpiryDate(slotName);\n      }\n      else {\n        const maxImpressions = this.impressions[slotName][keys.maxImpressions];\n        // Not expired, did reach max impressions?\n        if (maxImpressions) {\n          atQuota = this.impressions[slotName][keys.exposed] >= maxImpressions;\n        }\n      }\n    }\n    return atQuota;\n  }\n\n\n  /**\n   * Clears the impression map from 'exposed' impressions\n   */\n  resetImpressions() {\n    const impressions = this.impressions;\n    for (const key in impressions) {\n      if ({}.hasOwnProperty.call(impressions, key)) {\n        if (impressions[key][keys.exposed]) {\n          impressions[key][keys.exposed] = 0;\n        }\n      }\n    }\n    this.saveImpressionsToLocalStorage();\n  }\n}\n","import getCookieAsMap from '../utils/cookieUtils';\nimport ImpressionManager from './impressionsManager';\nimport globalConfig from '../globalConfig';\n\nexport const userTypes = {\n  payer: 'payer',\n  registered: 'registered',\n  anonymous: 'anonymous',\n};\n\nexport default class User {\n  constructor(config) {\n    this.config = Object.assign({}, config.userConfig);\n    const cookieMap = getCookieAsMap();\n    this.ssoKey = globalConfig.sso;\n    if (!cookieMap[this.ssoKey]) {\n      // Flips the ssoKey, since cookieMap.ssoKey cannot be used to retrieve data\n      this.ssoKey = this.ssoKey === 'tmsso' ? 'engsso' : 'tmsso';\n    }\n    this.type = this.getUserType(cookieMap);\n    this.impressionManager = new ImpressionManager(config.impressionManagerConfig);\n    this.age = this.getUserAge(cookieMap);\n    this.gender = this.getUserGender(cookieMap);\n  }\n\n  getUserType(cookieMap) {\n    let userType;\n    if (cookieMap && cookieMap[this.ssoKey]) {\n      const payerProp = window.location.hostname.indexOf('haaretz.com') > -1 ?\n        'HdcPusr' : 'HtzPusr';\n      userType = cookieMap[payerProp] ? userTypes.payer : userTypes.registered;\n    }\n    else {\n      userType = userTypes.anonymous;\n    }\n    return userType;\n  }\n\n  getUserAge(cookieMap) {\n    let age;\n    const usrae = cookieMap[this.ssoKey] && cookieMap[this.ssoKey].usrae;\n    if (usrae) {\n      age = parseInt(cookieMap[this.ssoKey].usrae, 10);\n      age = age > 0 ? age : undefined;\n    }\n    return age;\n  }\n\n  getUserGender(cookieMap) {\n    let gender;\n    const urgdr = cookieMap[this.ssoKey] && cookieMap[this.ssoKey].urgdr;\n    if (urgdr) {\n      gender = parseInt(cookieMap[this.ssoKey].urgdr, 10);\n      gender = gender === 2 || gender === 1 ? gender : undefined;\n    }\n    return gender;\n  }\n}\n","class ConflictResolver {\n  constructor(conflictManagementConfig) {\n    this.dependencyMap = this.initializeDependencyMap(conflictManagementConfig);\n    this.deferredSlots = new Set();\n  }\n  initializeDependencyMap(conflictManagementJson) {\n    const queue = new Map();\n    Object.keys(conflictManagementJson).map((key, value) => {\n      let rules = conflictManagementJson[key];\n      if (rules) {\n        rules = rules.filter((item) => item.onsize && item.avoid);\n      }\n      queue.set(key, {\n        id: key,\n        rules,\n        resolvedWith: null,\n      });\n      return this;\n    });\n    return queue;\n  }\n\n  updateResolvedSlot(adSlotId, resolvedSize) {\n    if (!adSlotId) {\n      throw new Error('updateResolvedSlot must be called with an adSlotId!');\n    }\n    if (!resolvedSize) {\n      throw new Error('updateResolvedSlot must be called with a resolved size!');\n    }\n    if (this.dependencyMap.has(adSlotId)) {\n      this.dependencyMap.get(adSlotId).resolvedWith = resolvedSize;\n    }\n  }\n\n\n  isBlocked(adSlotId) {\n    if (!adSlotId) {\n      throw new Error('isBlocked must be called with an adSlotId!');\n    }\n    let isBlocked = false;\n    for (const adSlotKey of this.dependencyMap.keys()) {\n      const adSlot = this.dependencyMap.get(adSlotKey);\n      for (const adSlotRule of adSlot.rules) {\n        // Found rule specific to our target\n        if (adSlotRule.avoid === adSlotId) {\n          const parentResolvedWith = adSlot.resolvedWith;\n          // Fail fast: parent is not resolved yet - unknown returned size.\n          if (!parentResolvedWith) {\n            isBlocked = true;\n            this.deferredSlots.add(adSlotId);\n          }\n          if (adSlotRule.onsize.split(',').find(sizeString => { // eslint-disable-line\n            const size = sizeString.split('x').map(numberStr => parseInt(numberStr, 10));\n            return this.arraysEqual(size, parentResolvedWith);\n          })) {\n            // Block found\n            this.deferredSlots.add(adSlotId);\n            isBlocked = true;\n          }\n        }\n      }\n    }\n    return isBlocked;\n  }\n\n  isBlocking(adSlotId) {\n    if (!adSlotId) {\n      throw new Error('isBlocking must be called with an adSlotId!');\n    }\n    let isBlocking = false;\n    for (const adSlotKey of this.dependencyMap.keys()) {\n      if (adSlotKey === adSlotId) {\n        isBlocking = true;\n      }\n    }\n    return isBlocking;\n  }\n\n  /**\n   * Gets an array of adSlot Ids for a given adSlotId, that are dependent on (blocked by)\n   * @param {String} adSlotId - the blocking slot id\n   * @return {Array} an array of blocked slot, that has a dependency on the given slot\n   */\n  getBlockedSlotsIds(adSlotId) {\n    let result;\n    if (this.dependencyMap.has(adSlotId)) {\n      result = Array.from(this.dependencyMap.get(adSlotId).rules.map(adSlot => adSlot.avoid));\n    }\n    return result || [];\n  }\n\n  arraysEqual(a, b) {\n    if (a === b) return true;\n    if (a === null || b === null) return false;\n    if (a.length !== b.length) return false;\n    for (let i = 0; i < a.length; ++i) {\n      if (a[i] !== b[i]) return false;\n    }\n    return true;\n  }\n}\nConflictResolver.EMPTY_SIZE = [];\nexport default ConflictResolver;\n","/* global googletag */\nimport { adTypes } from '../objects/adManager';\nimport globalConfig from '../globalConfig';\n\nexport default class adSlot {\n\n  constructor(adSlotConfig) {\n    this.config = Object.assign({}, adSlotConfig);\n\n    // Part I : Markup configuration - passed from AdManager\n    this.id = this.config.id;\n    if (!this.config.id) {\n      throw new Error('an adSlot requires an id!');\n    }\n    this.target = this.config.target;\n    this.type = this.config.type;\n    this.responsive = this.config.responsive;\n    this.fluid = this.config.fluid;\n    this.user = this.config.user;\n    this.adManager = this.config.adManager;\n    this.htmlElement = this.config.htmlElement;\n    this.priority = this.config.priority;\n    this.deferredSlot = this.config.deferredSlot;\n\n    // Part II : Global, general ad configuration - passed from AdManager\n    this.department = this.config.department;\n    this.network = this.config.network;\n    this.adUnitBase = this.config.adUnitBase;\n\n    // Part III : ad specific configuration - passed from globalConfig.adSlotConfig\n    this.adSizeMapping = this.config.adSizeMapping;\n    this.responsiveAdSizeMapping = this.config.responsiveAdSizeMapping;\n    this.blacklistReferrers = this.config.blacklistReferrers ?\n      this.config.blacklistReferrers.split(',') : [];\n    this.whitelistReferrers = this.config.whitelistReferrers ?\n      this.config.whitelistReferrers.split(',') : [];\n\n\n    // Part IV : Runtime configuration - calculated data - only present in runtime\n    this.lastResolvedSize = undefined; // Initialized in 'slotRenderEnded' callback\n    this.lastResolvedWithBreakpoint = undefined; // Initialized in 'slotRenderEnded' callback\n    this.slot = undefined; // Holds a googletag.Slot object\n    // [https://developers.google.com/doubleclick-gpt/reference#googletag.Slot]\n    try {\n      if (!this.deferredSlot) {\n        this.slot = this.defineSlot();\n      }\n    }\n    catch (err) {\n      console.error(err); // eslint-disable-line no-console\n    }\n  }\n\n  /**\n   * Checks whether this adSlot is an 'Out-of-page' slot or not.\n   * An Out-of-page slot is a slot that is not embedded in the page 'normally'.\n   * @returns {boolean} true iff this adSlot is one of the predefined 'out-of-page' slots.\n   */\n  isOutOfPage() {\n    if (typeof this.type !== 'string') {\n      throw new Error('An adSlot cannot by typeless!', this);\n    }\n    if (this.isMobile() === true) {\n      return false;\n    }\n    switch (this.type) {\n      case adTypes.maavaron: return true;\n      case adTypes.popunder: return true;\n      case adTypes.talkback: return false;\n      case adTypes.regular: return false;\n      default: return false;\n    }\n  }\n\n  /**\n   * Checks whether this adSlot is a 'maavaron' slot or not.\n   * An Out-of-page slot is a slot that is not embedded in the page 'normally'.\n   * @returns {boolean} true iff this adSlot is one of the predefined 'out-of-page' slots.\n   */\n  isMaavaron() {\n    if (typeof this.type !== 'string') {\n      throw new Error('An adSlot cannot by typeless!', this);\n    }\n    if (this.isMobile() === true) {\n      return false;\n    }\n    switch (this.type) {\n      case adTypes.maavaron: return true;\n      default: return false;\n    }\n  }\n\n  isMobile() {\n    return (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i\n      .test(window.navigator.userAgent || ''));\n  }\n  /**\n   * Checks whether or not this adSlot has a non-empty whitelist, and if so, that the current\n   * referrer appears in the whitelist.\n   * Should return false iff there is a whitelist for the current adSlot, but the referrer is not\n   * mentioned in the whitelist.\n   * @returns {boolean} true iff the ad can be displayed.\n   */\n  isWhitelisted() {\n    let whitelisted = false;\n    if (this.whitelistReferrers.length !== 0) {\n      for (const referrer of this.whitelistReferrers) {\n        if (globalConfig.referrer.indexOf(referrer) > -1) {\n          whitelisted = true;\n          break;\n        }\n      }\n    }\n    else {\n      whitelisted = true;\n    }\n    return whitelisted;\n  }\n\n  /**\n   * Checks whether or not this adSlot has a non-empty blacklist, and if so, that the current\n   * referrer does not appear in the blacklist.\n   * Should return true iff there is a blacklist for the current adSlot, and the referrer is\n   * mentioned in the blacklist - to indicate that the adSlot is 'blocked'.\n   * @returns {boolean} true iff the ad cannot be displayed.\n   */\n  isBlacklisted() {\n    let blacklisted = false;\n    if (this.blacklistReferrers.length !== 0) {\n      for (const referrer of this.blacklistReferrers) {\n        if (globalConfig.referrer.indexOf(referrer) > -1) {\n          blacklisted = true;\n          break;\n        }\n      }\n    }\n    return blacklisted;\n  }\n\n\n  /**\n   * Shows the current adSlot.\n   * It assumes a markup is available for this slot (any tag with an id attribute = this.id)\n   */\n  show() {\n    if (!this.shown === true) {\n      this.shown = true; // Ensure show will be called once per adSlot\n      googletag.cmd.push(() => {\n        if (this.deferredSlot) {\n          this.slot = this.defineSlot();\n        }\n        // console.log('calling show for slot',this.id,' called @',window.performance.now());\n        document.getElementById(this.id).classList.remove('h-hidden');\n        googletag.display(this.id);\n      });\n    }\n  }\n\n  /**\n   * Shows the current adSlot.\n   * It assumes a markup is available for this slot (any tag with an id attribute = this.id)\n   */\n  hide() {\n    googletag.cmd.push(() => {\n      document.getElementById(this.id).classList.add('h-hidden');\n    });\n  }\n\n  /**\n   * Initializes page-level slot definition for the current slot\n   * @return {Slot} slot - the Google Slot that was defined from this AdSlot configuration\n   */\n  defineSlot() {\n    if (this.isMaavaron()) {\n      const maavaronSlot = this.defineMaavaron();\n      if (this.adManager.shouldSendRequestToDfp(this)) {\n        if (!this.shown) {\n          this.shown = true; // Ensure show will be called once\n          maavaronSlot.display();\n        }\n      }\n      return maavaronSlot;\n    }\n    const googletag = window.googletag;\n    const pubads = googletag.pubads();\n    const args = [];\n    const defineFn = this.isOutOfPage() ? googletag.defineOutOfPageSlot : googletag.defineSlot;\n    // 3 or 2 params according to the function that we want to activate.\n    args.push(this.getPath());\n    if (this.isOutOfPage() === false) {\n      if (this.fluid) {\n        args.push('fluid');\n      }\n      else {\n        args.push(this.adSizeMapping);\n      }\n    }\n    args.push(this.id);\n    let slot = defineFn.apply(defineFn, args);\n    if (slot) {\n      // Responsive size Mapping\n      if (this.responsive) {\n        let responsiveSlotSizeMapping = googletag.sizeMapping();\n        const breakpoints = globalConfig.breakpointsConfig.breakpoints;\n        const keys = Object.keys(this.responsiveAdSizeMapping);\n        for (const key of keys) { // ['xxs','xs',...]\n          responsiveSlotSizeMapping.addSize(\n            [breakpoints[key], 100], // 100 is a default height, since it is height agnostic\n            this.responsiveAdSizeMapping[key]);\n        }\n        responsiveSlotSizeMapping = responsiveSlotSizeMapping.build();\n        slot = slot.defineSizeMapping(responsiveSlotSizeMapping);\n      }\n      slot = slot.addService(pubads);\n      if (this.isOutOfPage() === false) {\n        slot.setCollapseEmptyDiv(true);\n      }\n    }\n    return slot;\n  }\n\n  /**\n   * Returns the current path calculated for the adSlot\n   * @returns {String} a formatted string that represent the path for the slot definition\n   */\n  getPath() {\n    /* eslint-disable no-shadow */\n    let path = globalConfig.path || [];\n    path = path.filter(path => path !== '.');\n    path = path.map(section => `${this.id}${this.department}${section}`).join('/');\n    // If a path exist, it will be preceded with a forward slash\n    path = path && this.config.department !== '_homepage' ? `/${path}` : '';\n    /* eslint-enable no-shadow */\n    const calculatedPath = `/${this.config.network}/${this.config.adUnitBase}/${this.id}/${this.id}${this.department}${path}`; // eslint-disable-line max-len\n    return calculatedPath.toLowerCase();\n  }\n\n  /* eslint-disable */\n  slotRendered(event) {\n    const id = event.slot.getAdUnitPath().split('/')[3]; // Convention: [0]/[1]network/[2]base/[3]id\n    const isEmpty = event.isEmpty; // Did the ad return as empty?\n    const resolvedSize = event.size; // What 'creative' size did the ad return with?\n    // Empty or onload callback should be called next?\n  }\n  /* eslint-enable */\n\n  /**\n   * Refresh this adSlot\n   */\n  refresh() {\n    googletag.cmd.push(() => {\n      googletag.pubads().refresh([this.slot]);\n    });\n  }\n\n  /**\n   * Shows 'Maavaron' type adSlot using Passback definition\n   * @return {Slot} slot - the Google Slot that was defined for Maavaron\n   */\n  defineMaavaron() {\n    if (!document.referrer.match('loc.haaretz')) {\n      const adUnitMaavaronPath = this.getPath();\n      const adUnitMaavaronSize = [\n        [2, 1],\n      ];\n      const slot = googletag.pubads().definePassback(adUnitMaavaronPath, adUnitMaavaronSize)\n        .setTargeting('UserType', [this.user.type])\n        .setTargeting('age', [this.user.age])\n        .setTargeting('urgdr', [this.user.gender])\n        .setTargeting('articleId', [globalConfig.articleId])\n        .setTargeting('stg', [globalConfig.environment]);\n      return slot;\n    }\n    return null;\n  }\n}\n","/* global googletag */\nimport User from '../objects/user';\nimport ConflictResolver from '../objects/conflictResolver';\nimport AdSlot from '../objects/adSlot';\nimport { getBreakpoint, getBreakpointName } from '../utils/breakpoints';\nimport { arraysEqual } from '../utils/arrays';\n\n// There are a total of 7 adTargets:\n// \"all\",\"nonPaying\",\"anonymous\",\"registered\",\"paying\",\"digitalOnly\" and \"digitalAndPrint\"\nexport const adPriorities = {\n  high: 'high',\n  normal: 'normal',\n  low: 'low',\n};\n\nexport const adTargets = {\n  all: 'all',\n  nonPaying: 'nonPaying',\n  anonymous: 'anonymous',\n  registered: 'registered',\n  paying: 'paying',\n  digitalOnly: 'digitalOnly',\n  digitalAndPrint: 'digitalAndPrint',\n};\n\n// There are a total of 3 userTypes: \"anonymous\", \"registered\" and \"payer\"\nexport const userTypes = {\n  anonymous: 'anonymous',\n  registered: 'registered',\n  payer: 'payer',\n};\n\nexport const adTypes = {\n  maavaron: '.maavaron',\n  popunder: '.popunder',\n  talkback: '.talkback',\n  regular: '',\n};\n\n\nexport default class AdManager {\n\n  constructor(config) {\n    this.config = Object.assign({}, config);\n    this.user = new User(config);\n    this.conflictResolver = new ConflictResolver(config.conflictManagementConfig);\n    /**\n     * Avoid race conditions by making sure to respect the usual timing of GPT.\n     * This DFP implementation uses Enable-Define-Display:\n     * Define page-level settings\n     * enableServices()\n     * Define slots\n     * Display slots\n     */\n    try {\n      googletag.cmd.push(() => {\n        this.initGoogleTargetingParams(); //  Define page-level settings\n        this.initGoogleGlobalSettings();  //  enableServices()\n        this.initSlotRenderedCallback();  //  Define callbacks\n      });\n      // Holds adSlot objects as soon as possible.\n      googletag.cmd.push(() => {\n        this.adSlots = this.initAdSlots(config.adSlotConfig, adPriorities.high);\n      });\n      // Once DOM ready, add more adSlots.\n      document.addEventListener('DOMContentLoaded', () => {\n        googletag.cmd.push(() => {\n          this.adSlots = this.initAdSlots(config.adSlotConfig, adPriorities.high);\n          googletag.cmd.push(() => {\n            this.adSlots = this.initAdSlots(config.adSlotConfig, adPriorities.normal);\n          });\n        });\n      });\n      // Once window was loaded, add the rest of the adSlots.\n      window.addEventListener('load', () => {\n        googletag.cmd.push(() => {\n          this.adSlots = this.initAdSlots(config.adSlotConfig, adPriorities.low);\n        });\n      });\n    }\n    catch (err) {\n      console.error(err); // eslint-disable-line no-console\n    }\n  }\n\n  /**\n   * Shows all of the adSlots that can be displayed.\n   */\n  showAllSlots() {\n    for (const adSlotKey of this.adSlots.keys()) {\n      const adSlot = this.adSlots.get(adSlotKey);\n      if (adSlot.type !== adTypes.talkback && this.shouldSendRequestToDfp(adSlot)) {\n        adSlot.show();\n      }\n    }\n  }\n\n  /**\n   * Gets all adSlots that has a certain priority\n   * @param {adPriority} priority - the priority of the ad {high, normal, low}\n   * @return {Array<AdSlot>} adSlots - all of the defined adSlots that matches\n   * the given priority\n   */\n  getAdSlotsByPriority(priority) {\n    function priorityFilter(adSlot) {\n      return adSlot.priority === priority;\n    }\n    return Array.from(this.adSlots.values()).filter(priorityFilter);\n  }\n\n  showAllDeferredSlots() {\n    for (const deferredSlotId of this.conflictResolver.deferredSlots) {\n      if (this.adSlots.has(deferredSlotId)) {\n        if (!this.conflictResolver.isBlocked(deferredSlotId)) {\n          const deferredAdSlot = this.adSlots.get(deferredSlotId);\n          if (this.shouldSendRequestToDfp(deferredAdSlot)) {\n            deferredAdSlot.show();\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Refreshes all responsive adSlots\n   */\n  refreshAllSlots() {\n    const currentBreakpoint = getBreakpoint();\n    for (const adSlotKey of this.adSlots.keys()) {\n      const adSlot = this.adSlots.get(adSlotKey);\n      if (adSlot.responsive) {\n        if (adSlot.lastResolvedWithBreakpoint !== currentBreakpoint &&\n          this.shouldSendRequestToDfp(adSlot)) {\n          // console.log(`calling refresh for adSlot: ${adSlot.id}`);\n          adSlot.refresh();\n        }\n        else {\n          adSlot.hide();\n        }\n      }\n    }\n  }\n\n  /**\n   * Initializes adSlots based on the currently found slot markup (HTML page specific),\n   * and the predefined configuration for the slots.\n   * @param {Object} adSlotConfig - the AdSlots configuration object (see: globalConfig)\n   * @param {String} filteredPriority - filters out all adSlots that does not match\n   * a given adPriority. This is used to cherry pick the init process of ads.\n   * @returns {Map}\n   */\n  initAdSlots(adSlotConfig, filteredPriority) {\n    const adSlots = new Map(this.adSlots);\n    let adSlotPlaceholders = Array.from(document.getElementsByClassName('js-dfp-ad'));\n    adSlotPlaceholders = adSlotPlaceholders.filter(node => node.id); // only nodes with an id\n    const adSlotNodeSet = new Set();\n    adSlotPlaceholders = Array.prototype.filter.call(adSlotPlaceholders, node => {\n      if (adSlotNodeSet.has(node.id) === false) { // first occurrence of Node\n        adSlotNodeSet.add(node.id);\n        return true;\n      }\n      return false;\n    });\n    // adSlotPlaceholders = adSlotPlaceholders.sort((a,b) => a.offsetTop - b.offsetTop);\n    adSlotPlaceholders.forEach(adSlot => {\n      const adSlotPriority = adSlotConfig[adSlot.id] ?\n      adSlotConfig[adSlot.id].priority || adPriorities.normal : undefined;\n      if (adSlotConfig[adSlot.id] && adSlots.has(adSlot.id) === false &&\n        adSlotPriority === filteredPriority) {\n        // The markup has a matching configuration from adSlotConfig AND was not already defined\n        try {\n          // adSlotConfig is built from globalConfig, but can be overridden by markup\n          const computedAdSlotConfig = Object.assign({}, adSlotConfig[adSlot.id], {\n            id: adSlot.id,\n            target: adSlot.attributes['data-audtarget'] ?\n              adSlot.attributes['data-audtarget'].value : adTargets.all,\n            type: this.getAdType(adSlot.id),\n            responsive: adSlotConfig[adSlot.id].responsive,\n            fluid: adSlotConfig[adSlot.id].fluid || false,\n            user: this.user,\n            adManager: this,\n            htmlElement: adSlot,\n            department: this.config.department,\n            network: this.config.adManagerConfig.network,\n            adUnitBase: this.config.adManagerConfig.adUnitBase,\n            deferredSlot: this.conflictResolver.isBlocked(adSlot.id),\n            priority: adSlotPriority,\n          });\n          const adSlotInstance = new AdSlot(computedAdSlotConfig);\n          adSlots.set(adSlot.id, adSlotInstance);\n          if (adSlotInstance.type !== adTypes.talkback &&\n            adSlotInstance.priority === adPriorities.high &&\n            this.shouldSendRequestToDfp(adSlotInstance)) {\n            /*\n             console.log('calling show for high priority slot', adSlotInstance.id, ' called @',\n             window.performance.now());\n             */\n            adSlotInstance.show();\n          }\n        }\n        catch (err) {\n          console.error(err); // eslint-disable-line no-console\n        }\n      }\n    });\n    return adSlots;\n  }\n\n  isPriority(adSlotId) {\n    return (typeof adSlotId === 'string' &&\n    (adSlotId.indexOf('plazma') > 0 ||\n    adSlotId.indexOf('maavaron') > 0 ||\n    adSlotId.indexOf('popunder') > 0));\n  }\n\n  /**\n   * Returns the adType based on the adSlot name.\n   * @param {String} adSlotId - the adSlot's identifier.\n   * @returns {*} enumerated export 'adTypes'\n   */\n  getAdType(adSlotId) {\n    if (!adSlotId) {\n      throw new Error('Missing argument: a call to getAdType must have an adSlotId');\n    }\n    if (adSlotId.indexOf(adTypes.maavaron) > -1) return adTypes.maavaron;\n    if (adSlotId.indexOf(adTypes.popunder) > -1) return adTypes.popunder;\n    if (adSlotId.indexOf(adTypes.talkback) > -1) return adTypes.talkback;\n    return adTypes.regular;\n  }\n\n  /**\n   * @param {object} adSlot the AdSlot\n   * @returns {boolean|*}\n   */\n  shouldSendRequestToDfp(adSlot) {\n    // Conflict management check\n    return this.conflictResolver.isBlocked(adSlot.id) === false &&\n      // Valid Referrer check\n      adSlot.isWhitelisted() &&\n      // Not in referrer Blacklist\n      adSlot.isBlacklisted() === false &&\n      this.shouldDisplayAdAfterAdBlockRemoval(adSlot) &&\n      // Responsive: breakpoint contains ad?\n      this.doesBreakpointContainAd(adSlot) &&\n      // Targeting check (userType vs. slotTargeting)\n      this.doesUserTypeMatchBannerTargeting(adSlot) &&\n      // Impressions Manager check (limits number of impressions per slot)\n      this.user.impressionManager.reachedQuota(adSlot.id) === false;\n  }\n\n  shouldDisplayAdAfterAdBlockRemoval(adSlot) {\n    return !(this.config.adBlockRemoved === true &&\n    (adSlot.type === adTypes.maavaron ||\n    adSlot.type === adTypes.popunder));\n  }\n\n  /**\n   * Check whether or not an ad slot should appear for the current user type\n   * @param {String} adSlotOrTarget the adSlot to check or the target as a string\n   * @returns {boolean} true iff the slot should appear for the user type\n   */\n  doesUserTypeMatchBannerTargeting(adSlotOrTarget) {\n    const userType = this.user.type;\n    const adTarget = typeof adSlotOrTarget === 'string' ? adSlotOrTarget : adSlotOrTarget.target;\n\n    switch (adTarget) {\n      case adTargets.all : return true;\n      case adTargets.nonPaying :\n        return userType === userTypes.anonymous || userType === userTypes.registered;\n      case adTargets.anonymous : return userType === userTypes.anonymous;\n      case adTargets.registered : return userType === userTypes.registered;\n      case adTargets.paying : return userType === userTypes.payer;\n      case adTargets.digitalOnly : return userType === userTypes.payer;\n      case adTargets.digitalAndPrint : return userType === userTypes.payer;\n      default: return false;\n    }\n  }\n\n  /**\n   * Report to the AdManager that a breakpoint has been switched (passed from one break to\n   * another). Should there be a responsive slot with a\n   * @param {Breakpoint} breakpoint - the breakpoint that is currently being displayed\n   * @returns {Integer} affected - the number of adSlots affected by the change\n   */\n  switchedToBreakpoint(breakpoint) {\n    if (!breakpoint) {\n      throw new Error('Missing argument: a call to switchedToBreakpoint must have an breakpoint');\n    }\n    let count = 0;\n    for (const adSlotKey of this.adSlots.keys()) {\n      const adSlot = this.adSlots.get(adSlotKey);\n      if (adSlot.responsive === true && adSlot.lastResolvedWithBreakpoint) {\n        if (adSlot.lastResolvedWithBreakpoint !== breakpoint) {\n          adSlot.refresh();\n          count++;\n        }\n      }\n    }\n    return count;\n  }\n\n  /**\n   * Checks whether an adSlot is defined for a given breakpoint (Default: current breakpoint)\n   * @param {AdSlot} adSlot - the adSlot to check.\n   * @param {Breakpoint} [breakpoint=currentBreakpoint] - the breakpoint to check this ad in.\n   * @returns {boolean} true iff the adSlot is defined for the given breakpoint.\n   */\n  doesBreakpointContainAd(adSlot, breakpoint = getBreakpoint()) {\n    if (!adSlot) {\n      throw new Error('Missing argument: a call to doesBreakpointContainAd must have an adSlot');\n    }\n    let containsBreakpoint = true;\n    if (adSlot.responsive === true) {\n      const mapping = adSlot.responsiveAdSizeMapping[getBreakpointName(breakpoint)];\n      if (Array.isArray(mapping) === false) {\n        throw new Error(`Invalid argument: breakpoint:${breakpoint} doesn't exist!`, this);\n      }\n      containsBreakpoint = mapping.length > 0 && !arraysEqual(mapping, [0, 0]);\n    }\n    return containsBreakpoint;\n  }\n\n  /**\n   * Initializes the callback from the 'slotRenderEnded' event for each slot\n   */\n  initSlotRenderedCallback() {\n    if (window.googletag && window.googletag.apiReady) {\n      const pubads = window.googletag.pubads();\n      pubads.addEventListener('slotRenderEnded', event => {\n        const id = event.slot.getAdUnitPath().split('/')[3];\n        const isEmpty = event.isEmpty;\n        const resolvedSize = event.size;\n        // console.log('slotRenderEnded for slot',id,' called @',window.performance.now());\n        if (this.adSlots.has(id)) {\n          const adSlot = this.adSlots.get(id);\n          adSlot.lastResolvedSize = resolvedSize;\n          adSlot.lastResolvedWithBreakpoint = getBreakpoint();\n          if (isEmpty) {\n            adSlot.lastResolvedSize = ConflictResolver.EMPTY_SIZE;\n            adSlot.hide();\n            this.releaseSlotDependencies(adSlot);\n          }\n          else {\n            this.user.impressionManager.registerImpression(`${adSlot.id}${this.config.department}`);\n            this.user.impressionManager.registerImpression(`${adSlot.id}_all`);\n            this.releaseSlotDependencies(adSlot, adSlot.lastResolvedSize);\n          }\n        }\n        else {\n          /*\n           console.error(`Cannot find an adSlot with id: ${id} - Ad Unit path is\n           ${event.slot.getAdUnitPath()}`);\n           */\n        }\n      });\n    }\n    else {\n      throw new Error('googletag api was not ready when \\'initSlotRenderedCallback\\' was called!');\n    }\n  }\n\n  releaseSlotDependencies(adSlot) {\n    try {\n      const id = adSlot.id;\n      this.conflictResolver.updateResolvedSlot(id, adSlot.lastResolvedSize);\n      if (this.conflictResolver.isBlocking(id)) {\n        // Hide all blocked adSlots\n        for (const blockedSlot of this.conflictResolver.getBlockedSlotsIds(id)) {\n          if (this.conflictResolver.isBlocked(blockedSlot)) {\n            if (this.adSlots.has(blockedSlot)) {\n              this.adSlots.get(blockedSlot).hide();\n            }\n          }\n        }\n        // Show the non blocked\n        for (const deferredSlotKey of this.conflictResolver.deferredSlots.keys()) {\n          const deferredAdSlot = this.adSlots.get(deferredSlotKey);\n          if (deferredAdSlot && this.shouldSendRequestToDfp(deferredAdSlot)) {\n            this.conflictResolver.deferredSlots.delete(deferredSlotKey);\n            if (deferredAdSlot.deferredSlot) {\n              deferredAdSlot.defineSlot();\n              deferredAdSlot.deferredSlot = false;\n            }\n            deferredAdSlot.show();\n          }\n        }\n      }\n    }\n    catch (err) {\n      /* eslint-disable no-console*/\n      console.error(`Cannot updateSlotDependencies for adSlot: ${adSlot.id}`);\n      /* eslint-enable no-console*/\n    }\n  }\n\n  /**\n   * Initializes page-level targeting params.\n   */\n  initGoogleTargetingParams() {\n    if (window.googletag && window.googletag.apiReady) {\n      // Returns a reference to the pubads service.\n      const pubads = googletag.pubads();\n      // Environment targeting (dev, test, prod)\n      if (this.config.environment) {\n        pubads.setTargeting('stg', [this.config.environment]);\n      }\n\n      // User targeting\n      if (this.user.type) {\n        pubads.setTargeting('UserType', [this.user.type]);\n      }\n      if (this.user.age) {\n        pubads.setTargeting('age', [this.user.age]);\n      }\n      if (this.user.gender) {\n        pubads.setTargeting('urgdr', [this.user.gender]);\n      }\n\n      // Context targeting\n      if (this.config.articleId) {\n        pubads.setTargeting('articleId', [this.config.articleId]);\n      }\n      if (this.config.gStatCampaignNumber && this.config.gStatCampaignNumber !== -1) {\n        pubads.setTargeting('gstat_campaign_id', [this.config.gStatCampaignNumber]);\n      }\n\n      // UTM targeting\n      /* eslint-disable no-underscore-dangle */\n      if (this.config.utm_.content) {\n        pubads.setTargeting('utm_content', [this.config.utm_.content]);\n      }\n      if (this.config.utm_.source) {\n        pubads.setTargeting('utm_source', [this.config.utm_.source]);\n      }\n      if (this.config.utm_.medium) {\n        pubads.setTargeting('utm_medium', [this.config.utm_.medium]);\n      }\n      if (this.config.utm_.campaign) {\n        pubads.setTargeting('utm_campaign', [this.config.utm_.campaign]);\n      }\n      /* eslint-enable no-underscore-dangle */\n      // AdBlock removal\n      if (this.config.adBlockRemoved) {\n        pubads.setTargeting('adblock_removed', [this.config.adBlockRemoved]);\n      }\n      // University targeting - triggered via cookie\n      if (this.config.wifiLocation) {\n        pubads.setTargeting('wifi', [this.config.wifiLocation]);\n      }\n\n      // Ads Centering\n      pubads.setCentering(true);\n    }\n    else {\n      throw new Error('googletag api was not ready when \\'initGoogleTargetingParams\\' was called!');\n    }\n  }\n\n  /**\n   * Initializes googletag services.\n   */\n  initGoogleGlobalSettings() {\n    if (window.googletag && window.googletag.apiReady) {\n      const googleGlobalSettings = this.config.googleGlobalSettings;\n      // Enable GET parameter overrides\n      if (window.location.search) {\n        const search = window.location.search;\n        if (search.indexOf('sraon') > 0) {\n          console.log('Single Request Mode: active'); // eslint-disable-line no-console\n          googleGlobalSettings.enableAsyncRendering = true;\n        }\n        else if (search.indexOf('sraoff') > 0) {\n          console.log('Single Request Mode: disabled');// eslint-disable-line no-console\n          googleGlobalSettings.enableAsyncRendering = false;\n        }\n        if (search.indexOf('asyncrenderingon') > 0) {\n          console.log('Async rendering mode: active'); // eslint-disable-line no-console\n          googleGlobalSettings.enableAsyncRendering = true;\n        }\n        else if (search.indexOf('asyncrenderingonoff') > 0) {\n          console.log('Sync rendering mode: active');// eslint-disable-line no-console\n          googleGlobalSettings.enableAsyncRendering = false;\n        }\n      }\n      // Google services activation\n      if (googleGlobalSettings.enableSingleRequest === true) {\n        googletag.pubads().enableSingleRequest();\n      }\n      if (googleGlobalSettings.enableAsyncRendering === true) {\n        googletag.pubads().enableAsyncRendering();\n      }\n      else {\n        googletag.pubads().enableSyncRendering();\n      }\n      // Enables all GPT services that have been defined for ad slots on the page.\n      googletag.enableServices();\n    }\n    else {\n      throw new Error('googletag api wasn\\'t ready when \\'initGoogleGlobalSettings\\' was called!');\n    }\n  }\n}\n","/* globals googletag */\nimport AdManager from '../src/objects/adManager';\nimport globalConfig from './globalConfig';\nimport { getBreakpoint, debounce } from '../src/utils/breakpoints';\n\nconst defaultConfig = globalConfig || {};\nconst googletagInitTimeout = 10000;\nconst resizeTimeout = 250;\n\nexport default class DFP {\n\n  constructor(config) {\n    this.config = Object.assign({}, defaultConfig, config);\n    this.wasInitialized = false;\n    this.breakpoint = getBreakpoint();\n    this.initWindowResizeListener();\n  }\n\n  /**\n   * This part of the object's construction is dependent on the call to 'init'\n   */\n  resumeInit() {\n    try {\n      this.adManager = new AdManager(this.config);\n    }\n    catch (err) {\n      console.error(err); // eslint-disable-line no-console\n    }\n  }\n\n  /**\n   * initializes the 'googletag' global namespace and add the\n   * google publish tags library to the page\n   * @returns {Promise} that resolves to true once the googletag api is ready to use\n   * (googletag.apiReady = true)\n   */\n  initGoogleTag() {\n    const dfpThis = this;\n    return new Promise((resolve, reject) => {\n      if (dfpThis.wasInitialized === true || (window.googletag && window.googletag.apiReady)) {\n        this.adManager = this.adManager || new AdManager(this.config);\n        dfpThis.wasInitialized = true;\n        resolve(this.isGoogleTagReady);\n      }\n      else {\n        // set up a place holder for the gpt code downloaded from google\n        window.googletag = window.googletag || {};\n\n        // this is a command queue used by GPT any methods added to it will be\n        // executed when GPT code is available, if GPT is already available they\n        // will be executed immediately\n        window.googletag.cmd = window.googletag.cmd || [];\n        // load google tag services JavaScript\n        (() => {\n          const tag = window.document.createElement('script');\n          tag.async = false;\n          tag.type = 'text/javascript';\n          // var useSSL = 'https:' == document.location.protocol;\n          tag.setAttribute('src', '//www.googletagservices.com/tag/js/gpt.js');\n          const node = window.document.getElementsByTagName('script')[0];\n          tag.onload = () => {\n            dfpThis.wasInitialized = true;\n            dfpThis.resumeInit();\n            resolve(this.isGoogleTagReady);\n          };\n          tag.onerror = (error) => {\n            dfpThis.wasInitialized = false;\n            reject(error);\n          };\n          node.parentNode.insertBefore(tag, node);\n        })();\n      }\n    });\n  }\n\n  /**\n   *\n   * @returns {Promise}\n   */\n  isGoogleTagReady() {\n    const promise = new Promise((resolve, reject) => {\n      googletag.cmd.push(() => {\n        resolve(this);\n      });\n      setTimeout(() => {\n        if (!(googletag && googletag.apiReady === true)) {\n          reject(new Error('googletag failed to initialize on the page!'));\n        }\n      }, googletagInitTimeout);\n    });\n    return promise;\n  }\n\n  /**\n   * Initializes the window resize listener to support responsive ad refreshes\n   */\n  initWindowResizeListener() {\n    const dfpThis = this;\n    function onResize() {\n      const currentBreakpoint = getBreakpoint();\n      if (dfpThis.breakpoint !== currentBreakpoint) {\n        dfpThis.breakpoint = currentBreakpoint;\n        if (dfpThis.adManager) {\n          dfpThis.adManager.refreshAllSlots();\n        }\n        else {\n          throw new Error('initWindowResizeListener error - adManager instance is not available');\n        }\n      }\n    }\n    const debouncedFunction = debounce(onResize, resizeTimeout);\n    window.onresize = debouncedFunction;\n  }\n}\n","import DFP from './dfp';\nimport globalConfig from './globalConfig';\nimport { version as v } from './../package.json';\n// const pkg = require('./../package.json');\n\n// DFP version is based on the package.json\nDFP.version = v || 'VERSION';\n\n/*\n // Only for development mode\n if ( process.env.NODE_ENV !== 'production' ) {\n DFP.dev = '123';\n }\n */\n\nexport const config = globalConfig;\nexport const version = DFP.version;\nexport default DFP;\n"]}