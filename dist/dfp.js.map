{"version":3,"sources":["../src/utils/cookieUtils.js","../src/globalConfig.js","../src/utils/time.js","../src/utils/breakpoints.js","../src/utils/arrays.js","../src/objects/adSlot.js","../jspm_packages/npm/systemjs-plugin-babel@0.0.17/babel-helpers/classCallCheck.js","../jspm_packages/npm/systemjs-plugin-babel@0.0.17/babel-helpers/createClass.js","../jspm_packages/npm/systemjs-plugin-babel@0.0.17/babel-helpers/toConsumableArray.js","../src/objects/impressionsManager.js","../src/objects/user.js","../src/objects/conflictResolver.js","../src/objects/adManager.js","../src/dfp.js","../src/index.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;AAgBA,WAAS,YAAY,QACuB;mFAAJ;8BAApC;QAAA,2CAAY,MAA4B;6BAAvB;QAAA,yCAAW,MAC9B;;QAAM,MAAM;QACN,WAAW,OAAO,MAAM;aACrB,QAAQ,mBAAW;UACtB,OAAO,YAAY,UAAU;YACzB,WAAW,QAAQ,MAAM;YAC3B,SAAS,WAAW,GAAG;cACrB;gBACE,SAAS,MAAM,mBAAmB,SAAS;YAEjD,OAAO,GAAG;;;;;;WAMT;AAET,AAAO;;;;AAGP,AAAe,WAAS,iBAAiB;QACjC,MAAM,YAAY,SAAS,QAAQ,EAAE,WAAW;QAClD,OAAO,IAAI,UAAU,UAAU;UAC7B,QAAQ,YAAY,IAAI,OAAO,EAAE,WAAW;;QAE9C,OAAO,IAAI,WAAW,UAAU;UAC9B,SAAS,YAAY,IAAI,QAAQ,EAAE,WAAW;;WAE7C;;;AC9CT;AACA,AACA,AACA;;;ACHA;;;;;;;;;AASA,AAAO,WAAS,SAAS,MAAM,OAAO;QAChC,CAAC,MAAM;YACH,IAAI,YAAY;;QAEpB,CAAC,OAAO;YACJ,IAAI,YAAY;WAEnB,IAAI,MAAM,SAAS,OAAO,MAAM;YAC7B,IAAI,UAAU;;QAEhB,SAAS,IAAI,KAAK;WACjB,SAAS,OAAO,aAAa,SAAS,OAAO;WAC7C;;;;;;;;;;;;AAYT,AAAO,WAAS,QAAQ,MAAM,MAAM;QAC9B,CAAC,MAAM;YACH,IAAI,YAAY;;QAEpB,CAAC,MAAM;YACH,IAAI,YAAY;WAEnB,IAAI,MAAM,SAAS,MAAM,MAAM;YAC5B,IAAI,UAAU;;QAEhB,SAAS,IAAI,KAAK;WACjB,QAAQ,OAAO,YAAY,SAAS,MAAM;WAC1C;AC3CT;;;;;;;;;;;;AAYA,AAAO,WAAA,SAAA,MAA+C;QAAvB,2EAAO;QAAK,sBACzC;;QAAI,eAAJ;WACO,SAAA;UACC,UAAN;UACM,OAFoB;UAGpB,QAAQ,SAAR,QAAc;kBAClB;YACI,CAAJ,WAAgB,KAAA,MAAA,SAAA;;UAEZ,UAAU,aAAa,CAA7B;mBACA;gBACU,WAAA,OAAV;UACA,SAAa,KAAA,MAAA,SAAA;;;;;;;;AAQjB,AAAO,WAAA,gBAAyB;QAC1B,kBAAJ;QACM,cAAc,OAAA,cACf,SAAA,gBADe,eAEf,SAAA,KAFL;YAGA;WACO,cAAc,YAAnB;qBAAgD,YAAb,IAA8B;WAC5D,cAAc,YAAnB;qBAA+C,YAAb,GAA6B;WAC1D,cAAc,YAAnB;qBAA+C,YAAb,EAA4B;WACzD,cAAc,YAAnB;qBAA+C,YAAb,EAA4B;WACzD,cAAc,YAAnB;qBAAgD,YAAb,EAA4B;WAC1D,cAAc,YAAnB;qBAAiD,YAAb,GAA6B;;qBAC3C,YAPxB;;WASA;;;;;;;;;AASF,AAAO,WAAA,kBAAA,YAAuC;QACxC,wBAAJ;QACM,cAAc,cAAc,OAAlC;YACA;WACO,cAAc,YAAnB;2BAAmC,MAA0B;WACxD,cAAc,YAAnB;2BAAkC,KAAyB;WACtD,cAAc,YAAnB;2BAAkC,IAAwB;WACrD,cAAc,YAAnB;2BAAkC,IAAwB;WACrD,cAAc,YAAnB;2BAAmC,IAAwB;WACtD,cAAc,YAAnB;2BAAoC,KAAyB;;2BAN/D;;WASA;;;ACrEF;;;;;;AAMA,AAAO,WAAS,cAAY,GAAG,GAAG;QAC5B,CAAC,KAAK,CAAC,GAAG,OAAO;QACjB,CAAC,MAAM,QAAQ,MAAM,CAAC,MAAM,QAAQ,IAAI,OAAO;QAC/C,MAAM,GAAG,OAAO;QAChB,EAAE,WAAW,EAAE,QAAQ,OAAO;SAC7B,IAAI,IAAI,GAAG,IAAI,EAAE,QAAQ,EAAE,GAAG;UAC7B,MAAM,QAAQ,EAAE,OAAO,MAAM,QAAQ,EAAE,KAAK;YAC1C,CAAC,cAAY,EAAE,IAAI,EAAE,KAAK,OAAO;aAElC,IAAI,EAAE,OAAO,EAAE,IAAI;eACf;;;WAGJ;AAET;;ACrBA,AACA,AACA,AACA,AAEA;;;ACLA;;;wBAAgB,UAAA,AAAU,UAAV,AAAoB,aAAa;YAC3C,EAAE,oBAAN,AAAI,AAAsB,cAAc;gBAChC,IAAA,AAAI,UAAV,AAAM,AAAc;;AAFxB,ACAA;;qBAAgB,YAAY;iBAC1B,AAAS,iBAAT,AAA0B,QAA1B,AAAkC,OAAO;eAClC,IAAI,IAAT,AAAa,GAAG,IAAI,MAApB,AAA0B,QAA1B,AAAkC,KAAK;gBACjC,aAAa,MAAjB,AAAiB,AAAM;uBACvB,AAAW,aAAa,WAAA,AAAW,cAAnC,AAAiD;uBACjD,AAAW,eAAX,AAA0B;gBACtB,WAAJ,AAAe,YAAY,WAAA,AAAW,WAAX,AAAsB;mBACjD,AAAO,eAAP,AAAsB,QAAQ,WAA9B,AAAyC,KAAzC,AAA8C;;;;eAI3C,UAAA,AAAU,aAAV,AAAuB,YAAvB,AAAmC,aAAa;cACrD,AAAI,YAAY,iBAAiB,YAAjB,AAA6B,WAA7B,AAAwC;cACxD,AAAI,aAAa,iBAAA,AAAiB,aAAjB,AAA8B;iBAC/C,AAAO;AAHT;AAXF,AAAe,ACAf,ODAe;;2BCAC,UAAA,AAAU,KAAK;YACzB,MAAA,AAAM,QAAV,AAAI,AAAc,MAAM;eACjB,IAAI,IAAJ,AAAQ,GAAG,OAAO,MAAM,IAA7B,AAAuB,AAAU,SAAS,IAAI,IAA9C,AAAkD,QAAlD,AAA0D;iBAAK,AAAK,KAAK,IAAV,AAAU,AAAI;AAE7E,kBAAA,AAAO;AAHT,eAIO;iBACE,MAAA,AAAM,KAAb,AAAO,AAAW;;AANtB;;ARmCa,eAAS,OAAO,SAAS,SAAS,QAAQ,iBAAiB,CAAC,IAAI,WAAW;AChCpF,yBAAJ;;AACA,UAAI;sBACY,OAAA,KAAA,MAAkB,SAAA,eAAA,aAAhC;QAEF,OAAA,KAAY;sBACI,OAAd;AAEF;AAAM,yBAAY;YAChB,WAAe;iBACN,SAAA,WAAoB,SAApB,WAAP;;YAEF,WAAe;mFACL,KACA,OAAA,UAAA,aADR;;;;;;;YAOF,aAAiB;iBACR,OAAA,SAAA,aAAA,OAAoC,KAAA,gBAD5B;;YAGjB,aAAiB;iBACR,KAAA,aAAA,cAAP;;;;;;YAMF,SAAa;cACL,aAAa,kCAAA,KAAuC,OAAA,SAA1D;cACM,SAAS,aAAa,WAAb,KAA6B,OAAA,SAA5C;iBACA;;;;;;;;;;;;;;YAcF,OAAW;cACL,eAAe,KAAA,aAAkB,KAAA,cAAlB,MACjB,OAAA,SAAA,SAAA,MAAA,KAAA,MAAA,GAA6C,CAD5B,KAEjB,OAAA,SAAA,SAAA,MAAA,KAAA,MAFF;sCAGe,OAAoB,gBAAA;mBACnC,SAAA,mBAA4B,SADO;AAApB;8BAER,IACA,mBAAA;yBAAA;AADA,aAAA,IAEA,UAAA,SAAA,OAAA,KAAA;uBAAyB,MAAA,GAAa,QAAb,GAAA,OACpB,UAAA,MAAA,SAAA;qBAAmB,KAAA,OAAnB;AADoB;;;;;;;YAOlC,OAAW;cACL,YAAJ;cACI,OAAA,SAAA,SAAA,QAAA,mBAAoD,CAAxD,GAA4D;mBAC1D;qBAEO,OAAA,SAAA,SAAA,QAAA,mBAAoD,CAAxD,GAA4D;mBAC/D;AADG,iBAGA,IAAI,OAAA,SAAA,SAAA,QAAA,iBAAkD,CAAtD,GAA0D;mBAC7D;;iBAEK,QAAP;;;;;;;YAOF,cAAkB;cACV;iBAAM;kBAAA;kBAAZ;;iBAKO,OAAA,SAAA,SAAA,SAAkC,IAAlC,MACJ,OAAA,SAAA,SAAA,QAAA,uBAAwD,CAAxD,KACE,OAAA,SAAA,SAAA,QAAA,0BAA2D,CAD7D,KAEE,OAAA,SAAA,SAAA,QAAA,qBAAsD,CAFxD,KAGE,OAAA,SAAA,SAAA,QAAA,2BAA4D,CAH/D,IAGqE,IAHrE,OAIG,OAAA,SAAA,SAAA,QAAA,8BAA+D,CAA/D,KACE,OAAA,SAAA,SAAA,QAAA,gCAAiE,CADnE,KAEE,OAAA,SAAA,SAAA,QAAA,4BAA6D,CAFhE,IAGI,IAHJ,OALJ;;;;;;YAcF,YAAgB;cACR,iBAAiB,WAAA,KAAgB,OAAA,SAAvC;cACI,YAAJ;cACA,gBAAoB;wBACN,eADM;;iBAGpB;;;cAGA,UAAc;mBACL,KAAA,YAAP;;cAEF,SAAa;mBACJ,KAAA,YAAP;;cAEF,SAAa;mBACJ,KAAA,YAAP;;cAEF,WAAe;mBACN,KAAA,YAAP;;4CAXE,KAaa;gBACT,UAAU,aAAA,sBAAA,KAAmC,OAAA,SAAnD;mBACO,WAAW,QAAX,KAAwB,QAAxB,KAAP;;;YAGJ,iBAAqB;cACf,iBAAJ;cACI;gBACE,aAAA,QAAJ,oBAA6C;+BAC3C;;YAGJ,OAAA,KAAY;;;iBAGZ;;YAEF,cAAkB;iBACT,OAAA,aAAA,QAAP;;YAEF,cAAkB;cACV,aAAN;cACM,YAAN;cACI,cAAJ;cACI,aAAa,UAAjB,aAAwC;0BACxB,UAAd;;iBAEF;;YAEF,iBAAqB;iBACX,SAAA,OAAA,QAAA,uBAA+C,CAAvD;;YAEF,eAAmB;cACb,oBAAJ;cACM,aAFW;cAGX,YAAN;cACI;gBACE,aAAa,UAAjB,aAAwC;kBAClC,UAAA,YAAA,kBAAJ,WAAuD;+BACrD;;kBAEE,UAAA,YAAA,kBAAJ,cAA0D;+BACxD;;;YAIN,OAAA,KAAY;;;iBAGZ;;YAEF,uBAA2B;cACrB,cAAJ;cACM,UAAU,OAAA,SAAhB;cACM,kBAAkB,QAAA,MAAxB;cACM,YAAN;cACI;gBACF,iBAAqB;;kBAEf,CAAA,aAAc,EAAE,UAAA,YAAsB,UAA1C,UAA8D;8BAC5D;;;YAIN,OAAA,KAAY;;;iBAGZ;;YAEF,sBAA0B;cACpB,qBAAJ;cACI;4BACc,aAAA,QAAA,mBACd,KAAA,MAAW,aAAA,QADG,oBAAhB;YAGF,OAAA,KAAY;;;4BAGV;;iBAEK,gBAAgB,cAAhB,iBAAP;;YAEF,WAAe;cACT,OAAJ;cACI;gBACI,gBAAgB,SAAA,cAAA,QAAtB;oBACA;mBACO,iBAAA,KAAL;uBACE;;mBAEG,cAAA,KAAL;uBACE;;mBAEG,oBAAA,KAAL;uBACE;;;uBARJ;;YAcF,OAAA,KAAY;;;mBAGV;;iBAEF;;YAEF,iBAAqB;cACf,gBAAJ;cACI;uBACS,aAAA,QAAA,kBACT,aAAA,QADS,kBAAX;YAGF,OAAA,KAAY;;;uBAGV;;iBAEF;;;;gBAG8B;;wBAAA;4BAIZ,CAAA,UAAhB,mBAA0C,CAAA,UAJd;sBAAA;mBAAA;;oBAQpB,CAAA,UAAN,mBAAgC,CAAA,UADT;mBAElB,CAAA,UAAL,mBAA+B,CAAA,UAFR;kBAGnB,CAAA,UAAJ,mBAA8B,CAAA,UAHP;kBAInB,CAAA,UAAJ,mBAA8B,CAAA,UAJP;kBAKnB,CAAA,UAAJ,mBAA8B,CAAA,UALP;mBAMlB,CAAA,UAAL,mBAA+B,CAAA,UANR;oBAOjB,CAAA,UAAN,mBAAgC,CAAA,UAdN;;gCAAA;gCA1OF;;;;mBA8Pb;sBA9Pa;;;cAmQ5B,cAAkB;;gBAEZ,mBAAJ;oBACQ,UAAA,qBAAR;mBACE;8BAA4B,KAAd,aAAiC;mBAC/C;8BAA4B,KAAd,aAAiC;mBAC/C;8BAA4B,KAAd,aAAiC;mBAC/C;8BAA4B,KAAd,aAAiC;;8BACxB,KALzB;;mBAOA;;;;iBAGY;gBAAA;eAAA;eAAA;eAAA;gBAAA;iBAdG;;;;iBAwBH;gBAAA;eAAA;eAAA;eAAA;gBAAA;iBAxBG;;;;iBAkCH;gBAAA;eAAA;eAAA;eAAA;gBAAA;iBAlCG;;;;iBA4CH;gBAAA;eAAA;eAAA;eAAA;gBAAA;iBA9Sc;;;;gBAwTlB;eAAA;kBAxTkB;;;;oBA+T1B;mBADuB;;oBAKvB;mBAnU0B;;;;;oBA0UZ;uBAAA;qBAAA;qBAIJ,IAAD,OA9UiB;;;;+BAiVR;gCAAA;+BAAA;0BAjVQ;;aAAd;;SAAlB,AA2VA;AEnWM,oBAAc,UAAA,kBAApB;AMEa;qBAAO;mBAAA;;;;;;;wBAAA;iBAAA;iBAAA;gBAAA;wBAAA;eAAA;cAAA;kBAAb;;;uCAqBL;oCAAA;gCACE;;eAAA,MAAY,IAAD,OADwB;eAEnC,SAAc,OAAA,OAAA,IAAd;eACA,cAAmB,KAAnB;eACA;;;;;oDAGwB;wBACxB;;gBAAM,cAAc,KAApB;;;;;mBAKA,KAAA,aAAA,IAA6B,UAAA,KAAA,OAAgB;0BAC3C,OAAmB,OAAA,OAAA,IAAkB,YAAlB,MAAoC,MAAA,OAAvD;qBAED;;;;;;iBAKI,IAAL,OAAA,aAA+B;kBACzB,GAAA,eAAA,KAAA,aAAJ,MAA8C;oBACxC,CAAC,YAAA,KAAiB,KAAtB,YAAuC;;yBAE9B,YAAP;;;;;mBAKN;;;;mDAGuB;yBACvB;;gBAAI,mBAAJ;gBACI,uBAAJ;gBACI;gCACgB,OAAA,aAAA,QAA4B,KAA9C;cAEF,OAAA,KAAY;;gCAEV;;gBAEE;4BACY,KAAA,MAAd;cAEF,OAAA,KAAY;;4BAEV;kBACM,sCAAsB,MAAA,KAAA,OAAkC,aAAA;uBAAA;AAAlC;;kCAE5B,QAA4B,UAAA,YAAgB;oBACtC;sBACI,mBAAmB,WAAA,MAAzB;sBACM,OAAO,iBAAb;sBACM,OAAO,iBAAb;sBACM,MAAM,KAAA,MAAZ;sBACI,SAAS,IAAb;sBACI,UAAU,WAAd,MAA+B;6BAC7B;;sBAEI,SAAS,IAAA,KAAf;sBACM,KAAA,eAAN;sBACM,UAAU,SAAS,KAAA,MAAA,KAAT,IAAA,OAAhB;sBACM,UAAU,SAAS,KAAA,MAAA,KAAT,IAAA,OAAoC,OAApD;8BACA,MAAA;8BACA,IAAgB,KAAhB,YAAA;8BACA,IAAgB,KAAhB,UAAA;8BACA,IAAgB,KAAhB,WAAA;8BACA,IAAgB,KAAhB,WAAA;kBAEF,OAAA,MAAa;;;;;mBAKV,eAAP;;;;;;;;;0DAM8B;gBAC1B,KAAA,iBAAsB,OAAO,KAAP,kBAA1B,YAAoE;mBAClE;mBAEG;mBACH,gBAAqB,SAAS,KAAT,mCAAA,KAArB;mBACA;;;;;;;;;;8DAOgC;gBAC9B;2BACF,QAAqB,KAArB,aAAuC,KAAA,UAAe,KAAtD;cAEF,OAAA,KAAY;;;sBAGV,MAAA,kCAHU;;;;;;;;;;;8CAWM;yBAClB;;mBAAA,KAAY,KAAZ,QAAA,IAA6B,UAAA,KAAA;kBACrB,WAAN;kBACM,OAAO,OAAA,YAAb;kBACI,yBAAJ;;kBAEA,MAAU;;oBAEJ,OAAA,OAAA,UAAsB,KAAtB,eAA0C,KAAK,KAAnD,YAAoE;;2CAElE;yBACA,YAAA,UAA2B,KAA3B,aAA6C,OAAA,OAAA,UAAsB,KAAnE;;qBAEG,IAAI,OAAA,MAAW,KAAK,KAApB,UAAmC;;6CAEtC;;;mBAGC;yBACH,mBAAA;AAlByC;kBAoB3C,wBAA4B;uBAC1B,iBAAA;;qBAGH;;;;;;;;;;;2CAOc,UAAU;gBACnB,MAAM,IAAZ;gBACI,EAAE,KAAA,YAAA,aAA8B,KAAA,YAAA,UAA2B,KAA/D,aAAiF;oBACzE,IAAA,kDAAA,oDAC0B,KAAA,YADhC;;gBAGI,eAAe,KAAA,YAAA,UAA2B,KAA3B,WAAA,MAAiD,KAAtE;gBACA,gBAAA;gBACA,WAAA;gBACA,WAAA;gBACI,aAAA,QAAqB,KAArB,QAAkC,CAAtC,GAA0C;kBACxC,SAAA;;iBAEF,YAAA,UAA2B,KAA3B,WAA2C,CAAC,aAAA,QAAqB,KAArB,QAAkC,CAAlC,IAC1C,QAAA,KAAa,aAD6B,MACV,SAAA,KAAc,aADL,KAA3C;;;iBAIA,YAAA,UAA2B,KAA3B,kBAAkD,SAAS,aAAT,IAAlD;;iBAEA,YAAA,UAA2B,KAA3B,WAAA;;;;;;;;;;6CAOiB,UAAU;gBACrB,OAAO,KAAA,YAAA,aAAb;iBACK,KAAL,aAAuB,KAAA,OAAA,UAAsB,KAA7C;iBACK,KAAL,UAAoB,KAAA,OAAA,UAAsB,KAA1C;iBACK,KAAL,WAAA;iBACA,YAAA,YAAA;iBACA,iBAAA;;;;;;;;;;;6CAQiB,UAAU;gBAC3B,UAAc;kBACN,OAAO,KAAA,YAAb;kBACA,MAAU;oBACF,UAAU,KAAK,KAArB;oBACI,MAAM,SAAA,SAAN,SAAJ,OAA4C;uBAC1C,YAAA,UAA2B,KAA3B,YAAA;sBACI;yBACF;oBAEF,OAAA,KAAY;;;yBAGZ;;;;mBAIN;;;;;;;;;;;iDAQqB;;;gBAGf,WAAW,KAAA,iBAAA,WAA+B,UAA/B,mBAAA,WACD,UADC,aAAA,WAAjB;;gBAGM,OAAO,KAAA,YAAb;gBACI,UAAJ;gBACA,MAAU;kBACF,MAAO,IAAD,OAAZ;;kBAEM,UAAU,KAAA,YAAA,UAA2B,KAA3C;kBACI,UAAJ,KAAmB;qBACjB,iBAAA;qBAEG;oBACG,iBAAiB,KAAA,YAAA,UAA2B,KAAlD;;oBAEA,gBAAoB;4BACR,KAAA,YAAA,UAA2B,KAA3B,YAAV;;;;mBAIN;;;;;;;;;6CAOiB;gBACX,cAAc,KAApB;iBACK,IAAL,OAAA,aAA+B;kBACzB,GAAA,eAAA,KAAA,aAAJ,MAA8C;oBACxC,YAAA,KAAiB,KAArB,UAAoC;8BAClC,KAAiB,KAAjB,WAAA;;;;iBAIN;;;;;;;AC3QS;eAAY;oBAAA;mBAAA;eAAlB,AAOP;;AAAa;aAAe;YAAA;aAAA;gBAArB;;;yBAQL;sBAAA,QAAoB;gCAClB;;eAAA,SAAc,OAAA,OAAA,IAAkB,OAAhC;cACM,YAAN;eACA,SAAc,UAAd;cACI,CAAC,UAAU,KAAf,SAA6B;;iBAE3B,SAAc,KAAA,WAAA,UAAA,WAAd;;eAEF,OAAY,KAAA,YAAZ;eACA,WAAgB,KAAA,qBAAA,WAAqC,aAArD;eACA,UAAe,KAAA,qBAAA,WAAqC,aAApD;eACA,WAAgB,KAAA,qBAAA,WAAqC,aAArD;eACA,oBAAyB,IAAA,mBAAsB,OAA/C;eACA,MAAW,KAAA,WAAX;eACA,SAAc,KAAA,cAAd;eACA,MAAW,KAAA,WAAA,WAA2B,KAAtC;;;;;sCAGU,WAAW;gBACjB,gBAAJ;gBACI,aAAa,UAAU,KAA3B,SAAyC;yBAC3B,UAAA,WAAqB,UAArB,UAAyC,UAA1C,UACT,YADS,QACS,YADpB;mBAGG;yBACQ,YAAX;;mBAEF;;;;+CAImB,WAAW,aAAa;gBACvC,WAAW,YAAf;gBACI,aAAa,UAAU,KAA3B,SAAyC;kBACnC,UAAJ,cAA4B;oBACtB,eAAe,mBAAmB,UAAtC;+BACe,KAAA,MAAf;oBACI,gBAAgB,aAApB,KAAsC;6BACzB,KAAA,eAAX;uBAEG;6BACQ,KAAA,iBAAA,cAAX;;;;mBAIN;;;;yCAGa,cAAc;;gBAEvB,KAAA,eAAA,cAAkC,aAAlC,KAAJ,QAAgE;qBACvD,YAAP;;;iBAGG,IAAI,KAAA,eAAA,cAAkC,aAAlC,KAAJ,OAA+D;uBAC3D,YAAP;;mBAEK,YAAP;;;;2CAGe,cAAc,aAAa;;gBAEtC,KAAA,eAAA,cAAA,aAAA,UACF,KAAA,eAAA,cAAkC,aAAlC,QADF,QACiE;qBACxD,YAAP;;;iBAGG,IAAI,KAAA,eAAA,cAAA,aAAA,SACP,KAAA,eAAA,cAAkC,aAAlC,QADG,OAC2D;uBACvD,YAAP;;mBAEK,YAAP;;;;yCAGa,cAAc,aAAa,OAAO;gCACxC,SAAA,OACK,mBAAA;qBAAW,QAAA,YAAA,eAAmC,QAAA,UAA9C;AADL,eAAA,SAAP;;;;qCAKS,WAAW;gBAChB,WAAJ;gBACM,QAAQ,UAAU,KAAV,WAA0B,UAAU,KAAV,QAAxC;gBACA,OAAW;oBACH,SAAS,UAAU,KAAV,QAAT,OAAN;oBACM,MAAA,IAAA,MAAN;;mBAEF;;;;wCAGY,WAAW;gBACnB,cAAJ;gBACM,QAAQ,UAAU,KAAV,WAA0B,UAAU,KAAV,QAAxC;gBACA,OAAW;uBACA,SAAS,UAAU,KAAV,QAAT,OAAT;uBACS,WAAA,KAAgB,WAAhB,IAAA,SAAT;;mBAEF;;;;gDAGoB,WAAQ;mBACrB,UAAP;;;;;;;ACxHE,qCACJ;kCAAA,0BAAsC;gCACpC;;eAAA,gBAAqB,KAAA,wBAArB;eACA,gBAAqB,IAArB;;;;;0EAE8C;wBAC9C;;gBAAM,QAAQ,IAAd;mBACA,KAAA,wBAAA,IAAwC,UAAA,KAAA,OAAgB;kBAClD,QAAQ,uBAAZ;kBACA,OAAW;8BACD,OAAa,UAAA,MAAA;yBAAU,KAAA,UAAe,KAAzB;AAAb;;oBAEV,IAAA;oBAAe;uBAAA;8BAAf;;qBAMD;;mBACD;;;;6CAGiB,UAAU,cAAc;gBACrC,CAAJ,UAAe;oBACP,IAAA,MAAN;;gBAEE,CAAJ,cAAmB;oBACX,IAAA,MAAN;;gBAEE,KAAA,cAAA,IAAJ,WAAsC;mBACpC,cAAA,IAAA,UAAA,eAAA;;;;;oCAKM,UAAU;yBAClB;;gBAAI,CAAJ,UAAe;oBACP,IAAA,MAAN;;gBAEE,YAJc;4CAAA;oCAAA;iCAAA;;gBAKlB;mCAAwB,KAAA,cAAxB,oIAAmD;oBAAxC,kBACT;;oBAAM,SAAS,KAAA,cAAA,IADkC;iDAAA;yCAAA;sCAAA;;oBAEjD;wCAAyB,OAAzB,wIAAuC;wBAA5B,oBACT;;;wBACI,WAAA,UAAJ,UAAmC;mCACjC;4BAAM,qBAAqB,OAA3B;;4BAEI,CAAJ,oBAAyB;sCACvB;iCACA,cAAA,IAAA;;uCAEE,OAAA,MAAA,KAAA,KAAkC,sBAAc;;8BAC5C,kBAAO,MAAA,KAAA,IAA0B,qBAAA;mCAAa,SAAA,WAAb;AAA1B;iCACN,OAAA,YAAA,MAAP;AAFE,4BAGA;;iCAEF,cAAA,IAAA;sCACA;;;;;8BAjB2C;uCAAA;oCAAA;0BAAA;sBAAA;0EAAA;iCAAA;;4BAAA;4CAAA;4BAAA;;;;;0BALjC;kCAAA;+BAAA;sBAAA;kBAAA;oEAAA;4BAAA;;wBAAA;uCAAA;wBAAA;;;;;mBA2BlB;;;;qCAGS,UAAU;gBACf,CAAJ,UAAe;oBACP,IAAA,MAAN;;gBAEE,aAJe;6CAAA;qCAAA;kCAAA;;gBAKnB;oCAAwB,KAAA,cAAxB,yIAAmD;oBAAxC,mBACT;;oBAAI,cAAJ,UAA4B;+BAC1B;;;0BAPe;mCAAA;gCAAA;sBAAA;kBAAA;sEAAA;6BAAA;;wBAAA;wCAAA;wBAAA;;;;;mBAUnB;;;;;;;;;;;6CAQiB,UAAU;gBACvB,cAAJ;gBACI,KAAA,cAAA,IAAJ,WAAsC;6BAC3B,UAAW,cAAA,IAAA,UAAA,MAAA,IAA2C,kBAAA;uBAAU,OAAV;AAAtD,AAAW;;mBAEf,UAAP;;;;yCAGa,GAAG;gBACZ,MAAJ,GAAa,OAAA;gBACT,MAAA,QAAc,MAAlB,MAA8B,OAAA;gBAC1B,EAAA,WAAa,EAAjB,QAA2B,OAAA;iBACtB,IAAI,IAAT,GAAgB,IAAI,EAApB,QAA8B,EAA9B,GAAmC;kBAC7B,EAAA,OAAS,EAAb,IAAmB,OAAA;;mBAErB;;;;;;;AAGJ,uBAAA,aAAA,AACA,GNjGM,cAAc,UAAA,KAAA,QAAA,WAAqC,CAArC,IAAA,gBAApB;;2BAIE;wBAAA;gCACE;;eAAA,SAAc,OAAA,OAAA,IAAd;;;eAGA,KAAU,KAAA,OAAV;cACI,CAAC,KAAA,OAAL,IAAqB;kBACb,IAAA,MAAN;;eAEF,SAAc,KAAA,OAAd;eACA,OAAY,KAAA,OAAZ;eACA,aAAkB,KAAA,OAAlB;eACA,QAAa,KAAA,OAAb;eACA,OAAY,KAAA,OAAZ;eACA,YAAiB,KAAA,OAAjB;eACA,cAAmB,KAAA,OAAnB;eACA,WAAgB,KAAA,OAAhB;eACA,eAAoB,KAAA,OAApB;;;eAGA,aAAkB,KAAA,OAAlB;eACA,UAAe,KAAA,OAAf;eACA,aAAkB,KAAA,OAAlB;;;eAGA,gBAAqB,KAAA,OAArB;eACA,0BAA+B,KAAA,OAA/B;eACA,qBAA0B,KAAA,OAAA,qBACxB,KAAA,OAAA,mBAAA,MADwB,OAA1B;eAEA,qBAA0B,KAAA,OAAA,qBACxB,KAAA,OAAA,mBAAA,MADwB,OAA1B;;;eAKA,mBAjCwB;eAkCxB,6BAlCwB;eAmCxB,OAnCwB;;cAqCpB;gBACE,CAAC,KAAL,cAAwB;mBACtB,OAAY,KAAZ;;YAGJ,OAAA,KAAY;oBACV,MADU;;;;;;;;;;;;wCAUA;gBACR,OAAO,KAAP,SAAJ,UAAmC;oBAC3B,IAAA,MAAA,iCAAN;;gBAEE,KAAA,eAAJ,MAA8B;qBAC5B;;oBAEM,KAAR;mBACO,QAAL;uBAAuB;mBAClB,QAAL;uBAAuB;mBAClB,QAAL;uBAAuB;mBAClB,QAAL;uBAAsB;;uBAJxB;;;;;;;;;;;;uCAcW;gBACP,OAAO,KAAP,SAAJ,UAAmC;oBAC3B,IAAA,MAAA,iCAAN;;gBAEE,KAAA,eAAJ,MAA8B;qBAC5B;;oBAEM,KAAR;mBACO,QAAL;uBAAuB;;uBADzB;;;;;qCAMS;qFACD,KACA,OAAA,UAAA,aADR;;;;;;;;;;;;;0CAUc;gBACV,cAAJ;gBACI,KAAA,mBAAA,WAAJ,GAA0C;8CAAA;sCAAA;mCAAA;;kBACxC;qCAAuB,KAAvB,gJAAgD;sBAArC,iBACT;;sBAAI,UAAA,SAAA,QAAA,YAA0C,CAA9C,GAAkD;kCAChD;;;;4BAHoC;oCAAA;iCAAA;wBAAA;oBAAA;sEAAA;8BAAA;;0BAAA;yCAAA;0BAAA;;;;mBAQrC;4BACH;;mBAEF;;;;;;;;;;;;;0CAUc;gBACV,cAAJ;gBACI,KAAA,mBAAA,WAAJ,GAA0C;+CAAA;uCAAA;oCAAA;;kBACxC;sCAAuB,KAAvB,qJAAgD;sBAArC,kBACT;;sBAAI,UAAA,SAAA,QAAA,YAA0C,CAA9C,GAAkD;kCAChD;;;;4BAHoC;qCAAA;kCAAA;wBAAA;oBAAA;wEAAA;+BAAA;;0BAAA;0CAAA;0BAAA;;;;;mBAQ1C;;;;;;;;;;iCAQK;wBACL;;gBAAI,CAAC,KAAD,UAAJ;mBACE,QADwB;wBAExB,IAAA,KAAmB,YAAM;oBACnB,MAAJ,cAAuB;wBACrB,OAAY,MAAZ;;;yBAGF,eAAwB,MAAxB,IAAA,UAAA,OAAA;0BACA,QAAkB,MAAlB;;;;;;;;;;;;iCASC;yBACL;;sBAAA,IAAA,KAAmB,YAAM;uBACvB,eAAwB,OAAxB,IAAA,UAAA,IAAA;;;;;;;;;;;uCAQS;gBACP,KAAJ,cAAuB;kBACf,eAAe,KAArB;kBACI,KAAA,UAAA,uBAAJ,OAAiD;oBAC3C,CAAC,KAAL,OAAiB;uBACf,QADe;+BAEf;;;qBAGJ;;gBAEI,YAAY,OAAlB;gBACM,SAAS,UAAf;gBACM,OAAN;gBACM,WAAW,KAAA,gBAAqB,UAArB,sBAAqD,UAAtE;;iBAEA,KAAU,KAAV;gBACI,KAAA,kBAAJ,OAAkC;kBAC5B,KAAJ,OAAgB;qBACd,KAAA;qBAEG;qBACH,KAAU,KAAV;;;iBAGJ,KAAU,KAAV;gBACI,OAAO,SAAA,MAAA,UAAX;gBACA,MAAU;;kBAEJ,KAAJ,YAAqB;oBACf,4BAA4B,UAAhC;oBACM,cAAc,UAAA,kBAApB;oBACM,OAAO,OAAA,KAAY,KAHN;iDAAA;yCAAA;sCAAA;;oBAInB;wCAAA,uIAAwB;wBAAb,aAAe;;8CACxB,QACE,CAAC,YAAD,MADF;qBAEG,cAAY,KAAA,wBAAZ,MAA+C,CAAC,CAAA,GAAjD,OACE,KAAA,wBADF,OAFF;;8BALiB;uCAAA;oCAAA;0BAAA;sBAAA;0EAAA;iCAAA;;4BAAA;4CAAA;4BAAA;;;;;4CAUS,0BAA5B;uBACO,KAAA,kBAAP;;qBAEK,KAAA,WAAP;kBACI,KAAA,kBAAJ,OAAkC;qBAChC,oBAAA;;;mBAGJ;;;;;;;;;;oCAOQ;yBACR;;;gBACI,OAAO,UAAA,QAAX;wBACO,OAAY,gBAAA;qBAAQ,SAAR;AAAZ;wBACA,IAAS,mBAAA;0BAAc,OAAd,KAAwB,OAAxB,aAAA;AAAT,eAAA,KAAP;;mBAEO,QAAQ,KAAA,OAAA,eAAR,oBAAA,OAAP;;gBAEM,uBAAqB,KAAA,OAArB,gBAA4C,KAAA,OAA5C,mBAAsE,KAAtE,WAAiF,KAAjF,KAA2F,KAA3F,aARE;mBASD,eAAP;;;;;;;;gBAKM,KAAK,MAAA,KAAA,gBAAA,MAAA,KADO;gBAEZ,UAAU,MAFE;gBAGZ,eAAe,MAHH;;;;;;;;;;;oCAWV;yBACR;;sBAAA,IAAA,KAAmB,YAAM;wBACvB,SAAA,QAA2B,CAAC,OAA5B;;;;;;;;;;;2CAQa;gBACX,CAAC,SAAA,SAAA,MAAL,gBAA6C;kBACrC,qBAAqB,KAA3B;kBACM,qBAAqB,CACzB,CAAA,GADF;kBAGM,OAAO,UAAA,SAAA,eAAA,oBAAA,oBAAA,aAAA,YACe,CAAC,KAAA,KADhB,OAAA,aAAA,OAEU,CAAC,KAAA,KAFX,MAAA,aAAA,SAGY,CAAC,KAAA,KAHb,SAAA,aAAA,aAIgB,CAAC,UAJjB,YAAA,aAAA,OAKU,CAAC,UALxB;qBAMA;;mBAEF;;;;;AOrRJ,AACA,AACA,AACA,AACA,AACA,AAEA,AAEA;;AAAa;cAAe;gBAAA;aAArB,AAMP;;AAAa;aAAY;mBAAA;mBAAA;oBAAA;gBAAA;qBAAA;yBAAlB,AAWP;;AAAa;mBAAY;oBAAA;eAAlB,AAMP;;AAAa;kBAAU;kBAAA;kBAAA;iBAAhB;;;8BAUL;2BAAA,QAAoB;sBAAA;;gCAClB;;eAAA,SAAc,OAAA,OAAA,IAAd;eACA,OAAY,IAAA,KAAZ;eACA,mBAAwB,IAAA,iBAAqB,OAA7C;;;;;;;;;cASI;sBACF,IAAA,KAAmB,YAAM;oBAAA;oBAAA;oBAAA;;;gBAMnB,wBAAwB,kBAA9B;gBACI,KAAA,OAAA,gBAAA,WAAA,QAAA,iBAAgE,CAAhE,KACF,sBAAA,QAAA,QAAsC,CADxC,GAC4C;mBAC1C,OAAA,gBAAA,aAAA;;;sBAGF,IAAA,KAAmB,YAAM;oBACvB,UAAe,MAAA,YAAiB,OAAjB,cAAsC,aAArD;;;gBAGI,cAAc,SAAd,cAAoB;;kBACpB;0BACF,IAAA,KAAmB,YAAM;wBACvB,UAAe,MAAA,YAAiB,OAAjB,cAAsC,aAArD;4BACA,IAAA,KAAmB,YAAM;0BACvB,UAAe,MAAA,YAAiB,OAAjB,cAAsC,aAArD;;;gBAIN,OAAA,KAAY;wBACV,IADU;;;;gBAKR,iBAAiB,SAAjB,iBAAuB;;wBAC3B,IAAA,KAAmB,YAAM;sBACvB,UAAe,MAAA,YAAiB,OAAjB,cAAsC,aAArD;;gDADuB;wCAAA;qCAAA;;oBAGvB;uCAAgC,MAAA,iBAAA,cAAhC,oIAA4E;wBAAjE,0BACT;;wBAAI,CAAC,MAAA,QAAA,IAAL,oBAA0C;4BACxC,iBAAA,cAAA,OAAA;;;8BALmB;sCAAA;mCAAA;0BAAA;sBAAA;wEAAA;gCAAA;;4BAAA;2CAAA;4BAAA;;;;;sBAQvB;;;oBAGI,SAAR;mBACE;yBACE,iBAAA,oBAAA;uBACA,iBAAA,QAAA;;mBAEF;;uBAEE,iBAAA,QAAA;;;;;;;YAON,OAAA,KAAY;oBACV,MADU;;;;;;;;;;yCAQC;6CAAA;qCAAA;kCAAA;;gBACb;oCAAwB,KAAA,QAAxB,yIAA6C;oBAAlC,mBACT;;oBAAM,YAAS,KAAA,QAAA,IAAf;oBACI,UAAA,SAAgB,QAAhB,YAAoC,KAAA,uBAAxC,YAA6E;4BAC3E;;;0BAJS;mCAAA;gCAAA;sBAAA;kBAAA;sEAAA;6BAAA;;wBAAA;wCAAA;wBAAA;;;;;;;;;;;;;;;yDAegB;qBAC7B,eAAA,WAAgC;qBACvB,UAAA,aAAP;;mBAEK,MAAA,KAAW,KAAA,QAAX,UAAA,OAAP;;;;iDAGqB;6CAAA;qCAAA;kCAAA;;gBACrB;oCAA6B,KAAA,iBAA7B,gJAAkE;oBAAvD,wBACT;;oBAAI,KAAA,QAAA,IAAJ,iBAAsC;sBAChC,CAAC,KAAA,iBAAA,UAAL,iBAAsD;wBAC9C,iBAAiB,KAAA,QAAA,IAAvB;wBACI,KAAA,uBAAJ,iBAAiD;qCAC/C;;;;;0BANa;mCAAA;gCAAA;sBAAA;kBAAA;sEAAA;6BAAA;;wBAAA;wCAAA;wBAAA;;;;;;;;;;;;4CAgBL;gBACV,oBADU;6CAAA;qCAAA;kCAAA;;gBAEhB;oCAAwB,KAAA,QAAxB,yIAA6C;oBAAlC,mBACT;;oBAAM,YAAS,KAAA,QAAA,IAAf;oBACI,UAAA,cAAqB,UAAA,SAAgB,QAAzC,UAA2D;sBACrD,UAAA,+BAAA,qBACF,KAAA,uBADF,YACuC;;8BAErC;yBAEG;8BACH;;;;0BAXU;mCAAA;gCAAA;sBAAA;kBAAA;sEAAA;6BAAA;;wBAAA;wCAAA;wBAAA;;;;;;;;;;;;kDAoBM;6CAAA;qCAAA;kCAAA;;gBACtB;oCAAwB,KAAA,QAAxB,yIAA6C;oBAAlC,mBACT;;oBAAM,YAAS,KAAA,QAAA,IAAf;oBACI,KAAA,uBAAJ,YAAyC;;4BAEvC;uBAEG;4BACH;;;0BARkB;mCAAA;gCAAA;sBAAA;kBAAA;sEAAA;6BAAA;;wBAAA;wCAAA;wBAAA;;;;;;;;;;;;kDAiBA;gBAChB,YAAS,KAAA,QAAA,IAAf;gBACI,KAAA,uBAAJ,YAAyC;;wBAEvC;mBAEG;wBACH;;;;;;;;;;;;;;;;yBAcF;;gBAAM,UAAU,IAAA,IAAQ,KAAxB;gBACI,qBAAqB,MAAA,KAAW,SAAA,uBAApC;oDACqB,OAA0B,gBAAA;qBAAQ,KAAR;AAHL,AAGrB;gBACf,gBAAgB,IAAtB;uCACqB,UAAA,OAAA,KAAA,oBAAgD,gBAAQ;kBACvE,cAAA,IAAkB,KAAlB,QAAJ,OAA0C;;8BACxC,IAAkB,KAAlB;uBACA;;qBAEF;AALmB;;+BAQrB,QAA2B,qBAAU;kBAC7B,iBAAiB,aAAa,UAAb,MACvB,aAAa,UAAb,IAAA,YAAoC,aADb,SAAvB;kBAEI,aAAa,UAAb,OAA2B,QAAA,IAAY,UAAZ,QAA3B,SACF,mBADF,kBACuC;;oBAEjC;;sBAEI,8BAAuB,OAAA,IAAkB,aAAa,UAA/B;wBACvB,UADkE;4BAE9D,UAAA,WAAA,oBACN,UAAA,WAAA,kBADM,QACsC,UAHwB;0BAIhE,OAAA,UAAe,UAJiD;gCAK1D,aAAa,UAAb,IAL0D;2BAM/D,aAAa,UAAb,IAAA,SAN+D;0BAOhE,OAPgE;+BAAA;iCAAA;gCAU1D,OAAA,OAV0D;6BAW7D,OAAA,OAAA,gBAX6D;gCAY1D,OAAA,OAAA,gBAZ0D;kCAaxD,OAAA,iBAAA,UAAgC,UAbwB;8BAAxE,AAA6B;;sBAgBvB,iBAAiB,IAAA,OAAvB;0BACA,IAAY,UAAZ,IAAA;sBACI,eAAA,SAAwB,QAAxB,YACF,eAAA,aAA4B,aAD1B,QAEF,OAAA,uBAFF,iBAE+C;;;;;mCAK7C;;kBAGJ,OAAA,KAAY;0BACV,MADU;;;;mBAKhB;;;;qCAGS,UAAU;mBACX,OAAA,aAAA,aACP,SAAA,QAAA,YAAA,KACD,SAAA,QAAA,cADC,KAED,SAAA,QAAA,cAHA;;;;;;;;;;;8CAWkB;gBACd,CAAJ,UAAe;oBACP,IAAA,MAAN;;gBAEE,SAAA,QAAiB,QAAjB,YAAqC,CAAzC,GAA6C,OAAO,QAAP;gBACzC,SAAA,QAAiB,QAAjB,YAAqC,CAAzC,GAA6C,OAAO,QAAP;gBACzC,SAAA,QAAiB,QAAjB,YAAqC,CAAzC,GAA6C,OAAO,QAAP;mBACtC,QAAP;;;;;;;;;;iDAOqB,WAAQ;;mBAEtB,KAAA,iBAAA,UAAgC,UAAhC,QAAA;;sBAAA;;sBAIL,oBAJK,SAKL,KAAA,mCALK;;iBAOL,0CAPK;;iBASL,wBATK;;iBAAA;;iBAaL,iCAbK;;iBAeL,KAAA,kBAAA,aAAyC,UAAzC,QAfF;;;;wEAkByC;mBAClC,EAAE,KAAA,OAAA,mBAAA,SACR,UAAA,SAAgB,QAAhB,YACD,UAAA,SAAgB,QAFhB;;;;+EAKgD;gBAC5C,gBAAJ;gBACI,KAAA,OAAA,SAAA,aAAkC,UAAA,SAAgB,QAAtD,UAAwE;kBAClE;oBACI,gBAAgB,KAAA,MAAW,OAAA,aAAA,QAAjC;gCACgB,CAAA,iBAAoB,cAAA,MAAoB,cAAA,MAArB,MAChB,cAAA,oBACD,CAAC,cAAA,iBAAA,SAFnB;gBAIF,OAAA,KAAY;;wBAEV,MAAA;;;;mBAIJ;;;;;;;;;;;4DASgC;mBACzB,KAAA,OAAP;;;;;;;;;;;2DAQ+B,gBAAgB;gBACzC,WAAW,KAAA,KAAjB;gBACM,WAAW,OAAA,mBAAA,WAAA,iBAAsD,eAAvE;;oBAEA;mBACO,UAAL;uBAAqB;mBAChB,UAAL;uBACS,aAAa,aAAb,aAAoC,aAAa,aAAxD;mBACG,UAAL;uBAAkC,aAAa,aAApB;mBACtB,UAAL;uBAAmC,aAAa,aAApB;mBACvB,UAAL;uBAA+B,aAAa,aAApB;mBACnB,UAAL;uBAAoC,aAAa,aAApB;mBACxB,UAAL;uBAAwC,aAAa,aAApB;;uBARnC;;;;;;;;;;;;;2DAmB+B;gBAC3B,CAAJ,YAAiB;oBACT,IAAA,MAAN;;gBAEE,QAJ2B;6CAAA;qCAAA;kCAAA;;gBAK/B;oCAAwB,KAAA,QAAxB,yIAA6C;oBAAlC,mBACT;;oBAAM,YAAS,KAAA,QAAA,IAAf;oBACI,UAAA,eAAA,QAA8B,UAAlC,4BAAqE;sBAC/D,UAAA,+BAAJ,YAAsD;8BACpD;;;;;0BATyB;mCAAA;gCAAA;sBAAA;kBAAA;sEAAA;6BAAA;;wBAAA;wCAAA;wBAAA;;;;;mBAc/B;;;;;;;;;;;;6DAS4D;gBAA9B,iFAAa;;gBACvC,CAAJ,WAAa;oBACL,IAAA,MAAN;;gBAEE,qBAAJ;gBACI,UAAA,eAAJ,MAAgC;kBACxB,UAAU,UAAA,wBAA+B,kBAA/C;kBACI,MAAA,QAAA,aAAJ,OAAsC;sBAC9B,IAAA,wCAAA,iCAAN;;mCAEmB,QAAA,SAAA,KAAsB,CAAC,cAAA,SAAqB,CAAC,CAAA,GAAlE;;mBAEF;;;;;;;;;qDAMyB;yBACzB;;gBAAI,OAAA,aAAoB,OAAA,UAAxB,UAAmD;kBAC3C,SAAS,OAAA,UAAf;qBACA,iBAAA,mBAA2C,iBAAS;oBAC5C,KAAK,MAAA,KAAA,gBAAA,MAAA,KAAX;oBACM,UAAU,MAAhB;oBACM,eAAe,MAArB;;oBAEI,OAAA,QAAA,IAAJ,KAA0B;sBAClB,YAAS,OAAA,QAAA,IAAf;4BACA,mBAAA;4BACA,6BAAA;sBACA,SAAa;8BACX,mBAA0B,iBAA1B;8BACA;2BACA,wBAAA;yBAEG;2BACH,wBAAA,WAAqC,UAArC;;yBAEF,KAAA,kBAAA,wBAAkD,UAAlD,KAA8D,OAAA,OAA9D;yBACA,KAAA,kBAAA,mBAAkD,UAAlD,KACD;uBACI;;;;;;;mBAQJ;oBACG,IAAA,MAAN;;;;;kDAIoB,WAAQ;gBAC1B;kBACI,KAAK,UAAX;mBACA,iBAAA,mBAAA,IAA6C,UAA7C;kBACI,KAAA,iBAAA,WAAJ,KAA0C;;iDAAA;yCAAA;sCAAA;;oBAExC;wCAA0B,KAAA,iBAAA,mBAA1B,sIAAwE;wBAA7D,qBACT;;wBAAI,KAAA,iBAAA,UAAJ,cAAkD;0BAC5C,KAAA,QAAA,IAAJ,cAAmC;6BACjC,QAAA,IAAA,aAAA;;;;;8BALkC;uCAAA;oCAAA;0BAAA;sBAAA;0EAAA;iCAAA;;4BAAA;4CAAA;4BAAA;;;;;iDAAA;yCAAA;sCAAA;;oBAUxC;wCAA8B,KAAA,iBAAA,cAA9B,yIAA0E;wBAA/D,yBACT;;wBAAM,iBAAiB,KAAA,QAAA,IAAvB;wBACI,kBAAkB,KAAA,uBAAtB,iBAAmE;2BACjE,iBAAA,cAAA,OAAA;0BACI,eAAJ,cAAiC;uCAC/B;uCACA,eAAA;;qCAEF;;;8BAlBoC;uCAAA;oCAAA;0BAAA;sBAAA;0EAAA;iCAAA;;4BAAA;4CAAA;4BAAA;;;;;cAuB5C,OAAA,KAAY;;sBAEV,qDAA2D,UAA3D;;;;;;;;;;;sDAQwB;gBACtB,OAAA,aAAoB,OAAA,UAAxB,UAAmD;;kBAE3C,SAAS,UAAf;;kBAEI,KAAA,OAAJ,aAA6B;uBAC3B,aAAA,OAA2B,CAAC,KAAA,OAA5B;;;;kBAIE,KAAA,KAAJ,MAAoB;uBAClB,aAAA,YAAgC,CAAC,KAAA,KAAjC;;kBAEE,KAAA,KAAJ,UAAwB;uBACtB,aAAA,iBAAqC,CAAC,KAAA,KAAtC;;kBAEE,KAAA,KAAJ,SAAuB;uBACrB,aAAA,gBAAoC,CAAC,KAAA,KAArC;;kBAEE,KAAA,KAAJ,UAAwB;uBACtB,aAAA,iBAAqC,CAAC,KAAA,KAAtC;;kBAEE,KAAA,KAAJ,KAAmB;uBACjB,aAAA,OAA2B,CAAC,KAAA,KAA5B;;kBAEE,KAAA,KAAJ,QAAsB;uBACpB,aAAA,SAA6B,CAAC,KAAA,KAA9B;;;;kBAIE,KAAA,OAAJ,WAA2B;uBACzB,aAAA,aAAiC,CAAC,KAAA,OAAlC;;kBAEE,KAAA,OAAA,uBAAmC,KAAA,OAAA,wBAAoC,CAA3E,GAA+E;uBAC7E,aAAA,qBAAyC,CAAC,KAAA,OAA1C;;kBAEE,KAAA,OAAJ,gBAAgC;uBAC9B,aAAA,gBAAoC,CAAC,KAAA,OAArC;;kBAEE,KAAA,OAAJ,UAA0B;uBACxB,aAAA,YAAgC,CAAC,KAAA,OAAjC;;kBAEE,KAAA,OAAJ,gBAAgC;uBAC9B,aAAA,gBAAoC,CAApC;;;;kBAIE,KAAA,OAAA,KAAJ,SAA8B;uBAC5B,aAAA,eAAmC,CAAC,KAAA,OAAA,KAApC;;kBAEE,KAAA,OAAA,KAAJ,QAA6B;uBAC3B,aAAA,cAAkC,CAAC,KAAA,OAAA,KAAnC;;kBAEE,KAAA,OAAA,KAAJ,QAA6B;uBAC3B,aAAA,cAAkC,CAAC,KAAA,OAAA,KAAnC;;kBAEE,KAAA,OAAA,KAAJ,UAA+B;uBAC7B,aAAA,gBAAoC,CAAC,KAAA,OAAA,KAArC;;;;kBAIE,KAAA,OAAJ,gBAAgC;uBAC9B,aAAA,mBAAuC,CAAC,KAAA,OAAxC;;;kBAGE,KAAA,OAAJ,cAA8B;uBAC5B,aAAA,QAA4B,CAAC,KAAA,OAA7B;;kBAEE,KAAA,OAAA,QAAoB,MAAA,QAAc,KAAA,OAAtC,OAAyD;uBACvD,aAAA,qCAAgC,KAAA,OAAhC;;;kBAGE,KAAA,KAAA,OAAiB,KAAA,KAAA,IAAjB,UAAyC,KAAA,OAA7C,aAAsE;uBACpE,aAAoB,KAAA,OAApB,aAA6C,KAAA,KAAA,IAA7C;;kBAEE,KAAA,OAAJ,aAA6B;oBACrB,qBAAN;uBACA,aAAA,oBAAwC,KAAA,OAAxC;;;qBAGF,aAAA;mBAEG;oBACG,IAAA,MAAN;;;;;;;;;;qDAOuB;gBACrB,OAAA,aAAoB,OAAA,UAAxB,UAAmD;kBAC3C,uBAAuB,KAAA,OAA7B;;kBAEI,OAAA,SAAJ,QAA4B;oBACpB,SAAS,OAAA,SAAf;oBACI,OAAA,QAAA,WAAJ,GAAiC;0BAC/B,IAD+B;uCAE/B,sBAAA;uBAEG,IAAI,OAAA,QAAA,YAAJ,GAAkC;0BACrC,IADqC;uCAErC,sBAAA;;oBAEE,OAAA,QAAA,sBAAJ,GAA4C;0BAC1C,IAD0C;uCAE1C,uBAAA;uBAEG,IAAI,OAAA,QAAA,yBAAJ;0BACH,IADkD;uCAElD,uBAAA;;;;kBAIA,qBAAA,wBAAJ,MAAuD;0BACrD,SAAA;;kBAEE,qBAAA,yBAAJ,MAAwD;0BACtD,SAAA;qBAEG;0BACH,SAAA;;;wBAGF;mBAEG;oBACG,IAAA,MAAN;;;;;;AC5mBN,AACA,AACA,AACA,AAEA;;AAAM,sBAAgB,aAAtB,AACA;AAAM,sBAAN;;AAEqB,0BAEnB;qBAAA,QAAoB;gCAClB;;eAAA,SAAc,OAAA,OAAA,IAAA,eAAd;eACA,iBAAA;eACA,cAAA;eACA,aAAA;eACA;;;;;;;;;uCAMW;gBACP;mBACF,YAAiB,KAAA,aAAkB,IAAA,UAAc,KAAjD;cAEF,OAAA,KAAY;sBACV,MADU;;;;;;;;;;;;;0CAWE;wBACd;;gBAAM,UAAN;uBACO,QAAY,UAAA,SAAA,QAAqB;kBAClC,QAAA,gBAAJ,MAAkC;0BAChC,IAAA,KAAmB,YAAM;0BACvB,iBAAA;0BACA;;qBAGC;wBACH,cAAA;;uBAEA,YAAmB,OAAA,aAAnB;;;;;uBAKA,UAAA,MAAuB,OAAA,UAAA,OAAvB;;iBAEC,YAAM;sBACC,MAAM,OAAA,SAAA,cAAZ;sBACA,QAAA;sBACA,OAAA;;sBAEA,aAAA,OAAA;sBACM,OAAO,OAAA,SAAA,qBAAA,UAAb;sBACA,iBAAA,QAA6B,YAAM;4BACjC;8BACA,IAAA,KAAmB,YAAM;8BACvB,iBAAA;8BAED;;;sBAEH,iBAAA,SAA8B,UAAA,OAAW;4BACvC,iBAAA;2BACA;;uBAEF,WAAA,aAAA,KAAA;;;AAnCC;;;;;;;;;;6CA6CU;gBACb,KAAA,mBAAA,QAAiC,OAAA,aAAoB,OAAA,UAAzD,UAAqF;mBACnF,iBAAA;;mBAEK,KAAP;;;;;;;;;qDAMyB;gBACnB,UAAN;qBACA,WAAoB;kBACZ,oBAAN;kBACI,QAAA,eAAJ,mBAA8C;wBAC5C,aAAA;oBACI,QAAJ,WAAuB;0BACrB,UAAA;uBAEG;wBACG,IAAA,MAAN;;;;gBAIA,oBAAoB,SAAA,UAA1B;mBACA,WAAA;;;;;;;ACzGJ;;;AAGA,YAAI,UAAU,WAAK;;AASnB,AAAO;;;;;;;wBAAM,SAAS,AACtB,AAAO;;yBAAM,YAAU,MAAI,AAC3B","file":"dfp.js","sourcesContent":["/**\n * Htz-cookie-util\n * @module htzCookieUtil\n * @author Elia Grady elia.grady@haaretz.co.il\n * @license MIT\n */\n\n/**\n * Translates Key-Value string into a convenient map.\n * @param {String} string String in format of \"key<operator>value<separator>.....\"\n * @param {object} options object for overriding defaults:\n * options.separator is a String or regExp that separates between each key value pairs\n * (default is ';'). options.operator is a String or regExp that separates between each key\n * and value within a pair (default is '=').\n * @returns {object} a map object, with key-value mapping according to the passed configuration.\n */\nfunction stringToMap(string,\n  { separator = ';', operator = '=' } = {}) {\n  const map = {};\n  const itemsArr = string.split(separator);\n  itemsArr.forEach(element => {\n    if (typeof element === 'string') {\n      const keyValue = element.split(operator);\n      if (keyValue.length === 2) {\n        try {\n          map[keyValue[0]] = decodeURIComponent(keyValue[1]);\n        }\n        catch (e) {\n          // Do nothing, malformed URI\n        }\n      }\n    }\n  });\n  return map;\n}\nexport const ssoKey = window.location.hostname.indexOf('haaretz.com') > -1 ? 'engsso' : 'tmsso';\n\n// Translates Cookie string into a convenient map.\nexport default function getCookieAsMap() {\n  const map = stringToMap(document.cookie, { separator: /;\\s?/ });\n  if (typeof map.tmsso === 'string') {\n    map.tmsso = stringToMap(map.tmsso, { separator: ':' });\n  }\n  if (typeof map.engsso === 'string') {\n    map.engsso = stringToMap(map.engsso, { separator: ':' });\n  }\n  return map;\n}\n","/* global dfpConfig */\nimport getCookieAsMap, { ssoKey } from './utils/cookieUtils';\n// globalConfig for DFP\nlet dfpBaseConf;\ntry {\n  dfpBaseConf = window.JSON.parse(document.getElementById('dfpConfig').textContent);\n}\ncatch (err) {\n  dfpBaseConf = window.dfpConfig;\n}\nconst dfpConfig = Object.assign({\n  get referrer() {\n    return document.referrer ? document.referrer : '';\n  },\n  get isMobile() {\n    return (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i\n      .test(window.navigator.userAgent || ''));\n  },\n  /**\n   * Returns true iff the loaded page is the homepage (no inner path)\n   * @returns {boolean}\n   */\n  get isHomepage() {\n    return window.location.pathname === '/' || this.environment === 3; // 'prod'\n  },\n  get department() {\n    return this.isHomepage ? '_homepage' : '_section';\n  },\n  /**\n   * returns the domain the page was loaded to. i.e: 'haaretz.co.il', 'haaretz.com'\n   * @returns {string} the domain name from the windows's location hostname property\n   */\n  get domain() {\n    const regexMatch = /([\\d|\\w]+)(\\.co\\.il|\\.com)(.*)?/.exec(window.location.hostname);\n    const result = regexMatch ? regexMatch[0] : window.location.hostname;\n    return result;\n  },\n  /**\n   * Returns an array of concatenated paths, separated by a dot.\n   * For example, for the URL:\n   * http://www.haaretz.co.il/news/world/america/us-election-2016/LIVE-1.2869045\n   * the path is '/news/world/america/us-election-2016/LIVE-1.2869045'.\n   * This function takes the directories ['news', 'world', 'america', 'us-election-2016']\n   * and converts it to the following format:\n   * ['.news', '.news.world', '.news.world.america', '.news.world.america.us-election-2016']\n   * This denotes the path configuration for the given adSlot\n   * non articles (sections) will be given a '0' - no articleId value for targeting purposes)\n   * @returns {Array.<T>} an array of path names\n   */\n  get path() {\n    let sectionArray = this.articleId && this.articleId !== '0' ?\n      window.location.pathname.split('/').slice(1, -1) :\n      window.location.pathname.split('/').slice(1);\n    sectionArray = sectionArray.filter(path =>\n    path !== 'wwwMobileSite' && path !== 'whtzMobileSite');\n    return sectionArray\n      .map(section => `.${section}`)\n      .map((section, index, arr) => arr.slice(0, index + 1)\n        .reduce((last, current) => last.concat(current)));\n  },\n  /**\n   * Returns a string representation for the name of the site\n   * @return {*|string}\n   */\n  get site() {\n    let site;\n    if (window.location.hostname.indexOf('haaretz.co.il') > -1) {\n      site = 'haaretz';\n    }\n    else if (window.location.hostname.indexOf('themarker.com') > -1) {\n      site = 'themarker';\n    }\n    else if (window.location.hostname.indexOf('mouse.co.il') > -1) {\n      site = 'mouse';\n    }\n    return site || 'haaretz';\n  },\n  /**\n   * Returns the current environment targeting param, if such is defined.\n   * @returns {number} targeting param, 1 for local development, 2 for test servers and 3 for prod.\n   * May return undefined if no targeting is specified.\n   */\n  get environment() {\n    const env = {\n      dev: 1,\n      test: 2,\n      prod: 3,\n    };\n    return window.location.port === '8080' ? env.dev :\n      (window.location.hostname.indexOf('pre.haaretz.co.il') > -1\n      || window.location.hostname.indexOf('tmtest.themarker.com') > -1\n      || window.location.hostname.indexOf('pre.haaretz.com') > -1\n      || window.location.hostname.indexOf('prodmouse.mouse.co.il') > -1) ? env.test :\n        (window.location.pathname.indexOf('/cmlink/Haaretz.HomePage') > -1\n        || window.location.pathname.indexOf('/cmlink/TheMarker.HomePage') > -1\n        || window.location.pathname.indexOf('/cmlink/Mouse.HomePage') > -1)\n          ? env.prod : undefined;\n  },\n  /**\n   * Returns the articleIf if on an article page, or null otherwise\n   * @returns {string} an articleId string from the pathname, or 0 if not found\n   */\n  get articleId() {\n    const articleIdMatch = /\\d\\.\\d+/g.exec(window.location.pathname);\n    let articleId = '0';\n    if (articleIdMatch) {\n      articleId = articleIdMatch.pop(); // Converts [\"1.23145\"] to \"1.23145\"\n    }\n    return articleId;\n  },\n  utm_: {\n    get content() {\n      return this.getUrlParam('utm_content');\n    },\n    get source() {\n      return this.getUrlParam('utm_source');\n    },\n    get medium() {\n      return this.getUrlParam('utm_medium');\n    },\n    get campaign() {\n      return this.getUrlParam('utm_campaign');\n    },\n    getUrlParam(key) {\n      const results = RegExp(`(${key})(=)([^&\"]+)`).exec(window.location.search);\n      return results && results[3] ? results[3] : undefined;\n    },\n  },\n  get adBlockRemoved() {\n    let adBlockRemoved = false;\n    try {\n      if (localStorage.getItem('adblock_removed')) {\n        adBlockRemoved = true;\n      }\n    }\n    catch (err) {\n      // do nothing\n    }\n    return adBlockRemoved;\n  },\n  get ssoGroupKey() {\n    return window.localStorage.getItem('_SsoGroupKey');\n  },\n  get anonymousId() {\n    const cookieName = 'anonymousId';\n    const cookieMap = getCookieAsMap();\n    let anonymousId = '';\n    if (cookieMap && cookieMap[cookieName]) {\n      anonymousId = cookieMap[cookieName];\n    }\n    return anonymousId;\n  },\n  get isWriterAlerts() {\n    return (location.search.indexOf('writerAlerts=true') > -1);\n  },\n  get wifiLocation() {\n    let wifiLocation;\n    const cookieName = '_htzwif'; // eslint-disable-line no-underscore-dangle\n    const cookieMap = getCookieAsMap();\n    try {\n      if (cookieMap && cookieMap[cookieName]) {\n        if (cookieMap[cookieName].toLowerCase() === 'arcaffe') {\n          wifiLocation = 'ArCafe';\n        }\n        if (cookieMap[cookieName].toLowerCase() === 'university') {\n          wifiLocation = 'university';\n        }\n      }\n    }\n    catch (err) {\n      // do nothing\n    }\n    return wifiLocation;\n  },\n  get isValidForsmartPhone() {\n    let validForAds = true;\n    const PageUrl = window.location.href;\n    const isSmartphoneapp = PageUrl.match('haaretzsmartphoneapp');\n    const cookieMap = getCookieAsMap();\n    try {\n      if (isSmartphoneapp) {\n        // eslint-disable-line no-underscore-dangle\n        if (!cookieMap || !(cookieMap.NotPayer || cookieMap.HtzPusr)) {\n          validForAds = false;\n        }\n      }\n    }\n    catch (err) {\n      // do nothing\n    }\n    return validForAds;\n  },\n  get gStatCampaignNumber() {\n    let gstatCampaign;\n    try {\n      gstatCampaign = localStorage.getItem('GstatCampaign') ?\n        JSON.parse(localStorage.getItem('GstatCampaign')) : undefined;\n    }\n    catch (err) {\n      /* In case of thrown 'SecurityError' or 'QuotaExceededError',\n       the variable should be undefined */\n      gstatCampaign = undefined;\n    }\n    return gstatCampaign ? gstatCampaign.CampaignNumber : undefined;\n  },\n  get pageType() {\n    let type = '';\n    try {\n      const htmlclassList = document.querySelector('html').classList;\n      switch (true) {\n        case /mouse_location/.test(htmlclassList):\n          type = 'mouse_location';\n          break;\n        case /mouse_event/.test(htmlclassList):\n          type = 'mouse_event';\n          break;\n        case /contentType-story/.test(htmlclassList):\n          type = 'mouse_article';\n          break;\n        default:\n          type = '';\n      }\n    }\n    catch (err) {\n      /* In case of thrown 'SecurityError' or 'QuotaExceededError',\n       the variable should be undefined */\n      type = '';\n    }\n    return type;\n  },\n  get proposalNumber() {\n    let proposal;\n    try {\n      proposal = localStorage.getItem('proposaltype') ?\n        localStorage.getItem('proposaltype') : undefined;\n    }\n    catch (err) {\n      /* In case of thrown 'SecurityError' or 'QuotaExceededError',\n       the variable should be undefined */\n      proposal = undefined;\n    }\n    return proposal;\n  },\n  adSlotConfig: {\n    'haaretz.co.il.example.slot': {\n      id: 'slotId',\n      // path : \"/network/base/slotId/slotId_subsection\", Will be calculated from AdManager\n      responsive: true,\n      adSizeMapping: [['width1', 'height1'], ...['widthN', 'heightN']],\n      priority: 'normal',\n      fluid: false,\n      responsiveAdSizeMapping: {\n        xxs: [['width1', 'height1'], ...['widthN', 'heightN']],\n        xs: [['width1', 'height1'], ...['widthN', 'heightN']],\n        s: [['width1', 'height1'], ...['widthN', 'heightN']],\n        m: [['width1', 'height1'], ...['widthN', 'heightN']],\n        l: [['width1', 'height1'], ...['widthN', 'heightN']],\n        xl: [['width1', 'height1'], ...['widthN', 'heightN']],\n        xxl: [['width1', 'height1'], ...['widthN', 'heightN']],\n      },\n      blacklistReferrers: 'comma, delimited, blacklisted, referrer, list',\n      whitelistReferrers: 'comma, delimited, referrer, list',\n    },\n  },\n  adManagerConfig: {\n    network: '9401',\n    adUnitBase: 'haaretz.co.il_Web',\n  },\n  breakpointsConfig: {\n    get breakpoints() {\n      // Override in VM from backend to control this toggle.\n      let breakpoints;\n      switch (dfpConfig.googleGlobalSettings.breakpointType) {\n        case 'type1': breakpoints = this.breakpoints1; break;\n        case 'type2': breakpoints = this.breakpoints2; break;\n        case 'type3': breakpoints = this.breakpoints3; break;\n        case 'type4': breakpoints = this.breakpoints4; break;\n        default: breakpoints = this.breakpoints1;\n      }\n      return breakpoints;\n    },\n    // Type 1\n    breakpoints1: {\n      xxs: 600,\n      xs: 761,\n      s: 993,\n      m: 1009,\n      l: 1291,\n      xl: 1600,\n      xxl: 1900,\n    },\n    // Type 2\n    breakpoints2: {\n      xxs: 600,\n      xs: 1000,\n      s: 1150,\n      m: 1281,\n      l: 1600,\n      xl: 1920,\n      xxl: 1920,\n    },\n    // Type 3\n    breakpoints3: {\n      xxs: 100,\n      xs: 480,\n      s: 600,\n      m: 768,\n      l: 1024,\n      xl: 1280,\n      xxl: 1900,\n    },\n    // Type 4\n    breakpoints4: {\n      xxs: 600,\n      xs: 768,\n      s: 1024,\n      m: 1280,\n      l: 1900,\n      xl: 1900,\n      xxl: 1900,\n    },\n  },\n  userConfig: {\n    type: undefined,\n    age: undefined,\n    gender: undefined,\n  },\n  conflictManagementConfig: {\n    'blocking.ad.unit.name': [\n      {\n        onsize: '1280x200,970x250,3x3',\n        avoid: 'blocked.ad.unit.name',\n      },\n      {\n        onsize: '1280x200,970x250,3x3',\n        avoid: 'blocked.ad.unit.name',\n      },\n    ],\n  },\n  impressionManagerConfig: {\n    'ad.unit.name': {\n      target: 'all|section|homepage',\n      frequency: '$1/$2(day|hour)',\n      exposed: 0,\n      expires: (new Date()).getTime(),\n    },\n  },\n  googleGlobalSettings: {\n    enableSingleRequest: true,\n    enableAsyncRendering: true,\n    refreshIntervalTime: 1000,\n    breakpointType: 'type1',\n  },\n  sso: ssoKey,\n\n}, dfpBaseConf);\n\nexport default dfpConfig;\n","/**\n * Helper function. Adds N hours to a given date object.\n * @param {Date} date - the date to derive from\n * @param {Number} hours - the amount of hours to add, in whole numbers\n * @throws {SyntaxError} Will throw if the 'date' param is not provided\n * @throws {SyntaxError} Will throw if the 'hours' param is not provided\n * @throws {TypeError} Will throw if the 'hours' param is not a valid integer\n * @returns {Date} date - the new date, derived from adding the given hours\n */\nexport function addHours(date, hours) {\n  if (!date) {\n    throw new SyntaxError('addHours called without a required \\'date\\' parameter!');\n  }\n  if (!hours) {\n    throw new SyntaxError('addHours called without a required \\'hours\\' parameter!');\n  }\n  else if (isNaN(parseInt(hours, 10))) {\n    throw new TypeError('addHours called with an invalid integer \\'hours\\' parameter!');\n  }\n  const result = new Date(date);\n  result.setHours(result.getHours() + parseInt(hours, 10));\n  return result;\n}\n\n/**\n * Helper function. Adds N days to a given date object.\n * @param {Date} date - the date to derive from\n * @param {Integer} days - the amount of days to add\n * @throws {SyntaxError} Will throw if the 'date' param is not provided\n * @throws {SyntaxError} Will throw if the 'days' param is not provided\n * @throws {TypeError} Will throw if the 'hours' param is not a valid integer\n * @returns {Date} date - the new date, derived from adding the given days\n */\nexport function addDays(date, days) {\n  if (!date) {\n    throw new SyntaxError('addDays called without a required \\'date\\' parameter!');\n  }\n  if (!days) {\n    throw new SyntaxError('addDays called without a required \\'days\\' parameter!');\n  }\n  else if (isNaN(parseInt(days, 10))) {\n    throw new TypeError('addDays called with an invalid integer \\'days\\' parameter!');\n  }\n  const result = new Date(date);\n  result.setDate(result.getDate() + parseInt(days, 10));\n  return result;\n}\n","import globalConfig from '../globalConfig';\n\nconst breakpoints = globalConfig.breakpointsConfig.breakpoints;\n\n/**\n * Returns a function, that, as long as it continues to be invoked, will not\n * be triggered. The function will be called after it stops being called for\n * N milliseconds. If `immediate` is passed, trigger the function on the\n * leading edge, instead of the trailing.\n * @param { function } func - the function to run\n * @param { number } wait - the timeout period to avoid running the function\n * @param { boolean } immediate - leading edge modifier\n * @returns {function } the debounced function\n */\nexport function debounce(func, wait = 100, immediate) {\n  let timeout;\n  return function debounced() {\n    const context = this;\n    const args = arguments;// eslint-disable-line prefer-rest-params\n    const later = () => {\n      timeout = null;\n      if (!immediate) func.apply(context, args);\n    };\n    const callNow = immediate && !timeout;\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n    if (callNow) func.apply(context, args);\n  };\n}\n\n/**\n * Returns the current breakpoint that is closest to the window's width\n * @returns {number} the break that the current width represents\n */\nexport function getBreakpoint() {\n  let breakpoint;\n  const windowWidth = window.innerWidth\n    || document.documentElement.clientWidth\n    || document.body.clientWidth;\n  switch (true) {\n    case windowWidth < breakpoints.xs: breakpoint = breakpoints.xxs; break;\n    case windowWidth < breakpoints.s: breakpoint = breakpoints.xs; break;\n    case windowWidth < breakpoints.m: breakpoint = breakpoints.s; break;\n    case windowWidth < breakpoints.l: breakpoint = breakpoints.m; break;\n    case windowWidth < breakpoints.xl: breakpoint = breakpoints.l; break;\n    case windowWidth < breakpoints.xxl: breakpoint = breakpoints.xl; break;\n    default: breakpoint = breakpoints.xxl;\n  }\n  return breakpoint;\n}\n/**\n * Returns the current breakpoint that is closest to the window's width\n * @param {number} breakpoint - the breakpoint label enumerator that the current width represents\n * (yield with a getBreakpoint() call or passed manually )\n * @returns {string} breakpoint - the breakpoint label that the current width represents,\n * as a string\n */\nexport function getBreakpointName(breakpoint) {\n  let resultBreakpoint;\n  const windowWidth = breakpoint || window.innerWidth;\n  switch (true) {\n    case windowWidth < breakpoints.xs: resultBreakpoint = 'xxs'; break;\n    case windowWidth < breakpoints.s: resultBreakpoint = 'xs'; break;\n    case windowWidth < breakpoints.m: resultBreakpoint = 's'; break;\n    case windowWidth < breakpoints.l: resultBreakpoint = 'm'; break;\n    case windowWidth < breakpoints.xl: resultBreakpoint = 'l'; break;\n    case windowWidth < breakpoints.xxl: resultBreakpoint = 'xl'; break;\n    default: resultBreakpoint = 'xxl';\n  }\n  return resultBreakpoint;\n}\n","/**\n * Checks whether two arrays are equal\n * @param {Array} a - the first array to check\n * @param {Array} b - the second array to check\n * @returns {Boolean} true iff both a and b are arrays, with equal values\n */\nexport function arraysEqual(a, b) {\n  if (!a || !b) return false;\n  if (!Array.isArray(a) || !Array.isArray(b)) return false;\n  if (a === b) return true;\n  if (a.length !== b.length) return false;\n  for (let i = 0; i < a.length; ++i) {\n    if (Array.isArray(a[i]) && Array.isArray(b[i])) {\n      if (!arraysEqual(a[i], b[i])) return false;\n    }\n    else if (a[i] !== b[i]) {\n      return false;\n    }\n  }\n  return true;\n}\nexport default arraysEqual;\n","/* global googletag */\nimport { adTypes } from '../objects/adManager';\nimport globalConfig from '../globalConfig';\nimport { arraysEqual } from '../utils/arrays';\n\nconst hiddenClass = globalConfig.site.indexOf('mouse') > -1 ? 'u-is-hidden' : 'h-hidden';\n\nexport default class adSlot {\n\n  constructor(adSlotConfig) {\n    this.config = Object.assign({}, adSlotConfig);\n\n    // Part I : Markup configuration - passed from AdManager\n    this.id = this.config.id;\n    if (!this.config.id) {\n      throw new Error('an adSlot requires an id!');\n    }\n    this.target = this.config.target;\n    this.type = this.config.type;\n    this.responsive = this.config.responsive;\n    this.fluid = this.config.fluid;\n    this.user = this.config.user;\n    this.adManager = this.config.adManager;\n    this.htmlElement = this.config.htmlElement;\n    this.priority = this.config.priority;\n    this.deferredSlot = this.config.deferredSlot;\n\n    // Part II : Global, general ad configuration - passed from AdManager\n    this.department = this.config.department;\n    this.network = this.config.network;\n    this.adUnitBase = this.config.adUnitBase;\n\n    // Part III : ad specific configuration - passed from globalConfig.adSlotConfig\n    this.adSizeMapping = this.config.adSizeMapping;\n    this.responsiveAdSizeMapping = this.config.responsiveAdSizeMapping;\n    this.blacklistReferrers = this.config.blacklistReferrers ?\n      this.config.blacklistReferrers.split(',') : [];\n    this.whitelistReferrers = this.config.whitelistReferrers ?\n      this.config.whitelistReferrers.split(',') : [];\n\n\n    // Part IV : Runtime configuration - calculated data - only present in runtime\n    this.lastResolvedSize = undefined; // Initialized in 'slotRenderEnded' callback\n    this.lastResolvedWithBreakpoint = undefined; // Initialized in 'slotRenderEnded' callback\n    this.slot = undefined; // Holds a googletag.Slot object\n    // [https://developers.google.com/doubleclick-gpt/reference#googletag.Slot]\n    try {\n      if (!this.deferredSlot) {\n        this.slot = this.defineSlot();\n      }\n    }\n    catch (err) {\n      console.error(err); // eslint-disable-line no-console\n    }\n  }\n\n  /**\n   * Checks whether this adSlot is an 'Out-of-page' slot or not.\n   * An Out-of-page slot is a slot that is not embedded in the page 'normally'.\n   * @returns {boolean} true iff this adSlot is one of the predefined 'out-of-page' slots.\n   */\n  isOutOfPage() {\n    if (typeof this.type !== 'string') {\n      throw new Error('An adSlot cannot by typeless!', this);\n    }\n    if (this.isMobile() === true) {\n      return false;\n    }\n    switch (this.type) {\n      case adTypes.maavaron: return false;\n      case adTypes.popunder: return true;\n      case adTypes.talkback: return false;\n      case adTypes.regular: return false;\n      default: return false;\n    }\n  }\n\n  /**\n   * Checks whether this adSlot is a 'maavaron' slot or not.\n   * An Out-of-page slot is a slot that is not embedded in the page 'normally'.\n   * @returns {boolean} true iff this adSlot is one of the predefined 'out-of-page' slots.\n   */\n  isMaavaron() {\n    if (typeof this.type !== 'string') {\n      throw new Error('An adSlot cannot by typeless!', this);\n    }\n    if (this.isMobile() === true) {\n      return false;\n    }\n    switch (this.type) {\n      case adTypes.maavaron: return false;\n      default: return false;\n    }\n  }\n\n  isMobile() {\n    return (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i\n      .test(window.navigator.userAgent || ''));\n  }\n  /**\n   * Checks whether or not this adSlot has a non-empty whitelist, and if so, that the current\n   * referrer appears in the whitelist.\n   * Should return false iff there is a whitelist for the current adSlot, but the referrer is not\n   * mentioned in the whitelist.\n   * @returns {boolean} true iff the ad can be displayed.\n   */\n  isWhitelisted() {\n    let whitelisted = false;\n    if (this.whitelistReferrers.length !== 0) {\n      for (const referrer of this.whitelistReferrers) {\n        if (globalConfig.referrer.indexOf(referrer) > -1) {\n          whitelisted = true;\n          break;\n        }\n      }\n    }\n    else {\n      whitelisted = true;\n    }\n    return whitelisted;\n  }\n\n  /**\n   * Checks whether or not this adSlot has a non-empty blacklist, and if so, that the current\n   * referrer does not appear in the blacklist.\n   * Should return true iff there is a blacklist for the current adSlot, and the referrer is\n   * mentioned in the blacklist - to indicate that the adSlot is 'blocked'.\n   * @returns {boolean} true iff the ad cannot be displayed.\n   */\n  isBlacklisted() {\n    let blacklisted = false;\n    if (this.blacklistReferrers.length !== 0) {\n      for (const referrer of this.blacklistReferrers) {\n        if (globalConfig.referrer.indexOf(referrer) > -1) {\n          blacklisted = true;\n          break;\n        }\n      }\n    }\n    return blacklisted;\n  }\n\n\n  /**\n   * Shows the current adSlot.\n   * It assumes a markup is available for this slot (any tag with an id attribute = this.id)\n   */\n  show() {\n    if (!this.shown === true) {\n      this.shown = true; // Ensure show will be called once per adSlot\n      googletag.cmd.push(() => {\n        if (this.deferredSlot) {\n          this.slot = this.defineSlot();\n        }\n        // console.log('calling show for slot',this.id,' called @',window.performance.now());\n        document.getElementById(this.id).classList.remove(hiddenClass);\n        googletag.display(this.id);\n      });\n    }\n  }\n\n  /**\n   * Shows the current adSlot.\n   * It assumes a markup is available for this slot (any tag with an id attribute = this.id)\n   */\n  hide() {\n    googletag.cmd.push(() => {\n      document.getElementById(this.id).classList.add(hiddenClass);\n    });\n  }\n\n  /**\n   * Initializes page-level slot definition for the current slot\n   * @return {Slot} slot - the Google Slot that was defined from this AdSlot configuration\n   */\n  defineSlot() {\n    if (this.isMaavaron()) {\n      const maavaronSlot = this.defineMaavaron();\n      if (this.adManager.shouldSendRequestToDfp(this)) {\n        if (!this.shown) {\n          this.shown = true; // Ensure show will be called once\n          maavaronSlot.display();\n        }\n      }\n      return maavaronSlot;\n    }\n    const googletag = window.googletag;\n    const pubads = googletag.pubads();\n    const args = [];\n    const defineFn = this.isOutOfPage() ? googletag.defineOutOfPageSlot : googletag.defineSlot;\n    // 3 or 2 params according to the function that we want to activate.\n    args.push(this.getPath());\n    if (this.isOutOfPage() === false) {\n      if (this.fluid) {\n        args.push('fluid');\n      }\n      else {\n        args.push(this.adSizeMapping);\n      }\n    }\n    args.push(this.id);\n    let slot = defineFn.apply(defineFn, args);\n    if (slot) {\n      // Responsive size Mapping\n      if (this.responsive) {\n        let responsiveSlotSizeMapping = googletag.sizeMapping();\n        const breakpoints = globalConfig.breakpointsConfig.breakpoints;\n        const keys = Object.keys(this.responsiveAdSizeMapping);\n        for (const key of keys) { // ['xxs','xs',...]\n          responsiveSlotSizeMapping.addSize(\n            [breakpoints[key], 100], // 100 is a default height, since it is height agnostic\n            !arraysEqual(this.responsiveAdSizeMapping[key], [[0, 0]]) ?\n              this.responsiveAdSizeMapping[key] : []);\n        }\n        responsiveSlotSizeMapping = responsiveSlotSizeMapping.build();\n        slot = slot.defineSizeMapping(responsiveSlotSizeMapping);\n      }\n      slot = slot.addService(pubads);\n      if (this.isOutOfPage() === false) {\n        slot.setCollapseEmptyDiv(true);\n      }\n    }\n    return slot;\n  }\n\n  /**\n   * Returns the current path calculated for the adSlot\n   * @returns {String} a formatted string that represent the path for the slot definition\n   */\n  getPath() {\n    /* eslint-disable no-shadow */\n    let path = globalConfig.path || [];\n    path = path.filter(path => path !== '.');\n    path = path.map(section => `${this.id}${this.department}${section}`).join('/');\n    // If a path exist, it will be preceded with a forward slash\n    path = path && this.config.department !== '_homepage' ? `/${path}` : '';\n    /* eslint-enable no-shadow */\n    const calculatedPath = `/${this.config.network}/${this.config.adUnitBase}/${this.id}/${this.id}${this.department}${path}`; // eslint-disable-line max-len\n    return calculatedPath.toLowerCase();\n  }\n\n  /* eslint-disable */\n  slotRendered(event) {\n    const id = event.slot.getAdUnitPath().split('/')[3]; // Convention: [0]/[1]network/[2]base/[3]id\n    const isEmpty = event.isEmpty; // Did the ad return as empty?\n    const resolvedSize = event.size; // What 'creative' size did the ad return with?\n    // Empty or onload callback should be called next?\n  }\n  /* eslint-enable */\n\n  /**\n   * Refresh this adSlot\n   */\n  refresh() {\n    googletag.cmd.push(() => {\n      googletag.pubads().refresh([this.slot]);\n    });\n  }\n\n  /**\n   * Shows 'Maavaron' type adSlot using Passback definition\n   * @return {Slot} slot - the Google Slot that was defined for Maavaron\n   */\n  defineMaavaron() {\n    if (!document.referrer.match('loc.haaretz')) {\n      const adUnitMaavaronPath = this.getPath();\n      const adUnitMaavaronSize = [\n        [2, 1],\n      ];\n      const slot = googletag.pubads().definePassback(adUnitMaavaronPath, adUnitMaavaronSize)\n        .setTargeting('UserType', [this.user.type])\n        .setTargeting('age', [this.user.age])\n        .setTargeting('urgdr', [this.user.gender])\n        .setTargeting('articleId', [globalConfig.articleId])\n        .setTargeting('stg', [globalConfig.environment]);\n      return slot;\n    }\n    return null;\n  }\n}\n","export default (function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n});","export default (function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n})();","export default (function (arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n});","import globalConfig from '../globalConfig';\nimport { addHours, addDays } from '../utils/time';\nimport { debounce } from '../utils/breakpoints';\n\nexport const keys = {\n  impressions: 'impressions',\n  frequency: 'frequency',\n  /**\n   * [0] - full match\n   * [1] - impression count i.e: \"1\" | \"22\"\n   * [2] - impression expiry range quantifier  i.e: \"1\" | \"22\"\n   * [3] - impression expiry range unit i.e: \"day\" | \"hour\"\n   */\n  frequencyRegex: /(\\d+)\\/(\\d+)(day|hour)/,\n  expires: 'expires',\n  exposed: 'exposed',\n  target: 'target',\n  maxImpressions: 'maxImpressions',\n  hours: 'hour',\n  days: 'day',\n  adSlotId: 'id',\n};\n\nexport default class ImpressionsManager {\n\n  constructor(impressionManagerConfig) {\n    this.now = (new Date()).getTime(); // this date is used for comparisons only\n    this.config = Object.assign({}, impressionManagerConfig);\n    this.impressions = this.retrieveImpressionsData();\n    this.initImpressionMap();\n  }\n\n  retrieveImpressionsData() {\n    const impressions = this.migrateImpressionsData();\n    /*\n     Merge migrated data with new data\n     console.log('Migrated: ',impressions);\n     */\n    Object.keys(impressions).map((key, index) => {\n      impressions[key] = Object.assign({}, impressions[key], this.config[key]);\n      return this;\n    });\n    /*\n     console.log('Merged: ',impressions);\n     Filter out entries without frequency\n     */\n    for (const key in impressions) {\n      if ({}.hasOwnProperty.call(impressions, key)) {\n        if (!impressions[key][keys.frequency]) {\n          // console.log(`Removing ${key} - since it does not have a frequency`,impressions[key]);\n          delete impressions[key];\n        }\n      }\n    }\n    // console.log('Filtered: ',impressions);\n    return impressions;\n  }\n\n  migrateImpressionsData() {\n    let impressions;\n    let impressionsData;\n    try {\n      impressionsData = window.localStorage.getItem(keys.impressions);\n    }\n    catch (err) {\n      // In case of thrown 'SecurityError' or 'QuotaExceededError', the variable should be undefined\n      impressionsData = undefined;\n    }\n    try {\n      impressions = JSON.parse(impressionsData);\n    }\n    catch (err) {\n      // Here is where old impression data is converted to new format\n      impressions = {};\n      const oldImpressionsArray = impressionsData.split(';').filter(e => e);\n\n      oldImpressionsArray.forEach((impression) => {\n        try {\n          const adUnitImpression = impression.split(' = ');\n          const name = adUnitImpression[0];\n          const data = adUnitImpression[1];\n          const tmp = name.split('.');\n          let target = tmp.pop();\n          if (target && target === 'hp') {\n            target = 'homepage';\n          }\n          const slotId = tmp.join('.');\n          const id = `${slotId}_${target}`;\n          const exposed = parseInt(data.split('/')[0], 10) || 0;\n          const expires = parseInt(data.split('/')[1], 10) || this.now;\n          impressions[id] = {};\n          impressions[id][keys.adSlotId] = slotId;\n          impressions[id][keys.target] = target;\n          impressions[id][keys.exposed] = exposed;\n          impressions[id][keys.expires] = expires;\n        }\n        catch (err1) {\n          // console.log(`Failed converting impression: ${impression}`, err1);\n        }\n      });\n    }\n    return impressions || {};\n  }\n\n  /**\n   * Define the debounced version of the local storage save\n   */\n  saveImpressionsToLocalStorage() {\n    if (this.debouncedSave && typeof this.debouncedSave === 'function') {\n      this.debouncedSave();\n    }\n    else {\n      this.debouncedSave = debounce(this.saveImpressionsToLocalStorageImpl, 250, false);\n      this.debouncedSave();\n    }\n  }\n\n  /**\n   * Implementation of saving the impression map to localstorage\n   */\n  saveImpressionsToLocalStorageImpl() {\n    try {\n      localStorage.setItem(keys.impressions, JSON.stringify(this.impressions));\n    }\n    catch (err) {\n      /* In case of thrown 'SecurityError' or 'QuotaExceededError',\n       the operation should not break*/\n      console.error('localStorage isn\\'t available:', err); // eslint-disable-line no-console\n    }\n  }\n\n  /**\n   * Initializes the impression map based on the retrieved impressions and the global\n   * configuration.\n   */\n  initImpressionMap() {\n    Object.keys(this.config).map((key, index) => {\n      const adSlotId = key;\n      const slot = this.impressions[adSlotId];\n      let shouldUpdateExpiryDate = false;\n      // Case I: Existing slot (update)\n      if (slot) {\n        // Case I.I Existing slot, frequency has changed\n        if (this.config[adSlotId][keys.frequency] !== slot[keys.frequency]) {\n          // Updating the frequency will trigger a new expiry date\n          shouldUpdateExpiryDate = true;\n          this.impressions[adSlotId][keys.frequency] = this.config[adSlotId][keys.frequency];\n        } // Case I.II Existing slot, old expiry date\n        else if (this.now > slot[keys.expires]) {\n          // Old value that should trigger a new expiry date\n          shouldUpdateExpiryDate = true;\n        }\n      } // Case II: Non-existing slot (create new slot)\n      else {\n        this.initSlotFromConfig(adSlotId);\n      } // Finally, updates the expiry date (cases I.I and I.II)\n      if (shouldUpdateExpiryDate) {\n        this.updateExpiryDate(adSlotId);\n      }\n      return this;\n    });\n  }\n\n  /**\n   * Updates the expiry date of a slotName based on the configured slot frequency\n   * @param {String} slotName - the slotName to update.\n   */\n  updateExpiryDate(slotName) {\n    const now = new Date();\n    if (!(this.impressions[slotName] && this.impressions[slotName][keys.frequency])) {\n      throw new Error(`Unable to update expiry date for slot: ${slotName}\n      - this.impressions[slotName]:`, this.impressions[slotName]);\n    }\n    const frequencyMap = this.impressions[slotName][keys.frequency].match(keys.frequencyRegex);\n    now.setMilliseconds(0);\n    now.setSeconds(0);\n    now.setMinutes(0);\n    if (frequencyMap.indexOf(keys.days) > -1) {\n      now.setHours(0);\n    }\n    this.impressions[slotName][keys.expires] = (frequencyMap.indexOf(keys.days) > -1 ?\n      addDays(now, frequencyMap[2]) : addHours(now, frequencyMap[2])).getTime();\n\n    // Set max impressions:\n    this.impressions[slotName][keys.maxImpressions] = parseInt(frequencyMap[1], 10);\n    // Reset exposed\n    this.impressions[slotName][keys.exposed] = 0;\n  }\n\n  /**\n   * Initializes a non-existing slot from the passed global configuration for the slot\n   * @param {String} slotName - the name of the slot to create\n   */\n  initSlotFromConfig(slotName) {\n    const slot = this.impressions[slotName] || {};\n    slot[keys.frequency] = this.config[slotName][keys.frequency];\n    slot[keys.target] = this.config[slotName][keys.target];\n    slot[keys.exposed] = 0;\n    this.impressions[slotName] = slot;\n    this.updateExpiryDate(slotName);\n  }\n\n  /**\n   * Registers an impression for a given adSlot.\n   * @param {String} adSlotId - the adSlot id to register an impression for\n   * @returns {boolean} returns true iff the impression has been registered\n   */\n  registerImpression(adSlotId) {\n    if (adSlotId) {\n      const slot = this.impressions[adSlotId];\n      if (slot) {\n        const exposed = slot[keys.exposed];\n        if (isNaN(parseInt(exposed, 10)) === false) {\n          this.impressions[adSlotId][keys.exposed] += 1;\n          try {\n            this.saveImpressionsToLocalStorage();\n          }\n          catch (err) {\n            // console.log('Error saving ad impressions to localStorage!', err);\n          }\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Checks whether an adSlot has reached it's allocated impressions count.\n   * @param {String} adSlotId - the adSlot to check\n   * @returns {boolean} true iff there is a quota for the adSlot, and it has been reached\n   */\n  reachedQuota(adSlotId) {\n    // An adSlotId is suffixed with _homepage | _section if it's targeting is different\n    // between the two. If there is no difference, an _all suffix can be used.\n    const slotName = this.impressions[`${adSlotId}${globalConfig.department}`] ?\n      `${adSlotId}${globalConfig.department}` : `${adSlotId}_all`;\n\n    const slot = this.impressions[slotName];\n    let atQuota = false;\n    if (slot) {\n      const now = (new Date()).getTime();\n      // Second element of 2/4day matches '2'\n      const expires = this.impressions[slotName][keys.expires];\n      if (expires < now) {\n        this.updateExpiryDate(slotName);\n      }\n      else {\n        const maxImpressions = this.impressions[slotName][keys.maxImpressions];\n        // Not expired, did reach max impressions?\n        if (maxImpressions) {\n          atQuota = this.impressions[slotName][keys.exposed] >= maxImpressions;\n        }\n      }\n    }\n    return atQuota;\n  }\n\n\n  /**\n   * Clears the impression map from 'exposed' impressions\n   */\n  resetImpressions() {\n    const impressions = this.impressions;\n    for (const key in impressions) {\n      if ({}.hasOwnProperty.call(impressions, key)) {\n        if (impressions[key][keys.exposed]) {\n          impressions[key][keys.exposed] = 0;\n        }\n      }\n    }\n    this.saveImpressionsToLocalStorage();\n  }\n}\n","import getCookieAsMap from '../utils/cookieUtils';\nimport ImpressionManager from './impressionsManager';\nimport globalConfig from '../globalConfig';\n\nexport const userTypes = {\n  payer: 'payer',\n  registered: 'registered',\n  anonymous: 'anonymous',\n  trial: 'trial',\n};\n\nexport const productTypes = {\n  htz: 243,\n  tm: 273,\n  hdc: 239,\n  htz_tm: 274,\n};\n\nexport default class User {\n  constructor(config) {\n    this.config = Object.assign({}, config.userConfig);\n    const cookieMap = getCookieAsMap();\n    this.ssoKey = globalConfig.sso;\n    if (!cookieMap[this.ssoKey]) {\n      // Flips the ssoKey, since cookieMap.ssoKey cannot be used to retrieve data\n      this.ssoKey = this.ssoKey === 'tmsso' ? 'engsso' : 'tmsso';\n    }\n    this.type = this.getUserType(cookieMap);\n    this.htz_type = this.getUserTypeByProduct(cookieMap, productTypes.htz);\n    this.tm_type = this.getUserTypeByProduct(cookieMap, productTypes.tm);\n    this.hdc_type = this.getUserTypeByProduct(cookieMap, productTypes.hdc);\n    this.impressionManager = new ImpressionManager(config.impressionManagerConfig);\n    this.age = this.getUserAge(cookieMap);\n    this.gender = this.getUserGender(cookieMap);\n    this.sso = this.getUserSSO(cookieMap, this.ssoKey);\n  }\n\n  getUserType(cookieMap) {\n    let userType;\n    if (cookieMap && cookieMap[this.ssoKey]) {\n      userType = (cookieMap.HtzPusr || cookieMap.TmPusr || cookieMap.HdcPusr) ?\n        userTypes.payer : userTypes.registered;\n    }\n    else {\n      userType = userTypes.anonymous;\n    }\n    return userType;\n  }\n\n\n  getUserTypeByProduct(cookieMap, productType) {\n    let userType = userTypes.anonymous;\n    if (cookieMap && cookieMap[this.ssoKey]) {\n      if (cookieMap.userProducts) {\n        let userProducts = decodeURIComponent(cookieMap.userProducts);\n        userProducts = JSON.parse(userProducts);\n        if (productType === productTypes.hdc) {\n          userType = this.getHdcUserType(userProducts);\n        }\n        else {\n          userType = this.getHtzTmUserType(userProducts, productType);\n        }\n      }\n    }\n    return userType;\n  }\n\n  getHdcUserType(userProducts) {\n    // user has hdc paying product\n    if (this.userHasProduct(userProducts, productTypes.hdc, false)) {\n      return userTypes.payer;\n    }\n    // user has hdc trial product\n    else if (this.userHasProduct(userProducts, productTypes.hdc, true)) {\n      return userTypes.trial;\n    }\n    return userTypes.registered;\n  }\n\n  getHtzTmUserType(userProducts, productType) {\n    // user has htz/tm paying product\n    if (this.userHasProduct(userProducts, productType, false) ||\n      this.userHasProduct(userProducts, productTypes.htz_tm, false)) {\n      return userTypes.payer;\n    }\n    // user has htz/tm trial product\n    else if (this.userHasProduct(userProducts, productType, true) ||\n      this.userHasProduct(userProducts, productTypes.htz_tm, true)) {\n      return userTypes.trial;\n    }\n    return userTypes.registered;\n  }\n\n  userHasProduct(userProducts, productType, trial) {\n    return userProducts.products\n        .filter(product => product.prodNum === productType && product.trial === trial)\n        .length > 0;\n  }\n\n  getUserAge(cookieMap) {\n    let age;\n    const usrae = cookieMap[this.ssoKey] && cookieMap[this.ssoKey].usrae;\n    if (usrae) {\n      age = parseInt(cookieMap[this.ssoKey].usrae, 10);\n      age = age > 0 ? age : undefined;\n    }\n    return age;\n  }\n\n  getUserGender(cookieMap) {\n    let gender;\n    const urgdr = cookieMap[this.ssoKey] && cookieMap[this.ssoKey].urgdr;\n    if (urgdr) {\n      gender = parseInt(cookieMap[this.ssoKey].urgdr, 10);\n      gender = gender === 2 || gender === 1 ? gender : undefined;\n    }\n    return gender;\n  }\n\n  getUserSSO(cookieMap, ssoKey) {\n    return cookieMap[ssoKey];\n  }\n}\n","class ConflictResolver {\n  constructor(conflictManagementConfig) {\n    this.dependencyMap = this.initializeDependencyMap(conflictManagementConfig);\n    this.deferredSlots = new Set();\n  }\n  initializeDependencyMap(conflictManagementJson) {\n    const queue = new Map();\n    Object.keys(conflictManagementJson).map((key, value) => {\n      let rules = conflictManagementJson[key];\n      if (rules) {\n        rules = rules.filter((item) => item.onsize && item.avoid);\n      }\n      queue.set(key, {\n        id: key,\n        rules,\n        resolvedWith: null,\n      });\n      return this;\n    });\n    return queue;\n  }\n\n  updateResolvedSlot(adSlotId, resolvedSize) {\n    if (!adSlotId) {\n      throw new Error('updateResolvedSlot must be called with an adSlotId!');\n    }\n    if (!resolvedSize) {\n      throw new Error('updateResolvedSlot must be called with a resolved size!');\n    }\n    if (this.dependencyMap.has(adSlotId)) {\n      this.dependencyMap.get(adSlotId).resolvedWith = resolvedSize;\n    }\n  }\n\n\n  isBlocked(adSlotId) {\n    if (!adSlotId) {\n      throw new Error('isBlocked must be called with an adSlotId!');\n    }\n    let isBlocked = false;\n    for (const adSlotKey of this.dependencyMap.keys()) {\n      const adSlot = this.dependencyMap.get(adSlotKey);\n      for (const adSlotRule of adSlot.rules) {\n        // Found rule specific to our target\n        if (adSlotRule.avoid === adSlotId) {\n          const parentResolvedWith = adSlot.resolvedWith;\n          // Fail fast: parent is not resolved yet - unknown returned size.\n          if (!parentResolvedWith) {\n            isBlocked = true;\n            this.deferredSlots.add(adSlotId);\n          }\n          if (adSlotRule.onsize.split(',').find(sizeString => { // eslint-disable-line\n            const size = sizeString.split('x').map(numberStr => parseInt(numberStr, 10));\n            return this.arraysEqual(size, parentResolvedWith);\n          })) {\n            // Block found\n            this.deferredSlots.add(adSlotId);\n            isBlocked = true;\n          }\n        }\n      }\n    }\n    return isBlocked;\n  }\n\n  isBlocking(adSlotId) {\n    if (!adSlotId) {\n      throw new Error('isBlocking must be called with an adSlotId!');\n    }\n    let isBlocking = false;\n    for (const adSlotKey of this.dependencyMap.keys()) {\n      if (adSlotKey === adSlotId) {\n        isBlocking = true;\n      }\n    }\n    return isBlocking;\n  }\n\n  /**\n   * Gets an array of adSlot Ids for a given adSlotId, that are dependent on (blocked by)\n   * @param {String} adSlotId - the blocking slot id\n   * @return {Array} an array of blocked slot, that has a dependency on the given slot\n   */\n  getBlockedSlotsIds(adSlotId) {\n    let result;\n    if (this.dependencyMap.has(adSlotId)) {\n      result = Array.from(this.dependencyMap.get(adSlotId).rules.map(adSlot => adSlot.avoid));\n    }\n    return result || [];\n  }\n\n  arraysEqual(a, b) {\n    if (a === b) return true;\n    if (a === null || b === null) return false;\n    if (a.length !== b.length) return false;\n    for (let i = 0; i < a.length; ++i) {\n      if (a[i] !== b[i]) return false;\n    }\n    return true;\n  }\n}\nConflictResolver.EMPTY_SIZE = [];\nexport default ConflictResolver;\n","/* global googletag */\nimport User from '../objects/user';\nimport ConflictResolver from '../objects/conflictResolver';\nimport AdSlot from '../objects/adSlot';\nimport { getBreakpoint, getBreakpointName } from '../utils/breakpoints';\nimport { arraysEqual } from '../utils/arrays';\n\n// There are a total of 7 adTargets:\n// \"all\",\"nonPaying\",\"anonymous\",\"registered\",\"paying\",\"digitalOnly\" and \"digitalAndPrint\"\nexport const adPriorities = {\n  high: 'high',\n  normal: 'normal',\n  low: 'low',\n};\n\nexport const adTargets = {\n  all: 'all',\n  nonPaying: 'nonPaying',\n  anonymous: 'anonymous',\n  registered: 'registered',\n  paying: 'paying',\n  digitalOnly: 'digitalOnly',\n  digitalAndPrint: 'digitalAndPrint',\n};\n\n// There are a total of 3 userTypes: \"anonymous\", \"registered\" and \"payer\"\nexport const userTypes = {\n  anonymous: 'anonymous',\n  registered: 'registered',\n  payer: 'payer',\n};\n\nexport const adTypes = {\n  maavaron: '.maavaron',\n  popunder: '.popunder',\n  talkback: '.talkback',\n  regular: '',\n};\n\n\nexport default class AdManager {\n\n  constructor(config) {\n    this.config = Object.assign({}, config);\n    this.user = new User(config);\n    this.conflictResolver = new ConflictResolver(config.conflictManagementConfig);\n    /**\n     * Avoid race conditions by making sure to respect the usual timing of GPT.\n     * This DFP implementation uses Enable-Define-Display:\n     * Define page-level settings\n     * enableServices()\n     * Define slots\n     * Display slots\n     */\n    try {\n      googletag.cmd.push(() => {\n        this.initGoogleTargetingParams(); //  Define page-level settings\n        this.initGoogleGlobalSettings();  //  enableServices()\n        this.initSlotRenderedCallback();  //  Define callbacks\n      });\n      // Mouse special treatment to base path on mobile breakpoints\n      const currentBreakpointName = getBreakpointName(getBreakpoint());\n      if (this.config.adManagerConfig.adUnitBase.indexOf('mouse.co.il') > -1 &&\n        currentBreakpointName.indexOf('xs') > -1) {\n        this.config.adManagerConfig.adUnitBase = 'mouse.co.il.mobile_web';\n      }\n      // Holds adSlot objects as soon as possible.\n      googletag.cmd.push(() => {\n        this.adSlots = this.initAdSlots(config.adSlotConfig, adPriorities.high);\n      });\n      // Once DOM ready, add more adSlots.\n      const onDomLoaded = () => { // eslint-disable-line no-inner-declarations\n        try {\n          googletag.cmd.push(() => {\n            this.adSlots = this.initAdSlots(config.adSlotConfig, adPriorities.high);\n            googletag.cmd.push(() => {\n              this.adSlots = this.initAdSlots(config.adSlotConfig, adPriorities.normal);\n            });\n          });\n        }\n        catch (err) {\n          console.log(err); // eslint-disable-line no-console\n        }\n      };\n      // Once window was loaded, add the rest of the adSlots.\n      const onWindowLoaded = () => { // eslint-disable-line no-inner-declarations\n        googletag.cmd.push(() => {\n          this.adSlots = this.initAdSlots(config.adSlotConfig, adPriorities.low);\n          // Clean blocking adSlots that are not defined on this page\n          for (const blockingAdSlotKey of this.conflictResolver.dependencyMap.keys()) {\n            if (!this.adSlots.has(blockingAdSlotKey)) {\n              this.conflictResolver.dependencyMap.delete(blockingAdSlotKey);\n            }\n          }\n          this.showAllDeferredSlots();\n        });\n      };\n      switch (document.readyState) {\n        case 'loading':\n          document.addEventListener('DOMContentLoaded', onDomLoaded);\n          window.addEventListener('load', onWindowLoaded);\n          break;\n        case 'interactive':\n          onDomLoaded();\n          window.addEventListener('load', onWindowLoaded);\n          break;\n        default: // 'complete' - no need for event listeners.\n          onDomLoaded();\n          onWindowLoaded();\n      }\n    }\n    catch (err) {\n      console.error(err); // eslint-disable-line no-console\n    }\n  }\n\n  /**\n   * Shows all of the adSlots that can be displayed.\n   */\n  showAllSlots() {\n    for (const adSlotKey of this.adSlots.keys()) {\n      const adSlot = this.adSlots.get(adSlotKey);\n      if (adSlot.type !== adTypes.talkback && this.shouldSendRequestToDfp(adSlot)) {\n        adSlot.show();\n      }\n    }\n  }\n\n  /**\n   * Gets all adSlots that has a certain priority\n   * @param {adPriority} priority - the priority of the ad {high, normal, low}\n   * @return {Array<AdSlot>} adSlots - all of the defined adSlots that matches\n   * the given priority\n   */\n  getAdSlotsByPriority(priority) {\n    function priorityFilter(adSlot) {\n      return adSlot.priority === priority;\n    }\n    return Array.from(this.adSlots.values()).filter(priorityFilter);\n  }\n\n  showAllDeferredSlots() {\n    for (const deferredSlotId of this.conflictResolver.deferredSlots) {\n      if (this.adSlots.has(deferredSlotId)) {\n        if (!this.conflictResolver.isBlocked(deferredSlotId)) {\n          const deferredAdSlot = this.adSlots.get(deferredSlotId);\n          if (this.shouldSendRequestToDfp(deferredAdSlot)) {\n            deferredAdSlot.show();\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Refreshes all responsive adSlots\n   */\n  refreshAllSlots() {\n    const currentBreakpoint = getBreakpoint();\n    for (const adSlotKey of this.adSlots.keys()) {\n      const adSlot = this.adSlots.get(adSlotKey);\n      if (adSlot.responsive && adSlot.type !== adTypes.maavaron) {\n        if (adSlot.lastResolvedWithBreakpoint !== currentBreakpoint &&\n          this.shouldSendRequestToDfp(adSlot)) {\n          // console.log(`calling refresh for adSlot: ${adSlot.id}`);\n          adSlot.refresh();\n        }\n        else {\n          adSlot.hide();\n        }\n      }\n    }\n  }\n\n  /**\n   * Refreshes all adSlots\n   */\n  refreshAllSlotsInPage() {\n    for (const adSlotKey of this.adSlots.keys()) {\n      const adSlot = this.adSlots.get(adSlotKey);\n      if (this.shouldSendRequestToDfp(adSlot)) {\n        // console.log(`calling refresh for adSlot: ${adSlot.id}`);\n        adSlot.refresh();\n      }\n      else {\n        adSlot.hide();\n      }\n    }\n  }\n\n  /**\n   * Refreshes adSlot\n   */\n\n  refreshSlot(adUnitName) {\n    const adSlot = this.adSlots.get(adUnitName);\n    if (this.shouldSendRequestToDfp(adSlot)) {\n      // console.log(`calling refresh for adSlot: ${adSlot.id}`);\n      adSlot.refresh();\n    }\n    else {\n      adSlot.hide();\n    }\n  }\n\n\n      /**\n   * Initializes adSlots based on the currently found slot markup (HTML page specific),\n   * and the predefined configuration for the slots.\n   * @param {Object} adSlotConfig - the AdSlots configuration object (see: globalConfig)\n   * @param {String} filteredPriority - filters out all adSlots that does not match\n   * a given adPriority. This is used to cherry pick the init process of ads.\n   * @returns {Map}\n   */\n  initAdSlots(adSlotConfig, filteredPriority) {\n    const adSlots = new Map(this.adSlots);\n    let adSlotPlaceholders = Array.from(document.getElementsByClassName('js-dfp-ad'));\n    adSlotPlaceholders = adSlotPlaceholders.filter(node => node.id); // only nodes with an id\n    const adSlotNodeSet = new Set();\n    adSlotPlaceholders = Array.prototype.filter.call(adSlotPlaceholders, node => {\n      if (adSlotNodeSet.has(node.id) === false) { // first occurrence of Node\n        adSlotNodeSet.add(node.id);\n        return true;\n      }\n      return false;\n    });\n    // adSlotPlaceholders = adSlotPlaceholders.sort((a, b) => a.offsetTop - b.offsetTop);\n    adSlotPlaceholders.forEach(adSlot => {\n      const adSlotPriority = adSlotConfig[adSlot.id] ?\n      adSlotConfig[adSlot.id].priority || adPriorities.normal : undefined;\n      if (adSlotConfig[adSlot.id] && adSlots.has(adSlot.id) === false &&\n        adSlotPriority === filteredPriority) {\n        // The markup has a matching configuration from adSlotConfig AND was not already defined\n        try {\n          // adSlotConfig is built from globalConfig, but can be overridden by markup\n          const computedAdSlotConfig = Object.assign({}, adSlotConfig[adSlot.id], {\n            id: adSlot.id,\n            target: adSlot.attributes['data-audtarget'] ?\n              adSlot.attributes['data-audtarget'].value : adTargets.all,\n            type: this.getAdType(adSlot.id),\n            responsive: adSlotConfig[adSlot.id].responsive,\n            fluid: adSlotConfig[adSlot.id].fluid || false,\n            user: this.user,\n            adManager: this,\n            htmlElement: adSlot,\n            department: this.config.department,\n            network: this.config.adManagerConfig.network,\n            adUnitBase: this.config.adManagerConfig.adUnitBase,\n            deferredSlot: this.conflictResolver.isBlocked(adSlot.id),\n            priority: adSlotPriority,\n          });\n          const adSlotInstance = new AdSlot(computedAdSlotConfig);\n          adSlots.set(adSlot.id, adSlotInstance);\n          if (adSlotInstance.type !== adTypes.talkback &&\n            adSlotInstance.priority === adPriorities.high &&\n            this.shouldSendRequestToDfp(adSlotInstance)) {\n            /*\n             console.log('calling show for high priority slot', adSlotInstance.id, ' called @',\n             window.performance.now());\n             */\n            adSlotInstance.show();\n          }\n        }\n        catch (err) {\n          console.error(err); // eslint-disable-line no-console\n        }\n      }\n    });\n    return adSlots;\n  }\n\n  isPriority(adSlotId) {\n    return (typeof adSlotId === 'string' &&\n    (adSlotId.indexOf('plazma') > 0 ||\n    adSlotId.indexOf('maavaron') > 0 ||\n    adSlotId.indexOf('popunder') > 0));\n  }\n\n  /**\n   * Returns the adType based on the adSlot name.\n   * @param {String} adSlotId - the adSlot's identifier.\n   * @returns {*} enumerated export 'adTypes'\n   */\n  getAdType(adSlotId) {\n    if (!adSlotId) {\n      throw new Error('Missing argument: a call to getAdType must have an adSlotId');\n    }\n    if (adSlotId.indexOf(adTypes.maavaron) > -1) return adTypes.maavaron;\n    if (adSlotId.indexOf(adTypes.popunder) > -1) return adTypes.popunder;\n    if (adSlotId.indexOf(adTypes.talkback) > -1) return adTypes.talkback;\n    return adTypes.regular;\n  }\n\n  /**\n   * @param {object} adSlot the AdSlot\n   * @returns {boolean|*}\n   */\n  shouldSendRequestToDfp(adSlot) {\n    // Conflict management check\n    return this.conflictResolver.isBlocked(adSlot.id) === false &&\n      // Valid Referrer check\n      adSlot.isWhitelisted() &&\n      // Not in referrer Blacklist\n      adSlot.isBlacklisted() === false &&\n      this.shouldDisplayAdAfterAdBlockRemoval(adSlot) &&\n      //  if a paywall pop-up is shown And the number is 12 or more - SHOW MAAVRON\n      this.shouldDisplayAdMaavaronAfterPayWallBanner(adSlot) &&\n      // Responsive: breakpoint contains ad?\n      this.doesBreakpointContainAd(adSlot) &&\n      // check in case of Smartphoneapp\n      this.haveValidCookieForSmartphoneapp() &&\n      // Targeting check (userType vs. slotTargeting)\n      this.doesUserTypeMatchBannerTargeting(adSlot) &&\n      // Impressions Manager check (limits number of impressions per slot)\n      this.user.impressionManager.reachedQuota(adSlot.id) === false;\n  }\n\n  shouldDisplayAdAfterAdBlockRemoval(adSlot) {\n    return !(this.config.adBlockRemoved === true &&\n    (adSlot.type === adTypes.maavaron ||\n    adSlot.type === adTypes.popunder));\n  }\n\n  shouldDisplayAdMaavaronAfterPayWallBanner(adSlot) {\n    let shouldDisplay = true;\n    if (this.config.site === 'haaretz' && adSlot.type === adTypes.maavaron) {\n      try {\n        const paywallBanner = JSON.parse(window.localStorage.getItem('_cobj'));\n        shouldDisplay = !paywallBanner || ((paywallBanner.mc && paywallBanner.mc >= 12) ||\n                          (paywallBanner.nextslotLocation &&\n                          !paywallBanner.nextslotLocation.includes('pop')));\n      }\n      catch (err) {\n        /* eslint-disable no-console*/\n        console.error('ERROR ON shouldDisplayAdMaavaronAfterPayWallBanner');\n        /* eslint-enable no-console*/\n      }\n    }\n    return shouldDisplay;\n  }\n\n  /**\n   * Check whether or not an ad slot should appear for the current user type\n   * @param {String} adSlotOrTarget the adSlot to check or the target as a string\n   * @returns {boolean} true iff the slot should appear for the user type\n   */\n\n  haveValidCookieForSmartphoneapp() {\n    return this.config.isValidForsmartPhone;\n  }\n\n  /**\n   * Check whether or not an ad slot should appear for the current user type\n   * @param {String} adSlotOrTarget the adSlot to check or the target as a string\n   * @returns {boolean} true iff the slot should appear for the user type\n   */\n  doesUserTypeMatchBannerTargeting(adSlotOrTarget) {\n    const userType = this.user.type;\n    const adTarget = typeof adSlotOrTarget === 'string' ? adSlotOrTarget : adSlotOrTarget.target;\n\n    switch (adTarget) {\n      case adTargets.all : return true;\n      case adTargets.nonPaying :\n        return userType === userTypes.anonymous || userType === userTypes.registered;\n      case adTargets.anonymous : return userType === userTypes.anonymous;\n      case adTargets.registered : return userType === userTypes.registered;\n      case adTargets.paying : return userType === userTypes.payer;\n      case adTargets.digitalOnly : return userType === userTypes.payer;\n      case adTargets.digitalAndPrint : return userType === userTypes.payer;\n      default: return false;\n    }\n  }\n\n  /**\n   * Report to the AdManager that a breakpoint has been switched (passed from one break to\n   * another). Should there be a responsive slot with a\n   * @param {Breakpoint} breakpoint - the breakpoint that is currently being displayed\n   * @returns {Integer} affected - the number of adSlots affected by the change\n   */\n  switchedToBreakpoint(breakpoint) {\n    if (!breakpoint) {\n      throw new Error('Missing argument: a call to switchedToBreakpoint must have an breakpoint');\n    }\n    let count = 0;\n    for (const adSlotKey of this.adSlots.keys()) {\n      const adSlot = this.adSlots.get(adSlotKey);\n      if (adSlot.responsive === true && adSlot.lastResolvedWithBreakpoint) {\n        if (adSlot.lastResolvedWithBreakpoint !== breakpoint) {\n          adSlot.refresh();\n          count++;\n        }\n      }\n    }\n    return count;\n  }\n\n  /**\n   * Checks whether an adSlot is defined for a given breakpoint (Default: current breakpoint)\n   * @param {AdSlot} adSlot - the adSlot to check.\n   * @param {Breakpoint} [breakpoint=currentBreakpoint] - the breakpoint to check this ad in.\n   * @returns {boolean} true iff the adSlot is defined for the given breakpoint.\n   */\n  doesBreakpointContainAd(adSlot, breakpoint = getBreakpoint()) {\n    if (!adSlot) {\n      throw new Error('Missing argument: a call to doesBreakpointContainAd must have an adSlot');\n    }\n    let containsBreakpoint = true;\n    if (adSlot.responsive === true) {\n      const mapping = adSlot.responsiveAdSizeMapping[getBreakpointName(breakpoint)];\n      if (Array.isArray(mapping) === false) {\n        throw new Error(`Invalid argument: breakpoint:${breakpoint} doesn't exist!`, this);\n      }\n      containsBreakpoint = mapping.length > 0 && !arraysEqual(mapping, [[0, 0]]);\n    }\n    return containsBreakpoint;\n  }\n\n  /**\n   * Initializes the callback from the 'slotRenderEnded' event for each slot\n   */\n  initSlotRenderedCallback() {\n    if (window.googletag && window.googletag.apiReady) {\n      const pubads = window.googletag.pubads();\n      pubads.addEventListener('slotRenderEnded', event => {\n        const id = event.slot.getAdUnitPath().split('/')[3];\n        const isEmpty = event.isEmpty;\n        const resolvedSize = event.size;\n        // console.log('slotRenderEnded for slot',id,' called @',window.performance.now());\n        if (this.adSlots.has(id)) {\n          const adSlot = this.adSlots.get(id);\n          adSlot.lastResolvedSize = resolvedSize;\n          adSlot.lastResolvedWithBreakpoint = getBreakpoint();\n          if (isEmpty) {\n            adSlot.lastResolvedSize = ConflictResolver.EMPTY_SIZE;\n            adSlot.hide();\n            this.releaseSlotDependencies(adSlot);\n          }\n          else {\n            this.releaseSlotDependencies(adSlot, adSlot.lastResolvedSize);\n          }\n          this.user.impressionManager.registerImpression(`${adSlot.id}${this.config.department}`);\n          this.user.impressionManager.registerImpression(`${adSlot.id}_all`);\n        }\n        else {\n          /*\n           console.error(`Cannot find an adSlot with id: ${id} - Ad Unit path is\n           ${event.slot.getAdUnitPath()}`);\n           */\n        }\n      });\n    }\n    else {\n      throw new Error('googletag api was not ready when \\'initSlotRenderedCallback\\' was called!');\n    }\n  }\n\n  releaseSlotDependencies(adSlot) {\n    try {\n      const id = adSlot.id;\n      this.conflictResolver.updateResolvedSlot(id, adSlot.lastResolvedSize);\n      if (this.conflictResolver.isBlocking(id)) {\n        // Hide all blocked adSlots\n        for (const blockedSlot of this.conflictResolver.getBlockedSlotsIds(id)) {\n          if (this.conflictResolver.isBlocked(blockedSlot)) {\n            if (this.adSlots.has(blockedSlot)) {\n              this.adSlots.get(blockedSlot).hide();\n            }\n          }\n        }\n        // Show the non blocked\n        for (const deferredSlotKey of this.conflictResolver.deferredSlots.keys()) {\n          const deferredAdSlot = this.adSlots.get(deferredSlotKey);\n          if (deferredAdSlot && this.shouldSendRequestToDfp(deferredAdSlot)) {\n            this.conflictResolver.deferredSlots.delete(deferredSlotKey);\n            if (deferredAdSlot.deferredSlot) {\n              deferredAdSlot.defineSlot();\n              deferredAdSlot.deferredSlot = false;\n            }\n            deferredAdSlot.show();\n          }\n        }\n      }\n    }\n    catch (err) {\n      /* eslint-disable no-console*/\n      console.error(`Cannot updateSlotDependencies for adSlot: ${adSlot.id}`);\n      /* eslint-enable no-console*/\n    }\n  }\n\n  /**\n   * Initializes page-level targeting params.\n   */\n  initGoogleTargetingParams() {\n    if (window.googletag && window.googletag.apiReady) {\n      // Returns a reference to the pubads service.\n      const pubads = googletag.pubads();\n      // Environment targeting (dev, test, prod)\n      if (this.config.environment) {\n        pubads.setTargeting('stg', [this.config.environment]);\n      }\n\n      // User targeting\n      if (this.user.type) {\n        pubads.setTargeting('UserType', [this.user.type]);\n      }\n      if (this.user.htz_type) {\n        pubads.setTargeting('htz_user_type', [this.user.htz_type]);\n      }\n      if (this.user.tm_type) {\n        pubads.setTargeting('tm_user_type', [this.user.tm_type]);\n      }\n      if (this.user.hdc_type) {\n        pubads.setTargeting('hdc_user_type', [this.user.hdc_type]);\n      }\n      if (this.user.age) {\n        pubads.setTargeting('age', [this.user.age]);\n      }\n      if (this.user.gender) {\n        pubads.setTargeting('urgdr', [this.user.gender]);\n      }\n\n      // Context targeting\n      if (this.config.articleId) {\n        pubads.setTargeting('articleId', [this.config.articleId]);\n      }\n      if (this.config.gStatCampaignNumber && this.config.gStatCampaignNumber !== -1) {\n        pubads.setTargeting('gstat_campaign_id', [this.config.gStatCampaignNumber]);\n      }\n      if (this.config.proposalNumber) {\n        pubads.setTargeting('proposaltype', [this.config.proposalNumber]);\n      }\n      if (this.config.pageType) {\n        pubads.setTargeting('pageType', [this.config.pageType]);\n      }\n      if (this.config.isWriterAlerts) {\n        pubads.setTargeting('WriterAlerts', ['true']);\n      }\n      // UTM targeting\n      /* eslint-disable no-underscore-dangle */\n      if (this.config.utm_.content) {\n        pubads.setTargeting('utm_content', [this.config.utm_.content]);\n      }\n      if (this.config.utm_.source) {\n        pubads.setTargeting('utm_source', [this.config.utm_.source]);\n      }\n      if (this.config.utm_.medium) {\n        pubads.setTargeting('utm_medium', [this.config.utm_.medium]);\n      }\n      if (this.config.utm_.campaign) {\n        pubads.setTargeting('utm_campaign', [this.config.utm_.campaign]);\n      }\n      /* eslint-enable no-underscore-dangle */\n      // AdBlock removal\n      if (this.config.adBlockRemoved) {\n        pubads.setTargeting('adblock_removed', [this.config.adBlockRemoved]);\n      }\n      // University targeting - triggered via cookie\n      if (this.config.wifiLocation) {\n        pubads.setTargeting('wifi', [this.config.wifiLocation]);\n      }\n      if (this.config.tags && Array.isArray(this.config.tags)) {\n        pubads.setTargeting('tags', [...this.config.tags]);\n      }\n\n      if (this.user.sso && this.user.sso.userId && this.config.ssoGroupKey) {\n        pubads.setTargeting(this.config.ssoGroupKey, this.user.sso.userId);\n      }\n      if (this.config.anonymousId) {\n        const anonymousIdKeyName = 'anonymousIdKey';\n        pubads.setTargeting(anonymousIdKeyName, this.config.anonymousId);\n      }\n      // Ads Centering\n      pubads.setCentering(true);\n    }\n    else {\n      throw new Error('googletag api was not ready when \\'initGoogleTargetingParams\\' was called!');\n    }\n  }\n\n  /**\n   * Initializes googletag services.\n   */\n  initGoogleGlobalSettings() {\n    if (window.googletag && window.googletag.apiReady) {\n      const googleGlobalSettings = this.config.googleGlobalSettings;\n      // Enable GET parameter overrides\n      if (window.location.search) {\n        const search = window.location.search;\n        if (search.indexOf('sraon') > 0) {\n          console.log('Single Request Mode: active'); // eslint-disable-line no-console\n          googleGlobalSettings.enableSingleRequest = true;\n        }\n        else if (search.indexOf('sraoff') > 0) {\n          console.log('Single Request Mode: disabled');// eslint-disable-line no-console\n          googleGlobalSettings.enableSingleRequest = false;\n        }\n        if (search.indexOf('asyncrenderingon') > 0) {\n          console.log('Async rendering mode: active'); // eslint-disable-line no-console\n          googleGlobalSettings.enableAsyncRendering = true;\n        }\n        else if (search.indexOf('asyncrenderingonoff') > 0) {\n          console.log('Sync rendering mode: active');// eslint-disable-line no-console\n          googleGlobalSettings.enableAsyncRendering = false;\n        }\n      }\n      // Google services activation\n      if (googleGlobalSettings.enableSingleRequest === true) {\n        googletag.pubads().enableSingleRequest();\n      }\n      if (googleGlobalSettings.enableAsyncRendering === true) {\n        googletag.pubads().enableAsyncRendering();\n      }\n      else {\n        googletag.pubads().enableSyncRendering();\n      }\n      // Enables all GPT services that have been defined for ad slots on the page.\n      googletag.enableServices();\n    }\n    else {\n      throw new Error('googletag api wasn\\'t ready when \\'initGoogleGlobalSettings\\' was called!');\n    }\n  }\n}\n","/* globals googletag */\nimport AdManager from '../src/objects/adManager';\nimport globalConfig from './globalConfig';\nimport { getBreakpoint, debounce } from '../src/utils/breakpoints';\n\nconst defaultConfig = globalConfig || {};\nconst resizeTimeout = 250;\n\nexport default class DFP {\n\n  constructor(config) {\n    this.config = Object.assign({}, defaultConfig, config);\n    this.wasInitialized = false;\n    this.initStarted = false;\n    this.breakpoint = getBreakpoint();\n    this.initWindowResizeListener();\n  }\n\n  /**\n   * This part of the object's construction is dependent on the call to 'init'\n   */\n  resumeInit() {\n    try {\n      this.adManager = this.adManager || new AdManager(this.config);\n    }\n    catch (err) {\n      console.error(err); // eslint-disable-line no-console\n    }\n  }\n\n  /**\n   * initializes the 'googletag' global namespace and add the\n   * google publish tags library to the page\n   * @returns {Promise} that resolves to true once the googletag api is ready to use\n   * (googletag.apiReady = true)\n   */\n  initGoogleTag() {\n    const dfpThis = this;\n    return new Promise((resolve, reject) => {\n      if (dfpThis.initStarted === true) {\n        googletag.cmd.push(() => {\n          dfpThis.wasInitialized = true;\n          resolve(dfpThis);\n        });\n      }\n      else {\n        dfpThis.initStarted = true;\n        // set up a place holder for the gpt code downloaded from google\n        window.googletag = window.googletag || {};\n\n        // this is a command queue used by GPT any methods added to it will be\n        // executed when GPT code is available, if GPT is already available they\n        // will be executed immediately\n        window.googletag.cmd = window.googletag.cmd || [];\n        // load google tag services JavaScript\n        (() => {\n          const tag = window.document.createElement('script');\n          tag.async = true;\n          tag.type = 'text/javascript';\n          // Supports both https and http\n          tag.setAttribute('src', '//www.googletagservices.com/tag/js/gpt.js');\n          const node = window.document.getElementsByTagName('script')[0];\n          tag.addEventListener('load', () => {\n            dfpThis.resumeInit();\n            googletag.cmd.push(() => {\n              dfpThis.wasInitialized = true;\n              resolve(this);\n            });\n          });\n          tag.addEventListener('error', (error) => {\n            dfpThis.wasInitialized = false;\n            reject(error);\n          });\n          node.parentNode.insertBefore(tag, node);\n        })();\n      }\n    });\n  }\n\n  /**\n   *  Returns true iff googletag was properly initialized on the page\n   * @returns {boolean}\n   */\n  isGoogleTagReady() {\n    if (this.wasInitialized === true || (window.googletag && window.googletag.apiReady)) {\n      this.wasInitialized = true;\n    }\n    return this.wasInitialized;\n  }\n\n  /**\n   * Initializes the window resize listener to support responsive ad refreshes\n   */\n  initWindowResizeListener() {\n    const dfpThis = this;\n    function onResize() {\n      const currentBreakpoint = getBreakpoint();\n      if (dfpThis.breakpoint !== currentBreakpoint) {\n        dfpThis.breakpoint = currentBreakpoint;\n        if (dfpThis.adManager) {\n          dfpThis.adManager.refreshAllSlots();\n        }\n        else {\n          throw new Error('initWindowResizeListener error - adManager instance is not available');\n        }\n      }\n    }\n    const debouncedFunction = debounce(onResize, resizeTimeout);\n    window.onresize = debouncedFunction;\n  }\n}\n","import DFP from './dfp';\nimport globalConfig from './globalConfig';\nimport { version as v } from './../package.json';\n// const pkg = require('./../package.json');\n\n// DFP version is based on the package.json\nDFP.version = v || 'VERSION';\n\n/*\n // Only for development mode\n if ( process.env.NODE_ENV !== 'production' ) {\n DFP.dev = '123';\n }\n */\n\nexport const config = globalConfig;\nexport const version = DFP.version;\nexport default DFP;\n"]}